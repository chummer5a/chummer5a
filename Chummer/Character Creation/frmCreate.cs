/*  This file is part of Chummer5a.
 *
 *  Chummer5a is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Chummer5a is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Chummer5a.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  You can obtain the full source code for Chummer5a at
 *  https://github.com/chummer5a/chummer5a
 */
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Xml.XPath;
using Chummer.Skills;
using System.Diagnostics;
using System.Drawing.Imaging;
using Chummer.Backend;
using Chummer.Backend.Attributes;
using Chummer.Backend.Equipment;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using Chummer.UI.Attributes;
using System.Reflection;

namespace Chummer
{
    [DesignerCategory("Form")]
    public partial class frmCreate : CharacterShared
    {
        // Set the default culture to en-US so we work with decimals correctly.


        private bool _blnSkipRefresh = false;
        private bool _blnSkipUpdate = false;
        private bool _blnLoading = false;
        private bool _blnIsDirty = false;
        private bool _blnSkipToolStripRevert = false;
        private bool _blnReapplyImprovements = false;
        private bool _blnFreestyle = false;
        private bool _blnRequestCharacterUpdate = false;
        private int _intDragLevel = 0;
        private MouseButtons _objDragButton = new MouseButtons();
        private bool _blnDraggingGear = false;
        public int contactConnection = 0;
        private StoryBuilder _objStoryBuilder;
        private List<TreeNode> lstExpandSpellCategories = new List<TreeNode>();
        ObservableCollection<CharacterAttrib> lstPrimaryAttributes = new ObservableCollection<CharacterAttrib>();
        ObservableCollection<CharacterAttrib> lstSpecialAttributes = new ObservableCollection<CharacterAttrib>();
        private Stopwatch PowerPropertyChanged_StopWatch = Stopwatch.StartNew();
        private Stopwatch SkillPropertyChanged_StopWatch = Stopwatch.StartNew();

        #region Form Events
        [Obsolete("This constructor is for use by form designers only.", true)]
        public frmCreate() : base()
        {
            InitializeComponent();
        }

        public frmCreate(Character objCharacter) : base(objCharacter)
        {
            InitializeComponent();
            GlobalOptions.MainForm.OpenCharacters.Add(_objCharacter);

            // Add EventHandlers for the various events MAG, RES, Qualities, etc.
            _objCharacter.MAGEnabledChanged += objCharacter_MAGEnabledChanged;
            _objCharacter.RESEnabledChanged += objCharacter_RESEnabledChanged;
            _objCharacter.DEPEnabledChanged += objCharacter_DEPEnabledChanged;
            _objCharacter.AmbidextrousChanged += objCharacter_AmbidextrousChanged;
            _objCharacter.AdeptTabEnabledChanged += objCharacter_AdeptTabEnabledChanged;
            _objCharacter.MagicianTabEnabledChanged += objCharacter_MagicianTabEnabledChanged;
            _objCharacter.AdeptTabEnabledChanged += objCharacter_MagicianTabEnabledChanged;
            _objCharacter.TechnomancerTabEnabledChanged += objCharacter_TechnomancerTabEnabledChanged;
            _objCharacter.AdvancedProgramsTabEnabledChanged += objCharacter_AdvancedProgramsTabEnabledChanged;
            _objCharacter.CyberwareTabDisabledChanged += objCharacter_CyberwareTabDisabledChanged;
            _objCharacter.InitiationTabEnabledChanged += objCharacter_InitiationTabEnabledChanged;
            _objCharacter.CritterTabEnabledChanged += objCharacter_CritterTabEnabledChanged;
            _objCharacter.BlackMarketEnabledChanged += objCharacter_BlackMarketDiscountChanged;
            _objCharacter.FriendsInHighPlacesChanged += objCharacter_FriendsInHighPlacesChanged;
            _objCharacter.ExConChanged += objCharacter_ExConChanged;
            _objCharacter.TrustFundChanged += objCharacter_TrustFundChanged;
            _objCharacter.RestrictedGearChanged += objCharacter_RestrictedGearChanged;
            _objCharacter.OverclockerChanged += objCharacter_OverclockerChanged;
            _objCharacter.MadeManChanged += objCharacter_MadeManChanged;
            _objCharacter.LightningReflexesChanged += objCharacter_LightningReflexesChanged;
            _objCharacter.FameChanged += objCharacter_FameChanged;
            _objCharacter.BornRichChanged += objCharacter_BornRichChanged;
            _objCharacter.ErasedChanged += objCharacter_ErasedChanged;

            tabPowerUc.ChildPropertyChanged += PowerPropertyChanged;
            tabSkillUc.ChildPropertyChanged += SkillPropertyChanged;
            //TODO: Can't bind visibility to the IsMysticAdept property for some reason.
            nudMysticAdeptMAGMagician.DataBindings.Add("Maximum", this._objCharacter.MAG, nameof(_objCharacter.MAG.TotalValue), false,
                            DataSourceUpdateMode.OnPropertyChanged);
            nudMysticAdeptMAGMagician.DataBindings.Add("Value", this._objCharacter, nameof(_objCharacter.MysticAdeptPowerPoints), false,
                            DataSourceUpdateMode.OnPropertyChanged);

            GlobalOptions.MRUChanged += PopulateMRU;

            LanguageManager.Load(GlobalOptions.Language, this);
            ContextMenuStrip[] lstCMSToTranslate = new ContextMenuStrip[]
            {
                cmsAdvancedLifestyle,
                cmsAdvancedProgram,
                cmsArmor,
                cmsArmorGear,
                cmsArmorLocation,
                cmsArmorMod,
                cmsBioware,
                cmsComplexForm,
                cmsComplexFormPlugin,
                cmsCritterPowers,
                cmsCustomLimitModifier,
                cmsCyberware,
                cmsCyberwareGear,
                cmsGear,
                cmsGearAllowRename,
                cmsGearButton,
                cmsGearLocation,
                cmsGearPlugin,
                cmsInitiationNotes,
                cmsLifestyle,
                cmsLifestyleNotes,
                cmsLimitModifier,
                cmsMartialArts,
                cmsMetamagic,
                cmsQuality,
                cmsSpell,
                cmsSpellButton,
                cmsTechnique,
                cmsVehicle,
                cmsVehicleGear,
                cmsVehicleLocation,
                cmsVehicleWeapon,
                cmsVehicleWeaponAccessory,
                cmsVehicleWeaponAccessoryGear,
                cmsVehicleWeaponMod,
                cmsWeapon,
                cmsWeaponAccessory,
                cmsWeaponAccessoryGear,
                cmsWeaponLocation,
                cmsWeaponMod,
                cmsWeaponMount,
            };

            // Update the text in the Menus so they can be merged with frmMain properly.
            foreach (ToolStripMenuItem objItem in mnuCreateMenu.Items.OfType<ToolStripMenuItem>())
            {
                if (objItem.Tag != null)
                {
                    objItem.Text = LanguageManager.GetString(objItem.Tag.ToString());
                }
            }
            foreach (ContextMenuStrip objCMS in lstCMSToTranslate)
            {
                if (objCMS != null)
                {
                    foreach (ToolStripMenuItem objItem in objCMS.Items.OfType<ToolStripMenuItem>())
                    {
                        if (objItem.Tag != null)
                        {
                            objItem.Text = LanguageManager.GetString(objItem.Tag.ToString());
                        }
                    }
                }
            }

            SetTooltips();
            MoveControls();
            nudQualityLevel_UpdateValue(null);
        }

        /// <summary>
        /// Set the form to Loading mode so that certain events do not fire while data is being populated.
        /// </summary>
        public bool Loading
        {
            set
            {
                _blnLoading = value;
            }
        }

        private void TreeView_MouseDown(object sender, MouseEventArgs e)
        {
            // Generic event for all TreeViews to allow right-clicking to select a TreeNode so the proper ContextMenu is shown.
            //if (e.Button == System.Windows.Forms.MouseButtons.Right)
            //{
            TreeView objTree = (TreeView)sender;
            objTree.SelectedNode = objTree.HitTest(e.X, e.Y).Node;
            //}
            if (Form.ModifierKeys == Keys.Control)
            {
                if (!objTree.SelectedNode.IsExpanded)
                {
                    foreach (TreeNode objNode in objTree.SelectedNode.Nodes)
                    {
                        objNode.ExpandAll();
                    }
                }
                else
                {
                    foreach (TreeNode objNode in objTree.SelectedNode.Nodes)
                    {
                        objNode.Collapse();
                    }
                }
            }
        }

        private void frmCreate_Load(object sender, EventArgs e)
        {
            Timekeeper.Finish("load_free");
            Timekeeper.Start("load_frm_create");
            _blnLoading = true;

            tabSkillUc.ObjCharacter = _objCharacter;
            tabPowerUc.ObjCharacter = _objCharacter;

            if (!_objCharacter.IsCritter && (_objCharacter.BuildMethod == CharacterBuildMethod.Karma && _objCharacter.BuildKarma == 0) || (_objCharacter.BuildMethod == CharacterBuildMethod.Priority && _objCharacter.BuildKarma == 0))
            {
                _blnFreestyle = true;
                tssBPRemain.Visible = false;
                tssBPRemainLabel.Visible = false;
            }

            // Initialize elements if we're using Priority to build.
            if (_objCharacter.BuildMethod == CharacterBuildMethod.Priority || _objCharacter.BuildMethod == CharacterBuildMethod.SumtoTen)
            {
                // Load the Priority information.
                if (string.IsNullOrEmpty(_objCharacter.GameplayOption))
                {
                    _objCharacter.GameplayOption = "Standard";
                }
                XmlDocument objXmlDocumentGameplayOptions = XmlManager.Load("gameplayoptions.xml");
                XmlNode objXmlGameplayOption = objXmlDocumentGameplayOptions.SelectSingleNode("/chummer/gameplayoptions/gameplayoption[name = \"" + _objCharacter.GameplayOption + "\"]");
                string strKarma = objXmlGameplayOption["karma"].InnerText;
                string strNuyen = objXmlGameplayOption["maxnuyen"].InnerText;
                if (!_objOptions.FreeContactsMultiplierEnabled)
                {
                    string strContactMultiplier = objXmlGameplayOption["contactmultiplier"].InnerText;
                    _objCharacter.ContactMultiplier = Convert.ToInt32(strContactMultiplier);
                }
                else
                {
                    _objCharacter.ContactMultiplier = _objOptions.FreeContactsMultiplier;
                }
                _objCharacter.GameplayOptionQualityLimit = _objCharacter.MaxKarma = Convert.ToInt32(strKarma);
                _objCharacter.MaxNuyen = Convert.ToInt32(strNuyen);
            }

            int count = 0;
            foreach (Contact contact in _objCharacter.Contacts)
                count += contact.ContactPoints;

            tssBPLabel.Text = LanguageManager.GetString("Label_Karma");
            tssBPRemainLabel.Text = LanguageManager.GetString("Label_KarmaRemaining");
            tabBPSummary.Text = LanguageManager.GetString("Tab_BPSummary_Karma");
            lblQualityBPLabel.Text = LanguageManager.GetString("Label_Karma");
            nudNuyen.Value = _objCharacter.NuyenBP;
            // Remove the Magician, Adept, and Technomancer tabs since they are not in use until the appropriate Quality is selected.
            if (!_objCharacter.MagicianEnabled && !_objCharacter.AdeptEnabled)
                tabCharacterTabs.TabPages.Remove(tabMagician);
            if (!_objCharacter.AdeptEnabled)
                tabCharacterTabs.TabPages.Remove(tabAdept);
            if (!_objCharacter.TechnomancerEnabled)
                tabCharacterTabs.TabPages.Remove(tabTechnomancer);
            if (!_objCharacter.AdvancedProgramsEnabled)
                tabCharacterTabs.TabPages.Remove(tabAdvancedPrograms);
            if (_objCharacter.CyberwareDisabled)
                tabCharacterTabs.TabPages.Remove(tabCyberware);
            if (!_objCharacter.CritterEnabled)
                tabCharacterTabs.TabPages.Remove(tabCritter);
            if (_objCharacter.AdeptEnabled && !_objCharacter.MagicianEnabled)
            {
                lblSpirits.Visible = false;
                cmdAddSpirit.Visible = false;
                panSpirits.Visible = false;
            }

            // Set the visibility of the Bioware Suites menu options.
            mnuSpecialAddBiowareSuite.Visible = _objCharacter.Options.AllowBiowareSuites;
            mnuSpecialCreateBiowareSuite.Visible = _objCharacter.Options.AllowBiowareSuites;

            // Remove the Improvements Tab.
            tabCharacterTabs.TabPages.Remove(tabImprovements);

            if (!_objCharacter.MAGEnabled && !_objCharacter.RESEnabled)
            {
                CommonFunctions.ClearInitiations(_objCharacter);
                tabCharacterTabs.TabPages.Remove(tabInitiation);
            }
            else
            {
                if (_objCharacter.MAGEnabled)
                {
                    tabInitiation.Text = LanguageManager.GetString("Tab_Initiation");
                    tsMetamagicAddMetamagic.Text = LanguageManager.GetString("Button_AddMetamagic");
                    cmdAddMetamagic.Text = LanguageManager.GetString("Button_AddInitiateGrade");
                }
                else
                {
                    tabInitiation.Text = LanguageManager.GetString("Tab_Submersion");
                    tsMetamagicAddMetamagic.Text = LanguageManager.GetString("Button_AddEcho");
                    cmdAddMetamagic.Text = LanguageManager.GetString("Button_AddSubmersionGrade");
                    chkInitiationOrdeal.Text = LanguageManager.GetString("Checkbox_SubmersionTask");
                    chkInitiationGroup.Visible = false;
                    chkInitiationSchooling.Visible = false;
                    tsMetamagicAddArt.Visible = false;
                    tsMetamagicAddEnchantment.Visible = false;
                    tsMetamagicAddEnhancement.Visible = false;
                    tsMetamagicAddRitual.Visible = false;
                    treMetamagic.Top = cmdAddMetamagic.Top + cmdAddMetamagic.Height + 6;
                    cmdAddMetamagic.Left = treMetamagic.Left + treMetamagic.Width - cmdAddMetamagic.Width;
                }
                cmdAddMetamagic.Enabled = _objOptions.AllowInitiationInCreateMode;
                if (!_objOptions.AllowInitiationInCreateMode)
                    CommonFunctions.ClearInitiations(_objCharacter);
            }

            // If the character has a mugshot, decode it and put it in the PictureBox.
            if (_objCharacter.Mugshots.Count > 0)
            {
                nudMugshotIndex.Minimum = 1;
                nudMugshotIndex.Maximum = _objCharacter.Mugshots.Count;
                nudMugshotIndex.Value = _objCharacter.MainMugshotIndex + 1;
            }
            else
            {
                nudMugshotIndex.Minimum = 0;
                nudMugshotIndex.Maximum = 0;
                nudMugshotIndex.Value = 0;
            }
            lblNumMugshots.Text = "/ " + _objCharacter.Mugshots.Count.ToString();

            // Populate character information fields.
            XmlDocument objMetatypeDoc = XmlManager.Load("metatypes.xml");
            XmlNode objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + _objCharacter.Metatype + "\"]");
            if (objMetatypeNode == null)
            {
                objMetatypeDoc = XmlManager.Load("critters.xml");
                objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + _objCharacter.Metatype + "\"]");
            }

            string strMetatype = objMetatypeNode["translate"]?.InnerText ?? _objCharacter.Metatype;
            string strBook = _objOptions.LanguageBookShort(objMetatypeNode["source"].InnerText);
            string strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;

            if (!string.IsNullOrEmpty(_objCharacter.Metavariant))
            {
                objMetatypeNode = objMetatypeNode.SelectSingleNode("metavariants/metavariant[name = \"" + _objCharacter.Metavariant + "\"]");

                strMetatype += objMetatypeNode["translate"] != null
                    ? " (" + objMetatypeNode["translate"].InnerText + ")"
                    : " (" + _objCharacter.Metavariant + ")";

                strBook = _objOptions.LanguageBookShort(objMetatypeNode["source"].InnerText);
                strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;
            }
            lblMetatype.Text = strMetatype;
            lblMetatypeSource.Text = strBook + " " + strPage;
            txtCharacterName.Text = _objCharacter.Name;
            txtSex.Text = _objCharacter.Sex;
            txtAge.Text = _objCharacter.Age;
            txtEyes.Text = _objCharacter.Eyes;
            txtHeight.Text = _objCharacter.Height;
            txtWeight.Text = _objCharacter.Weight;
            txtSkin.Text = _objCharacter.Skin;
            txtHair.Text = _objCharacter.Hair;
            txtDescription.Text = _objCharacter.Description;
            txtBackground.Text = _objCharacter.Background;
            txtConcept.Text = _objCharacter.Concept;
            txtNotes.Text = _objCharacter.Notes;
            txtAlias.Text = _objCharacter.Alias;
            txtPlayerName.Text = _objCharacter.PlayerName;

            objCharacter_AmbidextrousChanged(null);

            // Check for Special Attributes.
            lblFoci.Visible = _objCharacter.MAGEnabled;
            treFoci.Visible = _objCharacter.MAGEnabled;
            cmdCreateStackedFocus.Visible = _objCharacter.MAGEnabled;

            if (_objCharacter.BuildMethod == CharacterBuildMethod.LifeModule)
            {
                cmdLifeModule.Visible = true;
                treQualities.Nodes.Add(new TreeNode("Life Modules"));
                btnCreateBackstory.Visible = true;
                btnCreateBackstory.Visible = _objCharacter.Options.AutomaticBackstory;
            }

            // Populate the Qualities list.
            RefreshQualities(treQualities, cmsQuality, true);
            // Populate the Magician Traditions list.
            XmlDocument objXmlDocument = XmlManager.Load("traditions.xml");
            List<ListItem> lstTraditions = new List<ListItem>();
            foreach (XmlNode objXmlTradition in objXmlDocument.SelectNodes("/chummer/traditions/tradition[" + _objOptions.BookXPath() + "]"))
            {
                ListItem objItem = new ListItem();
                objItem.Value = objXmlTradition["name"].InnerText;
                objItem.Name = objXmlTradition["translate"]?.InnerText ?? objXmlTradition["name"].InnerText;
                lstTraditions.Add(objItem);
            }
            SortListItem objSort = new SortListItem();
            lstTraditions.Sort(objSort.Compare);
            ListItem objBlank = new ListItem();
            objBlank.Value = "None";
            objBlank.Name = LanguageManager.GetString("String_None");
            lstTraditions.Insert(0, objBlank);
            cboTradition.BeginUpdate();
            cboTradition.ValueMember = "Value";
            cboTradition.DisplayMember = "Name";
            cboTradition.DataSource = lstTraditions;
            cboTradition.EndUpdate();

            // Populate the Magician Custom Drain Options list.
            objXmlDocument = XmlManager.Load("traditions.xml");
            List<ListItem> lstDrainAttributes = new List<ListItem>();
            ListItem objDrainBlank = new ListItem();
            objDrainBlank.Value = string.Empty;
            objDrainBlank.Name = string.Empty;
            lstDrainAttributes.Add(objDrainBlank);
            foreach (XmlNode objXmlDrain in objXmlDocument.SelectNodes("/chummer/drainattributes/drainattribute"))
            {
                ListItem objItem = new ListItem();
                objItem.Value = objXmlDrain["name"].InnerText;
                objItem.Name = objXmlDrain["translate"]?.InnerText ?? objXmlDrain["name"].InnerText;
                lstDrainAttributes.Add(objItem);
            }
            SortListItem objDrainSort = new SortListItem();
            lstDrainAttributes.Sort(objDrainSort.Compare);
            cboDrain.BeginUpdate();
            cboDrain.ValueMember = "Value";
            cboDrain.DisplayMember = "Name";
            cboDrain.DataSource = lstDrainAttributes;
            cboDrain.EndUpdate();

            HashSet<string> limit = new HashSet<string>();
            foreach (Improvement improvement in _objCharacter.Improvements.Where(improvement => improvement.ImproveType == Improvement.ImprovementType.LimitSpiritCategory))
            {
                limit.Add(improvement.ImprovedName);
            }

            // Populate the Magician Custom Spirits lists - Combat.
            objXmlDocument = XmlManager.Load("traditions.xml");
            List<ListItem> lstSpirit = new List<ListItem>();
            ListItem objSpiritBlank = new ListItem();
            objSpiritBlank.Value = string.Empty;
            objSpiritBlank.Name = string.Empty;
            lstSpirit.Add(objSpiritBlank);
            foreach (XmlNode objXmlSpirit in objXmlDocument.SelectNodes("/chummer/spirits/spirit"))
            {
                if (limit.Count > 0 && limit.Contains(objXmlSpirit["name"].InnerText) || limit.Count == 0)
                {
                    ListItem objItem = new ListItem();
                    objItem.Value = objXmlSpirit["name"].InnerText;
                    objItem.Name = objXmlSpirit["translate"]?.InnerText ?? objXmlSpirit["name"].InnerText;
                    lstSpirit.Add(objItem);
                }
            }
            SortListItem objSpiritSort = new SortListItem();
            lstSpirit.Sort(objSpiritSort.Compare);

            List<ListItem> lstCombat = new List<ListItem>(lstSpirit);
            cboSpiritCombat.BeginUpdate();
            cboSpiritCombat.ValueMember = "Value";
            cboSpiritCombat.DisplayMember = "Name";
            cboSpiritCombat.DataSource = lstCombat;
            cboSpiritCombat.EndUpdate();

            List<ListItem> lstDetection = new List<ListItem>(lstSpirit);
            cboSpiritDetection.BeginUpdate();
            cboSpiritDetection.ValueMember = "Value";
            cboSpiritDetection.DisplayMember = "Name";
            cboSpiritDetection.DataSource = lstDetection;
            cboSpiritDetection.EndUpdate();

            List<ListItem> lstHealth = new List<ListItem>(lstSpirit);
            cboSpiritHealth.BeginUpdate();
            cboSpiritHealth.ValueMember = "Value";
            cboSpiritHealth.DisplayMember = "Name";
            cboSpiritHealth.DataSource = lstHealth;
            cboSpiritHealth.EndUpdate();

            List<ListItem> lstIllusion = new List<ListItem>(lstSpirit);
            cboSpiritIllusion.BeginUpdate();
            cboSpiritIllusion.ValueMember = "Value";
            cboSpiritIllusion.DisplayMember = "Name";
            cboSpiritIllusion.DataSource = lstIllusion;
            cboSpiritIllusion.EndUpdate();

            List<ListItem> lstManip = new List<ListItem>(lstSpirit);
            cboSpiritManipulation.BeginUpdate();
            cboSpiritManipulation.ValueMember = "Value";
            cboSpiritManipulation.DisplayMember = "Name";
            cboSpiritManipulation.DataSource = lstManip;
            cboSpiritManipulation.EndUpdate();

            // Load the Metatype information before going anywhere else. Doing this later causes the Attributes to get messed up because of calls
            // to UpdateCharacterInformation();
            MetatypeSelected();

            // If the character is a Mystic Adept, set the values for the Mystic Adept NUD.
            if (_objCharacter.IsMysticAdept && !_objOptions.MysAdeptSecondMAGAttribute)
            {
                nudMysticAdeptMAGMagician.Maximum = _objCharacter.MAG.TotalValue;
                nudMysticAdeptMAGMagician.Value = _objCharacter.MysticAdeptPowerPoints;

                lblMysticAdeptAssignment.Visible = true;
                nudMysticAdeptMAGMagician.Visible = true;
            }

            // Nuyen can be affected by Qualities, so adjust the total amount available to the character.
            if (_objCharacter.IgnoreRules == false)
            {
                nudNuyen.Maximum = _objCharacter.NuyenMaximumBP;
            }
            else
            {
                nudNuyen.Maximum = int.MaxValue / 2000 - 75000; // To ensure there is no overflow in character nuyen even with max karma to nuyen and in debt quality
            }
            if (_objCharacter.BornRich) nudNuyen.Maximum += 30;
            nudNuyen.Value = _objCharacter.NuyenBP;

            // Load the Skills information.
            objXmlDocument = XmlManager.Load("skills.xml");

            int i = -1;

            // Populate Contacts and Enemies.
            int intContact = -1;
            int intEnemy = -1;
            foreach (Contact objContact in _objCharacter.Contacts)
            {
                if (objContact.EntityType == ContactType.Contact)
                {
                    intContact++;
                    ContactControl objContactControl = new ContactControl(_objCharacter);
                    // Attach an EventHandler for the ConnectionRatingChanged, LoyaltyRatingChanged, DeleteContact, FileNameChanged Events and OtherCostChanged
                    objContactControl.ConnectionRatingChanged += objContact_ConnectionRatingChanged;
                    objContactControl.LoyaltyRatingChanged += objContact_LoyaltyRatingChanged;
                    objContactControl.DeleteContact += objContact_DeleteContact;
                    objContactControl.FileNameChanged += objContact_FileNameChanged;
                    objContactControl.FreeRatingChanged += objContact_OtherCostChanged;
                    objContactControl.FamilyChanged += objContact_OtherCostChanged;
                    objContactControl.BlackmailChanged += objContact_OtherCostChanged;
                    objContactControl.MouseDown += panContactControl_MouseDown;
                    objContactControl.ContactObject = objContact;

                    objContactControl.Top = intContact * objContactControl.Height;

                    panContacts.Controls.Add(objContactControl);
                }
                if (objContact.EntityType == ContactType.Enemy)
                {
                    intEnemy++;
                    ContactControl objContactControl = new ContactControl(_objCharacter);
                    // Attach an EventHandler for the ConnectioNRatingChanged, LoyaltyRatingChanged, DeleteContact, and FileNameChanged Events.
                    objContactControl.ConnectionRatingChanged += objEnemy_ConnectionRatingChanged;
                    objContactControl.LoyaltyRatingChanged += objEnemy_LoyaltyRatingChanged;
                    objContactControl.GroupStatusChanged += objEnemy_GroupStatusChanged;
                    objContactControl.FreeRatingChanged += objEnemy_FreeStatusChanged;
                    objContactControl.DeleteContact += objEnemy_DeleteContact;
                    objContactControl.FileNameChanged += objEnemy_FileNameChanged;

                    objContactControl.ContactObject = objContact;

                    objContactControl.Top = intEnemy * objContactControl.Height;
                    panEnemies.Controls.Add(objContactControl);
                }
                if (objContact.EntityType == ContactType.Pet)
                {
                    PetControl objContactControl = new PetControl();
                    // Attach an EventHandler for the DeleteContact and FileNameChanged Events.
                    objContactControl.DeleteContact += objPet_DeleteContact;
                    objContactControl.FileNameChanged += objPet_FileNameChanged;

                    objContactControl.ContactObject = objContact;

                    panPets.Controls.Add(objContactControl);
                }
            }

            // Populate Armor.
            // Start by populating Locations.
            foreach (string strLocation in _objCharacter.ArmorBundles)
            {
                TreeNode objLocation = new TreeNode();
                objLocation.Tag = strLocation;
                objLocation.Text = strLocation;
                objLocation.ContextMenuStrip = cmsArmorLocation;
                treArmor.Nodes.Add(objLocation);
            }
            foreach (Armor objArmor in _objCharacter.Armor)
            {
                CommonFunctions.CreateArmorTreeNode(objArmor, treArmor, cmsArmor, cmsArmorMod, cmsArmorGear);
            }

            // Populate Weapons.
            // Start by populating Locations.
            foreach (string strLocation in _objCharacter.WeaponLocations)
            {
                TreeNode objLocation = new TreeNode();
                objLocation.Tag = strLocation;
                objLocation.Text = strLocation;
                objLocation.ContextMenuStrip = cmsWeaponLocation;
                treWeapons.Nodes.Add(objLocation);
            }
            foreach (Weapon objWeapon in _objCharacter.Weapons)
            {
                CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
            }

            PopulateCyberwareList();

            // Populate Spell list.
            RefreshSpells(treSpells, cmsSpell, _objCharacter);

            // Populate Magician Spirits.
            i = -1;
            foreach (Spirit objSpirit in _objCharacter.Spirits)
            {
                if (objSpirit.EntityType == SpiritType.Spirit)
                {
                    i++;
                    SpiritControl objSpiritControl = new SpiritControl();
                    objSpiritControl.SpiritObject = objSpirit;

                    // Attach an EventHandler for the ServicesOwedChanged Event.
                    objSpiritControl.ServicesOwedChanged += objSpirit_ServicesOwedChanged;
                    objSpiritControl.ForceChanged += objSpirit_ForceChanged;
                    objSpiritControl.BoundChanged += objSpirit_BoundChanged;
                    objSpiritControl.FetteredChanged += objSpirit_FetteredChanged;
                    objSpiritControl.DeleteSpirit += objSpirit_DeleteSpirit;
                    objSpiritControl.FileNameChanged += objSpirit_FileNameChanged;

                    objSpiritControl.SpiritName = objSpirit.Name;
                    objSpiritControl.ServicesOwed = objSpirit.ServicesOwed;
                    if (_objOptions.SpiritForceBasedOnTotalMAG)
                        objSpiritControl.ForceMaximum = _objCharacter.MAG.TotalValue;
                    else
                        objSpiritControl.ForceMaximum = _objCharacter.MAG.Value;
                    objSpiritControl.CritterName = objSpirit.CritterName;
                    objSpiritControl.Force = objSpirit.Force;
                    objSpiritControl.Bound = objSpirit.Bound;
                    objSpiritControl.RebuildSpiritList(_objCharacter.MagicTradition);

                    objSpiritControl.Top = i * objSpiritControl.Height;
                    panSpirits.Controls.Add(objSpiritControl);
                }
            }

            // Populate Technomancer Sprites.
            i = -1;
            foreach (Spirit objSpirit in _objCharacter.Spirits)
            {
                if (objSpirit.EntityType == SpiritType.Sprite)
                {
                    i++;
                    SpiritControl objSpiritControl = new SpiritControl();
                    objSpiritControl.SpiritObject = objSpirit;
                    objSpiritControl.EntityType = SpiritType.Sprite;

                    // Attach an EventHandler for the ServicesOwedChanged Event.
                    objSpiritControl.ServicesOwedChanged += objSprite_ServicesOwedChanged;
                    objSpiritControl.ForceChanged += objSprite_ForceChanged;
                    objSpiritControl.BoundChanged += objSprite_BoundChanged;
                    objSpiritControl.DeleteSpirit += objSprite_DeleteSpirit;
                    objSpiritControl.FileNameChanged += objSprite_FileNameChanged;

                    objSpiritControl.SpiritName = objSpirit.Name;
                    objSpiritControl.ServicesOwed = objSpirit.ServicesOwed;
                    objSpiritControl.ForceMaximum = _objCharacter.RES.TotalValue;
                    objSpiritControl.CritterName = objSpiritControl.CritterName;
                    objSpiritControl.Force = objSpirit.Force;
                    objSpiritControl.Bound = objSpirit.Bound;
                    objSpiritControl.RebuildSpiritList(_objCharacter.TechnomancerStream);

                    objSpiritControl.Top = i * objSpiritControl.Height;
                    panSprites.Controls.Add(objSpiritControl);
                }
            }

            // Populate Technomancer Complex Forms/Programs.
            foreach (ComplexForm objProgram in _objCharacter.ComplexForms)
            {
                TreeNode objNode = new TreeNode();
                objNode.Text = objProgram.DisplayName;
                objNode.Tag = objProgram.InternalId;
                if (!string.IsNullOrEmpty(objProgram.Notes))
                    objNode.ForeColor = Color.SaddleBrown;
                objNode.ToolTipText = CommonFunctions.WordWrap(objProgram.Notes, 100);
                treComplexForms.Nodes[0].Nodes.Add(objNode);
                treComplexForms.Nodes[0].Expand();
            }

            // Populate AI Programs and Advanced Programs.
            foreach (AIProgram objProgram in _objCharacter.AIPrograms)
            {
                TreeNode objNode = new TreeNode();
                objNode.Text = objProgram.DisplayName;
                objNode.Tag = objProgram.InternalId;
                if (!string.IsNullOrEmpty(objProgram.Notes))
                    objNode.ForeColor = Color.SaddleBrown;
                else if (!objProgram.CanDelete)
                    objNode.ForeColor = SystemColors.GrayText;
                else
                    objNode.ForeColor = SystemColors.WindowText;
                objNode.ToolTipText = CommonFunctions.WordWrap(objProgram.Notes, 100);
                objNode.ContextMenuStrip = cmsAdvancedProgram;
                treAIPrograms.Nodes[0].Nodes.Add(objNode);
                treAIPrograms.Nodes[0].Expand();
            }

            // Populate Martial Arts.
            foreach (MartialArt objMartialArt in _objCharacter.MartialArts)
            {
                TreeNode objMartialArtNode = new TreeNode();
                objMartialArtNode.Text = objMartialArt.DisplayName;
                objMartialArtNode.Tag = objMartialArt.InternalId;
                objMartialArtNode.ContextMenuStrip = cmsMartialArts;
                if (!string.IsNullOrEmpty(objMartialArt.Notes))
                    objMartialArtNode.ForeColor = Color.SaddleBrown;
                objMartialArtNode.ToolTipText = CommonFunctions.WordWrap(objMartialArt.Notes, 100);

                foreach (MartialArtAdvantage objAdvantage in objMartialArt.Advantages)
                {
                    TreeNode objAdvantageNode = new TreeNode();
                    objAdvantageNode.Text = objAdvantage.DisplayName;
                    objAdvantageNode.Tag = objAdvantage.InternalId;
                    objAdvantageNode.ContextMenuStrip = cmsTechnique;

                    if (!string.IsNullOrEmpty(objAdvantage.Notes))
                        objAdvantageNode.ForeColor = Color.SaddleBrown;
                    else
                        objAdvantageNode.ForeColor = SystemColors.WindowText;
                    objAdvantageNode.ToolTipText = CommonFunctions.WordWrap(objAdvantage.Notes, 100);

                    objMartialArtNode.Nodes.Add(objAdvantageNode);
                    objMartialArtNode.Expand();
                }

                if (objMartialArt.IsQuality)
                {
                    treMartialArts.Nodes[1].Nodes.Add(objMartialArtNode);
                    treMartialArts.Nodes[1].Expand();
                }
                else
                {
                    treMartialArts.Nodes[0].Nodes.Add(objMartialArtNode);
                    treMartialArts.Nodes[0].Expand();
                }
            }

            // Populate Limit Modifiers.
            foreach (LimitModifier objLimitModifier in _objCharacter.LimitModifiers)
            {
                TreeNode objLimitModifierNode = new TreeNode();
                objLimitModifierNode.Text = objLimitModifier.DisplayName;
                objLimitModifierNode.Tag = objLimitModifier.Name;
                objLimitModifierNode.ContextMenuStrip = cmsMartialArts;
                if (!string.IsNullOrEmpty(objLimitModifier.Notes))
                    objLimitModifierNode.ForeColor = Color.SaddleBrown;
                objLimitModifierNode.ToolTipText = CommonFunctions.WordWrap(objLimitModifier.Notes, 100);
                objLimitModifierNode.ContextMenuStrip = cmsLimitModifier;

                switch (objLimitModifier.Limit)
                {
                    case "Physical":
                        treLimit.Nodes[0].Nodes.Add(objLimitModifierNode);
                        treLimit.Nodes[0].Expand();
                        break;
                    case "Mental":
                        treLimit.Nodes[1].Nodes.Add(objLimitModifierNode);
                        treLimit.Nodes[1].Expand();
                        break;
                    case "Social":
                        treLimit.Nodes[2].Nodes.Add(objLimitModifierNode);
                        treLimit.Nodes[2].Expand();
                        break;
                }
            }

            // Populate Lifestyles.
            foreach (Lifestyle objLifestyle in _objCharacter.Lifestyles)
            {
                TreeNode objLifestyleNode = new TreeNode();
                objLifestyleNode.Text = objLifestyle.DisplayName;
                objLifestyleNode.Tag = objLifestyle.InternalId;
                if (objLifestyle.StyleType.ToString() != "Standard")
                    objLifestyleNode.ContextMenuStrip = cmsAdvancedLifestyle;
                else
                    objLifestyleNode.ContextMenuStrip = cmsLifestyleNotes;
                if (!string.IsNullOrEmpty(objLifestyle.Notes))
                    objLifestyleNode.ForeColor = Color.SaddleBrown;
                objLifestyleNode.ToolTipText = CommonFunctions.WordWrap(objLifestyle.Notes, 100);
                treLifestyles.Nodes[0].Nodes.Add(objLifestyleNode);
            }
            treLifestyles.Nodes[0].Expand();

            PopulateGearList();

            // Populate Foci.
            CommonFunctions.PopulateFocusList(_objCharacter, treFoci);

            // Populate Vehicles.
            foreach (Vehicle objVehicle in _objCharacter.Vehicles)
            {
                CommonFunctions.CreateVehicleTreeNode(objVehicle, treVehicles, cmsVehicle, cmsVehicleLocation, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsVehicleGear, cmsWeaponMount);
            }

            // Populate Initiation/Submersion information.
            if (_objCharacter.InitiateGrade > 0 || _objCharacter.SubmersionGrade > 0)
            {
                foreach (Metamagic objMetamagic in _objCharacter.Metamagics)
                {
                    TreeNode objNode = new TreeNode();
                    objNode.Text = objMetamagic.DisplayName;
                    objNode.Tag = objMetamagic.InternalId;
                    objNode.ContextMenuStrip = cmsMetamagic;
                    if (!string.IsNullOrEmpty(objMetamagic.Notes))
                        objNode.ForeColor = Color.SaddleBrown;
                    objNode.ToolTipText = CommonFunctions.WordWrap(objMetamagic.Notes, 100);
                    treMetamagic.Nodes.Add(objNode);
                }
            }

            RefreshCritterPowers(treCritterPowers,cmsCritterPowers);

            // Populate the Grade list.
            PopulateCyberwareGradeList();

            _blnLoading = false;

            // Select the Magician's Tradition.
            if (!string.IsNullOrEmpty(_objCharacter.MagicTradition))
                cboTradition.SelectedValue = _objCharacter.MagicTradition;
            else if (cboTradition.SelectedIndex == -1 && cboTradition.Items.Count > 0)
                cboTradition.SelectedIndex = 0;
            if (!string.IsNullOrEmpty(_objCharacter.TraditionName))
                txtTraditionName.Text = _objCharacter.TraditionName;

            if (!string.IsNullOrEmpty(_objCharacter.TraditionDrain))
                cboDrain.SelectedValue = _objCharacter.TraditionDrain;

            if (!string.IsNullOrEmpty(_objCharacter.SpiritCombat))
                cboSpiritCombat.SelectedValue = _objCharacter.SpiritCombat;

            if (!string.IsNullOrEmpty(_objCharacter.SpiritDetection))
                cboSpiritDetection.SelectedValue = _objCharacter.SpiritDetection;

            if (!string.IsNullOrEmpty(_objCharacter.SpiritHealth))
                cboSpiritHealth.SelectedValue = _objCharacter.SpiritHealth;

            if (!string.IsNullOrEmpty(_objCharacter.SpiritIllusion))
                cboSpiritIllusion.SelectedValue = _objCharacter.SpiritIllusion;

            if (!string.IsNullOrEmpty(_objCharacter.SpiritManipulation))
                cboSpiritManipulation.SelectedValue = _objCharacter.SpiritManipulation;

            treGear.ItemDrag += treGear_ItemDrag;
            treGear.DragEnter += treGear_DragEnter;
            treGear.DragDrop += treGear_DragDrop;

            treLifestyles.ItemDrag += treLifestyles_ItemDrag;
            treLifestyles.DragEnter += treLifestyles_DragEnter;
            treLifestyles.DragDrop += treLifestyles_DragDrop;

            treArmor.ItemDrag += treArmor_ItemDrag;
            treArmor.DragEnter += treArmor_DragEnter;
            treArmor.DragDrop += treArmor_DragDrop;

            treWeapons.ItemDrag += treWeapons_ItemDrag;
            treWeapons.DragEnter += treWeapons_DragEnter;
            treWeapons.DragDrop += treWeapons_DragDrop;

            treVehicles.ItemDrag += treVehicles_ItemDrag;
            treVehicles.DragEnter += treVehicles_DragEnter;
            treVehicles.DragDrop += treVehicles_DragDrop;

            // Merge the ToolStrips.
            ToolStripManager.RevertMerge("toolStrip");
            ToolStripManager.Merge(toolStrip, "toolStrip");

            mnuSpecialConvertToFreeSprite.Visible = _objCharacter.IsSprite;

            if (_objCharacter.MetatypeCategory == "Cyberzombie")
                mnuSpecialCyberzombie.Visible = false;

            treCyberware.SortCustom();
            treSpells.SortCustom();
            treComplexForms.SortCustom();
            treAIPrograms.SortCustom();
            treQualities.SortCustom();
            treCritterPowers.SortCustom();
            treMartialArts.SortCustom();
            UpdateMentorSpirits();
            UpdateInitiationGradeTree();

            ScheduleCharacterUpdate();
            // Directly calling here so that we can properly unset the dirty flag after the update
            UpdateCharacterInfo();

            lstPrimaryAttributes.CollectionChanged += AttributeCollectionChanged;
            lstSpecialAttributes.CollectionChanged += AttributeCollectionChanged;
            BuildAttributePanel();

            // Hacky, but necessary
            // UpdateCharacterInfo() needs to be run before BuildAttributesPanel() so that it can properly regenerate Essence Loss improvements based on options...
            // ...but BuildAttributePanel() ends up requesting a character update when it sets up the values of attribute NumericalUpDowns
            _blnRequestCharacterUpdate = false;

            // Now we can start checking for character updates
            Application.Idle += UpdateCharacterInfo;

            // Clear the Dirty flag which gets set when creating a new Character.
            _blnIsDirty = false;
            UpdateWindowTitle(false);
            RefreshPasteStatus();
            picMugshot_SizeChanged(sender, e);

            // Stupid hack to get the MDI icon to show up properly.
            Icon = Icon.Clone() as Icon;

            Timekeeper.Finish("load_frm_create");
            Timekeeper.Finish("loading");

            if (_objCharacter.InternalIdsNeedingReapplyImprovements.Count > 0)
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_ImprovementLoadError"),
                    LanguageManager.GetString("MessageTitle_ImprovementLoadError"), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                {
                    DoReapplyImprovements(_objCharacter.InternalIdsNeedingReapplyImprovements);
                    _objCharacter.InternalIdsNeedingReapplyImprovements.Clear();
                }
            }
        }

        private void BindEvents(ContactControl objContactControl)
        {
            throw new NotImplementedException();
        }

        private void frmCreate_FormClosing(object sender, FormClosingEventArgs e)
        {
            // If there are unsaved changes to the character, as the user if they would like to save their changes.
            if (_blnIsDirty)
            {
                string strCharacterName = _objCharacter.Alias;
                if (string.IsNullOrWhiteSpace(strCharacterName))
                    strCharacterName = LanguageManager.GetString("String_UnnamedCharacter");
                DialogResult objResult = MessageBox.Show(LanguageManager.GetString("Message_UnsavedChanges").Replace("{0}", strCharacterName), LanguageManager.GetString("MessageTitle_UnsavedChanges"), MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                if (objResult == DialogResult.Yes)
                {
                    // Attempt to save the Character. If the user cancels the Save As dialogue that may open, cancel the closing event so that changes are not lost.
                    bool blnResult = SaveCharacter();
                    if (!blnResult)
                        e.Cancel = true;
                }
                else if (objResult == DialogResult.Cancel)
                {
                    e.Cancel = true;
                }
            }
            // Reset the ToolStrip so the Save button is removed for the currently closing window.
            if (!e.Cancel)
            {
                _blnLoading = true;
                Application.Idle -= UpdateCharacterInfo;
                GlobalOptions.MainForm.OpenCharacters.Remove(_objCharacter);
                if (!_blnSkipToolStripRevert)
                    ToolStripManager.RevertMerge("toolStrip");

                // Unsubscribe from events.
                _objCharacter.MAGEnabledChanged -= objCharacter_MAGEnabledChanged;
                _objCharacter.RESEnabledChanged -= objCharacter_RESEnabledChanged;
                _objCharacter.DEPEnabledChanged -= objCharacter_DEPEnabledChanged;
                _objCharacter.AdeptTabEnabledChanged -= objCharacter_AdeptTabEnabledChanged;
                _objCharacter.MagicianTabEnabledChanged -= objCharacter_MagicianTabEnabledChanged;
                _objCharacter.AdeptTabEnabledChanged -= objCharacter_MagicianTabEnabledChanged;
                _objCharacter.TechnomancerTabEnabledChanged -= objCharacter_TechnomancerTabEnabledChanged;
                _objCharacter.AdvancedProgramsTabEnabledChanged -= objCharacter_AdvancedProgramsTabEnabledChanged;
                _objCharacter.CyberwareTabDisabledChanged -= objCharacter_CyberwareTabDisabledChanged;
                _objCharacter.InitiationTabEnabledChanged -= objCharacter_InitiationTabEnabledChanged;
                _objCharacter.CritterTabEnabledChanged -= objCharacter_CritterTabEnabledChanged;
                _objCharacter.BlackMarketEnabledChanged -= objCharacter_BlackMarketDiscountChanged;
                _objCharacter.FriendsInHighPlacesChanged -= objCharacter_FriendsInHighPlacesChanged;
                GlobalOptions.MRUChanged -= PopulateMRU;

                treGear.ItemDrag -= treGear_ItemDrag;
                treGear.DragEnter -= treGear_DragEnter;
                treGear.DragDrop -= treGear_DragDrop;

                treLifestyles.ItemDrag -= treLifestyles_ItemDrag;
                treLifestyles.DragEnter -= treLifestyles_DragEnter;
                treLifestyles.DragDrop -= treLifestyles_DragDrop;

                treArmor.ItemDrag -= treArmor_ItemDrag;
                treArmor.DragEnter -= treArmor_DragEnter;
                treArmor.DragDrop -= treArmor_DragDrop;

                treWeapons.ItemDrag -= treWeapons_ItemDrag;
                treWeapons.DragEnter -= treWeapons_DragEnter;
                treWeapons.DragDrop -= treWeapons_DragDrop;

                treVehicles.ItemDrag -= treVehicles_ItemDrag;
                treVehicles.DragEnter -= treVehicles_DragEnter;
                treVehicles.DragDrop -= treVehicles_DragDrop;

                foreach (ContactControl objContactControl in panContacts.Controls.OfType<ContactControl>())
                {
                    objContactControl.ConnectionRatingChanged -= objContact_ConnectionRatingChanged;
                    objContactControl.LoyaltyRatingChanged -= objContact_LoyaltyRatingChanged;
                    objContactControl.BlackmailChanged -= objContact_OtherCostChanged;
                    objContactControl.FamilyChanged -= objContact_OtherCostChanged;
                    objContactControl.DeleteContact -= objContact_DeleteContact;
                    objContactControl.FileNameChanged -= objContact_FileNameChanged;
                    objContactControl.FreeRatingChanged -= objContact_OtherCostChanged;

                }

                foreach (ContactControl objContactControl in panEnemies.Controls.OfType<ContactControl>())
                {
                    objContactControl.ConnectionRatingChanged -= objEnemy_ConnectionRatingChanged;
                    objContactControl.LoyaltyRatingChanged -= objEnemy_LoyaltyRatingChanged;
                    objContactControl.DeleteContact -= objEnemy_DeleteContact;
                    objContactControl.FileNameChanged -= objEnemy_FileNameChanged;
                    objContactControl.GroupStatusChanged -= objEnemy_GroupStatusChanged;
                    objContactControl.FreeRatingChanged -= objEnemy_FreeStatusChanged;
                }

                foreach (PetControl objContactControl in panPets.Controls.OfType<PetControl>())
                {
                    objContactControl.DeleteContact -= objPet_DeleteContact;
                    objContactControl.FileNameChanged -= objPet_FileNameChanged;
                }

                foreach (SpiritControl objSpiritControl in panSpirits.Controls.OfType<SpiritControl>())
                {
                    objSpiritControl.ServicesOwedChanged -= objSpirit_ServicesOwedChanged;
                    objSpiritControl.ForceChanged -= objSpirit_ForceChanged;
                    objSpiritControl.BoundChanged -= objSpirit_BoundChanged;
                    objSpiritControl.FetteredChanged -= objSpirit_FetteredChanged;
                    objSpiritControl.DeleteSpirit -= objSpirit_DeleteSpirit;
                    objSpiritControl.FileNameChanged -= objSpirit_FileNameChanged;
                }

                foreach (SpiritControl objSpiritControl in panSprites.Controls.OfType<SpiritControl>())
                {
                    objSpiritControl.ServicesOwedChanged -= objSprite_ServicesOwedChanged;
                    objSpiritControl.ForceChanged -= objSprite_ForceChanged;
                    objSpiritControl.BoundChanged -= objSprite_BoundChanged;
                    objSpiritControl.DeleteSpirit -= objSprite_DeleteSpirit;
                    objSpiritControl.FileNameChanged -= objSprite_FileNameChanged;
                }

                // Trash the global variables and dispose of the Form.
                _objCharacter.Dispose();
                _objOptions = null;
                _objCharacter = null;
                Dispose(true);
            }
        }

        private void frmCreate_Activated(object sender, EventArgs e)
        {
            // Merge the ToolStrips.
            ToolStripManager.RevertMerge("toolStrip");
            ToolStripManager.Merge(toolStrip, "toolStrip");
        }

        private void frmCreate_Shown(object sender, EventArgs e)
        {
            // Clear all of the placeholder Labels.
            foreach (Label objLabel in tabCommon.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabMartialArts.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabMagician.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabTechnomancer.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabAdvancedPrograms.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabCyberware.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabLifestyle.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabArmor.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabWeapons.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabGear.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabVehicles.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabInitiation.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabCritter.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            frmCreate_Resize(sender, e);
        }

        private void frmCreate_Resize(object sender, EventArgs e)
        {
            TabPage objPage = tabCharacterTabs.SelectedTab;
            // Reseize the form elements with the form.

            // Character Info Tab.
            int intHeight = ((objPage.Height - lblDescription.Top) / 4 - 20);
            txtDescription.Height = intHeight;
            lblBackground.Top = txtDescription.Top + txtDescription.Height + 3;
            txtBackground.Top = lblBackground.Top + lblBackground.Height + 3;
            txtBackground.Height = intHeight;
            lblConcept.Top = txtBackground.Top + txtBackground.Height + 3;
            txtConcept.Top = lblConcept.Top + lblConcept.Height + 3;
            txtConcept.Height = intHeight;
            lblNotes.Top = txtConcept.Top + txtConcept.Height + 3;
            txtNotes.Top = lblNotes.Top + lblNotes.Height + 3;
            txtNotes.Height = intHeight;

            cmdDeleteLimitModifier.Left = cmdAddLimitModifier.Left + cmdAddLimitModifier.Width + 15;
        }
        #endregion

        #region Character Events
        private void objCharacter_MAGEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            lblFoci.Visible = _objCharacter.MAGEnabled;
            treFoci.Visible = _objCharacter.MAGEnabled;
            cmdCreateStackedFocus.Visible = _objCharacter.MAGEnabled;

            if (_objCharacter.MAGEnabled)
            {
                /*
                int intEssenceLoss = 0;
                if (!_objOptions.ESSLossReducesMaximumOnly)
                    intEssenceLoss = _objCharacter.EssencePenalty;
                */
                // If the character options permit initiation in create mode, show the Initiation page.
                if (_objOptions.AllowInitiationInCreateMode)
                    UpdateInitiationCost();
                if (!tabCharacterTabs.TabPages.Contains(tabInitiation))
                {
                    tabCharacterTabs.TabPages.Insert(3, tabInitiation);
                    tabInitiation.Text = LanguageManager.GetString("Tab_Initiation");
                    cmdAddMetamagic.Text = LanguageManager.GetString("Button_AddInitiateGrade");
                    chkInitiationGroup.Text = LanguageManager.GetString("Checkbox_GroupInitiation");
                    chkInitiationOrdeal.Text = LanguageManager.GetString("Checkbox_InitiationOrdeal");
                    cmdAddMetamagic.Enabled = _objOptions.AllowInitiationInCreateMode;
                }

                if (!lstSpecialAttributes.Contains(_objCharacter.MAG))
                {
                    lstSpecialAttributes.Add(_objCharacter.MAG);
                }
                if (_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept && !lstSpecialAttributes.Contains(_objCharacter.MAGAdept))
                {
                    lstSpecialAttributes.Add(_objCharacter.MAGAdept);
                }
            }
            else
            {
                ClearInitiationTab();
                tabCharacterTabs.TabPages.Remove(tabInitiation);
                if (lstSpecialAttributes.Contains(_objCharacter.MAG))
                {
                    lstSpecialAttributes.Remove(_objCharacter.MAG);
                }
                if (lstSpecialAttributes.Contains(_objCharacter.MAGAdept))
                {
                    lstSpecialAttributes.Remove(_objCharacter.MAGAdept);
                }
            }
        }

        private void objCharacter_RESEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of RES being enabled.
            if (_objCharacter.RESEnabled)
            {
                /*
                int intEssenceLoss = 0;
                if (!_objOptions.ESSLossReducesMaximumOnly)
                    intEssenceLoss = _objCharacter.EssencePenalty;
                // If the character options permit submersion in create mode, show the Initiation page.
                */
                if (_objOptions.AllowInitiationInCreateMode)
                    UpdateInitiationCost();
                if (!tabCharacterTabs.TabPages.Contains(tabInitiation))
                {
                    tabCharacterTabs.TabPages.Insert(3, tabInitiation);
                    tabInitiation.Text = LanguageManager.GetString("Tab_Submersion");
                    cmdAddMetamagic.Text = LanguageManager.GetString("Button_AddSubmersionGrade");
                    chkInitiationOrdeal.Text = LanguageManager.GetString("Checkbox_SubmersionTask");
                    //TODO: Re-enable if Technomancers ever get the ability for Group and Schooling initiation bonuses.
                    //chkInitiationGroup.Text = LanguageManager.GetString("Checkbox_NetworkSubmersion");
                    chkInitiationGroup.Visible = false;
                    chkInitiationSchooling.Visible = false;
                    cmdAddMetamagic.Enabled = _objOptions.AllowInitiationInCreateMode;
                }
                if (!lstSpecialAttributes.Contains(_objCharacter.RES))
                {
                    lstSpecialAttributes.Add(_objCharacter.RES);
                }
            }
            else
            {
                ClearInitiationTab();
                tabCharacterTabs.TabPages.Remove(tabInitiation);
                if (lstSpecialAttributes.Contains(_objCharacter.RES))
                {
                    lstSpecialAttributes.Remove(_objCharacter.RES);
                }
            }
        }

        private void objCharacter_DEPEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;
            if (_objCharacter.DEPEnabled)
            {
                if (!lstSpecialAttributes.Contains(_objCharacter.DEP))
                {
                    lstSpecialAttributes.Add(_objCharacter.DEP);
                }
            }
            else
            {
                if (lstSpecialAttributes.Contains(_objCharacter.DEP))
                {
                    lstSpecialAttributes.Remove(_objCharacter.DEP);
                }
            }
        }

        private void objCharacter_AdeptTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Adept being enabled.
            if (_objCharacter.AdeptEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabAdept))
                    tabCharacterTabs.TabPages.Insert(3, tabAdept);
                if (_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept && !lstSpecialAttributes.Contains(_objCharacter.MAGAdept))
                {
                    lstSpecialAttributes.Add(_objCharacter.MAGAdept);
                }
            }
            else
            {
                ClearAdeptTab();
                tabCharacterTabs.TabPages.Remove(tabAdept);
                if (lstSpecialAttributes.Contains(_objCharacter.MAGAdept))
                {
                    lstSpecialAttributes.Remove(_objCharacter.MAGAdept);
                }
            }
            //TODO: Can't bind visibility to the IsMysticAdept property for some reason.
            lblMysticAdeptAssignment.Visible = !_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept;
            nudMysticAdeptMAGMagician.Visible = !_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept;
        }

        private void objCharacter_AmbidextrousChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;
            //Create the dropdown for the character's primary arm.
            List<ListItem> lstPrimaryArm = new List<ListItem>();
            ListItem objLeftHand = new ListItem();
            objLeftHand.Value = "Left";
            objLeftHand.Name = LanguageManager.GetString("String_Improvement_SideLeft");
            lstPrimaryArm.Add(objLeftHand);
            ListItem objRightHand = new ListItem();
            objRightHand.Value = "Right";
            objRightHand.Name = LanguageManager.GetString("String_Improvement_SideRight");
            lstPrimaryArm.Add(objRightHand);
            if (_objCharacter.Ambidextrous)
            {
                ListItem objAmbidextrous = new ListItem();
                objAmbidextrous.Value = "Ambidextrous";
                objAmbidextrous.Name = LanguageManager.GetString("String_Ambidextrous");
                lstPrimaryArm.Add(objAmbidextrous);
            }

            SortListItem objSortHand = new SortListItem();
            lstPrimaryArm.Sort(objSortHand.Compare);
            cboPrimaryArm.BeginUpdate();
            cboPrimaryArm.ValueMember = "Value";
            cboPrimaryArm.DisplayMember = "Name";
            cboPrimaryArm.DataSource = lstPrimaryArm;
            if (_objCharacter.Ambidextrous)
            {
                cboPrimaryArm.SelectedValue = "Ambidextrous";
                cboPrimaryArm.Enabled = false;
            }
            else
            {
                cboPrimaryArm.SelectedValue = _objCharacter.PrimaryArm;
                cboPrimaryArm.Enabled = true;
            }
            cboPrimaryArm.EndUpdate();
        }

        private void objCharacter_MagicianTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Magician being enabled.
            if (_objCharacter.MagicianEnabled || _objCharacter.AdeptEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabMagician))
                    tabCharacterTabs.TabPages.Insert(3, tabMagician);
                if (_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept && !lstSpecialAttributes.Contains(_objCharacter.MAGAdept))
                {
                    lstSpecialAttributes.Add(_objCharacter.MAGAdept);
                }
            }
            else
            {
                ClearSpellTab();
                tabCharacterTabs.TabPages.Remove(tabMagician);
                if (lstSpecialAttributes.Contains(_objCharacter.MAGAdept))
                {
                    lstSpecialAttributes.Remove(_objCharacter.MAGAdept);
                }
            }

            //TODO: Can't bind visibility to the IsMysticAdept property for some reason.
            lblMysticAdeptAssignment.Visible = !_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept;
            nudMysticAdeptMAGMagician.Visible = !_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept;
        }

        private void objCharacter_TechnomancerTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Technomancer being enabled.
            if (_objCharacter.TechnomancerEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabTechnomancer))
                    tabCharacterTabs.TabPages.Insert(3, tabTechnomancer);
            }
            else
            {
                ClearTechnomancerTab();
                tabCharacterTabs.TabPages.Remove(tabTechnomancer);
            }
        }

        private void objCharacter_AdvancedProgramsTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Advanced Programs being enabled.
            if (_objCharacter.AdvancedProgramsEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabAdvancedPrograms))
                    tabCharacterTabs.TabPages.Insert(3, tabAdvancedPrograms);
            }
            else
            {
                ClearAdvancedProgramsTab();
                tabCharacterTabs.TabPages.Remove(tabAdvancedPrograms);
            }
        }

        private void objCharacter_CyberwareTabDisabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Advanced Programs being enabled.
            if (_objCharacter.CyberwareDisabled)
            {
                ClearCyberwareTab();
                tabCharacterTabs.TabPages.Remove(tabCyberware);
            }
            else
            {
                if (!tabCharacterTabs.TabPages.Contains(tabCyberware))
                    tabCharacterTabs.TabPages.Insert(6, tabCyberware);
            }
        }

        private void objCharacter_InitiationTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // If we're building with Karma, do nothing since this only applies to BP.
            if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                return;

            // Change the status of the Initiation tab being show.
            if (_objCharacter.InitiationEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabInitiation))
                    tabCharacterTabs.TabPages.Insert(3, tabInitiation);
            }
            else
            {
                ClearInitiationTab();
                tabCharacterTabs.TabPages.Remove(tabInitiation);
            }
        }

        private void objCharacter_CritterTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change the status of Critter being enabled.
            if (_objCharacter.CritterEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabCritter))
                    tabCharacterTabs.TabPages.Insert(3, tabCritter);
            }
            else
            {
                // Remove all Critter Powers.
                ClearCritterTab();
                tabCharacterTabs.TabPages.Remove(tabCritter);
            }
        }

        private void objCharacter_BlackMarketDiscountChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

        }
        
        private void objCharacter_FriendsInHighPlacesChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.FriendsInHighPlaces)
            {

            }
            else
            {

            }
        }
        private void objCharacter_ExConChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.ExCon)
            {

            }
            else
            {

            }
        }

        private void objCharacter_TrustFundChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            if (_objCharacter.TrustFund> 0)
            {

            }
            else
            {
            }
        }

        private void objCharacter_RestrictedGearChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.RestrictedGear)
            {

            }
            else
            {

            }
        }

        private void objCharacter_OverclockerChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.Overclocker)
            {

            }
            else
            {

            }
        }

        private void objCharacter_MadeManChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.MadeMan)
            {

            }
            else
            {

            }
        }

        private void objCharacter_LightningReflexesChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.LightningReflexes)
            {

            }
            else
            {

            }
        }

        private void objCharacter_FameChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.Fame)
            {

            }
            else
            {

            }
        }

        private void objCharacter_BornRichChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.BornRich)
            {
                nudNuyen.Maximum += 30;
            }
            else
            {
                nudNuyen.Maximum -= 30;
            }


        }

        private void objCharacter_ErasedChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;


            if (_objCharacter.Erased)
            {

            }
            else
            {

            }
        }


        //TODO: UpdatePowerRelatedInfo method? Powers hook into so much stuff that it may need to wait for outbound improvement events?
        private void PowerPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            _blnIsDirty = true;

            if (PowerPropertyChanged_StopWatch.ElapsedMilliseconds < 4) return;
            PowerPropertyChanged_StopWatch.Restart();
            tabPowerUc.CalculatePowerPoints();
            ScheduleCharacterUpdate();
        }

        private void SkillPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            //HACK PERFORMANCE
            //So, skills tell if anything maybe intresting have happened, but this don't have any way to see if it is relevant. Instead of redrawing EVYER FYCKING THING we do it only every 5 ms
            if (SkillPropertyChanged_StopWatch.ElapsedMilliseconds < 4) return;
            SkillPropertyChanged_StopWatch.Restart();

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        public void ScheduleCharacterUpdate()
        {
            _blnRequestCharacterUpdate = true;
        }
        #endregion

        #region Menu Events
        private void mnuFileSave_Click(object sender, EventArgs e)
        {
            SaveCharacter();
        }

        private void mnuFileSaveAs_Click(object sender, EventArgs e)
        {
            SaveCharacterAs();
        }

        private void tsbSave_Click(object sender, EventArgs e)
        {
            mnuFileSave_Click(sender, e);
        }

        private void tsbPrint_Click(object sender, EventArgs e)
        {
            _objCharacter.Print(false);
        }

        private void mnuFilePrint_Click(object sender, EventArgs e)
        {
            _objCharacter.Print(false);
        }

        private void mnuFileClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void mnuSpecialAddPACKSKit_Click(object sender, EventArgs e)
        {
            AddPACKSKit();
        }

        private void mnuSpecialCreatePACKSKit_Click(object sender, EventArgs e)
        {
            CreatePACKSKit();
        }

        private void mnuSpecialChangeMetatype_Click(object sender, EventArgs e)
        {
            ChangeMetatype();
        }

        private void mnuSpecialCyberzombie_Click(object sender, EventArgs e)
        {
            bool blnEssence = true;
            bool blnCyberware = false;
            string strMessage = LanguageManager.GetString("Message_CyberzombieRequirements");

            // Make sure the character has an Essence lower than 0.
            if (_objCharacter.Essence >= 0)
            {
                strMessage += "\n\t" + LanguageManager.GetString("Message_CyberzombieRequirementsEssence");
                blnEssence = false;
            }

            // Make sure the character has an Invoked Memory Stimulator.
            foreach (Cyberware objCyberware in _objCharacter.Cyberware)
            {
                if (objCyberware.Name == "Invoked Memory Stimulator")
                    blnCyberware = true;
            }

            if (!blnCyberware)
                strMessage += "\n\t" + LanguageManager.GetString("Message_CyberzombieRequirementsStimulator");

            if (!blnEssence || !blnCyberware)
            {
                MessageBox.Show(strMessage, LanguageManager.GetString("MessageTitle_CyberzombieRequirements"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (MessageBox.Show(LanguageManager.GetString("Message_CyberzombieConfirm"), LanguageManager.GetString("MessageTitle_CyberzombieConfirm"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            // Get the player to roll Dice to make a WIL Test and record the result.
            frmDiceHits frmWILHits = new frmDiceHits();
            frmWILHits.Text = LanguageManager.GetString("String_CyberzombieWILText");
            frmWILHits.Description = LanguageManager.GetString("String_CyberzombieWILDescription");
            int intDice = _objCharacter.WIL.TotalValue;
            int intThreshold = 3 + _objCharacter.EssencePenalty - decimal.ToInt32(_objCharacter.EssenceMaximum);
            frmWILHits.Dice = intDice;
            frmWILHits.ShowDialog(this);

            if (frmWILHits.DialogResult != DialogResult.OK)
                return;

            int intWILResult = frmWILHits.Result;

            // The character gains 10 + ((Threshold - Hits) * 10)BP worth of Negative Qualities.
            int intResult = 10;
            if (intWILResult < intThreshold)
            {
                intResult = (intThreshold - intWILResult) * 10;
            }
            ImprovementManager.CreateImprovement(_objCharacter, string.Empty, Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Qualities", Improvement.ImprovementType.FreeNegativeQualities, string.Empty, intResult * -1);

            // Convert the character.
            // Characters lose access to Resonance.
            _objCharacter.RESEnabled = false;

            // Gain MAG that is permanently set to 1.
            _objCharacter.MAGEnabled = true;
            _objCharacter.MAG.MetatypeMinimum = 1;
            _objCharacter.MAG.MetatypeMaximum = 1;
            _objCharacter.MAG.Base = 1;

            // Add the Cyberzombie Lifestyle if it is not already taken.
            bool blnHasLifestyle = false;
            foreach (Lifestyle objLifestyle in _objCharacter.Lifestyles)
            {
                if (objLifestyle.Name == "Cyberzombie Lifestyle Addition")
                    blnHasLifestyle = true;
            }
            if (!blnHasLifestyle)
            {
                XmlDocument objXmlLifestyleDocument = XmlManager.Load("lifestyles.xml");
                XmlNode objXmlLifestyle = objXmlLifestyleDocument.SelectSingleNode("/chummer/lifestyles/lifestyle[name = \"Cyberzombie Lifestyle Addition\"]");

                TreeNode objLifestyleNode = new TreeNode();
                Lifestyle objLifestyle = new Lifestyle(_objCharacter);
                objLifestyle.Create(objXmlLifestyle, objLifestyleNode);
                _objCharacter.Lifestyles.Add(objLifestyle);

                treLifestyles.Nodes[0].Nodes.Add(objLifestyleNode);
                treLifestyles.Nodes[0].Expand();
            }

            // Change the MetatypeCategory to Cyberzombie.
            _objCharacter.MetatypeCategory = "Cyberzombie";

            // Gain access to Critter Powers.
            _objCharacter.CritterEnabled = true;

            // Gain the Dual Natured Critter Power if it does not yet exist.
            bool blnHasPower = false;
            foreach (CritterPower objPower in _objCharacter.CritterPowers)
            {
                if (objPower.Name == "Dual Natured")
                    blnHasPower = true;
            }
            if (!blnHasPower)
            {
                XmlDocument objXmlPowerDocument = XmlManager.Load("critterpowers.xml");
                XmlNode objXmlPowerNode = objXmlPowerDocument.SelectSingleNode("/chummer/powers/power[name = \"Dual Natured\"]");

                TreeNode objNode = new TreeNode();
                CritterPower objCritterPower = new CritterPower(_objCharacter);
                objCritterPower.Create(objXmlPowerNode, objNode);
                _objCharacter.CritterPowers.Add(objCritterPower);

                treCritterPowers.Nodes[0].Nodes.Add(objNode);
                treCritterPowers.Nodes[0].Expand();
            }

            // Gain the Immunity (Normal Weapons) Critter Power if it does not yet exist.
            blnHasPower = false;
            foreach (CritterPower objPower in _objCharacter.CritterPowers)
            {
                if (objPower.Name == "Immunity" && objPower.Extra == "Normal Weapons")
                    blnHasPower = true;
            }
            if (!blnHasPower)
            {
                XmlDocument objXmlPowerDocument = XmlManager.Load("critterpowers.xml");
                XmlNode objXmlPowerNode = objXmlPowerDocument.SelectSingleNode("/chummer/powers/power[name = \"Immunity\"]");

                TreeNode objNode = new TreeNode();
                CritterPower objCritterPower = new CritterPower(_objCharacter);
                objCritterPower.Create(objXmlPowerNode, objNode, 0, "Normal Weapons");
                _objCharacter.CritterPowers.Add(objCritterPower);

                treCritterPowers.Nodes[0].Nodes.Add(objNode);
                treCritterPowers.Nodes[0].Expand();
            }

            mnuSpecialCyberzombie.Visible = false;

            _blnIsDirty = true;
            UpdateWindowTitle();

            ScheduleCharacterUpdate();
        }

        private void mnuSpecialAddCyberwareSuite_Click(object sender, EventArgs e)
        {
            AddCyberwareSuite(Improvement.ImprovementSource.Cyberware);
        }

        private void mnuSpecialAddBiowareSuite_Click(object sender, EventArgs e)
        {
            AddCyberwareSuite(Improvement.ImprovementSource.Bioware);
        }

        private void mnuSpecialCreateCyberwareSuite_Click(object sender, EventArgs e)
        {
            CreateCyberwareSuite(Improvement.ImprovementSource.Cyberware);
        }

        private void mnuSpecialCreateBiowareSuite_Click(object sender, EventArgs e)
        {
            CreateCyberwareSuite(Improvement.ImprovementSource.Bioware);
        }

        private void Menu_DropDownOpening(object sender, EventArgs e)
        {
            foreach (ToolStripMenuItem objItem in ((ToolStripMenuItem)sender).DropDownItems.OfType<ToolStripMenuItem>())
            {
                if (objItem.Tag != null)
                {
                    objItem.Text = LanguageManager.GetString(objItem.Tag.ToString());
                }
            }
        }

        private void mnuSpecialReapplyImprovements_Click(object sender, EventArgs e)
        {
            // This only re-applies the Improvements for everything the character has. If a match is not found in the data files, the current Improvement information is left as-is.
            // Verify that the user wants to go through with it.
            if (MessageBox.Show(LanguageManager.GetString("Message_ConfirmReapplyImprovements"), LanguageManager.GetString("MessageTitle_ConfirmReapplyImprovements"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            DoReapplyImprovements();
        }

        private void DoReapplyImprovements(List<string> lstInternalIdFilter = null)
        {
            Cursor = Cursors.WaitCursor;

            string strOutdatedItems = string.Empty;

            // Record the status of any flags that normally trigger character events.
            bool blnMAGEnabled = _objCharacter.MAGEnabled;
            bool blnRESEnabled = _objCharacter.RESEnabled;
            bool blnDEPEnabled = _objCharacter.DEPEnabled;
            bool blnFriendsInHighPlaces = _objCharacter.FriendsInHighPlaces;

            _blnReapplyImprovements = true;

            // Wipe all improvements that we will reapply, this is mainly to eliminate orphaned improvements caused by certain bugs and also for a performance increase
            if (lstInternalIdFilter == null)
                ImprovementManager.RemoveImprovements(_objCharacter, _objCharacter.Improvements.Where(x =>
                                                                        x.ImproveSource == Improvement.ImprovementSource.AIProgram ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Armor ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ArmorMod ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Bioware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ComplexForm ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.CritterPower ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Cyberware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Echo ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Gear ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArt ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArtAdvantage ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Metamagic ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Power ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Quality ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Spell ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.StackedFocus).ToList());
            else
                ImprovementManager.RemoveImprovements(_objCharacter, _objCharacter.Improvements.Where(x => lstInternalIdFilter.Contains(x.SourceName) &&
                                                                        (x.ImproveSource == Improvement.ImprovementSource.AIProgram ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Armor ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ArmorMod ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Bioware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ComplexForm ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.CritterPower ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Cyberware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Echo ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Gear ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArt ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArtAdvantage ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Metamagic ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Power ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Quality ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Spell ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.StackedFocus)).ToList());

            // Refresh Qualities.
            // We cannot use foreach because qualities can add more qualities
            for (int j = 0; j < _objCharacter.Qualities.Count; j++)
            {
                Quality objQuality = _objCharacter.Qualities[j];
                if (objQuality.OriginSource == QualitySource.Improvement)
                    continue;
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objQuality.InternalId))
                    continue;
                string strSelected = objQuality.Extra;

                XmlNode objNode = objQuality.MyXmlNode;
                if (objNode != null)
                {
                    objQuality.Bonus = objNode["bonus"];
                    if (objQuality.Bonus != null)
                    {
                        ImprovementManager.ForcedValue = strSelected;
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objQuality.InternalId, objQuality.Bonus, false, 1, objQuality.DisplayNameShort);
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                        {
                            objQuality.Extra = ImprovementManager.SelectedValue;
                            TreeNode objTreeNode = CommonFunctions.FindNode(objQuality.InternalId, treQualities);
                            if (objTreeNode != null)
                                objTreeNode.Text = objQuality.DisplayName;
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objQuality.DisplayName + "\n";
                }
            }

            // Refresh Martial Art Advantages.
            foreach (MartialArt objMartialArt in _objCharacter.MartialArts)
            {
                XmlNode objMartialArtNode = objMartialArt.MyXmlNode;
                if (objMartialArtNode != null)
                {
                    // We're only re-apply improvements a list of items, not all of them
                    if (lstInternalIdFilter == null || lstInternalIdFilter.Contains(objMartialArt.InternalId))
                    {
                        if (objMartialArtNode["bonus"] != null)
                        {
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.MartialArt, objMartialArt.InternalId, objMartialArtNode["bonus"], false, 1, objMartialArt.DisplayNameShort);
                        }
                    }
                    foreach (MartialArtAdvantage objAdvantage in objMartialArt.Advantages)
                    {
                        // We're only re-apply improvements a list of items, not all of them
                        if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objAdvantage.InternalId))
                            continue;
                        XmlNode objNode = objMartialArtNode.SelectSingleNode("techniques/technique[name = \"" + objAdvantage.Name + "\"]");
                        if (objNode != null)
                        {
                            if (objNode["bonus"] != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.MartialArtAdvantage, objAdvantage.InternalId, objNode["bonus"], false, 1, objAdvantage.DisplayName);
                        }
                        else
                        {
                            strOutdatedItems += objMartialArt.DisplayName + "\n";
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objMartialArt.DisplayName + "\n";
                }
            }

            // Refresh Spells.
            foreach (Spell objSpell in _objCharacter.Spells)
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objSpell.InternalId))
                    continue;
                XmlNode objNode = objSpell.MyXmlNode;
                if (objNode != null)
                {
                    if (objNode["bonus"] != null)
                    {
                        ImprovementManager.ForcedValue = objSpell.Extra;
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Spell, objSpell.InternalId, objNode["bonus"], false, 1, objSpell.DisplayNameShort);
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objSpell.Extra = ImprovementManager.SelectedValue;

                        foreach (TreeNode objParentNode in treSpells.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objSpell.InternalId)
                                {
                                    objChildNode.Text = objSpell.DisplayName;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objSpell.DisplayName + "\n";
                }
            }

            // Refresh Adept Powers.
            foreach (Power objPower in _objCharacter.Powers)
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objPower.InternalId))
                    continue;
                XmlNode objNode = objPower.MyXmlNode;
                if (objNode != null)
                {
                    objPower.Bonus = objNode["bonus"];
                    if (objPower.Bonus != null)
                    {
                        ImprovementManager.ForcedValue = objPower.Extra;
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Power, objPower.InternalId, objPower.Bonus, false, Convert.ToInt32(objPower.TotalRating), objPower.DisplayNameShort);
                    }
                }
                else
                {
                    strOutdatedItems += objPower.DisplayName + "\n";
                }
            }

            // Refresh Complex Forms.
            foreach (ComplexForm objComplexForm in _objCharacter.ComplexForms)
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objComplexForm.InternalId))
                    continue;
                XmlNode objNode = objComplexForm.MyXmlNode;
                if (objNode != null)
                {
                    if (objNode["bonus"] != null)
                    {
                        ImprovementManager.ForcedValue = objComplexForm.Extra;
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ComplexForm, objComplexForm.InternalId, objNode["bonus"], false, 1, objComplexForm.DisplayNameShort);
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objComplexForm.Extra = ImprovementManager.SelectedValue;
                        foreach (TreeNode objParentNode in treComplexForms.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objComplexForm.InternalId)
                                {
                                    objChildNode.Text = objComplexForm.DisplayName;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objComplexForm.DisplayName + "\n";
                }
            }

            // Refresh AI Programs and Advanced Programs
            foreach (AIProgram objProgram in _objCharacter.AIPrograms)
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objProgram.InternalId))
                    continue;
                XmlNode objNode = objProgram.MyXmlNode;
                if (objNode != null)
                {
                    if (objNode["bonus"] != null)
                    {
                        ImprovementManager.ForcedValue = objProgram.Extra;
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.AIProgram, objProgram.InternalId, objNode["bonus"], false, 1, objProgram.DisplayNameShort);
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objProgram.Extra = ImprovementManager.SelectedValue;
                        foreach (TreeNode objParentNode in treAIPrograms.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objProgram.InternalId)
                                {
                                    objChildNode.Text = objProgram.DisplayName;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objProgram.DisplayName + "\n";
                }
            }

            // Refresh Critter Powers.
            foreach (CritterPower objPower in _objCharacter.CritterPowers)
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objPower.InternalId))
                    continue;
                XmlNode objNode = objPower.MyXmlNode;
                if (objNode != null)
                {
                    objPower.Bonus = objNode["bonus"];
                    if (objPower.Bonus != null)
                    {
                        string strSelected = objPower.Extra;
                        int intRating = 0;
                        if (!int.TryParse(strSelected, out intRating))
                        {
                            intRating = 1;
                            ImprovementManager.ForcedValue = strSelected;
                        }
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.CritterPower, objPower.InternalId, objPower.Bonus, false, intRating, objPower.DisplayNameShort);
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objPower.Extra = ImprovementManager.SelectedValue;

                        foreach (TreeNode objParentNode in treCritterPowers.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objPower.InternalId)
                                {
                                    objChildNode.Text = objPower.DisplayName;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objPower.DisplayName + "\n";
                }
            }

            // Refresh Metamagics and Echoes.
            // We cannot use foreach because metamagics/echoes can add more metamagics/echoes
            for (int j = 0; j < _objCharacter.Metamagics.Count; j++)
            {
                Metamagic objMetamagic = _objCharacter.Metamagics[j];
                if (objMetamagic.Grade < 0)
                    continue;
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objMetamagic.InternalId))
                    continue;
                XmlNode objNode = objMetamagic.MyXmlNode;
                if (objNode != null)
                {
                    objMetamagic.Bonus = objNode["bonus"];
                    if (objMetamagic.Bonus != null)
                    {
                        ImprovementManager.CreateImprovements(_objCharacter, objMetamagic.SourceType, objMetamagic.InternalId, objMetamagic.Bonus, false, 1, objMetamagic.DisplayNameShort);
                    }
                }
                else
                {
                    strOutdatedItems += objMetamagic.DisplayName + "\n";
                }
            }

            // Refresh Cyberware and Bioware.
            Dictionary<Cyberware, int> dicPairableCyberwares = new Dictionary<Cyberware, int>();
            foreach (Cyberware objCyberware in _objCharacter.Cyberware.DeepWhere(x => x.Children, x => lstInternalIdFilter != null && !lstInternalIdFilter.Contains(x.InternalId)))
            {
                XmlNode objNode = objCyberware.MyXmlNode;
                if (objNode != null)
                {
                    objCyberware.Bonus = objNode["bonus"];
                    objCyberware.WirelessBonus = objNode["wirelessbonus"];
                    objCyberware.PairBonus = objNode["pairbonus"];
                    if (objCyberware.IsModularCurrentlyEquipped)
                    {
                        if (!string.IsNullOrEmpty(objCyberware.Forced) && objCyberware.Forced != "Right" && objCyberware.Forced != "Left")
                            ImprovementManager.ForcedValue = objCyberware.Forced;
                        if (objCyberware.Bonus != null)
                        {
                            ImprovementManager.CreateImprovements(_objCharacter, objCyberware.SourceType, objCyberware.InternalId, objCyberware.Bonus, false, objCyberware.Rating, objCyberware.DisplayNameShort);
                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                objCyberware.Extra = ImprovementManager.SelectedValue;
                        }
                        if (objCyberware.WirelessOn && objCyberware.WirelessBonus != null)
                        {
                            ImprovementManager.CreateImprovements(_objCharacter, objCyberware.SourceType, objCyberware.InternalId, objCyberware.WirelessBonus, false, objCyberware.Rating, objCyberware.DisplayNameShort);
                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue) && string.IsNullOrEmpty(objCyberware.Extra))
                                objCyberware.Extra = ImprovementManager.SelectedValue;
                        }
                        if (objCyberware.PairBonus != null)
                        {
                            Cyberware objMatchingCyberware = dicPairableCyberwares.Keys.FirstOrDefault(x => x.Name == objCyberware.Name && x.Extra == objCyberware.Extra);
                            if (objMatchingCyberware != null)
                                dicPairableCyberwares[objMatchingCyberware] = dicPairableCyberwares[objMatchingCyberware] + 1;
                            else
                                dicPairableCyberwares.Add(objCyberware, 1);
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objCyberware.DisplayName + "\n";
                }
                foreach (Gear objGear in objCyberware.Gear)
                {
                    CommonFunctions.ReaddGearImprovements(_objCharacter, objGear, treCyberware, ref strOutdatedItems, lstInternalIdFilter);
                }
                TreeNode objWareNode = CommonFunctions.FindNode(objCyberware.InternalId, treCyberware);
                if (objWareNode != null)
                    objWareNode.Text = objCyberware.DisplayName;
            }
            // Separate Pass for PairBonuses
            foreach (KeyValuePair<Cyberware, int> objItem in dicPairableCyberwares)
            {
                Cyberware objCyberware = objItem.Key;
                int intCyberwaresCount = objItem.Value;
                if (!string.IsNullOrEmpty(objCyberware.Location))
                {
                    intCyberwaresCount = Math.Min(intCyberwaresCount, _objCharacter.Cyberware.DeepCount(x => x.Children, x => x.Name == objCyberware.Name && x.Extra == objCyberware.Extra && x.Location != objCyberware.Location && x.IsModularCurrentlyEquipped));
                }
                if (intCyberwaresCount > 0)
                {
                    foreach (Cyberware objLoopCyberware in _objCharacter.Cyberware.DeepWhere(x => x.Children, x => x.Name == objCyberware.Name && x.Extra == objCyberware.Extra && x.IsModularCurrentlyEquipped))
                    {
                        if (intCyberwaresCount % 2 == 0)
                        {
                            if (!string.IsNullOrEmpty(objCyberware.Forced) && objCyberware.Forced != "Right" && objCyberware.Forced != "Left")
                                ImprovementManager.ForcedValue = objCyberware.Forced;
                            ImprovementManager.CreateImprovements(_objCharacter, objLoopCyberware.SourceType, objLoopCyberware.InternalId, objLoopCyberware.PairBonus, false, objLoopCyberware.Rating, objLoopCyberware.DisplayNameShort);
                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue) && string.IsNullOrEmpty(objCyberware.Extra))
                                objCyberware.Extra = ImprovementManager.SelectedValue;
                            TreeNode objNode = CommonFunctions.FindNode(objLoopCyberware.InternalId, treCyberware);
                            if (objNode != null)
                                objNode.Text = objCyberware.DisplayName;
                        }
                        intCyberwaresCount -= 1;
                        if (intCyberwaresCount <= 0)
                            break;
                    }
                }
            }

            // Refresh Armors.
            foreach (Armor objArmor in _objCharacter.Armor)
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objArmor.InternalId))
                    continue;
                XmlNode objNode = objArmor.MyXmlNode;
                if (objNode != null)
                {
                    objArmor.Bonus = objNode["bonus"];
                    if (objArmor.Bonus != null)
                    {
                        if (objArmor.Equipped)
                        {
                            ImprovementManager.ForcedValue = objArmor.Extra;
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.Bonus, false, 1, objArmor.DisplayNameShort);
                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            {
                                objArmor.Extra = ImprovementManager.SelectedValue;

                                TreeNode objArmorNode = CommonFunctions.FindNode(objArmor.InternalId, treArmor);
                                if (objArmorNode != null)
                                    objArmorNode.Text = objArmor.DisplayName;
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objArmor.DisplayName + "\n";
                }

                foreach (ArmorMod objMod in objArmor.ArmorMods)
                {
                    // We're only re-apply improvements a list of items, not all of them
                    if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objMod.InternalId))
                        continue;
                    XmlNode objChild = objMod.MyXmlNode;

                    if (objChild != null)
                    {
                        objMod.Bonus = objChild["bonus"];
                        if (objMod.Bonus != null)
                        {
                            if (objMod.Equipped)
                            {
                                ImprovementManager.ForcedValue = objMod.Extra;
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, 1, objMod.DisplayNameShort);
                                if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                {
                                    objMod.Extra = ImprovementManager.SelectedValue;

                                    TreeNode objPluginNode = CommonFunctions.FindNode(objMod.InternalId, treArmor);
                                    if (objPluginNode != null)
                                        objPluginNode.Text = objMod.DisplayName;
                                }
                            }
                        }
                    }
                    else
                    {
                        strOutdatedItems += objMod.DisplayName + "\n";
                    }
                    foreach (Gear objGear in objMod.Gear)
                    {
                        CommonFunctions.ReaddGearImprovements(_objCharacter, objGear, treArmor, ref strOutdatedItems, lstInternalIdFilter);
                    }
                }

                foreach (Gear objGear in objArmor.Gear)
                {
                    CommonFunctions.ReaddGearImprovements(_objCharacter, objGear, treArmor, ref strOutdatedItems, lstInternalIdFilter);
                }
            }

            // Refresh Gear.
            foreach (Gear objGear in _objCharacter.Gear)
            {
                CommonFunctions.ReaddGearImprovements(_objCharacter, objGear, treGear, ref strOutdatedItems, lstInternalIdFilter);
            }

            // Refresh Weapons Gear
            for (int i = 0; i < _objCharacter.Weapons.Count; i++)
            {
                Weapon objWeapon = _objCharacter.Weapons[i];
                foreach (WeaponAccessory objAccessory in objWeapon.WeaponAccessories)
                {
                    foreach (Gear objGear in objAccessory.Gear)
                    {
                        CommonFunctions.ReaddGearImprovements(_objCharacter, objGear, treWeapons, ref strOutdatedItems, lstInternalIdFilter);
                    }
                }
            }

            _blnReapplyImprovements = false;

            // If the status of any Character Event flags has changed, manually trigger those events.
            if (blnMAGEnabled != _objCharacter.MAGEnabled)
                objCharacter_MAGEnabledChanged(this);
            if (blnRESEnabled != _objCharacter.RESEnabled)
                objCharacter_RESEnabledChanged(this);
            if (blnDEPEnabled != _objCharacter.DEPEnabled)
                objCharacter_DEPEnabledChanged(this);
            if (blnFriendsInHighPlaces != _objCharacter.FriendsInHighPlaces)
                objCharacter_FriendsInHighPlacesChanged(this);

            RefreshQualities(treQualities, cmsQuality, true);
            treQualities.SortCustom();
            nudQualityLevel_UpdateValue(null);
            UpdateMentorSpirits();
            RefreshMartialArts();
            RefreshAIPrograms();
            RefreshLimitModifiers();
            RefreshSpells(treSpells, cmsSpell, _objCharacter);
            PopulateGearList();
            RefreshContacts();
            if (treCyberware.SelectedNode != null)
                RefreshSelectedCyberware();
            if (treArmor.SelectedNode != null)
                RefreshSelectedArmor();
            if (treGear.SelectedNode != null)
                RefreshSelectedGear();
            if (treLifestyles.SelectedNode != null)
                RefreshSelectedLifestyle();
            if (treVehicles.SelectedNode != null)
                RefreshSelectedVehicle();
            if (treWeapons.SelectedNode != null)
                RefreshSelectedWeapon();

            ScheduleCharacterUpdate();
            // Immediately call character update because it re-applies essence loss improvements
            UpdateCharacterInfo();

            Cursor = Cursors.Default;

            if (!string.IsNullOrEmpty(strOutdatedItems))
            {
                strOutdatedItems = LanguageManager.GetString("Message_ReapplyImprovementsFoundOutdatedItems_Top") + strOutdatedItems + LanguageManager.GetString("Message_ReapplyImprovementsFoundOutdatedItems_Bottom");
                MessageBox.Show(strOutdatedItems, LanguageManager.GetString("MessageTitle_ConfirmReapplyImprovements"), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void mnuEditCopy_Click(object sender, EventArgs e)
        {
            if (tabCharacterTabs.SelectedTab == tabStreetGear)
            {
                // Lifestyle Tab.
                if (tabStreetGearTabs.SelectedTab == tabLifestyle)
                {
                    // Copy the selected Lifestyle.
                    Lifestyle objCopyLifestyle = CommonFunctions.FindByIdWithNameCheck(treLifestyles.SelectedNode.Tag.ToString(), _objCharacter.Lifestyles);

                    if (objCopyLifestyle == null)
                        return;

                    MemoryStream objStream = new MemoryStream();
                    XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                    objWriter.Formatting = Formatting.Indented;
                    objWriter.Indentation = 1;
                    objWriter.IndentChar = '\t';

                    objWriter.WriteStartDocument();

                    // </characters>
                    objWriter.WriteStartElement("character");

                    objCopyLifestyle.Save(objWriter);

                    // </characters>
                    objWriter.WriteEndElement();

                    // Finish the document and flush the Writer and Stream.
                    objWriter.WriteEndDocument();
                    objWriter.Flush();

                    // Read the stream.
                    StreamReader objReader = new StreamReader(objStream);
                    objStream.Position = 0;
                    XmlDocument objCharacterXML = new XmlDocument();

                    // Put the stream into an XmlDocument.
                    string strXML = objReader.ReadToEnd();
                    objCharacterXML.LoadXml(strXML);

                    objWriter.Close();

                    GlobalOptions.Clipboard = objCharacterXML;
                    GlobalOptions.ClipboardContentType = ClipboardContentType.Lifestyle;
                    //Clipboard.SetText(objCharacterXML.OuterXml);
                }

                // Armor Tab.
                else if (tabStreetGearTabs.SelectedTab == tabArmor)
                {
                    // Copy the selected Armor.
                    Armor objCopyArmor = CommonFunctions.FindByIdWithNameCheck(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);

                    if (objCopyArmor != null)
                    {
                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                        objWriter.Formatting = Formatting.Indented;
                        objWriter.Indentation = 1;
                        objWriter.IndentChar = '\t';

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        objCopyArmor.Save(objWriter);

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Armor;

                        RefreshPasteStatus();
                        return;
                    }

                    // Attempt to copy Gear.
                    Gear objCopyGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);

                    if (objCopyGear != null)
                    {
                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                        objWriter.Formatting = Formatting.Indented;
                        objWriter.Indentation = 1;
                        objWriter.IndentChar = '\t';

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        if (objCopyGear.GetType() == typeof(Commlink))
                        {
                            Commlink objCommlink = (Commlink)objCopyGear;
                            objCommlink.Save(objWriter);
                            GlobalOptions.ClipboardContentType = ClipboardContentType.Commlink;
                        }
                        else
                        {
                            objCopyGear.Save(objWriter);
                            GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;
                        }

                        if (objCopyGear.WeaponID != Guid.Empty.ToString())
                        {
                            // <weapons>
                            objWriter.WriteStartElement("weapons");
                            // Copy any Weapon that comes with the Gear.
                            foreach (Weapon objCopyWeapon in _objCharacter.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                            {
                                objCopyWeapon.Save(objWriter);
                            }
                            objWriter.WriteEndElement();
                        }

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;

                        RefreshPasteStatus();
                        return;
                    }
                }

                // Weapons Tab.
                else if (tabStreetGearTabs.SelectedTab == tabWeapons)
                {
                    // Copy the selected Weapon.
                    Weapon objCopyWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);

                    if (objCopyWeapon != null)
                    {
                        // Do not let the user copy Gear or Cyberware Weapons.
                        if (objCopyWeapon.Category == "Gear" || objCopyWeapon.Cyberware)
                            return;

                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                        objWriter.Formatting = Formatting.Indented;
                        objWriter.Indentation = 1;
                        objWriter.IndentChar = '\t';

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        objCopyWeapon.Save(objWriter);

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Weapon;

                        RefreshPasteStatus();
                        return;
                    }

                    Gear objCopyGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);

                    if (objCopyGear != null)
                    {
                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                        objWriter.Formatting = Formatting.Indented;
                        objWriter.Indentation = 1;
                        objWriter.IndentChar = '\t';

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        if (objCopyGear.GetType() == typeof(Commlink))
                        {
                            Commlink objCommlink = (Commlink)objCopyGear;
                            objCommlink.Save(objWriter);
                            GlobalOptions.ClipboardContentType = ClipboardContentType.Commlink;
                        }
                        else
                        {
                            objCopyGear.Save(objWriter);
                            GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;
                        }

                        if (objCopyGear.WeaponID != Guid.Empty.ToString())
                        {
                            // <weapons>
                            objWriter.WriteStartElement("weapons");
                            // Copy any Weapon that comes with the Gear.
                            foreach (Weapon objCopyGearWeapon in _objCharacter.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                            {
                                objCopyGearWeapon.Save(objWriter);
                            }
                            objWriter.WriteEndElement();
                        }

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;

                        RefreshPasteStatus();
                        return;
                    }
                }

                // Gear Tab.
                else if (tabStreetGearTabs.SelectedTab == tabGear)
                {
                    // Copy the selected Gear.
                    Gear objCopyGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);

                    if (objCopyGear == null)
                        return;

                    MemoryStream objStream = new MemoryStream();
                    XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                    objWriter.Formatting = Formatting.Indented;
                    objWriter.Indentation = 1;
                    objWriter.IndentChar = '\t';

                    objWriter.WriteStartDocument();

                    // </characters>
                    objWriter.WriteStartElement("character");

                    if (objCopyGear.GetType() == typeof(Commlink))
                    {
                        Commlink objCommlink = (Commlink)objCopyGear;
                        objCommlink.Save(objWriter);
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Commlink;
                    }
                    else
                    {
                        objCopyGear.Save(objWriter);
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;
                    }

                    if (objCopyGear.WeaponID != Guid.Empty.ToString())
                    {
                        // <weapons>
                        objWriter.WriteStartElement("weapons");
                        // Copy any Weapon that comes with the Gear.
                        foreach (Weapon objCopyWeapon in _objCharacter.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                        {
                            objCopyWeapon.Save(objWriter);
                        }
                        objWriter.WriteEndElement();
                    }

                    // </characters>
                    objWriter.WriteEndElement();

                    // Finish the document and flush the Writer and Stream.
                    objWriter.WriteEndDocument();
                    objWriter.Flush();

                    // Read the stream.
                    StreamReader objReader = new StreamReader(objStream);
                    objStream.Position = 0;
                    XmlDocument objCharacterXML = new XmlDocument();

                    // Put the stream into an XmlDocument.
                    string strXML = objReader.ReadToEnd();
                    objCharacterXML.LoadXml(strXML);

                    objWriter.Close();

                    GlobalOptions.Clipboard = objCharacterXML;
                    //Clipboard.SetText(objCharacterXML.OuterXml);
                }
            }

            // Vehicles Tab.
            else if (tabCharacterTabs.SelectedTab == tabVehicles)
            {
                if (treVehicles.SelectedNode.Level == 1)
                {
                    // Copy the selected Vehicle.
                    Vehicle objCopyVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

                    MemoryStream objStream = new MemoryStream();
                    XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                    objWriter.Formatting = Formatting.Indented;
                    objWriter.Indentation = 1;
                    objWriter.IndentChar = '\t';

                    objWriter.WriteStartDocument();

                    // </characters>
                    objWriter.WriteStartElement("character");

                    objCopyVehicle.Save(objWriter);

                    // </characters>
                    objWriter.WriteEndElement();

                    // Finish the document and flush the Writer and Stream.
                    objWriter.WriteEndDocument();
                    objWriter.Flush();

                    // Read the stream.
                    StreamReader objReader = new StreamReader(objStream);
                    objStream.Position = 0;
                    XmlDocument objCharacterXML = new XmlDocument();

                    // Put the stream into an XmlDocument.
                    string strXML = objReader.ReadToEnd();
                    objCharacterXML.LoadXml(strXML);

                    objWriter.Close();

                    GlobalOptions.Clipboard = objCharacterXML;
                    GlobalOptions.ClipboardContentType = ClipboardContentType.Vehicle;
                    //Clipboard.SetText(objCharacterXML.OuterXml);
                }
                else
                {
                    Gear objCopyGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

                    if (objCopyGear != null)
                    {
                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                        objWriter.Formatting = Formatting.Indented;
                        objWriter.Indentation = 1;
                        objWriter.IndentChar = '\t';

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        if (objCopyGear.GetType() == typeof(Commlink))
                        {
                            Commlink objCommlink = (Commlink)objCopyGear;
                            objCommlink.Save(objWriter);
                            GlobalOptions.ClipboardContentType = ClipboardContentType.Commlink;
                        }
                        else
                        {
                            objCopyGear.Save(objWriter);
                            GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;
                        }

                        if (objCopyGear.WeaponID != Guid.Empty.ToString())
                        {
                            // <weapons>
                            objWriter.WriteStartElement("weapons");
                            // Copy any Weapon that comes with the Gear.
                            foreach (Weapon objCopyWeapon in _objCharacter.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                            {
                                objCopyWeapon.Save(objWriter);
                            }
                            objWriter.WriteEndElement();
                        }

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;

                        RefreshPasteStatus();
                        return;
                    }

                    foreach (Vehicle objCharacterVehicle in _objCharacter.Vehicles)
                    {
                        foreach (VehicleMod objMod in objCharacterVehicle.Mods)
                        {
                            Weapon objCopyWeapon = CommonFunctions.DeepFindById(treVehicles.SelectedNode.Tag.ToString(), objMod.Weapons);
                            if (objCopyWeapon != null)
                            {
                                // Do not let the user copy Gear or Cyberware Weapons.
                                if (objCopyWeapon.Category == "Gear" || objCopyWeapon.Cyberware)
                                    return;

                                MemoryStream objStream = new MemoryStream();
                                XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode);
                                objWriter.Formatting = Formatting.Indented;
                                objWriter.Indentation = 1;
                                objWriter.IndentChar = '\t';

                                objWriter.WriteStartDocument();

                                // </characters>
                                objWriter.WriteStartElement("character");

                                objCopyWeapon.Save(objWriter);

                                // </characters>
                                objWriter.WriteEndElement();

                                // Finish the document and flush the Writer and Stream.
                                objWriter.WriteEndDocument();
                                objWriter.Flush();

                                // Read the stream.
                                StreamReader objReader = new StreamReader(objStream);
                                objStream.Position = 0;
                                XmlDocument objCharacterXML = new XmlDocument();

                                // Put the stream into an XmlDocument.
                                string strXML = objReader.ReadToEnd();
                                objCharacterXML.LoadXml(strXML);

                                objWriter.Close();

                                GlobalOptions.Clipboard = objCharacterXML;
                                GlobalOptions.ClipboardContentType = ClipboardContentType.Weapon;

                                RefreshPasteStatus();
                                return;
                            }
                        }
                    }
                }
            }
            RefreshPasteStatus();
        }

        private void mnuEditPaste_Click(object sender, EventArgs e)
        {
            if (tabCharacterTabs.SelectedTab == tabStreetGear)
            {
                // Lifestyle Tab.
                if (tabStreetGearTabs.SelectedTab == tabLifestyle)
                {
                    // Paste Lifestyle.
                    Lifestyle objLifestyle = new Lifestyle(_objCharacter);
                    XmlNode objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/lifestyle");
                    if (objXmlNode != null)
                    {
                        objLifestyle.Load(objXmlNode, true);
                        // Reset the number of months back to 1 since 0 isn't valid in Create Mode.
                        objLifestyle.Months = 1;

                        _objCharacter.Lifestyles.Add(objLifestyle);

                        TreeNode objLifestyleNode = new TreeNode();
                        objLifestyleNode.Text = objLifestyle.DisplayName;
                        objLifestyleNode.Tag = objLifestyle.InternalId;
                        if (objLifestyle.StyleType.ToString() != "Standard")
                            objLifestyleNode.ContextMenuStrip = cmsAdvancedLifestyle;
                        else
                            objLifestyleNode.ContextMenuStrip = cmsLifestyleNotes;
                        if (!string.IsNullOrEmpty(objLifestyle.Notes))
                            objLifestyleNode.ForeColor = Color.SaddleBrown;
                        objLifestyleNode.ToolTipText = CommonFunctions.WordWrap(objLifestyle.Notes, 100);
                        treLifestyles.Nodes[0].Nodes.Add(objLifestyleNode);

                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                        return;
                    }
                }

                // Armor Tab.
                if (tabStreetGearTabs.SelectedTab == tabArmor)
                {
                    // Paste Armor.
                    Armor objArmor = new Armor(_objCharacter);
                    XmlNode objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/armor");
                    if (objXmlNode != null)
                    {
                        objArmor.Load(objXmlNode, true);

                        _objCharacter.Armor.Add(objArmor);

                        CommonFunctions.CreateArmorTreeNode(objArmor, treArmor, cmsArmor, cmsArmorMod, cmsArmorGear);

                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                        return;
                    }

                    // Paste Gear.
                    Gear objGear = null;
                    objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/gear");

                    if (objXmlNode != null)
                    {
                        if (objXmlNode["iscommlink"]?.InnerText == System.Boolean.TrueString || (objXmlNode["category"].InnerText == "Commlinks" ||
                        objXmlNode["category"].InnerText == "Commlink Accessories" || objXmlNode["category"].InnerText == "Cyberdecks" || objXmlNode["category"].InnerText == "Rigger Command Consoles"))
                        {
                            Gear objCommlink = new Commlink(_objCharacter);
                            objCommlink.Load(objXmlNode, true);
                            objGear = objCommlink;
                        }
                        else
                        {
                            Gear objNewGear = new Gear(_objCharacter);
                            objNewGear.Load(objXmlNode, true);
                            objGear = objNewGear;
                        }

                        foreach (Armor objCharacterArmor in _objCharacter.Armor)
                        {
                            if (objCharacterArmor.InternalId == treArmor.SelectedNode.Tag.ToString())
                            {
                                objCharacterArmor.Gear.Add(objGear);
                                TreeNode objNode = new TreeNode();
                                objNode.Text = objGear.DisplayName;
                                objNode.Tag = objGear.InternalId;
                                objNode.ContextMenuStrip = cmsArmorGear;
                                if (!string.IsNullOrEmpty(objGear.Notes))
                                    objNode.ForeColor = Color.SaddleBrown;
                                else if (objGear.IncludedInParent)
                                    objNode.ForeColor = SystemColors.GrayText;

                                CommonFunctions.BuildGearTree(objGear, objNode, cmsArmorGear);

                                treArmor.SelectedNode.Nodes.Add(objNode);
                                treArmor.SelectedNode.Expand();
                            }
                        }

                        // Add any Weapons that come with the Gear.
                        XmlNodeList objXmlNodeList = GlobalOptions.Clipboard.SelectNodes("/character/weapons/weapon");
                        if (objXmlNodeList != null)
                        {
                            foreach (XmlNode objLoopNode in objXmlNodeList)
                            {
                                Weapon objWeapon = new Weapon(_objCharacter);
                                objWeapon.Load(objLoopNode, true);
                                _objCharacter.Weapons.Add(objWeapon);
                                objGear.WeaponID = objWeapon.InternalId;
                                CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
                            }
                        }

                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                        return;
                    }
                }

                // Weapons Tab.
                if (tabStreetGearTabs.SelectedTab == tabWeapons)
                {
                    // Paste Gear into a Weapon Accessory.
                    Gear objGear = null;
                    XmlNode objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/gear");
                    if (objXmlNode != null)
                    {
                        if (objXmlNode["iscommlink"]?.InnerText == System.Boolean.TrueString || (objXmlNode["category"].InnerText == "Commlinks" ||
                        objXmlNode["category"].InnerText == "Commlink Accessories" || objXmlNode["category"].InnerText == "Cyberdecks" || objXmlNode["category"].InnerText == "Rigger Command Consoles"))
                        {
                            Gear objCommlink = new Commlink(_objCharacter);
                            objCommlink.Load(objXmlNode, true);
                            objGear = objCommlink;
                        }
                        else
                        {
                            Gear objNewGear = new Gear(_objCharacter);
                            objNewGear.Load(objXmlNode, true);
                            objGear = objNewGear;
                        }

                        objGear.Parent = null;

                        // Make sure that a Weapon Accessory is selected and that it allows Gear of the item's Category.
                        WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                        bool blnAllowPaste = false;
                        if (objAccessory.AllowGear != null)
                        {
                            foreach (XmlNode objAllowed in objAccessory.AllowGear.SelectNodes("gearcategory"))
                            {
                                if (objAllowed.InnerText == objGear.Category)
                                {
                                    blnAllowPaste = true;
                                    break;
                                }
                            }
                        }
                        if (blnAllowPaste)
                        {
                            objAccessory.Gear.Add(objGear);
                            TreeNode objNode = new TreeNode();
                            objNode.Text = objGear.DisplayName;
                            objNode.Tag = objGear.InternalId;
                            objNode.ContextMenuStrip = cmsWeaponAccessoryGear;
                            if (!string.IsNullOrEmpty(objGear.Notes))
                                objNode.ForeColor = Color.SaddleBrown;
                            else if (objGear.IncludedInParent)
                                objNode.ForeColor = SystemColors.GrayText;

                            CommonFunctions.BuildGearTree(objGear, objNode, cmsWeaponAccessoryGear);

                            treWeapons.SelectedNode.Nodes.Add(objNode);
                            treWeapons.SelectedNode.Expand();

                            // Add any Weapons that come with the Gear.
                            XmlNodeList objXmlNodeList = GlobalOptions.Clipboard.SelectNodes("/character/weapons/weapon");
                            if (objXmlNodeList != null)
                            {
                                foreach (XmlNode objLoopNode in objXmlNodeList)
                                {
                                    Weapon objGearWeapon = new Weapon(_objCharacter);
                                    objGearWeapon.Load(objLoopNode, true);
                                    _objCharacter.Weapons.Add(objGearWeapon);
                                    objGear.WeaponID = objGearWeapon.InternalId;
                                    CommonFunctions.CreateWeaponTreeNode(objGearWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
                                }
                            }

                            ScheduleCharacterUpdate();
                            _blnIsDirty = true;
                            UpdateWindowTitle();
                            return;
                        }
                    }

                    // Paste Weapon.
                    Weapon objWeapon = new Weapon(_objCharacter);
                    objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/weapon");
                    if (objXmlNode != null)
                    {
                        objWeapon.Load(objXmlNode, true);
                        objWeapon.VehicleMounted = false;

                        _objCharacter.Weapons.Add(objWeapon);

                        CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);

                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                        return;
                    }
                }

                // Gear Tab.
                if (tabStreetGearTabs.SelectedTab == tabGear)
                {
                    // Paste Gear.
                    Gear objGear = null;
                    XmlNode objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/gear");
                    if (objXmlNode != null)
                    {
                        if (objXmlNode["iscommlink"]?.InnerText == System.Boolean.TrueString || (objXmlNode["category"].InnerText == "Commlinks" ||
                        objXmlNode["category"].InnerText == "Commlink Accessories" || objXmlNode["category"].InnerText == "Cyberdecks" || objXmlNode["category"].InnerText == "Rigger Command Consoles"))
                        {
                            Gear objCommlink = new Commlink(_objCharacter);
                            objCommlink.Load(objXmlNode, true);
                            objGear = objCommlink;
                        }
                        else
                        {
                            Gear objNewGear = new Gear(_objCharacter);
                            objNewGear.Load(objXmlNode, true);
                            objGear = objNewGear;
                        }
                        objGear.Parent = null;
                        _objCharacter.Gear.Add(objGear);

                        TreeNode objNode = new TreeNode();
                        objNode.Text = objGear.DisplayName;
                        objNode.Tag = objGear.InternalId;
                        if (!string.IsNullOrEmpty(objGear.Notes))
                            objNode.ForeColor = Color.SaddleBrown;
                        else if (objGear.IncludedInParent)
                            objNode.ForeColor = SystemColors.GrayText;
                        objNode.ToolTipText = CommonFunctions.WordWrap(objGear.Notes, 100);

                        CommonFunctions.BuildGearTree(objGear, objNode, cmsGear);

                        objNode.ContextMenuStrip = cmsGear;

                        TreeNode objParent = new TreeNode();
                        if (string.IsNullOrEmpty(objGear.Location))
                            objParent = treGear.Nodes[0];
                        else
                        {
                            foreach (TreeNode objFind in treGear.Nodes)
                            {
                                if (objFind.Text == objGear.Location)
                                {
                                    objParent = objFind;
                                    break;
                                }
                            }
                        }
                        objParent.Nodes.Add(objNode);
                        objParent.Expand();

                        // Add any Weapons that come with the Gear.
                        XmlNodeList objXmlNodeList = GlobalOptions.Clipboard.SelectNodes("/character/weapons/weapon");
                        if (objXmlNodeList != null)
                        {
                            foreach (XmlNode objLoopNode in objXmlNodeList)
                            {
                                Weapon objWeapon = new Weapon(_objCharacter);
                                objWeapon.Load(objLoopNode, true);
                                _objCharacter.Weapons.Add(objWeapon);
                                objGear.WeaponID = objWeapon.InternalId;
                                CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
                            }
                        }

                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                        return;
                    }
                }
            }

            // Vehicles Tab.
            if (tabCharacterTabs.SelectedTab == tabVehicles)
            {
                // Paste Vehicle.
                Vehicle objVehicle = new Vehicle(_objCharacter);
                XmlNode objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/vehicle");
                if (objXmlNode != null)
                {
                    objVehicle.Load(objXmlNode, true);

                    _objCharacter.Vehicles.Add(objVehicle);

                    CommonFunctions.CreateVehicleTreeNode(objVehicle, treVehicles, cmsVehicle, cmsVehicleLocation, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsVehicleGear, cmsWeaponMount);

                    ScheduleCharacterUpdate();
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                    return;
                }

                // Paste Gear.
                Gear objGear = null;
                objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/gear");

                if (objXmlNode != null)
                {
                    if (objXmlNode["iscommlink"]?.InnerText == System.Boolean.TrueString || (objXmlNode["category"].InnerText == "Commlinks" ||
                        objXmlNode["category"].InnerText == "Commlink Accessories" || objXmlNode["category"].InnerText == "Cyberdecks" || objXmlNode["category"].InnerText == "Rigger Command Consoles"))
                    {
                        Gear objCommlink = new Commlink(_objCharacter);
                        objCommlink.Load(objXmlNode, true);
                        objGear = objCommlink;
                    }
                    else
                    {
                        Gear objNewGear = new Gear(_objCharacter);
                        objNewGear.Load(objXmlNode, true);
                        objGear = objNewGear;
                    }

                    // Paste the Gear into a Vehicle.
                    foreach (Vehicle objCharacterVehicle in _objCharacter.Vehicles)
                    {
                        if (objCharacterVehicle.InternalId == treVehicles.SelectedNode.Tag.ToString())
                        {
                            objCharacterVehicle.Gear.Add(objGear);
                            TreeNode objNode = new TreeNode();
                            objNode.Text = objGear.DisplayName;
                            objNode.Tag = objGear.InternalId;
                            objNode.ContextMenuStrip = cmsVehicleGear;
                            objVehicle = objCharacterVehicle;
                            if (!string.IsNullOrEmpty(objGear.Notes))
                                objNode.ForeColor = Color.SaddleBrown;
                            else if (objGear.IncludedInParent)
                                objNode.ForeColor = SystemColors.GrayText;

                            CommonFunctions.BuildGearTree(objGear, objNode, cmsVehicleGear);

                            treVehicles.SelectedNode.Nodes.Add(objNode);
                            treVehicles.SelectedNode.Expand();
                        }
                    }

                    // Paste the Gear into a Vehicle's Gear.
                    Vehicle objTempVehicle = objVehicle;
                    WeaponAccessory objTempAccessory = null;
                    Cyberware objTempCyberware = null;
                    Gear objVehicleGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objVehicle, out objTempAccessory, out objTempCyberware);
                    if (objVehicle == null)
                        objVehicle = objTempVehicle;
                    if (objVehicleGear != null)
                    {
                        objVehicleGear.Children.Add(objGear);
                        objGear.Parent = objVehicleGear;
                        Commlink objCommlink = objVehicleGear as Commlink;
                        if (objCommlink?.CanSwapAttributes == true)
                        {
                            objCommlink.RefreshCyberdeckArray();
                        }
                        TreeNode objNode = new TreeNode();
                        objNode.Text = objGear.DisplayName;
                        objNode.Tag = objGear.InternalId;
                        objNode.ContextMenuStrip = cmsVehicleGear;
                        if (!string.IsNullOrEmpty(objGear.Notes))
                            objNode.ForeColor = Color.SaddleBrown;
                        else if (objGear.IncludedInParent)
                            objNode.ForeColor = SystemColors.GrayText;

                        CommonFunctions.BuildGearTree(objGear, objNode, cmsVehicleGear);

                        treVehicles.SelectedNode.Nodes.Add(objNode);
                        treVehicles.SelectedNode.Expand();
                    }

                    ScheduleCharacterUpdate();
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                    return;
                }

                // Paste Weapon.
                Weapon objWeapon = new Weapon(_objCharacter);
                objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/weapon");
                if (objXmlNode != null)
                {
                    objWeapon.Load(objXmlNode, true);
                    objWeapon.VehicleMounted = true;

                    // Weapons can only be added to Vehicle Mods that support them (Weapon Mounts and Mechanical Arms).
                    foreach (Vehicle objCharacterVehicle in _objCharacter.Vehicles)
                    {
                        foreach (VehicleMod objVehicleMod in objCharacterVehicle.Mods)
                        {
                            if (objVehicleMod.InternalId == treVehicles.SelectedNode.Tag.ToString())
                            {
                                // TODO: Make this not depend on string names
                                if (objVehicleMod.Name.StartsWith("Weapon Mount") || objVehicleMod.Name.StartsWith("Heavy Weapon Mount") || objVehicleMod.Name.StartsWith("Mechanical Arm") || !string.IsNullOrEmpty(objVehicleMod.WeaponMountCategories))
                                {
                                    objVehicleMod.Weapons.Add(objWeapon);

                                    CommonFunctions.CreateWeaponTreeNode(objWeapon, treVehicles.SelectedNode, cmsVehicleWeapon, cmsVehicleWeaponAccessory, null);

                                    ScheduleCharacterUpdate();
                                    _blnIsDirty = true;
                                    UpdateWindowTitle();
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        }

        private void tsbCopy_Click(object sender, EventArgs e)
        {
            mnuEditCopy_Click(sender, e);
        }

        private void tsbPaste_Click(object sender, EventArgs e)
        {
            mnuEditPaste_Click(sender, e);
        }

        private void mnuSpecialBPAvailLimit_Click(object sender, EventArgs e)
        {
            frmSelectBuildMethod frmPickBP = new frmSelectBuildMethod(_objCharacter, true);
            frmPickBP.ShowDialog(this);

            if (frmPickBP.DialogResult == DialogResult.Cancel)
                ScheduleCharacterUpdate();
        }

        private void mnuSpecialConvertToFreeSprite_Click(object sender, EventArgs e)
        {
            XmlDocument objXmlDocument = XmlManager.Load("critterpowers.xml");
            XmlNode objXmlPower = objXmlDocument.SelectSingleNode("/chummer/powers/power[name = \"Denial\"]");
            TreeNode objNode = new TreeNode();
            CritterPower objPower = new CritterPower(_objCharacter);
            objPower.Create(objXmlPower, objNode);
            objPower.CountTowardsLimit = false;
            objNode.ContextMenuStrip = cmsCritterPowers;
            if (objPower.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.CritterPowers.Add(objPower);

            treCritterPowers.Nodes[0].Nodes.Add(objNode);
            treCritterPowers.Nodes[0].Expand();

            _objCharacter.MetatypeCategory = "Free Sprite";
            mnuSpecialConvertToFreeSprite.Visible = false;

            treCritterPowers.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region CharacterAttribute Events
        private void nudMysticAdeptMAGMagician_ValueChanged(object sender, EventArgs e)
        {
            _objCharacter.MysticAdeptPowerPoints = decimal.ToInt32(nudMysticAdeptMAGMagician.Value);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region ContactControl Events
        private void objContact_ConnectionRatingChanged(Object sender)
        {
            // Handle the ConnectionRatingChanged Event for the ContactControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void ObjContactGroupStatusChanged(Object sender)
        {
            // Handle the GroupStatusChanged Event for the ContactControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objContact_OtherCostChanged(Object sender)
        {
            //Handle any other kind of change that changes contact cost
            //mostly a free contact but a few details in run faster changes it too
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objContact_LoyaltyRatingChanged(Object sender)
        {
            // Handle the LoyaltyRatingChanged Event for the ContactControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objContact_DeleteContact(Object sender)
        {
            objContact_DeleteContact(sender, false);
        }

        private void objContact_DeleteContact(Object sender, bool force)
        {
            if (!force && !CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteContact")))
                return;

            // Handle the DeleteContact Event for the ContactControl object.
            ContactControl objSender = (ContactControl)sender;
            bool blnFound = false;
            foreach (ContactControl objContactControl in panContacts.Controls)
            {
                // Set the flag to show that we have found the Contact.
                if (objContactControl == objSender)
                {
                    blnFound = true;
                    _objCharacter.Contacts.Remove(objContactControl.ContactObject);
                }

                // Once the Contact has been found, all of the other ContactControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (blnFound)
                {

                    objContactControl.Top -= 25;
                }
            }
            // Remove the ContactControl that raised the Event.
            panContacts.Controls.Remove(objSender);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objContact_FileNameChanged(Object sender)
        {
            // Handle the FileNameChanged Event for the ContactControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region EnemyControl Events
        private void objEnemy_ConnectionRatingChanged(Object sender)
        {
            string strMode = "Connection";
            objEnemy_Changed(sender, strMode);
        }

        private void objEnemy_LoyaltyRatingChanged(Object sender)
        {
            string strMode = "Loyalty";
            objEnemy_Changed(sender, strMode);
        }

        private void objEnemy_GroupStatusChanged(Object sender)
        {
            objEnemy_Changed(sender);
        }

        private void objEnemy_FreeStatusChanged(Object sender)
        {
            objEnemy_Changed(sender);
        }

        private void objEnemy_Changed(Object sender, string strMode = null)
        {
            // Handle the ConnectionRatingChanged Event for the ContactControl object.
            int intNegativeQualityBP = 0;
            // Calculate the BP used for Negative Qualities.
            foreach (Quality objQuality in _objCharacter.Qualities)
            {
                if (objQuality.Type == QualityType.Negative && objQuality.ContributeToLimit)
                    intNegativeQualityBP += objQuality.BP;
            }
            // Include the amount of free Negative Qualities from Improvements.
            intNegativeQualityBP -= ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeNegativeQualities);

            // Adjust for Karma cost multiplier.
            intNegativeQualityBP *= _objOptions.KarmaQuality;

            // Find current enemy BP total
            int intBPUsed = 0;
            foreach (ContactControl objContactControl in panEnemies.Controls)
            {
                if (!objContactControl.Free) {
                    intBPUsed -= (objContactControl.ConnectionRating + objContactControl.LoyaltyRating) * _objOptions.KarmaEnemy;
                }
            }

            int intEnemyMax = 0;
            int intQualityMax = 0;
            string strQualityPoints = string.Empty;
            string strEnemyPoints = string.Empty;
            intEnemyMax = _objCharacter.GameplayOptionQualityLimit;
            intQualityMax = _objCharacter.GameplayOptionQualityLimit;
            strEnemyPoints = intEnemyMax.ToString() + " " + LanguageManager.GetString("String_Karma");
            strQualityPoints = intQualityMax.ToString() + " " + LanguageManager.GetString("String_Karma");

            if (intBPUsed < (intEnemyMax * -1) && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_EnemyLimit").Replace("{0}", strEnemyPoints), LanguageManager.GetString("MessageTitle_EnemyLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                ContactControl objSender = (ContactControl)sender;
                int intTotal = (intEnemyMax*-1) - intBPUsed;
                switch (strMode)
                {
                    case "Connection":
                        objSender.ConnectionRating -= intTotal;
                        break;
                    case "Loyalty":
                        objSender.LoyaltyRating -= intTotal;
                        break;
                }
                return;
            }

            if (!_objOptions.ExceedNegativeQualities)
            {
                if (intBPUsed + intNegativeQualityBP < (intQualityMax * -1) && !_objCharacter.IgnoreRules)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NegativeQualityLimit").Replace("{0}", strQualityPoints), LanguageManager.GetString("MessageTitle_NegativeQualityLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    ContactControl objSender = (ContactControl)sender;
                    switch (strMode)
                    {
                        case "Connection":
                            objSender.ConnectionRating -= (((intQualityMax*-1) - (intBPUsed + intNegativeQualityBP))/
                                                           _objOptions.KarmaQuality);
                            break;
                        case "Loyalty":
                            objSender.LoyaltyRating -= (((intQualityMax * -1) - (intBPUsed + intNegativeQualityBP)) /
                                                        _objOptions.KarmaQuality);
                            break;
                    }
                }
            }

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objEnemy_DeleteContact(Object sender)
        {
            if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteEnemy")))
                return;

            // Handle the DeleteCOntact Event for the ContactControl object.
            ContactControl objSender = (ContactControl)sender;
            bool blnFound = false;
            foreach (ContactControl objContactControl in panEnemies.Controls)
            {
                // Set the flag to show that we have found the contact.
                if (objContactControl == objSender)
                    blnFound = true;

                // Once the Enemy has been found, all of the other ContactControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (blnFound)
                {
                    _objCharacter.Contacts.Remove(objContactControl.ContactObject);
                    objContactControl.Top -= 25;
                }
            }
            // Remove the ContactControl that raised the Event.
            panEnemies.Controls.Remove(objSender);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objEnemy_FileNameChanged(Object sender)
        {
            // Handle the FileNameChanged Event for the ContactControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region PetControl Events
        private void objPet_DeleteContact(Object sender)
        {
            if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteContact")))
                return;

            // Handle the DeleteContact Event for the ContactControl object.
            PetControl objSender = (PetControl)sender;
            bool blnFound = false;
            foreach (PetControl objContactControl in panPets.Controls)
            {
                // Set the flag to show that we have found the Contact.
                if (objContactControl == objSender)
                    blnFound = true;

                // Once the Contact has been found, all of the other ContactControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (blnFound)
                    _objCharacter.Contacts.Remove(objContactControl.ContactObject);
            }
            // Remove the ContactControl that raised the Event.
            panPets.Controls.Remove(objSender);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objPet_FileNameChanged(Object sender)
        {
            // Handle the FileNameChanged Event for the ContactControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region SpiritControl Events
        private void objSpirit_ForceChanged(Object sender)
        {
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSpirit_BoundChanged(Object sender)
        {
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSpirit_FetteredChanged(Object sender)
        {
            //OBSOLETE: This will be redundant once DataBoundAttributes is merged, replace with CalculateBP.
            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSpirit_ServicesOwedChanged(Object sender)
        {
            // Handle the ServicesOwedChanged Event for the SpiritControl object.
            // A Spirit cannot owe more services than the character's Summoning Skill Rating.
            SpiritControl objSpiritControl = (SpiritControl)sender;

            // Retrieve the character's Summoning Skill Rating.
            int intSkillValue = _objCharacter.SkillsSection.GetActiveSkill("Summoning")?.Rating ?? 0;

            if (objSpiritControl.ServicesOwed > intSkillValue && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SpiritServices"), LanguageManager.GetString("MessageTitle_SpiritServices"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                objSpiritControl.ServicesOwed = intSkillValue;
            }

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSpirit_DeleteSpirit(Object sender)
        {
            if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteSpirit")))
                return;

            // Handle the DeleteSpirit Event for the SpiritControl object.
            SpiritControl objSender = (SpiritControl)sender;
            bool blnFound = false;
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
            {
                // Set the flag to show that we have found the Spirit.
                if (objSpiritControl == objSender)
                    blnFound = true;

                // Once the Spirit has been found, all of the other SpiritControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (blnFound)
                {
                    _objCharacter.Spirits.Remove(objSpiritControl.SpiritObject);
                    objSpiritControl.Top -= 25;
                }
            }
            // Remove the SpiritControl that raised the Event.
            panSpirits.Controls.Remove(objSender);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSpirit_FileNameChanged(Object sender)
        {
            // Handle the FileNameChanged Event for the SpritControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region SpriteControl (SpiritControl) Events
        private void objSprite_ForceChanged(Object sender)
        {
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSprite_BoundChanged(Object sender)
        {
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSprite_ServicesOwedChanged(Object sender)
        {
            // Handle the ServicesOwedChanged Event for the SpiritControl object.
            // A Sprite cannot owe more services than the character's Compiling Skill Rating.
            SpiritControl objSpriteControl = (SpiritControl)sender;

            // Retrieve the character's Compiling Skill Rating.
            int intSkillValue = _objCharacter.SkillsSection.GetActiveSkill("Compiling")?.Rating ?? 0;

            if (objSpriteControl.ServicesOwed > intSkillValue && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SpriteServices"), LanguageManager.GetString("MessageTitle_SpriteServices"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                objSpriteControl.ServicesOwed = intSkillValue;
            }

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSprite_DeleteSpirit(Object sender)
        {
            if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteSprite")))
                return;

            // Handle the DeleteSpirit Event for the SpiritControl object.
            SpiritControl objSender = (SpiritControl)sender;
            bool blnFound = false;
            foreach (SpiritControl objSpriteControl in panSprites.Controls)
            {
                // Set the flag to show that we have found the Sprite.
                if (objSpriteControl == objSender)
                    blnFound = true;

                // Once the Spirit has been found, all of the other SpiritControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (blnFound)
                {
                    _objCharacter.Spirits.Remove(objSpriteControl.SpiritObject);
                    objSpriteControl.Top -= 25;
                }
            }
            // Remove the SpiritControl that raised the Event.
            panSprites.Controls.Remove(objSender);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void objSprite_FileNameChanged(Object sender)
        {
            // Handle the FileNameChanged Event for the SpiritControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region Martial Tab Control Events
        private void treMartialArts_AfterSelect(object sender, TreeViewEventArgs e)
        {
            _blnSkipRefresh = true;
            string strBook = string.Empty;
            string strPage = string.Empty;
            // The Rating NUD is only enabled if a Martial Art is currently selected.
            if (treMartialArts.SelectedNode.Level == 1)
            {
                MartialArt objMartialArt = CommonFunctions.FindByIdWithNameCheck(treMartialArts.SelectedNode.Tag.ToString(), _objCharacter.MartialArts);

                strBook = _objOptions.LanguageBookShort(objMartialArt.Source);
                strPage = objMartialArt.Page;
                lblMartialArtSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMartialArtSource, _objOptions.LanguageBookLong(objMartialArt.Source) + " page " + strPage);
            }

            // Display the Martial Art Advantage information.
            else if (treMartialArts.SelectedNode.Level == 2)
            {
                // Load the Martial Art information.
                XmlDocument _objXmlDocument = XmlManager.Load("martialarts.xml");
                XmlNode objXmlTechnique = _objXmlDocument.SelectSingleNode("/chummer/techniques/technique[name = \"" + treMartialArts.SelectedNode.Text.ToString() + "\"]");

                if (objXmlTechnique != null)
                {
                    objXmlTechnique.TryGetStringFieldQuickly("source", ref strBook);
                    string strBookShort = _objOptions.LanguageBookShort(strBook);
                    objXmlTechnique.TryGetStringFieldQuickly("page", ref strPage);
                    lblMartialArtSource.Text = strBookShort + " " + strPage;
                    tipTooltip.SetToolTip(lblMartialArtSource, _objOptions.LanguageBookLong(strBook) + " page " + strPage);
                }
            }

            //// Display the Maneuver information.
            //if (treMartialArts.SelectedNode.Level == 1 && treMartialArts.SelectedNode.Parent == treMartialArts.Nodes[1])
            //{
            //    // Load the Martial Art information.
            //    XmlDocument _objXmlDocument = XmlManager.Load("martialarts.xml");
            //    XmlNode objXmlTechnique = _objXmlDocument.SelectSingleNode("/chummer/techniques/technique[name = \"" + treMartialArts.SelectedNode.Text.ToString() + "\"]");

            //    if (objXmlTechnique != null)
            //    {
            //        string strBook = _objOptions.LanguageBookShort(objXmlTechnique["source"].InnerText);
            //        string strPage = objXmlTechnique["page"].InnerText;
            //        lblMartialArtSource.Text = strBook + " " + strPage;
            //        tipTooltip.SetToolTip(lblMartialArtSource, _objOptions.LanguageBookLong(objXmlTechnique["source"].InnerText) + " page " + objXmlTechnique["page"].InnerText);
            //    }
            //}
            _blnSkipRefresh = false;
        }
        #endregion

        #region Button Events
        private void treLimit_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteLimitModifier_Click(sender, e);
            }
        }

        private void cmdAddContact_Click(object sender, EventArgs e)
        {
            Contact objContact = new Contact(_objCharacter);
            _objCharacter.Contacts.Add(objContact);

            int i = panContacts.Controls.Count;
            ContactControl objContactControl = new ContactControl(_objCharacter);
            objContactControl.ContactObject = objContact;
            objContactControl.EntityType = ContactType.Contact;

            // Attach an EventHandler for the ConnectionRatingChanged, LoyaltyRatingChanged, DeleteContact, FileNameChanged Events and OtherCostChangedEvent
            objContactControl.ConnectionRatingChanged += objContact_ConnectionRatingChanged;
            objContactControl.LoyaltyRatingChanged += objContact_LoyaltyRatingChanged;
            objContactControl.FamilyChanged += objContact_OtherCostChanged;
            objContactControl.BlackmailChanged += objContact_OtherCostChanged;
            objContactControl.DeleteContact += objContact_DeleteContact;
            objContactControl.FileNameChanged += objContact_FileNameChanged;
            objContactControl.FreeRatingChanged += objContact_OtherCostChanged;
            objContactControl.MouseDown += panContactControl_MouseDown;

            panContacts.Controls.Add(objContactControl);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddEnemy_Click(object sender, EventArgs e)
        {
            // Handle the ConnectionRatingChanged Event for the ContactControl object.
            int intNegativeQualityBP = 0;
            // Calculate the BP used for Negative Qualities.
            foreach (Quality objQuality in _objCharacter.Qualities)
            {
                if (objQuality.Type == QualityType.Negative && objQuality.ContributeToLimit)
                    intNegativeQualityBP += objQuality.BP;
            }
            // Include the amount of free Negative Qualities from Improvements.
            intNegativeQualityBP -= ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeNegativeQualities);

            // Adjust for Karma build method.
            if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                intNegativeQualityBP *= _objOptions.KarmaQuality;

            int intBPUsed = 0;
            int intEnemyMax = 0;
            int intQualityMax = 0;
            string strEnemyPoints = string.Empty;
            string strQualityPoints = string.Empty;
            intBPUsed = -2 * _objOptions.KarmaQuality;
            intEnemyMax = _objCharacter.GameplayOptionQualityLimit;
            intQualityMax = _objCharacter.GameplayOptionQualityLimit;
            strEnemyPoints = _objCharacter.GameplayOptionQualityLimit + " " + LanguageManager.GetString("String_Karma");
            strQualityPoints = _objCharacter.GameplayOptionQualityLimit + " " + LanguageManager.GetString("String_Karma");

            foreach (ContactControl objEnemyControl in panEnemies.Controls)
            {
                intBPUsed -= (objEnemyControl.ConnectionRating + objEnemyControl.LoyaltyRating) * _objOptions.KarmaEnemy;
            }

            if (intBPUsed < (intEnemyMax * -1) && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_EnemyLimit").Replace("{0}", strEnemyPoints), LanguageManager.GetString("MessageTitle_EnemyLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (!_objOptions.ExceedNegativeQualities)
            {
                if (intBPUsed + intNegativeQualityBP < (intQualityMax * -1) && !_objCharacter.IgnoreRules)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NegativeQualityLimit").Replace("{0}", strQualityPoints), LanguageManager.GetString("MessageTitle_NegativeQualityLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            Contact objContact = new Contact(_objCharacter);
            _objCharacter.Contacts.Add(objContact);

            int i = panEnemies.Controls.Count;
            ContactControl objContactControl = new ContactControl(_objCharacter);
            objContactControl.ContactObject = objContact;
            objContactControl.EntityType = ContactType.Enemy;

            // Attach an EventHandler for the ConnectioNRatingChanged, LoyaltyRatingChanged, DeleteContact, FileNameChanged and OtherCostChanged(hackish) Events
            objContactControl.ConnectionRatingChanged += objEnemy_ConnectionRatingChanged;
            objContactControl.LoyaltyRatingChanged += objEnemy_LoyaltyRatingChanged;
            objContactControl.DeleteContact += objEnemy_DeleteContact;
            objContactControl.FileNameChanged += objEnemy_FileNameChanged;
            objContactControl.GroupStatusChanged += objEnemy_GroupStatusChanged;
            objContactControl.FreeRatingChanged += objEnemy_FreeStatusChanged;

            // Set the ContactControl's Location since scrolling the Panel causes it to actually change the child Controls' Locations.
            objContactControl.Location = new Point(0, objContactControl.Height * i + panEnemies.AutoScrollPosition.Y);
            panEnemies.Controls.Add(objContactControl);

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddSpell_Click(object sender, EventArgs e)
        {
            frmSelectSpell frmPickSpell = new frmSelectSpell(_objCharacter);
            frmPickSpell.ExpandedCategories = lstExpandSpellCategories;
            frmPickSpell.ShowDialog(this);
            // Make sure the dialogue window was not canceled.
            if (frmPickSpell.DialogResult == DialogResult.Cancel)
                return;

            // Open the Spells XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("spells.xml");

            XmlNode objXmlSpell = objXmlDocument.SelectSingleNode("/chummer/spells/spell[id = \"" + frmPickSpell.SelectedSpell + "\"]");

            lstExpandSpellCategories = frmPickSpell.ExpandedCategories;
            Spell objSpell = new Spell(_objCharacter);
            TreeNode objNode = new TreeNode();
            objSpell.Create(objXmlSpell, objNode, string.Empty, frmPickSpell.Limited, frmPickSpell.Extended, frmPickSpell.Alchemical);
            objNode.ContextMenuStrip = cmsSpell;
            if (objSpell.InternalId == Guid.Empty.ToString())
                return;

            objSpell.FreeBonus = frmPickSpell.FreeBonus;
            // Barehanded Adept
            if (objSpell.FreeBonus && _objCharacter.AdeptEnabled && !_objCharacter.MagicianEnabled && objSpell.Range == "T")
            {
                objSpell.UsesUnarmed = true;
            }
            _objCharacter.Spells.Add(objSpell);

            switch (objSpell.Category)
            {
                case "Combat":
                    treSpells.Nodes[0].Nodes.Add(objNode);
                    treSpells.Nodes[0].Expand();
                    break;
                case "Detection":
                    treSpells.Nodes[1].Nodes.Add(objNode);
                    treSpells.Nodes[1].Expand();
                    break;
                case "Health":
                    treSpells.Nodes[2].Nodes.Add(objNode);
                    treSpells.Nodes[2].Expand();
                    break;
                case "Illusion":
                    treSpells.Nodes[3].Nodes.Add(objNode);
                    treSpells.Nodes[3].Expand();
                    break;
                case "Manipulation":
                    treSpells.Nodes[4].Nodes.Add(objNode);
                    treSpells.Nodes[4].Expand();
                    break;
                case "Rituals":
                    treSpells.Nodes[5].Nodes.Add(objNode);
                    treSpells.Nodes[5].Expand();
                    break;
                case "Enchantments":
                    treSpells.Nodes[6].Nodes.Add(objNode);
                    treSpells.Nodes[6].Expand();
                    break;
            }

            treSpells.SelectedNode = objNode;

            treSpells.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickSpell.AddAgain)
            {
                cmdAddSpell_Click(sender, e);
            }
        }

        private void cmdDeleteSpell_Click(object sender, EventArgs e)
        {
            // Delete the selected Spell.
            if (treSpells.SelectedNode.Level > 0)
            {
                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteSpell")))
                    return;

                // Locate the Spell that is selected in the tree.
                Spell objSpell = CommonFunctions.FindByIdWithNameCheck(treSpells.SelectedNode.Tag.ToString(), _objCharacter.Spells);

                if (objSpell != null)
                {
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Spell, objSpell.InternalId);

                    _objCharacter.Spells.Remove(objSpell);
                    treSpells.SelectedNode.Remove();

                    ScheduleCharacterUpdate();

                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }

        private void cmdAddSpirit_Click(object sender, EventArgs e)
        {
            int i = panSpirits.Controls.Count;

            // The number of bound Spirits cannot exeed the character's CHA.
            if (i >= _objCharacter.CHA.Value && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_BoundSpiritLimit"), LanguageManager.GetString("MessageTitle_BoundSpiritLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            Spirit objSpirit = new Spirit(_objCharacter);
            _objCharacter.Spirits.Add(objSpirit);

            SpiritControl objSpiritControl = new SpiritControl();
            objSpiritControl.SpiritObject = objSpirit;
            objSpiritControl.EntityType = SpiritType.Spirit;

            // Attach an EventHandler for the ServicesOwedChanged Event.
            objSpiritControl.ServicesOwedChanged += objSpirit_ServicesOwedChanged;
            objSpiritControl.ForceChanged += objSpirit_ForceChanged;
            objSpiritControl.BoundChanged += objSpirit_BoundChanged;
            objSpiritControl.FetteredChanged += objSpirit_FetteredChanged;
            objSpiritControl.DeleteSpirit += objSpirit_DeleteSpirit;
            objSpiritControl.FileNameChanged += objSpirit_FileNameChanged;

            if (_objOptions.SpiritForceBasedOnTotalMAG)
            {
                int intMAGTotalValue = _objCharacter.MAG.TotalValue;
                objSpiritControl.ForceMaximum = intMAGTotalValue * 2;
                objSpiritControl.Force = intMAGTotalValue;
            }
            else
            {
                int intMAG = Convert.ToInt32(_objCharacter.MAG.Value);
                if (intMAG == 0)
                    intMAG = 1;
                objSpiritControl.ForceMaximum = intMAG * 2;
                objSpiritControl.Force = intMAG;
            }
            objSpiritControl.RebuildSpiritList(_objCharacter.MagicTradition);

            objSpiritControl.Top = i * objSpiritControl.Height;
            panSpirits.Controls.Add(objSpiritControl);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddSprite_Click(object sender, EventArgs e)
        {
            int i = panSprites.Controls.Count;

            // The number of registered Sprites cannot exceed the character's LOG.
            if (i >= _objCharacter.LOG.Value && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_RegisteredSpriteLimit"), LanguageManager.GetString("MessageTitle_RegisteredSpriteLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            Spirit objSprite = new Spirit(_objCharacter);
            _objCharacter.Spirits.Add(objSprite);

            SpiritControl objSpriteControl = new SpiritControl();
            objSpriteControl.SpiritObject = objSprite;
            objSpriteControl.EntityType = SpiritType.Sprite;

            // Attach an EventHandler for the ServicesOwedChanged Event.
            objSpriteControl.ServicesOwedChanged += objSprite_ServicesOwedChanged;
            objSpriteControl.ForceChanged += objSprite_ForceChanged;
            objSpriteControl.BoundChanged += objSprite_BoundChanged;
            objSpriteControl.DeleteSpirit += objSprite_DeleteSpirit;
            objSpriteControl.FileNameChanged += objSprite_FileNameChanged;

            objSpriteControl.ForceMaximum = _objCharacter.RES.Value;
            objSpriteControl.ForceMaximum = _objCharacter.RES.Value;
            objSpriteControl.RebuildSpiritList(_objCharacter.TechnomancerStream);

            objSpriteControl.Top = i * objSpriteControl.Height;
            panSprites.Controls.Add(objSpriteControl);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        private void cmdAddCyberware_Click(object sender, EventArgs e)
        {
            // Select the root Cyberware node then open the Select Cyberware window.
            treCyberware.SelectedNode = treCyberware.Nodes[0];
            bool blnAddAgain = PickCyberware();
            if (blnAddAgain)
                cmdAddCyberware_Click(sender, e);
        }

        private void cmdDeleteCyberware_Click(object sender, EventArgs e)
        {
            if (treCyberware.SelectedNode.Level > 0)
            {
                XmlDocument objXmlDocument = null;
                // Locate the piece of Cyberware that is selected in the tree.
                Cyberware objCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);
                if (objCyberware != null)
                {
                    if (objCyberware.Capacity == "[*]" && treCyberware.SelectedNode.Level == 2 && !_objCharacter.IgnoreRules)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveCyberware"), LanguageManager.GetString("MessageTitle_CannotRemoveCyberware"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (objCyberware.SourceType == Improvement.ImprovementSource.Bioware)
                    {
                        if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteBioware")))
                            return;
                        objXmlDocument = XmlManager.Load("bioware.xml");
                    }
                    else
                    {
                        if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteCyberware")))
                            return;
                        objXmlDocument = XmlManager.Load("cyberware.xml");
                    }

                    CommonFunctions.DeleteCyberware(_objCharacter, objCyberware, treWeapons, treVehicles);
                    // Remove the Children.
                    objCyberware.Children.Clear();

                    // Open the Cyberware XML file and locate the selected piece.
                    XmlNode objXmlCyberware;
                    if (objCyberware.SourceType == Improvement.ImprovementSource.Bioware)
                    {
                        objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/biowares/bioware[name = \"" + objCyberware.Name + "\"]");
                    }
                    else
                    {
                        objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + objCyberware.Name + "\"]");
                    }

                    // Fix for legacy characters with old addqualities improvements.
                    if (objXmlCyberware?["addqualities"] != null)
                    {
                        RemoveAddedQualities(objXmlCyberware.SelectNodes("addqualities/addquality"), treQualities);
                    }
                    // Remove any Improvements created by the piece of Cyberware.
                    ImprovementManager.RemoveImprovements(_objCharacter, objCyberware.SourceType, objCyberware.InternalId);
                    _objCharacter.Cyberware.Remove(objCyberware);
                    RefreshQualities(treQualities, cmsQuality);
                    treQualities.SortCustom();

                    // If the Parent is populated, remove the item from its Parent.
                    if (objCyberware.Parent != null)
                        objCyberware.Parent.Children.Remove(objCyberware);
                }
                else
                {
                    // Find and remove the selected piece of Gear.
                    Gear objGear = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware.GetAllDescendants(x => x.Children), out objCyberware);
                    if (objGear == null)
                        return;
                    if (objGear.Parent == null)
                        objCyberware.Gear.Remove(objGear);
                    else
                    {
                        objGear.Parent.Children.Remove(objGear);
                        Commlink objCommlink = objGear.Parent as Commlink;
                        if (objCommlink?.CanSwapAttributes == true)
                        {
                            objCommlink.RefreshCyberdeckArray();
                        }
                    }
                    CommonFunctions.DeleteGear(_objCharacter, objGear, treWeapons, treVehicles);
                }

                // Remove the item from the TreeView.
                treCyberware.Nodes.Remove(treCyberware.SelectedNode);
                ScheduleCharacterUpdate();
                RefreshSelectedCyberware();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void cmdAddComplexForm_Click(object sender, EventArgs e)
        {
            if (_objCharacter.BuildMethod == CharacterBuildMethod.Priority || _objCharacter.BuildMethod == CharacterBuildMethod.SumtoTen)
            {
                // The number of Complex Form Points cannot exceed the priority limit.
                int intCFP = 0;
                foreach (ComplexForm tp in _objCharacter.ComplexForms)
                {
                    intCFP++;
                }
            }
            else
            {
                // The number of Complex Forms cannot exceed twice the character's LOG.
                if (_objCharacter.ComplexForms.Count >= ((_objCharacter.LOG.Value * 2) + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.ComplexFormLimit)) && !_objCharacter.IgnoreRules)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_ComplexFormLimit"), LanguageManager.GetString("MessageTitle_ComplexFormLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            // Let the user select a Program.
            frmSelectProgram frmPickProgram = new frmSelectProgram(_objCharacter);
            frmPickProgram.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickProgram.DialogResult == DialogResult.Cancel)
                return;

            XmlDocument objXmlDocument = XmlManager.Load("complexforms.xml");

            XmlNode objXmlProgram = objXmlDocument.SelectSingleNode("/chummer/complexforms/complexform[id = \"" + frmPickProgram.SelectedProgram + "\"]");

            // Check for SelectText.
            string strExtra = string.Empty;
            if (objXmlProgram["bonus"] != null)
            {
                if (objXmlProgram["bonus"]["selecttext"] != null)
                {
                    frmSelectText frmPickText = new frmSelectText();
                    frmPickText.Description = LanguageManager.GetString("String_Improvement_SelectText").Replace("{0}", objXmlProgram["translate"]?.InnerText ?? objXmlProgram["name"].InnerText);
                    frmPickText.ShowDialog(this);
                    strExtra = frmPickText.SelectedValue;
                }
            }

            TreeNode objNode = new TreeNode();
            ComplexForm objProgram = new ComplexForm(_objCharacter);
            objProgram.Create(objXmlProgram, objNode, strExtra);
            if (objProgram.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.ComplexForms.Add(objProgram);

            treComplexForms.Nodes[0].Nodes.Add(objNode);
            treComplexForms.Nodes[0].Expand();
            treComplexForms.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            int intComplexForms = 0;
            foreach (ComplexForm tp in _objCharacter.ComplexForms)
            {
                intComplexForms++;
            }

            //if (_objCharacter.CFPLimit - intComplexForms < 0)
            //    lblPBuildComplexForms.Text = String.Format("{0} " + LanguageManager.GetString("String_Of") + " {1}", (0).ToString(), _objCharacter.CFPLimit.ToString());
            //else
            lblComplexFormsBP.Text = string.Format("{0} " + LanguageManager.GetString("String_Of") + " {1}", (_objCharacter.CFPLimit - intComplexForms).ToString(), _objCharacter.CFPLimit.ToString());

            if (frmPickProgram.AddAgain)
                cmdAddComplexForm_Click(sender, e);
        }

        private void cmdAddAIProgram_Click(object sender, EventArgs e)
        {
            // Let the user select a Program.
            frmSelectAIProgram frmPickProgram = new frmSelectAIProgram(_objCharacter);
            frmPickProgram.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickProgram.DialogResult == DialogResult.Cancel)
                return;

            XmlDocument objXmlDocument = XmlManager.Load("programs.xml");

            XmlNode objXmlProgram = objXmlDocument.SelectSingleNode("/chummer/programs/program[name = \"" + frmPickProgram.SelectedProgram + "\"]");

            // Check for SelectText.
            string strExtra = string.Empty;
            if (objXmlProgram["bonus"] != null)
            {
                if (objXmlProgram["bonus"]["selecttext"] != null)
                {
                    frmSelectText frmPickText = new frmSelectText();
                    frmPickText.Description = LanguageManager.GetString("String_Improvement_SelectText").Replace("{0}", frmPickProgram.SelectedProgram);
                    frmPickText.ShowDialog(this);
                    strExtra = frmPickText.SelectedValue;
                }
            }

            TreeNode objNode = new TreeNode();
            AIProgram objProgram = new AIProgram(_objCharacter);
            objProgram.Create(objXmlProgram, objNode, objXmlProgram["category"].InnerText == "Advanced Programs", strExtra);
            if (objProgram.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.AIPrograms.Add(objProgram);
            objNode.Text = objProgram.DisplayName;
            objNode.Tag = objProgram.InternalId;
            if (!string.IsNullOrEmpty(objProgram.Notes))
                objNode.ForeColor = Color.SaddleBrown;
            else if (!objProgram.CanDelete)
                objNode.ForeColor = SystemColors.GrayText;
            else
                objNode.ForeColor = SystemColors.WindowText;
            objNode.ToolTipText = CommonFunctions.WordWrap(objProgram.Notes, 100);
            objNode.ContextMenuStrip = cmsAdvancedProgram;
            treAIPrograms.Nodes[0].Nodes.Add(objNode);
            treAIPrograms.Nodes[0].Expand();
            treAIPrograms.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            /*
            int intComplexForms = 0;
            foreach (ComplexForm tp in _objCharacter.ComplexForms)
            {
                intComplexForms++;
            }

            //if (_objCharacter.CFPLimit - intComplexForms < 0)
            //    lblPBuildComplexForms.Text = String.Format("{0} " + LanguageManager.GetString("String_Of") + " {1}", (0).ToString(), _objCharacter.CFPLimit.ToString());
            //else
            lblPBuildComplexForms.Text = String.Format("{0} " + LanguageManager.GetString("String_Of") + " {1}", (_objCharacter.CFPLimit - intComplexForms).ToString(), _objCharacter.CFPLimit.ToString());
            */

            if (frmPickProgram.AddAgain)
                cmdAddAIProgram_Click(sender, e);
        }

        private void cmdDeleteArmor_Click(object sender, EventArgs e)
        {
            if (treArmor.SelectedNode.Level == 0)
            {
                if (treArmor.SelectedNode.Text == LanguageManager.GetString("Node_SelectedArmor"))
                    return;

                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteArmorLocation")))
                    return;

                // Move all of the child nodes in the current parent to the Selected Armor parent node.
                foreach (TreeNode objNode in treArmor.SelectedNode.Nodes)
                {
                    Armor objArmor = CommonFunctions.FindByIdWithNameCheck(objNode.Tag.ToString(), _objCharacter.Armor);

                    // Change the Location for the Armor.
                    objArmor.Location = string.Empty;

                    TreeNode nodNewNode = new TreeNode();
                    nodNewNode.Text = objNode.Text;
                    nodNewNode.Tag = objNode.Tag;
                    nodNewNode.ContextMenuStrip = cmsArmor;

                    // Add child nodes.
                    foreach (ArmorMod objChild in objArmor.ArmorMods)
                    {
                        TreeNode nodChildNode = new TreeNode();
                        nodChildNode.Text = objChild.DisplayName;
                        nodChildNode.Tag = objChild.InternalId;
                        nodChildNode.ContextMenuStrip = string.IsNullOrEmpty(objChild.GearCapacity) ? cmsArmorMod : cmsArmorGear;
                        foreach (Gear objChildGear in objChild.Gear)
                        {
                            TreeNode nodChildGearNode = new TreeNode();
                            nodChildGearNode.Text = objChildGear.DisplayName;
                            nodChildGearNode.Tag = objChildGear.InternalId;
                            nodChildGearNode.ContextMenuStrip = cmsArmorGear;
                            nodChildNode.Nodes.Add(nodChildGearNode);
                            nodChildNode.Expand();
                        }
                        nodNewNode.Nodes.Add(nodChildNode);
                        nodNewNode.Expand();
                    }

                    foreach (Gear objChild in objArmor.Gear)
                    {
                        TreeNode nodChildNode = new TreeNode();
                        nodChildNode.Text = objChild.DisplayName;
                        nodChildNode.Tag = objChild.InternalId;
                        nodChildNode.ContextMenuStrip = cmsArmorGear;
                        nodNewNode.Nodes.Add(nodChildNode);
                        nodNewNode.Expand();
                    }

                    treArmor.Nodes[0].Nodes.Add(nodNewNode);
                    treArmor.Nodes[0].Expand();
                }

                // Remove the Location from the character, then remove the selected node.
                _objCharacter.ArmorBundles.Remove(treArmor.SelectedNode.Text);
                treArmor.SelectedNode.Remove();
                return;
            }

            CommonFunctions.DeleteArmor(_objCharacter, treArmor, treWeapons, treVehicles);
            ScheduleCharacterUpdate();
            RefreshSelectedArmor();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddBioware_Click(object sender, EventArgs e)
        {
            // Select the root Bioware node then open the Select Cyberware window.
            treCyberware.SelectedNode = treCyberware.Nodes[1];
            bool blnAddAgain = PickCyberware(Improvement.ImprovementSource.Bioware);
            if (blnAddAgain)
                cmdAddBioware_Click(sender, e);
        }

        private void cmdAddWeapon_Click(object sender, EventArgs e)
        {
            frmSelectWeapon frmPickWeapon = new frmSelectWeapon(_objCharacter);
            frmPickWeapon.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickWeapon.DialogResult == DialogResult.Cancel)
                return;

            // Open the Weapons XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/weapons/weapon[id = \"" + frmPickWeapon.SelectedWeapon + "\"]");

            List<TreeNode> lstNodes = new List<TreeNode>();
            Weapon objWeapon = new Weapon(_objCharacter);
            objWeapon.DiscountCost = frmPickWeapon.BlackMarketDiscount;
            objWeapon.Create(objXmlWeapon, lstNodes, cmsWeapon, cmsWeaponAccessory, _objCharacter.Weapons, cmsWeaponAccessoryGear);
            objWeapon.DiscountCost = frmPickWeapon.BlackMarketDiscount;

            if (frmPickWeapon.FreeCost)
            {
                objWeapon.Cost = 0;
            }
            _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objLoopNode in lstNodes)
            {
                objLoopNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objLoopNode);
            }
            treWeapons.Nodes[0].Expand();
            treWeapons.SelectedNode = lstNodes[0];

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickWeapon.AddAgain)
                cmdAddWeapon_Click(sender, e);
        }

        private void cmdDeleteWeapon_Click(object sender, EventArgs e)
        {
            // Delete the selected Weapon.
            if (treWeapons.SelectedNode.Level == 0)
            {
                if (treWeapons.SelectedNode.Text == LanguageManager.GetString("Node_SelectedWeapons"))
                    return;

                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteWeaponLocation")))
                    return;

                // Move all of the child nodes in the current parent to the Selected Weapons parent node.
                foreach (TreeNode objNode in treWeapons.SelectedNode.Nodes)
                {
                    Weapon objWeapon = CommonFunctions.DeepFindById(objNode.Tag.ToString(), _objCharacter.Weapons);

                    // Change the Location for the Weapon.
                    if (objWeapon != null)
                        objWeapon.Location = string.Empty;
                }

                List<TreeNode> lstMoveNodes = new List<TreeNode>();
                foreach (TreeNode objNode in treWeapons.SelectedNode.Nodes)
                    lstMoveNodes.Add(objNode);

                foreach (TreeNode objNode in lstMoveNodes)
                {
                    treWeapons.SelectedNode.Nodes.Remove(objNode);
                    treWeapons.Nodes[0].Nodes.Add(objNode);
                }

                // Remove the Weapon Location from the character, then remove the selected node.
                _objCharacter.WeaponLocations.Remove(treWeapons.SelectedNode.Text);
                treWeapons.SelectedNode.Remove();
            }
            else if (treWeapons.SelectedNode.Level > 0)
            {
                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteWeapon")))
                    return;

                // Locate the Weapon that is selected in the tree.
                Weapon objWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);

                if (objWeapon != null)
                {
                    // Cyberweapons cannot be removed through here and must be done by removing the piece of Cyberware.
                    if (objWeapon.Cyberware)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveCyberweapon"), LanguageManager.GetString("MessageTitle_CannotRemoveCyberweapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (objWeapon.Category == "Gear")
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveGearWeapon"), LanguageManager.GetString("MessageTitle_CannotRemoveGearWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (objWeapon.Category.StartsWith("Quality"))
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveQualityWeapon"), LanguageManager.GetString("MessageTitle_CannotRemoveQualityWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    CommonFunctions.DeleteWeapon(_objCharacter, objWeapon, treWeapons, treVehicles);

                    if (objWeapon.Parent != null)
                        objWeapon.Parent.Children.Remove(objWeapon);
                    else
                        _objCharacter.Weapons.Remove(objWeapon);
                    treWeapons.SelectedNode.Remove();
                }
                else
                {
                    // Locate the Weapon that is selected in the tree.
                    foreach (Weapon objCharacterWeapon in _objCharacter.Weapons)
                    {
                        if (objCharacterWeapon.InternalId == treWeapons.SelectedNode.Parent.Tag.ToString())
                        {
                            objWeapon = objCharacterWeapon;
                            break;
                        }
                        if (objCharacterWeapon.UnderbarrelWeapons.Count > 0)
                        {
                            foreach (Weapon objUnderbarrelWeapon in objCharacterWeapon.UnderbarrelWeapons)
                            {
                                if (objUnderbarrelWeapon.InternalId == treWeapons.SelectedNode.Parent.Tag.ToString())
                                {
                                    objWeapon = objUnderbarrelWeapon;
                                    goto EndWeaponListLoop;
                                }
                            }
                        }
                    }
                EndWeaponListLoop:;

                    // Locate the Accessory that is selected in the tree.
                    WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                    if (objAccessory != null)
                    {
                        foreach (Gear objGear in objAccessory.Gear)
                            CommonFunctions.DeleteGear(_objCharacter, objGear, treWeapons, treVehicles);
                        objWeapon.WeaponAccessories.Remove(objAccessory);
                        treWeapons.SelectedNode.Remove();
                    }
                    else
                    {
                        // Find the selected Gear.
                        Gear objGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons, out objAccessory);
                        if (objGear != null)
                        {
                            CommonFunctions.DeleteGear(_objCharacter, objGear, treWeapons, treVehicles);
                            if (objGear.Parent == null)
                                objAccessory.Gear.Remove(objGear);
                            else
                            {
                                objGear.Parent.Children.Remove(objGear);
                                if ((objGear.Parent as Commlink)?.CanSwapAttributes == true)
                                {
                                    (objGear.Parent as Commlink).RefreshCyberdeckArray();
                                }
                            }
                            treWeapons.SelectedNode.Remove();
                        }
                    }
                }
            }
            ScheduleCharacterUpdate();
            RefreshSelectedWeapon();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddLifestyle_Click(object sender, EventArgs e)
        {
            Lifestyle objLifestyle = new Lifestyle(_objCharacter);
            frmSelectLifestyle frmPickLifestyle = new frmSelectLifestyle(objLifestyle, _objCharacter);
            frmPickLifestyle.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                return;

            _objCharacter.Lifestyles.Add(objLifestyle);

            TreeNode objNode = new TreeNode();
            objNode.Text = objLifestyle.DisplayName;
            objNode.Tag = objLifestyle.InternalId;
            objNode.ContextMenuStrip = cmsLifestyleNotes;
            treLifestyles.Nodes[0].Nodes.Add(objNode);
            treLifestyles.Nodes[0].Expand();
            treLifestyles.SelectedNode = objNode;

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickLifestyle.AddAgain)
                cmdAddLifestyle_Click(sender, e);
        }

        private void cmdDeleteLifestyle_Click(object sender, EventArgs e)
        {
            // Delete the selected Lifestyle.
            if (treLifestyles.SelectedNode.Level > 0)
            {
                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteLifestyle")))
                    return;

                Lifestyle objLifestyle = CommonFunctions.FindByIdWithNameCheck(treLifestyles.SelectedNode.Tag.ToString(), _objCharacter.Lifestyles);
                if (objLifestyle == null)
                    return;

                _objCharacter.Lifestyles.Remove(objLifestyle);
                treLifestyles.SelectedNode.Remove();

                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void cmdAddGear_Click(object sender, EventArgs e)
        {
            // Select the root Gear node then open the Select Gear window.
            treGear.SelectedNode = treGear.Nodes[0];
            bool blnAddAgain = PickGear();
            if (blnAddAgain)
                cmdAddGear_Click(sender, e);
            CommonFunctions.PopulateFocusList(_objCharacter, treFoci);
        }

        private void cmdDeleteGear_Click(object sender, EventArgs e)
        {
            // Delete the selected Gear.
            if (treGear.SelectedNode.Level == 0)
            {
                if (treGear.SelectedNode.Text == LanguageManager.GetString("Node_SelectedGear"))
                    return;

                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteGearLocation")))
                    return;

                // Move all of the child nodes in the current parent to the Selected Gear parent node.
                foreach (TreeNode objNode in treGear.SelectedNode.Nodes)
                {
                    Gear objGear = CommonFunctions.DeepFindById(objNode.Tag.ToString(), _objCharacter.Gear);

                    // Change the Location for the Gear.
                    if (objGear != null)
                        objGear.Location = string.Empty;
                }

                List<TreeNode> lstMoveNodes = new List<TreeNode>();
                foreach (TreeNode objNode in treGear.SelectedNode.Nodes)
                    lstMoveNodes.Add(objNode);

                foreach (TreeNode objNode in lstMoveNodes)
                {
                    treGear.SelectedNode.Nodes.Remove(objNode);
                    treGear.Nodes[0].Nodes.Add(objNode);
                }

                // Remove the Location from the character, then remove the selected node.
                _objCharacter.Locations.Remove(treGear.SelectedNode.Text);
                treGear.SelectedNode.Remove();
            }
            else if (treGear.SelectedNode.Level > 0)
            {
                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteGear")))
                    return;

                Gear objGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
                if (objGear != null)
                {
                    Gear objParent = CommonFunctions.DeepFindById(treGear.SelectedNode.Parent.Tag.ToString(), _objCharacter.Gear);

                    CommonFunctions.DeleteGear(_objCharacter, objGear, treWeapons, treVehicles);

                    _objCharacter.Gear.Remove(objGear);
                    treGear.SelectedNode.Remove();

                    // If the Parent is populated, remove the item from its Parent.
                    if (objParent != null)
                    {
                        objParent.Children.Remove(objGear);
                        if ((objParent as Commlink)?.CanSwapAttributes == true)
                        {
                            (objParent as Commlink).RefreshCyberdeckArray();
                        }
                    }
                }
            }
            CommonFunctions.PopulateFocusList(_objCharacter, treFoci);
            ScheduleCharacterUpdate();
            RefreshSelectedGear();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddVehicle_Click(object sender, EventArgs e)
        {
            frmSelectVehicle frmPickVehicle = new frmSelectVehicle(_objCharacter);
            frmPickVehicle.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickVehicle.DialogResult == DialogResult.Cancel)
                return;

            // Open the Vehicles XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("vehicles.xml");

            XmlNode objXmlVehicle = objXmlDocument.SelectSingleNode("/chummer/vehicles/vehicle[name = \"" + frmPickVehicle.SelectedVehicle + "\"]");

            TreeNode objNode = new TreeNode();
            Vehicle objVehicle = new Vehicle(_objCharacter);
            objVehicle.Create(objXmlVehicle, objNode, cmsVehicle, cmsVehicleGear, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsWeaponMount);
            // Update the Used Vehicle information if applicable.
            if (frmPickVehicle.UsedVehicle)
            {
                objVehicle.Avail = frmPickVehicle.UsedAvail;
                objVehicle.Cost = frmPickVehicle.UsedCost.ToString();
            }
            objVehicle.BlackMarketDiscount = frmPickVehicle.BlackMarketDiscount;
            if (frmPickVehicle.FreeCost)
            {
                objVehicle.Cost = "0";
            }
            _objCharacter.Vehicles.Add(objVehicle);

            objNode.ContextMenuStrip = cmsVehicle;
            treVehicles.Nodes[0].Nodes.Add(objNode);
            treVehicles.Nodes[0].Expand();
            treVehicles.SelectedNode = objNode;

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickVehicle.AddAgain)
                cmdAddVehicle_Click(sender, e);
        }

        private void cmdDeleteVehicle_Click(object sender, EventArgs e)
        {
            // Delete the selected Vehicle.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level == 0)
            {
                return;
            }

            if (treVehicles.SelectedNode.Level != 2)
            {
                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteVehicle")))
                    return;
            }

            // Weapons that are first-level children of vehicles cannot be removed (for some reason)
            foreach (Vehicle objCharacterVehicle in _objCharacter.Vehicles)
            {
                if (objCharacterVehicle.Weapons.DeepFirstOrDefault(x => x.Children, x => x.InternalId == treVehicles.SelectedNode.Tag.ToString()) != null)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveGearWeaponVehicle"), LanguageManager.GetString("MessageTitle_CannotRemoveGearWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            // Locate the Vehicle that is selected in the tree.
            Vehicle objVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

            // Removing a Vehicle
            if (objVehicle != null)
            {
                // Remove any Gear Improvements from the character (primarily those provided by an Emotitoy).
                foreach (Gear objGear in objVehicle.Gear)
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);

                _objCharacter.Vehicles.Remove(objVehicle);
                foreach (Weapon objLoopWeapon in objVehicle.Weapons)
                {
                    CommonFunctions.DeleteWeapon(_objCharacter, objLoopWeapon, treWeapons, treVehicles);
                }
                foreach (VehicleMod objLoopMod in objVehicle.Mods)
                {
                    foreach (Weapon objLoopWeapon in objLoopMod.Weapons)
                    {
                        CommonFunctions.DeleteWeapon(_objCharacter, objLoopWeapon, treWeapons, treVehicles);
                    }
                    foreach (Cyberware objLoopCyberware in objLoopMod.Cyberware)
                    {
                        CommonFunctions.DeleteCyberware(_objCharacter, objLoopCyberware, treWeapons, treVehicles);
                    }
                }
                treVehicles.SelectedNode.Remove();
            }
            else
            {
                // Locate the VehicleMod that is selected in the tree.
                VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objVehicle);
                // Removing a Vehicle Mod
                if (objMod != null)
                {
                    if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteVehicle")))
                        return;

                    // Check for Improved Sensor bonus.
                    if (objMod.Bonus?["improvesensor"] != null || (objMod.WirelessOn && objMod.WirelessBonus?["improvesensor"] != null))
                    {
                        ChangeVehicleSensor(objVehicle, false);
                    }

                    // If this is the Obsolete Mod, the user must select a percentage. This will create an Expense that costs X% of the Vehicle's base cost to remove the special Obsolete Mod.
                    if (objMod.Name == "Obsolete" || (objMod.Name == "Obsolescent" && _objOptions.AllowObsolescentUpgrade))
                    {
                        frmSelectNumber frmModPercent = new frmSelectNumber(2);
                        frmModPercent.Minimum = 0;
                        frmModPercent.Maximum = 1000000;
                        frmModPercent.Description = LanguageManager.GetString("String_Retrofit");
                        frmModPercent.ShowDialog(this);

                        if (frmModPercent.DialogResult == DialogResult.Cancel)
                            return;

                        decimal decPercentage = frmModPercent.SelectedValue;
                        decimal decVehicleCost = objVehicle.OwnCost;

                        // Make sure the character has enough Nuyen for the expense.
                        decimal decCost = decVehicleCost * decPercentage / 100;
                        if (decCost > _objCharacter.Nuyen)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen"), LanguageManager.GetString("MessageTitle_NotEnoughNuyen"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        // Create a Vehicle Mod for the Retrofit.
                        VehicleMod objRetrofit = new VehicleMod(_objCharacter);

                        XmlDocument objVehiclesDoc = XmlManager.Load("vehicles.xml");
                        XmlNode objXmlNode = objVehiclesDoc.SelectSingleNode("/chummer/mods/mod[name = \"Retrofit\"]");
                        TreeNode objTreeNode = new TreeNode();
                        objRetrofit.Create(objXmlNode, objTreeNode, 0, objVehicle);
                        objRetrofit.Cost = decCost.ToString();
                        objVehicle.Mods.Add(objRetrofit);
                        treVehicles.SelectedNode.Parent.Nodes.Add(objTreeNode);

                        // Create an Expense Log Entry for removing the Obsolete Mod.
                        ExpenseLogEntry objEntry = new ExpenseLogEntry(_objCharacter);
                        objEntry.Create(decCost * -1, LanguageManager.GetString("String_ExpenseVehicleRetrofit").Replace("{0}", objVehicle.DisplayName), ExpenseType.Nuyen, DateTime.Now);
                        _objCharacter.ExpenseEntries.Add(objEntry);

                        // Adjust the character's Nuyen total.
                        _objCharacter.Nuyen += decCost * -1;
                    }

                    objVehicle.Mods.Remove(objMod);
                    foreach (Weapon objLoopWeapon in objMod.Weapons)
                    {
                        CommonFunctions.DeleteWeapon(_objCharacter, objLoopWeapon, treWeapons, treVehicles);
                    }
                    foreach (Cyberware objLoopCyberware in objMod.Cyberware)
                    {
                        CommonFunctions.DeleteCyberware(_objCharacter, objLoopCyberware, treWeapons, treVehicles);
                    }
                    treVehicles.SelectedNode.Remove();
                }
                else
                {
                    WeaponMount objWeaponMount;
                    Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objVehicle, out objWeaponMount, out VehicleMod vm);
                    // Removing a Weapon
                    if (objWeapon != null)
                    {
                        CommonFunctions.DeleteWeapon(_objCharacter, objWeapon, treWeapons, treVehicles);
                        if (objWeapon.Parent == null)
                        {
                            if (objMod != null)
                                objMod.Weapons.Remove(objWeapon);
                            // This bit here should never be reached, but I'm adding it for future-proofing in case we want people to be able to remove weapons attached directly to vehicles
                            else
                                objVehicle.Weapons.Remove(objWeapon);
                        }
                        else
                        {
                            objWeapon.Parent.Children.Remove(objWeapon);
                        }
                        treVehicles.SelectedNode.Remove();
                    }
                    else
                    {
                        WeaponAccessory objWeaponAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objWeapon);
                        // Removing a weapon accessory
                        if (objWeaponAccessory != null)
                        {
                            objWeapon.WeaponAccessories.Remove(objWeaponAccessory);
                            foreach (Gear objLoopGear in objWeaponAccessory.Gear)
                            {
                                CommonFunctions.DeleteGear(_objCharacter, objLoopGear, treWeapons, treVehicles);
                            }
                            treVehicles.SelectedNode.Remove();
                        }
                        else
                        {
                            Cyberware objCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objMod);
                            // Removing Cyberware
                            if (objCyberware != null)
                            {
                                if (objCyberware.Parent == null)
                                    objMod.Cyberware.Remove(objCyberware);
                                else
                                {
                                    objCyberware.Parent.Children.Remove(objCyberware);
                                }
                                treVehicles.SelectedNode.Remove();

                                CommonFunctions.DeleteCyberware(_objCharacter, objCyberware, treWeapons, treVehicles);
                            }
                            else
                            {
                                objVehicle = null;
                                objWeaponAccessory = null;
                                objCyberware = null;
                                Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objVehicle, out objWeaponAccessory, out objCyberware);
                                if (objGear != null)
                                {
                                    if (objGear.Parent == null)
                                    {
                                        if (objCyberware != null)
                                            objCyberware.Gear.Remove(objGear);
                                        else if (objWeaponAccessory != null)
                                            objWeaponAccessory.Gear.Remove(objGear);
                                        else
                                            objVehicle.Gear.Remove(objGear);
                                    }
                                    else
                                    {
                                        objGear.Parent.Children.Remove(objGear);
                                        Commlink objParentCommlink = objGear.Parent as Commlink;
                                        if (objParentCommlink?.CanSwapAttributes == true)
                                        {
                                            objParentCommlink.RefreshCyberdeckArray();
                                        }
                                    }
                                    treVehicles.SelectedNode.Remove();

                                    CommonFunctions.DeleteGear(_objCharacter, objGear, treWeapons, treVehicles);
                                }
                                else
                                {
                                    WeaponMount objMount = CommonFunctions.FindVehicleWeaponMount(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objVehicle);
                                    if (objMount != null)
                                    {
                                        objVehicle.WeaponMounts.Remove(objMount);
                                    }
                                    treVehicles.SelectedNode.Remove();
                                }
                            }
                        }
                    }
                }
            }

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddMartialArt_Click(object sender, EventArgs e)
        {
            frmSelectMartialArt frmPickMartialArt = new frmSelectMartialArt(_objCharacter);
            frmPickMartialArt.ShowDialog(this);

            if (frmPickMartialArt.DialogResult == DialogResult.Cancel)
                return;

            // Open the Martial Arts XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("martialarts.xml");

            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/martialarts/martialart[name = \"" + frmPickMartialArt.SelectedMartialArt + "\"]");

            TreeNode objNode = new TreeNode();
            MartialArt objMartialArt = new MartialArt(_objCharacter);
            objMartialArt.Create(objXmlArt, objNode);
            _objCharacter.MartialArts.Add(objMartialArt);

            objNode.ContextMenuStrip = cmsMartialArts;

            treMartialArts.Nodes[0].Nodes.Add(objNode);
            treMartialArts.Nodes[0].Expand();

            treMartialArts.SelectedNode = objNode;

            treMartialArts.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdDeleteLimitModifier_Click(object sender, EventArgs e)
        {
            if (treLimit.SelectedNode == null || treLimit.SelectedNode.Level <= 0)
                return;

            LimitModifier objLimitModifier = CommonFunctions.FindByIdWithNameCheck(treLimit.SelectedNode.Tag.ToString(), _objCharacter.LimitModifiers);
            if (objLimitModifier == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotDeleteLimitModifier"), LanguageManager.GetString("MessageTitle_CannotDeleteLimitModifier"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteLimitModifier")))
                return;

            string strLimit = treLimit.SelectedNode.Parent.Text;

            // Delete the selected Limit Modifier.
            _objCharacter.LimitModifiers.Remove(objLimitModifier);
            treLimit.SelectedNode.Remove();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdDeleteMartialArt_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode == null || treMartialArts.SelectedNode.Level <= 0)
                return;

            if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteMartialArt")))
                return;

            bool blnDoQualityRefresh = false;
            if (treMartialArts.SelectedNode.Level == 1)
            {
                // Delete the selected Martial Art.
                MartialArt objMartialArt = CommonFunctions.FindByIdWithNameCheck(treMartialArts.SelectedNode.Tag.ToString(), _objCharacter.MartialArts);
                if (objMartialArt == null)
                    return;
                if (objMartialArt.Name == "One Trick Pony")
                {
                    Quality objQuality = _objCharacter.Qualities.FirstOrDefault(objLoopQuality => objLoopQuality.Name == "One Trick Pony");
                    if (objQuality != null)
                    {
                        _objCharacter.Qualities.Remove(objQuality);
                        if (!_objCharacter.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objQuality.QualityId && objExistingQuality.Extra == objQuality.Extra))
                        {
                            foreach (TreeNode nodQuality in treQualities.Nodes[0].Nodes)
                            {
                                if (nodQuality.Text.ToString() == "One Trick Pony")
                                    nodQuality.Remove();
                            }
                        }
                        else
                            blnDoQualityRefresh = true;
                    }
                }
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.MartialArt, objMartialArt.InternalId);
                // Remove the Improvements for any Advantages for the Martial Art that is being removed.
                foreach (MartialArtAdvantage objAdvantage in objMartialArt.Advantages)
                {
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.MartialArtAdvantage, objAdvantage.InternalId);
                }

                _objCharacter.MartialArts.Remove(objMartialArt);
                treMartialArts.SelectedNode.Remove();
            }
            else if (treMartialArts.SelectedNode.Level == 2)
            {
                // Find the selected Advantage object.
                MartialArt objSelectedMartialArt = null;
                MartialArtAdvantage objSelectedAdvantage = CommonFunctions.FindMartialArtAdvantage(treMartialArts.SelectedNode.Tag.ToString(), _objCharacter.MartialArts, out objSelectedMartialArt);
                if (objSelectedAdvantage == null)
                    return;

                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.MartialArtAdvantage, objSelectedAdvantage.InternalId);
                treMartialArts.SelectedNode.Remove();

                objSelectedMartialArt.Advantages.Remove(objSelectedAdvantage);
            }

            if (blnDoQualityRefresh)
                RefreshQualityNames(treQualities);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddManeuver_Click(object sender, EventArgs e)
        {
            // Characters may only have 2 Maneuvers per Martial Art Rating.
            int intTotalRating = 0;
            foreach (MartialArt objMartialArt in _objCharacter.MartialArts)
                intTotalRating += objMartialArt.Rating * 2;

            if (treMartialArts.Nodes[1].Nodes.Count >= intTotalRating && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_MartialArtManeuverLimit"), LanguageManager.GetString("MessageTitle_MartialArtManeuverLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectMartialArtManeuver frmPickMartialArtManeuver = new frmSelectMartialArtManeuver(_objCharacter);
            frmPickMartialArtManeuver.ShowDialog(this);

            if (frmPickMartialArtManeuver.DialogResult == DialogResult.Cancel)
                return;

            // Open the Martial Arts XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("martialarts.xml");

            XmlNode objXmlManeuver = objXmlDocument.SelectSingleNode("/chummer/maneuvers/maneuver[name = \"" + frmPickMartialArtManeuver.SelectedManeuver + "\"]");

            TreeNode objNode = new TreeNode();
            MartialArtManeuver objManeuver = new MartialArtManeuver(_objCharacter);
            objManeuver.Create(objXmlManeuver, objNode);
            _objCharacter.MartialArtManeuvers.Add(objManeuver);

            treMartialArts.Nodes[1].Nodes.Add(objNode);
            treMartialArts.Nodes[1].Expand();

            treMartialArts.SelectedNode = objNode;

            treMartialArts.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddMugshot_Click(object sender, EventArgs e)
        {
            _blnIsDirty = AddMugshot();
            if (_blnIsDirty)
            {
                lblNumMugshots.Text = "/ " + _objCharacter.Mugshots.Count.ToString();
                nudMugshotIndex.Maximum += 1;
                nudMugshotIndex.Value = _objCharacter.Mugshots.Count;
            }
            UpdateWindowTitle();
        }

        private void cmdDeleteMugshot_Click(object sender, EventArgs e)
        {
            if (_objCharacter.Mugshots.Count > 0)
            {
                RemoveMugshot(decimal.ToInt32(nudMugshotIndex.Value) - 1);

                lblNumMugshots.Text = "/ " + _objCharacter.Mugshots.Count.ToString();
                nudMugshotIndex.Maximum -= 1;
                if (nudMugshotIndex.Value > nudMugshotIndex.Maximum)
                    nudMugshotIndex.Value = nudMugshotIndex.Maximum;
                else
                {
                    if (decimal.ToInt32(nudMugshotIndex.Value) - 1 == _objCharacter.MainMugshotIndex)
                        chkIsMainMugshot.Checked = true;
                    else if (chkIsMainMugshot.Checked == true)
                        chkIsMainMugshot.Checked = false;

                    UpdateMugshot(picMugshot, decimal.ToInt32(nudMugshotIndex.Value) - 1);
                }

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void nudMugshotIndex_ValueChanged(object sender, EventArgs e)
        {
            if (_objCharacter.Mugshots.Count == 0)
            {
                nudMugshotIndex.Minimum = 0;
                nudMugshotIndex.Maximum = 0;
                nudMugshotIndex.Value = 0;
            }
            else
            {
                nudMugshotIndex.Minimum = 1;
                if (nudMugshotIndex.Value < nudMugshotIndex.Minimum)
                    nudMugshotIndex.Value = nudMugshotIndex.Maximum;
                else if (nudMugshotIndex.Value > nudMugshotIndex.Maximum)
                    nudMugshotIndex.Value = nudMugshotIndex.Minimum;
            }

            if (decimal.ToInt32(nudMugshotIndex.Value) - 1 == _objCharacter.MainMugshotIndex)
                chkIsMainMugshot.Checked = true;
            else if (chkIsMainMugshot.Checked == true)
                chkIsMainMugshot.Checked = false;

            UpdateMugshot(picMugshot, decimal.ToInt32(nudMugshotIndex.Value) - 1);
        }

        private void chkIsMainMugshot_CheckedChanged(object sender, EventArgs e)
        {
            bool blnStatusChanged = false;
            if (chkIsMainMugshot.Checked == true && _objCharacter.MainMugshotIndex != decimal.ToInt32(nudMugshotIndex.Value) - 1)
            {
                _objCharacter.MainMugshotIndex = decimal.ToInt32(nudMugshotIndex.Value) - 1;
                blnStatusChanged = true;
            }
            else if (chkIsMainMugshot.Checked == false && decimal.ToInt32(nudMugshotIndex.Value) - 1 == _objCharacter.MainMugshotIndex)
            {
                if (_objCharacter.MainMugshotIndex == 0)
                {
                    if (_objCharacter.Mugshots.Count > 1)
                    {
                        _objCharacter.MainMugshotIndex = 1;
                        blnStatusChanged = true;
                    }
                    else
                        chkIsMainMugshot.Checked = true;
                }
                else
                {
                    _objCharacter.MainMugshotIndex = 0;
                    blnStatusChanged = true;
                }
            }

            if (blnStatusChanged)
            {
                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void cmdAddMetamagic_Click(object sender, EventArgs e)
        {
            if (_objCharacter.MAGEnabled)
            {
                // Make sure that the Initiate Grade is not attempting to go above the character's MAG CharacterAttribute.
                if (_objCharacter.InitiateGrade + 1 > _objCharacter.MAG.TotalValue ||
                    (_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept && _objCharacter.InitiateGrade + 1 > _objCharacter.MAGAdept.TotalValue))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotIncreaseInitiateGrade"), LanguageManager.GetString("MessageTitle_CannotIncreaseInitiateGrade"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Create the Initiate Grade object.
                InitiationGrade objGrade = new InitiationGrade(_objCharacter);
                objGrade.Create(_objCharacter.InitiateGrade + 1, _objCharacter.MAGEnabled, chkInitiationGroup.Checked, chkInitiationOrdeal.Checked, chkInitiationSchooling.Checked);
                _objCharacter.InitiationGrades.Add(objGrade);

                // Set the character's Initiate Grade.
                _objCharacter.InitiateGrade += 1;

                // Remove any existing Initiation Improvements.
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Initiation, "Initiation");

                // Create the replacement Improvement.
                ImprovementManager.CreateImprovement(_objCharacter, "MAG", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, _objCharacter.InitiateGrade);
                ImprovementManager.CreateImprovement(_objCharacter, "MAGAdept", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, _objCharacter.InitiateGrade);
                ImprovementManager.Commit(_objCharacter);

                // Update any Metamagic Improvements the character might have.
                foreach (Metamagic objMetamagic in _objCharacter.Metamagics)
                {
                    if (objMetamagic.Bonus != null)
                    {
                        // If the Bonus contains "Rating", remove the existing Improvement and create new ones.
                        if (objMetamagic.Bonus.InnerXml.Contains("Rating"))
                        {
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId);
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId, objMetamagic.Bonus, false, _objCharacter.InitiateGrade, objMetamagic.DisplayNameShort);
                        }
                    }
                }
            }
            else if (_objCharacter.RESEnabled)
            {
                tsMetamagicAddArt.Visible = false;
                tsMetamagicAddEnchantment.Visible = false;
                tsMetamagicAddEnhancement.Visible = false;
                tsMetamagicAddRitual.Visible = false;
                tsMetamagicAddMetamagic.Text = LanguageManager.GetString("Button_AddEcho");

                // Make sure that the Initiate Grade is not attempting to go above the character's RES CharacterAttribute.
                if (_objCharacter.SubmersionGrade + 1 > _objCharacter.RES.TotalValue)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotIncreaseSubmersionGrade"), LanguageManager.GetString("MessageTitle_CannotIncreaseSubmersionGrade"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Create the Initiate Grade object.
                InitiationGrade objGrade = new InitiationGrade(_objCharacter);
                objGrade.Create(_objCharacter.SubmersionGrade + 1, _objCharacter.RESEnabled, chkInitiationGroup.Checked, chkInitiationOrdeal.Checked, chkInitiationSchooling.Checked);
                _objCharacter.InitiationGrades.Add(objGrade);

                // Set the character's Submersion Grade.
                _objCharacter.SubmersionGrade += 1;

                // Remove any existing Initiation Improvements.
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Submersion, "Submersion");

                // Create the replacement Improvement.
                ImprovementManager.CreateImprovement(_objCharacter, "RES", Improvement.ImprovementSource.Submersion, "Submersion", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, _objCharacter.SubmersionGrade);
                ImprovementManager.Commit(_objCharacter);

                // Update any Echo Improvements the character might have.
                foreach (Metamagic objMetamagic in _objCharacter.Metamagics)
                {
                    if (objMetamagic.Bonus != null)
                    {
                        // If the Bonus contains "Rating", remove the existing Improvement and create new ones.
                        if (objMetamagic.Bonus.InnerXml.Contains("Rating"))
                        {
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Echo, objMetamagic.InternalId);
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Echo, objMetamagic.InternalId, objMetamagic.Bonus, false, _objCharacter.SubmersionGrade, objMetamagic.DisplayNameShort);
                        }
                    }
                }
            }

            UpdateInitiationGradeTree();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdDeleteMetamagic_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode.Level == 0)
            {
                // Locate the selected Grade.
                InitiationGrade objGrade = CommonFunctions.FindById(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.InitiationGrades);
                if (objGrade == null)
                    return;

                // Stop if this isn't the highest grade

                if (_objCharacter.MAGEnabled)
                {
                    if (objGrade.Grade != _objCharacter.InitiateGrade)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_DeleteGrade"), LanguageManager.GetString("MessageTitle_DeleteGrade"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }
                else if (_objCharacter.RESEnabled)
                {
                    if (objGrade.Grade != _objCharacter.SubmersionGrade)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_DeleteGrade"), LanguageManager.GetString("MessageTitle_DeleteGrade"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                }

                // We're deleting an entire grade
                string strMessage = string.Empty;
                if (_objCharacter.MAGEnabled)
                    strMessage = LanguageManager.GetString("Message_DeleteInitiateGrade");
                else if (_objCharacter.RESEnabled)
                    strMessage = LanguageManager.GetString("Message_DeleteSubmersionGrade");
                if (!CommonFunctions.ConfirmDelete(_objCharacter, strMessage))
                    return;

                // Remove the child objects (arts, metamagics, enhancements, enchantments, rituals)
                // Arts
                List<Art> lstRemoveArts = new List<Art>();
                foreach (Art objArt in _objCharacter.Arts)
                {
                    if (objArt.Grade == objGrade.Grade)
                    {
                        lstRemoveArts.Add(objArt);
                        foreach (TreeNode nodItem in treMetamagic.SelectedNode.Nodes)
                        {
                            if (nodItem.Tag.ToString() == objArt.InternalId.ToString())
                            {
                                treMetamagic.SelectedNode.Nodes.Remove(nodItem);
                                break;
                            }
                        }
                    }
                }
                foreach (Art objArt in lstRemoveArts)
                    _objCharacter.Arts.Remove(objArt);

                // Metamagics
                List<Metamagic> lstRemoveMetamagics = new List<Metamagic>();
                foreach (Metamagic objMetamagic in _objCharacter.Metamagics)
                {
                    if (objMetamagic.Grade == objGrade.Grade)
                    {
                        lstRemoveMetamagics.Add(objMetamagic);
                        foreach (TreeNode nodItem in treMetamagic.SelectedNode.Nodes)
                        {
                            if (nodItem.Tag.ToString() == objMetamagic.InternalId.ToString())
                            {
                                treMetamagic.SelectedNode.Nodes.Remove(nodItem);
                                break;
                            }
                        }
                    }
                }
                foreach (Metamagic objMetamagic in lstRemoveMetamagics)
                {
                    _objCharacter.Metamagics.Remove(objMetamagic);
                    ImprovementManager.RemoveImprovements(_objCharacter, objMetamagic.SourceType, objMetamagic.InternalId);
                }

                // Enhancements
                List<Enhancement> lstRemoveEnhancements = new List<Enhancement>();
                foreach (Enhancement objEnhancement in _objCharacter.Enhancements)
                {
                    if (objEnhancement.Grade == objGrade.Grade)
                    {
                        lstRemoveEnhancements.Add(objEnhancement);
                        foreach (TreeNode nodItem in treMetamagic.SelectedNode.Nodes)
                        {
                            if (nodItem.Tag.ToString() == objEnhancement.InternalId.ToString())
                            {
                                treMetamagic.SelectedNode.Nodes.Remove(nodItem);
                                break;
                            }
                        }
                    }
                }
                foreach (Enhancement objEnhancement in lstRemoveEnhancements)
                    _objCharacter.Enhancements.Remove(objEnhancement);

                // Spells
                List<Spell> lstRemoveSpells = new List<Spell>();
                foreach (Spell objSpell in _objCharacter.Spells)
                {
                    if (objSpell.Grade == objGrade.Grade)
                    {
                        lstRemoveSpells.Add(objSpell);
                        foreach (TreeNode nodItem in treMetamagic.SelectedNode.Nodes)
                        {
                            if (nodItem.Tag.ToString() == objSpell.InternalId.ToString())
                            {
                                treMetamagic.SelectedNode.Nodes.Remove(nodItem);
                                break;
                            }
                        }
                    }
                }
                foreach (Spell objSpell in lstRemoveSpells)
                    _objCharacter.Spells.Remove(objSpell);

                // Grade
                _objCharacter.InitiationGrades.Remove(objGrade);

                treMetamagic.SelectedNode.Remove();
                if (_objCharacter.MAGEnabled)
                {
                    _objCharacter.InitiateGrade = objGrade.Grade - 1;
                    // Remove any existing Initiation Improvements.
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Initiation, "Initiation");

                    // Create the replacement Improvement.
                    ImprovementManager.CreateImprovement(_objCharacter, "MAG", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, _objCharacter.InitiateGrade);
                    ImprovementManager.CreateImprovement(_objCharacter, "MAGAdept", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, _objCharacter.InitiateGrade);
                    ImprovementManager.Commit(_objCharacter);
                }
                else if (_objCharacter.RESEnabled)
                {
                    _objCharacter.SubmersionGrade = objGrade.Grade - 1;

                    // Remove any existing Initiation Improvements.
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Submersion, "Submersion");

                    // Create the replacement Improvement.
                    ImprovementManager.CreateImprovement(_objCharacter, "RES", Improvement.ImprovementSource.Submersion, "Submersion", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, _objCharacter.SubmersionGrade);
                    ImprovementManager.Commit(_objCharacter);
                }
            }
            else
            {
                // We're deleting a single bonus attached to a grade
                string strItemId = treMetamagic.SelectedNode.Tag.ToString();
                Art objArt = CommonFunctions.FindByIdWithNameCheck(strItemId, _objCharacter.Arts);
                if (objArt != null)
                {
                    string strMessage = string.Empty;
                    strMessage = LanguageManager.GetString("Message_DeleteArt");
                    if (!CommonFunctions.ConfirmDelete(_objCharacter, strMessage))
                        return;

                    _objCharacter.Arts.Remove(objArt);
                    treMetamagic.Nodes.Remove(treMetamagic.SelectedNode);
                    return;
                }

                Metamagic objMetamagic = CommonFunctions.FindByIdWithNameCheck(strItemId, _objCharacter.Metamagics);
                if (objMetamagic != null)
                {
                    string strMessage = string.Empty;
                    if (_objCharacter.MAGEnabled)
                        strMessage = LanguageManager.GetString("Message_DeleteMetamagic");
                    else if (_objCharacter.RESEnabled)
                        strMessage = LanguageManager.GetString("Message_DeleteEcho");
                    if (!CommonFunctions.ConfirmDelete(_objCharacter, strMessage))
                        return;

                    _objCharacter.Metamagics.Remove(objMetamagic);
                    ImprovementManager.RemoveImprovements(_objCharacter, objMetamagic.SourceType, objMetamagic.InternalId);
                    treMetamagic.Nodes.Remove(treMetamagic.SelectedNode);
                    return;
                }

                Enhancement objEnhancement = CommonFunctions.FindEnhancement(strItemId, _objCharacter);
                if (objEnhancement != null)
                {
                    string strMessage = string.Empty;
                    strMessage = LanguageManager.GetString("Message_DeleteEnhancement");
                    if (!CommonFunctions.ConfirmDelete(_objCharacter, strMessage))
                        return;

                    _objCharacter.Enhancements.Remove(objEnhancement);
                    foreach (Power objPower in _objCharacter.Powers)
                    {
                        if (objPower.Enhancements.Contains(objEnhancement))
                            objPower.Enhancements.Remove(objEnhancement);
                    }
                    treMetamagic.Nodes.Remove(treMetamagic.SelectedNode);
                    return;
                }

                Spell objSpell = CommonFunctions.FindByIdWithNameCheck(strItemId, _objCharacter.Spells);
                if (objSpell != null)
                {
                    string strMessage = string.Empty;
                    strMessage = LanguageManager.GetString("Message_DeleteSpell");
                    if (!CommonFunctions.ConfirmDelete(_objCharacter, strMessage))
                        return;

                    _objCharacter.Spells.Remove(objSpell);
                    treMetamagic.Nodes.Remove(treMetamagic.SelectedNode);


                    foreach (TreeNode objRootNode in treSpells.Nodes)
                    {
                        if (objRootNode.Text == ("Selected " + objSpell.Category))
                        {
                            foreach (TreeNode objNode in objRootNode.Nodes)
                            {
                                if (objNode.Tag.ToString() == objSpell.InternalId.ToString())
                                {
                                    objNode.Remove();
                                    goto EndSpellLoop;
                                }
                            }
                        }
                    }
                EndSpellLoop:;
                    return;
                }
            }

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddCritterPower_Click(object sender, EventArgs e)
        {
            // Make sure the Critter is allowed to have Optional Powers.
            XmlDocument objXmlDocument = XmlManager.Load("critters.xml");
            XmlNode objXmlCritter = objXmlDocument.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + _objCharacter.Metatype + "\"]");

            if (objXmlCritter == null)
            {
                objXmlDocument = XmlManager.Load("metatypes.xml");
                objXmlCritter = objXmlDocument.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + _objCharacter.Metatype + "\"]");
            }

            frmSelectCritterPower frmPickCritterPower = new frmSelectCritterPower(_objCharacter);
            frmPickCritterPower.ShowDialog(this);

            if (frmPickCritterPower.DialogResult == DialogResult.Cancel)
                return;

            objXmlDocument = XmlManager.Load("critterpowers.xml");
            XmlNode objXmlPower = objXmlDocument.SelectSingleNode("/chummer/powers/power[id = \"" + frmPickCritterPower.SelectedPower + "\"]");
            TreeNode objNode = new TreeNode();
            CritterPower objPower = new CritterPower(_objCharacter);
            objPower.Create(objXmlPower, objNode, frmPickCritterPower.SelectedRating);
            objPower.PowerPoints = frmPickCritterPower.PowerPoints;
            objNode.ContextMenuStrip = cmsCritterPowers;
            if (objPower.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.CritterPowers.Add(objPower);

            if (objPower.Category != "Weakness")
            {
                treCritterPowers.Nodes[0].Nodes.Add(objNode);
                treCritterPowers.Nodes[0].Expand();
            }
            else
            {
                treCritterPowers.Nodes[1].Nodes.Add(objNode);
                treCritterPowers.Nodes[1].Expand();
            }

            treCritterPowers.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickCritterPower.AddAgain)
                cmdAddCritterPower_Click(sender, e);
        }

        private void cmdDeleteCritterPower_Click(object sender, EventArgs e)
        {
            if (treCritterPowers.SelectedNode == null || treCritterPowers.SelectedNode.Level <= 0)
                return;

            if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteCritterPower")))
                return;

            // Locate the selected Critter Power.
            CritterPower objPower = CommonFunctions.FindByIdWithNameCheck(treCritterPowers.SelectedNode.Tag.ToString(), _objCharacter.CritterPowers);

            // Remove any Improvements that were created by the Critter Power.
            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.CritterPower, objPower.InternalId);

            _objCharacter.CritterPowers.Remove(objPower);
            treCritterPowers.SelectedNode.Remove();

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdDeleteComplexForm_Click(object sender, EventArgs e)
        {
            // Delete the selected Complex Form.
            if (treComplexForms.SelectedNode.Level == 1)
            {
                if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteComplexForm")))
                    return;

                // Locate the Program that is selected in the tree.
                ComplexForm objProgram = CommonFunctions.FindByIdWithNameCheck(treComplexForms.SelectedNode.Tag.ToString(), _objCharacter.ComplexForms);

                if (objProgram == null)
                    return;

                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.ComplexForm, objProgram.InternalId);

                _objCharacter.ComplexForms.Remove(objProgram);
                treComplexForms.SelectedNode.Remove();

                lblComplexFormsBP.Text = string.Format("{0} " + LanguageManager.GetString("String_Of") + " {1}", (_objCharacter.CFPLimit - _objCharacter.ComplexForms.Count).ToString(), _objCharacter.CFPLimit.ToString());

                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void cmdDeleteAIProgram_Click(object sender, EventArgs e)
        {
            // Delete the selected AI Program.
            if (treAIPrograms.SelectedNode.Level == 1)
            {
                // Locate the Program that is selected in the tree.
                AIProgram objProgram = CommonFunctions.FindByIdWithNameCheck(treAIPrograms.SelectedNode.Tag.ToString(), _objCharacter.AIPrograms);

                if (objProgram != null && objProgram.CanDelete)
                {
                    if (!CommonFunctions.ConfirmDelete(_objCharacter, LanguageManager.GetString("Message_DeleteAIProgram")))
                        return;

                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.AIProgram, objProgram.InternalId);

                    _objCharacter.AIPrograms.Remove(objProgram);
                    treAIPrograms.SelectedNode.Remove();

                    ScheduleCharacterUpdate();

                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }

        private void cmdLifeModule_Click(object sender, EventArgs e)
        {
            XmlDocument xdoc = XmlManager.Load("lifemodules.xml");

            XmlNodeList xnodes = xdoc.SelectNodes("chummer/stages/stage");
            //from 1 to second highest life module order possible (ye hardcoding is bad, but extra stage is a niche case)
            int i;
            for (i = 1; i < 5; i++)
            {
                XmlNode node = xdoc.SelectSingleNode("chummer/stages/stage[@order = \"" + i + "\"]");
                if (node == null)
                {
                    i--;
                    break;
                }
                Quality q = _objCharacter.Qualities.Find(x => (
                    x.Type == QualityType.LifeModule &&
                    x.Stage == node.InnerText
                ));
                if (q == null)
                {
                    break;
                }
            }
            //i--; //Counter last increment
            frmSelectLifeModule selectLifeModule = new frmSelectLifeModule(_objCharacter, i);
            selectLifeModule.ShowDialog(this);

            if (selectLifeModule.DialogResult == DialogResult.Cancel)
                return;

            XmlNode objXmlLifeModule = selectLifeModule.SelectedNode;

            TreeNode objNode = new TreeNode();
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Quality objLifeModule = new Quality(_objCharacter);

            objLifeModule.Create(objXmlLifeModule, _objCharacter, QualitySource.LifeModule, objNode, objWeapons, objWeaponNodes);
            objNode.ContextMenuStrip = cmsQuality; //Think this is responsible for the "add notes" menu. Think
            if (objLifeModule.InternalId == Guid.Empty.ToString())
                return;

            //Is there any reason not to add it?
            if (true)
            {
                treQualities.Nodes[2].Nodes.Add(objNode);
                treQualities.Nodes[2].Expand();

                _objCharacter.Qualities.Add(objLifeModule);

                foreach (Weapon objWeapon in objWeapons)
                    _objCharacter.Weapons.Add(objWeapon);

                foreach (TreeNode objWeaponNode in  objWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeapon;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }
            }
            else
            {
                //If not add, fallback (Dead code as we don't check for exceeding karma
                //Until validation
                //ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objLifeModule.InternalId);
            }

            //Stupid hardcoding but no sane way
            //To do group skills (not that anything else is sane)

            RefreshQualities(treQualities, cmsQuality);
            treQualities.SortCustom();
            ScheduleCharacterUpdate();
            RefreshContacts();
            RefreshSelectedCyberware();
            _blnIsDirty = true;
            UpdateWindowTitle();

            if (selectLifeModule.AddAgain)
                cmdLifeModule_Click(sender, e);
        }

        private void cmdAddQuality_Click(object sender, EventArgs e)
        {
            frmSelectQuality frmPickQuality = new frmSelectQuality(_objCharacter);
            frmPickQuality.ShowDialog(this);

            // Don't do anything else if the form was canceled.
            if (frmPickQuality.DialogResult == DialogResult.Cancel)
                return;

            XmlDocument objXmlDocument = XmlManager.Load("qualities.xml");
            XmlNode objXmlQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + frmPickQuality.SelectedQuality + "\"]");
            TreeNode objNode = new TreeNode();
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Quality objQuality = new Quality(_objCharacter);

            objQuality.Create(objXmlQuality, _objCharacter, QualitySource.Selected, objNode, objWeapons, objWeaponNodes);
            objNode.ContextMenuStrip = cmsQuality;
            if (objQuality.InternalId == Guid.Empty.ToString())
            {
                // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                return;
            }

            if (frmPickQuality.FreeCost)
                objQuality.BP = 0;

            // If the item being checked would cause the limit of 25 BP spent on Positive Qualities to be exceed, do not let it be checked and display a message.
            string strAmount = string.Empty;
            int intMaxQualityAmount = 0;
            strAmount = _objCharacter.GameplayOptionQualityLimit.ToString() + " " + LanguageManager.GetString("String_Karma");
            intMaxQualityAmount = _objCharacter.GameplayOptionQualityLimit;

            // Make sure that adding the Quality would not cause the character to exceed their BP limits.
            int intBP = 0;
            bool blnAddItem = true;

            // Add the cost of the Quality that is being added.
            if (objQuality.ContributeToLimit)
                intBP += objQuality.BP;

            if (objQuality.Type == QualityType.Negative)
            {
                // Calculate the cost of the current Negative Qualities.
                foreach (Quality objCharacterQuality in _objCharacter.Qualities)
                {
                    if (objCharacterQuality.Type == QualityType.Negative && objCharacterQuality.ContributeToLimit)
                        intBP += objCharacterQuality.BP;
                }

                // Include the BP used by Enemies.
                if (lblEnemiesBP.Text.Contains(LanguageManager.GetString("String_BP")))
                    intBP += int.Parse(lblEnemiesBP.Text.Replace(LanguageManager.GetString("String_Karma"), string.Empty));
                else
                    intBP += int.Parse(lblEnemiesBP.Text.Replace(" " + LanguageManager.GetString("String_Karma"), string.Empty));

                // Include the amount from Free Negative Quality BP cost Improvements.
                intBP -= (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeNegativeQualities) * _objOptions.KarmaQuality);

                // Check if adding this Quality would put the character over their limit.
                if (!_objOptions.ExceedNegativeQualities)
                {
                    if (intBP < (intMaxQualityAmount * -1) && !_objCharacter.IgnoreRules)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NegativeQualityLimit").Replace("{0}", strAmount), LanguageManager.GetString("MessageTitle_NegativeQualityLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        blnAddItem = false;
                    }
                    if (_objCharacter.MetatypeBP < 0)
                    {
                        if ((intBP + _objCharacter.MetatypeBP) < (intMaxQualityAmount * -1) && !_objCharacter.IgnoreRules)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_NegativeQualityAndMetatypeLimit").Replace("{0}", strAmount), LanguageManager.GetString("MessageTitle_NegativeQualityLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            blnAddItem = false;
                        }
                    }
                }
            }
            else
            {
                if (objQuality.ContributeToLimit || objQuality.ContributeToBP)
                {
                    // Calculate the cost of the current Positive Qualities.
                    foreach (Quality objCharacterQuality in _objCharacter.Qualities)
                    {
                        if (objCharacterQuality.Type == QualityType.Positive && objCharacterQuality.ContributeToLimit)
                            intBP += objCharacterQuality.BP;
                    }
                    if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                        intBP *= _objOptions.KarmaQuality;

                    // Include the amount from Free Negative Quality BP cost Improvements.
                    intBP -= (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreePositiveQualities) *
                              _objOptions.KarmaQuality);

                    // Check if adding this Quality would put the character over their limit.
                    if (!_objOptions.ExceedPositiveQualities)
                    {
                        if (intBP > intMaxQualityAmount && !_objCharacter.IgnoreRules)
                        {
                            MessageBox.Show(
                                LanguageManager.GetString("Message_PositiveQualityLimit")
                                    .Replace("{0}", strAmount),
                                LanguageManager.GetString("MessageTitle_PositiveQualityLimit"),
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                            blnAddItem = false;
                        }
                    }
                }
            }

            if (blnAddItem)
            {
                _objCharacter.Qualities.Add(objQuality);

                // Add any created Weapons to the character.
                foreach (Weapon objWeapon in objWeapons)
                    _objCharacter.Weapons.Add(objWeapon);

                // Create the Weapon Node if one exists.
                foreach (TreeNode objWeaponNode in objWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeapon;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }
                RefreshQualities(treQualities, cmsQuality, true);
                treQualities.SortCustom();
            }
            else
            {
                // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objQuality.InternalId);
            }

            nudQualityLevel_UpdateValue(null);
            UpdateMentorSpirits();
            ScheduleCharacterUpdate();
            RefreshMartialArts();
            RefreshAIPrograms();
            RefreshLimitModifiers();
            RefreshContacts();
            RefreshSelectedCyberware();
            RefreshSpells(treSpells, cmsSpell, _objCharacter);
            PopulateGearList();
            RefreshCritterPowers(treCritterPowers,cmsCritterPowers);
            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickQuality.AddAgain)
                cmdAddQuality_Click(sender, e);
        }

        /*
        private Quality AddQuality(XmlNode objXmlAddQuality, XmlNode objXmlSelectedQuality, List<Weapon> objWeapons, List<TreeNode> objWeaponNodes)
        {
            string strForceValue = string.Empty;
            if (objXmlAddQuality.Attributes["select"] != null)
                strForceValue = objXmlAddQuality.Attributes["select"].InnerText;
            bool blnAddQuality = true;

            // Make sure the character does not yet have this Quality.
            foreach (Quality objCharacterQuality in _objCharacter.Qualities)
            {
                if (objCharacterQuality.Name == objXmlAddQuality.InnerText && objCharacterQuality.Extra == strForceValue)
                {
                    blnAddQuality = false;
                    break;
                }
            }

            if (blnAddQuality)
            {
                TreeNode objAddQualityNode = new TreeNode();
                List<Weapon> objAddWeapons = new List<Weapon>();
                List<TreeNode> objAddWeaponNodes = new List<TreeNode>();
                Quality objAddQuality = new Quality(_objCharacter);
                objAddQuality.Create(objXmlSelectedQuality, _objCharacter, QualitySource.Selected, objAddQualityNode, objWeapons,
                    objWeaponNodes, strForceValue);

                if (objAddQuality.Type == QualityType.Positive)
                {
                    treQualities.Nodes[0].Nodes.Add(objAddQualityNode);
                    treQualities.Nodes[0].Expand();
                }
                else
                {
                    treQualities.Nodes[1].Nodes.Add(objAddQualityNode);
                    treQualities.Nodes[1].Expand();
                }


                // Add any created Weapons to the character.
                foreach (Weapon objWeapon in objAddWeapons)
                    _objCharacter.Weapons.Add(objWeapon);

                // Create the Weapon Node if one exists.
                foreach (TreeNode objWeaponNode in objAddWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeapon;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }

                return objAddQuality;
            }

            return null;
        }
        */

        private bool RemoveQuality(Quality objSelectedQuality, bool blnConfirmDelete = true, bool blnCompleteDelete = true)
        {
            XmlDocument objXmlDocument = XmlManager.Load(objSelectedQuality.Type == QualityType.LifeModule ? "lifemodules.xml" : "qualities.xml");
            XmlNode objXmlSelectedQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objSelectedQuality.Name + "\"]");
            // Qualities that come from a Metatype cannot be removed.
            if (objSelectedQuality.OriginSource == QualitySource.Metatype)
            {
                MessageBox.Show(LanguageManager.GetString("Message_MetavariantQuality"), LanguageManager.GetString("MessageTitle_MetavariantQuality"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            else if (objSelectedQuality.OriginSource == QualitySource.Improvement)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ImprovementQuality").Replace("{0}", objSelectedQuality.SourceName), LanguageManager.GetString("MessageTitle_MetavariantQuality"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            else if (objSelectedQuality.OriginSource == QualitySource.MetatypeRemovable)
            {
                // Look up the cost of the Quality.
                XmlNode objXmlMetatypeQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[id = \"" + objSelectedQuality.QualityId + "\"]");
                int intBP = Convert.ToInt32(objXmlSelectedQuality["karma"].InnerText) * -1;
                int intShowBP = intBP;
                if (blnCompleteDelete)
                    intShowBP *= objSelectedQuality.Levels;
                if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                    intShowBP *= _objOptions.KarmaQuality;
                string strBP = intShowBP.ToString();
                strBP += " " + LanguageManager.GetString("String_Karma");

                if (blnConfirmDelete && !CommonFunctions.ConfirmDelete(_objCharacter, blnCompleteDelete ?
                                                                        LanguageManager.GetString("Message_DeleteMetatypeQuality").Replace("{0}", strBP) :
                                                                        LanguageManager.GetString("Message_LowerMetatypeQualityLevel").Replace("{0}", strBP)))
                    return false;

                // Remove any Improvements that the Quality might have.
                if (objXmlMetatypeQuality["bonus"] != null)
                    objXmlMetatypeQuality["bonus"].InnerText = string.Empty;

                TreeNode objEmptyNode = new TreeNode();
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                Quality objReplaceQuality = new Quality(_objCharacter);

                objReplaceQuality.Create(objXmlMetatypeQuality, _objCharacter, QualitySource.Selected, objEmptyNode, objWeapons, objWeaponNodes);
                objReplaceQuality.BP *= -1;
                // If a Negative Quality is being bought off, the replacement one is Positive.
                if (objSelectedQuality.Type == QualityType.Positive)
                    objSelectedQuality.Type = QualityType.Negative;
                else
                    objReplaceQuality.Type = QualityType.Positive;
                // The replacement Quality does not count towards the BP limit of the new type, nor should it be printed.
                objReplaceQuality.AllowPrint = false;
                objReplaceQuality.ContributeToLimit = false;
                _objCharacter.Qualities.Add(objReplaceQuality);
            }
            else
            {
                if (blnConfirmDelete &&!CommonFunctions.ConfirmDelete(_objCharacter, blnCompleteDelete ? LanguageManager.GetString("Message_DeleteQuality") : LanguageManager.GetString("Message_LowerQualityLevel")))
                    return false;
            }

            // Remove the Improvements that were created by the Quality.
            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objSelectedQuality.InternalId);

            if (objSelectedQuality.Name == "One Trick Pony")
            {
                if (treMartialArts.Nodes[1].Nodes.Count > 0)
                {
                    foreach (MartialArt objMartialArt in _objCharacter.MartialArts)
                    {
                        if (objMartialArt.Name == "One Trick Pony")
                        {
                            _objCharacter.MartialArts.Remove(objMartialArt);
                            treMartialArts.Nodes[1].Nodes[0].Remove();
                            break;
                        }
                    }
                }
            }

            // Remove the Improvements that were created by the Quality.
            switch (objSelectedQuality.Name)
            {
                case "Changeling (Class I SURGE)":
                case "Changeling (Class II SURGE)":
                case "Changeling (Class III SURGE)":
                    _objCharacter.MetageneticLimit = 0;
                    break;
                default:
                    break;
            }

            XmlNode objXmlDeleteQuality;
            if (objSelectedQuality.Type == QualityType.LifeModule)
            {
                objXmlDeleteQuality = Quality.GetNodeOverrideable(objSelectedQuality.QualityId);
            }
            else
            {
                objXmlDeleteQuality = objXmlSelectedQuality;
            }

            // Remove any Weapons created by the Quality if applicable.
            if (objSelectedQuality.WeaponID != Guid.Empty.ToString())
            {
                List<string> lstNodesToRemoveIds = new List<string>();
                foreach (Weapon objWeapon in _objCharacter.Weapons.GetAllDescendants(x => x.Children))
                {
                    if (objWeapon.ParentID == objSelectedQuality.InternalId)
                    {
                        lstNodesToRemoveIds.Add(objWeapon.InternalId);
                        CommonFunctions.DeleteWeapon(_objCharacter, objWeapon, treWeapons, treVehicles);
                        // We can remove here because GetAllDescendants creates a new IEnumerable, different from these two
                        if (objWeapon.Parent != null)
                            objWeapon.Parent.Children.Remove(objWeapon);
                        else
                            _objCharacter.Weapons.Remove(objWeapon);
                    }
                }
                foreach (string strNodeId in lstNodesToRemoveIds)
                {
                    // Remove the Weapons from the TreeView.
                    CommonFunctions.FindNode(strNodeId, treWeapons)?.Remove();
                }
            }

            // Fix for legacy characters with old addqualities improvements.
            if (objXmlDeleteQuality?["addqualities"] != null)
            {
                RemoveAddedQualities(objXmlDeleteQuality.SelectNodes("addqualities/addquality"), treQualities);
            }

            _objCharacter.Qualities.Remove(objSelectedQuality);
            return true;
        }

        private void cmdDeleteQuality_Click(object sender, EventArgs e)
        {
            // Locate the selected Quality.
            if (treQualities.SelectedNode == null || treQualities.SelectedNode.Level <= 0)
                return;

            Quality objSelectedQuality = CommonFunctions.FindByIdWithNameCheck(treQualities.SelectedNode.Tag.ToString(), _objCharacter.Qualities);
            string strInternalIDToRemove = objSelectedQuality.QualityId;
            // Can't do a foreach because we're removing items, this is the next best thing
            bool blnFirstRemoval = true;
            for(int i = _objCharacter.Qualities.Count - 1; i >= 0; --i)
            {
                Quality objLoopQuality = _objCharacter.Qualities.ElementAt(i);
                if (objLoopQuality.QualityId == strInternalIDToRemove)
                {
                    if (!RemoveQuality(objLoopQuality, blnFirstRemoval))
                        break;
                    blnFirstRemoval = false;
                    if (i > _objCharacter.Qualities.Count)
                    {
                        i = _objCharacter.Qualities.Count;
                    }
                }
            }

            // Only refresh if at least one quality was removed
            if (!blnFirstRemoval)
            {
                RefreshQualities(treQualities, cmsQuality, true);
                treQualities.SortCustom();
                nudQualityLevel_UpdateValue(null);
                UpdateMentorSpirits();
                ScheduleCharacterUpdate();
                RefreshMartialArts();
                RefreshAIPrograms();
                RefreshLimitModifiers();
                RefreshSpells(treSpells, cmsSpell, _objCharacter);
                PopulateGearList();
                RefreshContacts();
                RefreshSelectedCyberware();
                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void cmdAddLimitModifier_Click(object sender, EventArgs e)
        {
            // Select the Limit node if we're currently on a child.
            while (treLimit.SelectedNode != null && treLimit.SelectedNode.Level > 1)
                treLimit.SelectedNode = treLimit.SelectedNode.Parent;

            if (treLimit.SelectedNode == null || treLimit.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectLimitModifier"), LanguageManager.GetString("MessageTitle_SelectLimitModifier"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectLimitModifier frmPickLimitModifier = new frmSelectLimitModifier();
            frmPickLimitModifier.ShowDialog(this);

            if (frmPickLimitModifier.DialogResult == DialogResult.Cancel)
                return;

            // Create the new limit modifier.
            TreeNode objNode = new TreeNode();
            LimitModifier objLimitModifier = new LimitModifier(_objCharacter);
            string strLimit = treLimit.SelectedNode.Text;
            string strCondition = frmPickLimitModifier.SelectedCondition;
            objLimitModifier.Create(frmPickLimitModifier.SelectedName, frmPickLimitModifier.SelectedBonus, strLimit, strCondition, objNode);
            if (objLimitModifier.InternalId == Guid.Empty.ToString())
                return;

            objNode.ContextMenuStrip = cmsLimitModifier;
            _objCharacter.LimitModifiers.Add(objLimitModifier);

            treLimit.SelectedNode.Nodes.Add(objNode);
            treLimit.SelectedNode.Expand();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddLocation_Click(object sender, EventArgs e)
        {
            // Add a new location to the Gear Tree.
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            _objCharacter.Locations.Add(strLocation);

            TreeNode objLocation = new TreeNode();
            objLocation.Tag = strLocation;
            objLocation.Text = strLocation;
            objLocation.ContextMenuStrip = cmsGearLocation;
            treGear.Nodes.Add(objLocation);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddWeaponLocation_Click(object sender, EventArgs e)
        {
            // Add a new location to the Weapons Tree.
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            _objCharacter.WeaponLocations.Add(strLocation);

            TreeNode objLocation = new TreeNode();
            objLocation.Tag = strLocation;
            objLocation.Text = strLocation;
            objLocation.ContextMenuStrip = cmsWeaponLocation;
            treWeapons.Nodes.Add(objLocation);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdCreateStackedFocus_Click(object sender, EventArgs e)
        {
            int intFree = 0;
            List<Gear> lstGear = new List<Gear>();
            List<Gear> lstStack = new List<Gear>();

            // Run through all of the Foci the character has and count the un-Bonded ones.
            foreach (Gear objGear in _objCharacter.Gear)
            {
                if (objGear.Category == "Foci" || objGear.Category == "Metamagic Foci")
                {
                    if (!objGear.Bonded)
                    {
                        intFree++;
                        lstGear.Add(objGear);
                    }
                }
            }

            // If the character does not have at least 2 un-Bonded Foci, display an error and leave.
            if (intFree < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotStackFoci"), LanguageManager.GetString("MessageTitle_CannotStackFoci"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectItem frmPickItem = new frmSelectItem();

            // Let the character select the Foci they'd like to stack, stopping when they either click Cancel or there are no more items left in the list.
            do
            {
                frmPickItem.Gear = lstGear;
                frmPickItem.AllowAutoSelect = false;
                frmPickItem.Description = LanguageManager.GetString("String_SelectItemFocus");
                frmPickItem.ShowDialog(this);

                if (frmPickItem.DialogResult == DialogResult.OK)
                {
                    // Move the item from the Gear list to the Stack list.
                    foreach (Gear objGear in lstGear)
                    {
                        if (objGear.InternalId == frmPickItem.SelectedItem)
                        {
                            objGear.Bonded = true;
                            lstStack.Add(objGear);
                            lstGear.Remove(objGear);
                            break;
                        }
                    }
                }
            } while (lstGear.Count > 0 && frmPickItem.DialogResult != DialogResult.Cancel);

            // Make sure at least 2 Foci were selected.
            if (lstStack.Count < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_StackedFocusMinimum"), LanguageManager.GetString("MessageTitle_CannotStackFoci"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Make sure the combined Force of the Foci do not exceed 6.
            if (!_objOptions.AllowHigherStackedFoci)
            {
                int intCombined = 0;
                foreach (Gear objGear in lstStack)
                    intCombined += objGear.Rating;
                if (intCombined > 6)
                {
                    foreach (Gear objGear in lstStack)
                        objGear.Bonded = false;
                    MessageBox.Show(LanguageManager.GetString("Message_StackedFocusForce"), LanguageManager.GetString("MessageTitle_CannotStackFoci"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            // Create the Stacked Focus.
            StackedFocus objStack = new StackedFocus(_objCharacter);
            objStack.Gear = lstStack;
            _objCharacter.StackedFoci.Add(objStack);

            // Remove the Gear from the character and replace it with a Stacked Focus item.
            decimal decCost = 0;
            foreach (Gear objGear in lstStack)
            {
                decCost += objGear.TotalCost;
                _objCharacter.Gear.Remove(objGear);

                // Remove the TreeNode from Gear.
                foreach (TreeNode nodRoot in treGear.Nodes)
                {
                    foreach (TreeNode nodItem in nodRoot.Nodes)
                    {
                        if (nodItem.Tag.ToString() == objGear.InternalId)
                        {
                            nodRoot.Nodes.Remove(nodItem);
                            break;
                        }
                    }
                }
            }

            Gear objStackItem = new Gear(_objCharacter);
            objStackItem.Category = "Stacked Focus";
            objStackItem.Name = "Stacked Focus: " + objStack.Name;
            objStackItem.MinRating = 0;
            objStackItem.MaxRating = 0;
            objStackItem.Source = "SM";
            objStackItem.Page = "84";
            objStackItem.Cost = decCost.ToString(GlobalOptions.CultureInfo);
            objStackItem.Avail = "0";

            TreeNode nodStackNode = new TreeNode();
            nodStackNode.Text = objStackItem.DisplayNameShort;
            nodStackNode.Tag = objStackItem.InternalId;

            treGear.Nodes[0].Nodes.Add(nodStackNode);

            _objCharacter.Gear.Add(objStackItem);

            objStack.GearId = objStackItem.InternalId;

            _blnIsDirty = true;
            CommonFunctions.PopulateFocusList(_objCharacter, treFoci);
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        private void cmdAddArmor_Click(object sender, EventArgs e)
        {
            frmSelectArmor frmPickArmor = new frmSelectArmor(_objCharacter);
            frmPickArmor.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickArmor.DialogResult == DialogResult.Cancel)
                return;

            // Open the Armor XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("armor.xml");

            XmlNode objXmlArmor = objXmlDocument.SelectSingleNode("/chummer/armors/armor[name = \"" + frmPickArmor.SelectedArmor + "\"]");


            List<Weapon> objWeapons = new List<Weapon>();
            TreeNode objNode = new TreeNode();
            Armor objArmor = new Armor(_objCharacter);

            objArmor.Create(objXmlArmor, objNode, cmsArmorMod, cmsArmorGear, frmPickArmor.Rating, objWeapons);
            objArmor.DiscountCost = frmPickArmor.BlackMarketDiscount;
            if (objArmor.InternalId == Guid.Empty.ToString())
                return;

            if (frmPickArmor.FreeCost)
            {
                objArmor.Cost = 0;
            }
            _objCharacter.Armor.Add(objArmor);
            objNode.ContextMenuStrip = cmsArmor;
            treArmor.Nodes[0].Nodes.Add(objNode);
            treArmor.Nodes[0].Expand();
            treArmor.SelectedNode = objNode;

            foreach (Weapon objWeapon in objWeapons)
            {
                _objCharacter.Weapons.Add(objWeapon);
                CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
            }

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickArmor.AddAgain)
                cmdAddArmor_Click(sender, e);
        }

        private void cmdAddArmorBundle_Click(object sender, EventArgs e)
        {
            // Add a new location to the Armor Tree.
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            _objCharacter.ArmorBundles.Add(strLocation);

            TreeNode objLocation = new TreeNode();
            objLocation.Tag = strLocation;
            objLocation.Text = strLocation;
            objLocation.ContextMenuStrip = cmsArmorLocation;
            treArmor.Nodes.Add(objLocation);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdArmorEquipAll_Click(object sender, EventArgs e)
        {
            // Equip all of the Armor in the Armor Bundle.
            foreach (Armor objArmor in _objCharacter.Armor)
            {
                if (objArmor.Location == treArmor.SelectedNode.Tag.ToString() || (treArmor.SelectedNode == treArmor.Nodes[0] && string.IsNullOrEmpty(objArmor.Location)))
                {
                    objArmor.Equipped = true;
                    // Add the Armor's Improevments to the character.
                    if (objArmor.Bonus != null)
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.Bonus, false, 1, objArmor.DisplayNameShort);
                    if (objArmor.WirelessOn && objArmor.WirelessBonus != null)
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.WirelessBonus, false, 1, objArmor.DisplayNameShort);
                    // Add the Improvements from any Armor Mods in the Armor.
                    foreach (ArmorMod objMod in objArmor.ArmorMods)
                    {
                        if (objMod.Equipped)
                        {
                            if (objMod.Bonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort);
                            if (objMod.WirelessOn && objMod.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.WirelessBonus, false, objMod.Rating, objMod.DisplayNameShort);
                            // Add the Improvements from any Gear in the Armor.
                            foreach (Gear objGear in objMod.Gear)
                            {
                                if (objGear.Equipped)
                                {
                                    if (objGear.Bonus != null)
                                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                                    if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                                }
                            }
                        }
                    }
                    // Add the Improvements from any Gear in the Armor.
                    foreach (Gear objGear in objArmor.Gear)
                    {
                        if (objGear.Equipped)
                        {
                            if (objGear.Bonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                            if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                        }
                    }
                }
            }
            RefreshSelectedArmor();

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        private void cmdArmorUnEquipAll_Click(object sender, EventArgs e)
        {
            // En-equip all of the Armor in the Armor Bundle.
            foreach (Armor objArmor in _objCharacter.Armor)
            {
                if (objArmor.Location == treArmor.SelectedNode.Tag.ToString() || (treArmor.SelectedNode == treArmor.Nodes[0] && string.IsNullOrEmpty(objArmor.Location)))
                {
                    objArmor.Equipped = false;
                    // Remove any Improvements the Armor created.
                    if (objArmor.Bonus != null || (objArmor.WirelessOn && objArmor.WirelessBonus != null))
                        ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Armor, objArmor.InternalId);
                    // Remove any Improvements from any Armor Mods in the Armor.
                    foreach (ArmorMod objMod in objArmor.ArmorMods)
                    {
                        if (objMod.Bonus != null || (objMod.WirelessOn && objMod.WirelessBonus != null))
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                        // Remove any Improvements from any Gear in the Armor.
                        foreach (Gear objGear in objMod.Gear)
                        {
                            if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                        }
                    }
                    // Remove any Improvements from any Gear in the Armor.
                    foreach (Gear objGear in objArmor.Gear)
                    {
                        if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                    }
                }
            }
            RefreshSelectedArmor();

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        private void cmdAddVehicleLocation_Click(object sender, EventArgs e)
        {
            // Make sure a Vehicle is selected.
            Vehicle objVehicle = null;
            if (treVehicles.SelectedNode != null && treVehicles.SelectedNode.Level == 1)
            {
                objVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            }
            else
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectVehicleLocation"), LanguageManager.GetString("MessageTitle_SelectVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Add a new location to the selected Vehicle.
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            objVehicle.Locations.Add(strLocation);

            TreeNode objLocation = new TreeNode();
            objLocation.Tag = strLocation;
            objLocation.Text = strLocation;
            objLocation.ContextMenuStrip = cmsVehicleLocation;
            treVehicles.SelectedNode.Nodes.Add(objLocation);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdAddPet_Click(object sender, EventArgs e)
        {
            Contact objContact = new Contact(_objCharacter);
            objContact.EntityType = ContactType.Pet;
            _objCharacter.Contacts.Add(objContact);

            PetControl objContactControl = new PetControl();
            objContactControl.ContactObject = objContact;

            // Attach an EventHandler for the DeleteContact and FileNameChanged Events.
            objContactControl.DeleteContact += objPet_DeleteContact;
            objContactControl.FileNameChanged += objPet_FileNameChanged;

            // Add the control to the Panel.
            panPets.Controls.Add(objContactControl);
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region ContextMenu Events
        private void ContextMenu_Opening(object sender, CancelEventArgs e)
        {
            foreach (ToolStripItem objItem in ((ContextMenuStrip)sender).Items)
            {
                if (objItem.Tag != null)
                    objItem.Text = LanguageManager.GetString(objItem.Tag.ToString());
            }
        }

        private void ContextMenu_DropDownOpening(object sender, EventArgs e)
        {
            foreach (ToolStripItem objItem in ((ToolStripDropDownItem)sender).DropDownItems)
            {
                if (objItem.Tag != null)
                    objItem.Text = LanguageManager.GetString(objItem.Tag.ToString());
            }
        }

        private void tsCyberwareAddAsPlugin_Click(object sender, EventArgs e)
        {
            // Make sure a parent items is selected, then open the Select Cyberware window.
            if (treCyberware.SelectedNode == null || treCyberware.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectCyberware"), LanguageManager.GetString("MessageTitle_SelectCyberware"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = false;
            if (treCyberware.SelectedNode.Parent == treCyberware.Nodes[1])
            {
                blnAddAgain = PickCyberware(Improvement.ImprovementSource.Bioware);
            }
            else
            {
                blnAddAgain = PickCyberware();
            }
            if (blnAddAgain)
            {
                treCyberware.SelectedNode = treCyberware.SelectedNode.Parent;
                tsCyberwareAddAsPlugin_Click(sender, e);
            }
        }

        private void tsWeaponAddAccessory_Click(object sender, EventArgs e)
        {
            // Make sure a parent item is selected, then open the Select Accessory window.
            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponAccessory"), LanguageManager.GetString("MessageTitle_SelectWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Weapon that is selected in the Tree.
            Weapon objWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);

            if (objWeapon == null)
            {
                return;
            }

            // Accessories cannot be added to Cyberweapons.
            if (objWeapon.Cyberware)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CyberweaponNoAccessory"), LanguageManager.GetString("MessageTitle_CyberweaponNoAccessory"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Make sure the Weapon allows Accessories to be added to it.
            if (!objWeapon.AllowAccessory)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotModifyWeapon"), LanguageManager.GetString("MessageTitle_CannotModifyWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Weapons XML file and locate the selected Weapon.
            XmlNode objXmlWeapon = objWeapon.MyXmlNode;
            if (objXmlWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotFindWeapon"), LanguageManager.GetString("MessageTitle_CannotModifyWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectWeaponAccessory frmPickWeaponAccessory = new frmSelectWeaponAccessory(_objCharacter);
            XmlNodeList objXmlMountList = objXmlWeapon.SelectNodes("accessorymounts/mount");
            string strMounts = string.Empty;
            foreach (XmlNode objXmlMount in objXmlMountList)
            {
                bool blnFound = false;
                foreach (WeaponAccessory objMod in objWeapon.WeaponAccessories)
                {
                    if ((objMod.Mount == objXmlMount.InnerText) || (objMod.ExtraMount == objXmlMount.InnerText))
                    {
                        blnFound = true;
                        break;
                    }
                }
                if (!blnFound)
                {
                    strMounts += objXmlMount.InnerText + "/";
                }
            }

            // Remove the trailing /
            if (!string.IsNullOrEmpty(strMounts) && strMounts.Contains('/'))
                strMounts = strMounts.Substring(0, strMounts.Length - 1);

            frmPickWeaponAccessory.AllowedMounts = strMounts;

            frmPickWeaponAccessory.CurrentWeaponName = objWeapon.Name;
            frmPickWeaponAccessory.WeaponCost = objWeapon.Cost;
            frmPickWeaponAccessory.AccessoryMultiplier = objWeapon.AccessoryMultiplier;
            frmPickWeaponAccessory.InstalledAccessories = objWeapon.WeaponAccessories;
            frmPickWeaponAccessory.ShowDialog();

            if (frmPickWeaponAccessory.DialogResult == DialogResult.Cancel)
                return;

            // Locate the selected piece.
            objXmlWeapon = XmlManager.Load("weapons.xml").SelectSingleNode("/chummer/accessories/accessory[name = \"" + frmPickWeaponAccessory.SelectedAccessory + "\"]");

            TreeNode objNode = new TreeNode();
            WeaponAccessory objAccessory = new WeaponAccessory(_objCharacter);
            objAccessory.Create(objXmlWeapon, objNode, frmPickWeaponAccessory.SelectedMount,Convert.ToInt32(frmPickWeaponAccessory.SelectedRating), cmsWeaponAccessoryGear);
            objAccessory.Parent = objWeapon;

            if (frmPickWeaponAccessory.FreeCost)
            {
                objAccessory.Cost = "0";
            }
            else if (objAccessory.Cost.StartsWith("Variable"))
            {
                decimal decMin = 0;
                decimal decMax = decimal.MaxValue;
                string strCost = objAccessory.Cost.TrimStart("Variable", true).Trim("()".ToCharArray());
                if (strCost.Contains('-'))
                {
                    string[] strValues = strCost.Split('-');
                    decMin = Convert.ToDecimal(strValues[0], GlobalOptions.InvariantCultureInfo);
                    decMax = Convert.ToDecimal(strValues[1], GlobalOptions.InvariantCultureInfo);
                }
                else
                    decMin = Convert.ToDecimal(strCost.FastEscape('+'), GlobalOptions.InvariantCultureInfo);

                if (decMin != 0 || decMax != decimal.MaxValue)
                {
                    string strNuyenFormat = _objCharacter.Options.NuyenFormat;
                    int intDecimalPlaces = strNuyenFormat.IndexOf('.');
                    if (intDecimalPlaces == -1)
                        intDecimalPlaces = 0;
                    else
                        intDecimalPlaces = strNuyenFormat.Length - intDecimalPlaces - 1;
                    frmSelectNumber frmPickNumber = new frmSelectNumber(intDecimalPlaces);
                    if (decMax > 1000000)
                        decMax = 1000000;
                    frmPickNumber.Minimum = decMin;
                    frmPickNumber.Maximum = decMax;
                    frmPickNumber.Description = LanguageManager.GetString("String_SelectVariableCost").Replace("{0}", objAccessory.DisplayNameShort);
                    frmPickNumber.AllowCancel = false;
                    frmPickNumber.ShowDialog();
                    objAccessory.Cost = frmPickNumber.SelectedValue.ToString();
                }
            }
            objWeapon.WeaponAccessories.Add(objAccessory);

            objNode.ContextMenuStrip = cmsWeaponAccessory;
            treWeapons.SelectedNode.Nodes.Add(objNode);
            treWeapons.SelectedNode.Expand();

            ScheduleCharacterUpdate();
            RefreshSelectedWeapon();

            if (frmPickWeaponAccessory.AddAgain)
                tsWeaponAddAccessory_Click(sender, e);
        }

        private void tsAddArmorMod_Click(object sender, EventArgs e)
        {
            while (treArmor.SelectedNode != null && treArmor.SelectedNode.Level > 1)
                treArmor.SelectedNode = treArmor.SelectedNode.Parent;

            // Make sure a parent item is selected, then open the Select Accessory window.
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmor"), LanguageManager.GetString("MessageTitle_SelectArmor"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Armor that is selected in the tree.
            Armor objArmor = CommonFunctions.FindByIdWithNameCheck(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);

            // Open the Armor XML file and locate the selected Armor.
            XmlDocument objXmlDocument = XmlManager.Load("armor.xml");

            XmlNode objXmlArmor = objXmlDocument.SelectSingleNode("/chummer/armors/armor[name = \"" + objArmor.Name + "\"]");

            frmSelectArmorMod frmPickArmorMod = new frmSelectArmorMod(_objCharacter);
            frmPickArmorMod.ArmorCost = objArmor.Cost;
            frmPickArmorMod.AllowedCategories = objArmor.Category + "," + objArmor.Name;
            frmPickArmorMod.CapacityDisplayStyle = objArmor.CapacityDisplayStyle;
            if (objXmlArmor.InnerXml.Contains("<addmodcategory>"))
                frmPickArmorMod.AllowedCategories += "," + objXmlArmor["addmodcategory"].InnerText;

            frmPickArmorMod.ShowDialog(this);

            if (frmPickArmorMod.DialogResult == DialogResult.Cancel)
                return;

            // Locate the selected piece.
            objXmlArmor = objXmlDocument.SelectSingleNode("/chummer/mods/mod[name = \"" + frmPickArmorMod.SelectedArmorMod + "\"]");

            TreeNode objNode = new TreeNode();
            ArmorMod objMod = new ArmorMod(_objCharacter);
            List<Weapon> lstWeapons = new List<Weapon>();
            List<TreeNode> lstWeaponNodes = new List<TreeNode>();
            int intRating = 0;
            if (Convert.ToInt32(objXmlArmor["maxrating"].InnerText) > 1)
                intRating = frmPickArmorMod.SelectedRating;

            objMod.Create(objXmlArmor, objNode, cmsArmorGear, intRating, lstWeapons, lstWeaponNodes);
            objMod.Parent = objArmor;
            objNode.ContextMenuStrip = string.IsNullOrEmpty(objMod.GearCapacity) ? cmsArmorMod : cmsArmorGear;
            if (objMod.InternalId == Guid.Empty.ToString())
                return;

            objArmor.ArmorMods.Add(objMod);

            treArmor.SelectedNode.Nodes.Add(objNode);
            treArmor.SelectedNode.Expand();
            treArmor.SelectedNode = objNode;

            // Add any Weapons created by the Mod.
            foreach (Weapon objWeapon in lstWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in lstWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            ScheduleCharacterUpdate();
            RefreshSelectedArmor();

            if (frmPickArmorMod.AddAgain)
                tsAddArmorMod_Click(sender, e);
        }

        private void tsGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            // Make sure a parent items is selected, then open the Select Gear window.
            if (treGear.SelectedNode == null || treGear.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGear"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = PickGear();
            if (blnAddAgain)
                tsGearAddAsPlugin_Click(sender, e);
        }

		private void tsVehicleAddWeaponMount_Click(object sender, EventArgs e)
		{
            Vehicle v = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (v == null) return;
            frmCreateWeaponMount frmPickVehicleMod = new frmCreateWeaponMount(v, _objCharacter);
			frmPickVehicleMod.ShowDialog(this);

            if (frmPickVehicleMod.DialogResult != DialogResult.Cancel)
            {
                v.WeaponMounts.Add(frmPickVehicleMod.WeaponMount);
                TreeNode node = new TreeNode();
                foreach (TreeNode t in treVehicles.SelectedNode.Nodes)
                {
                    if (t.Tag.ToString() == "String_WeaponMounts")
                    {
                        node = t;
                        break;
                    }
                }
                if (node.Tag == null)
                {
                    node.Tag = "String_WeaponMounts";
                    node.Text = LanguageManager.GetString("String_WeaponMounts");
                    treVehicles.SelectedNode.Nodes.Add(node);
                }
                TreeNode tn = new TreeNode
                {
                    Tag = frmPickVehicleMod.WeaponMount.InternalId.ToString(),
                    Text = frmPickVehicleMod.WeaponMount.DisplayName,
                    ContextMenuStrip = cmsWeaponMount
                };
                node.Nodes.Add(tn);
                treVehicles.SelectedNode.ExpandAll();
            }
		}

        private void tsVehicleAddMod_Click(object sender, EventArgs e)
        {
            while (treVehicles.SelectedNode != null && treVehicles.SelectedNode.Level > 1)
                treVehicles.SelectedNode = treVehicles.SelectedNode.Parent;

            // Make sure a parent items is selected, then open the Select Vehicle Mod window.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectVehicle"), LanguageManager.GetString("MessageTitle_SelectVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            Vehicle objSelectedVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

            frmSelectVehicleMod frmPickVehicleMod = new frmSelectVehicleMod(_objCharacter);
            // Set the Vehicle properties for the window.
            frmPickVehicleMod.SelectedVehicle = objSelectedVehicle;
            frmPickVehicleMod.InstalledMods = objSelectedVehicle.Mods;

            frmPickVehicleMod.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickVehicleMod.DialogResult == DialogResult.Cancel)
                return;

            // Open the Vehicles XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("vehicles.xml");

            XmlNode objXmlMod = objXmlDocument.SelectSingleNode("/chummer/mods/mod[id = \"" + frmPickVehicleMod.SelectedMod + "\"]");

            TreeNode objNode = new TreeNode();
            VehicleMod objMod = new VehicleMod(_objCharacter);
            objMod.Create(objXmlMod, objNode, frmPickVehicleMod.SelectedRating, objSelectedVehicle, frmPickVehicleMod.Markup);

            // Make sure that the Armor Rating does not exceed the maximum allowed by the Vehicle.
            if (objMod.Name.StartsWith("Armor"))
            {
                if (objMod.Rating > objSelectedVehicle.MaxArmor)
                {
                    objMod.Rating = objSelectedVehicle.MaxArmor;
                    objNode.Text = objMod.DisplayName;
                }
            }
            else if (objMod.Category == "Handling")
            {
                if (objMod.Rating > objSelectedVehicle.MaxHandling)
                {
                    objMod.Rating = objSelectedVehicle.MaxHandling;
                    objNode.Text = objMod.DisplayName;
                }
            }
            else if (objMod.Category == "Speed")
            {
                if (objMod.Rating > objSelectedVehicle.MaxSpeed)
                {
                    objMod.Rating = objSelectedVehicle.MaxSpeed;
                    objNode.Text = objMod.DisplayName;
                }
            }
            else if (objMod.Category == "Acceleration")
            {
                if (objMod.Rating > objSelectedVehicle.MaxAcceleration)
                {
                    objMod.Rating = objSelectedVehicle.MaxAcceleration;
                    objNode.Text = objMod.DisplayName;
                }
            }
            else if (objMod.Category == "Sensor")
            {
                if (objMod.Rating > objSelectedVehicle.MaxSensor)
                {
                    objMod.Rating = objSelectedVehicle.MaxSensor;
                    objNode.Text = objMod.DisplayName;
                }
            }
            else if (objMod.Name.StartsWith("Pilot Program"))
            {
                if (objMod.Rating > objSelectedVehicle.MaxPilot)
                {
                    objMod.Rating = objSelectedVehicle.MaxPilot;
                    objNode.Text = objMod.DisplayName;
                }
            }

            // Check the item's Cost and make sure the character can afford it.
            if (frmPickVehicleMod.FreeCost)
                objMod.Cost = "0";
            else
            {
                // Multiply the cost if applicable.
                decimal decOldCost = objMod.TotalCost;
                decimal decCost = decOldCost;
                if (objMod.TotalAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted")) && _objOptions.MultiplyRestrictedCost)
                    decCost *= _objOptions.RestrictedCostMultiplier;
                if (objMod.TotalAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden")) && _objOptions.MultiplyForbiddenCost)
                    decCost *= _objOptions.ForbiddenCostMultiplier;
                decCost -= decOldCost;
                objMod.Markup = decCost;
            }

            objSelectedVehicle.Mods.Add(objMod);

            objNode.ContextMenuStrip = cmsVehicle;
            treVehicles.SelectedNode.Nodes.Add(objNode);
            treVehicles.SelectedNode.Expand();

            // Check for Improved Sensor bonus.
            if (objMod.Bonus != null)
            {
                if (objMod.Bonus["selecttext"] != null)
                {
                    frmSelectText frmPickText = new frmSelectText();
                    frmPickText.Description = LanguageManager.GetString("String_Improvement_SelectText").Replace("{0}", objMod.DisplayNameShort);
                    frmPickText.ShowDialog(this);
                    objMod.Extra = frmPickText.SelectedValue;
                    objNode.Text = objMod.DisplayName;
                }
                if (objMod.Bonus["improvesensor"] != null)
                {
                    ChangeVehicleSensor(objSelectedVehicle, true);
                }
            }

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickVehicleMod.AddAgain)
                tsVehicleAddMod_Click(sender, e);
        }

        private void tsVehicleAddWeapon_Click(object sender, EventArgs e)
        {
            // Make sure that a Weapon Mount has been selected.
            dynamic wm = CommonFunctions.FindVehicleWeaponMount(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out Vehicle v);
            if (wm == null)
            {
                wm = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (wm != null)
                {
                    if (!wm.Name.StartsWith("Mechanical Arm") && !wm.Name.Contains("Drone Arm"))
                    {
                        wm = null;
                    }
                }
            }

            if (wm == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotAddWeapon"), LanguageManager.GetString("MessageTitle_CannotAddWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectWeapon frmPickWeapon = new frmSelectWeapon(_objCharacter);
            if (!string.IsNullOrWhiteSpace(wm.WeaponMountCategories))
            {
                frmPickWeapon.LimitToCategories = wm.WeaponMountCategories;
            }
            frmPickWeapon.ShowDialog();

            if (frmPickWeapon.DialogResult == DialogResult.Cancel)
                return;

            // Open the Weapons XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/weapons/weapon[id = \"" + frmPickWeapon.SelectedWeapon + "\"]");

            List<TreeNode> lstNodes = new List<TreeNode>();
            Weapon objWeapon = new Weapon(_objCharacter);
            objWeapon.Create(objXmlWeapon, lstNodes, cmsVehicleWeapon, cmsVehicleWeaponAccessory, wm.Weapons, cmsVehicleWeaponAccessoryGear);
            objWeapon.DiscountCost = frmPickWeapon.BlackMarketDiscount;

            if (frmPickWeapon.FreeCost)
            {
                objWeapon.Cost = 0;
            }
            objWeapon.VehicleMounted = true;

            wm.Weapons.Add(objWeapon);

            foreach (TreeNode objLoopNode in lstNodes)
            {
                objLoopNode.ContextMenuStrip = cmsVehicleWeapon;
                treVehicles.SelectedNode.Nodes.Add(objLoopNode);
            }
            treVehicles.SelectedNode.Expand();

            if (frmPickWeapon.AddAgain)
                tsVehicleAddWeapon_Click(sender, e);

            ScheduleCharacterUpdate();
        }

        private void tsVehicleAddWeaponAccessory_Click(object sender, EventArgs e)
        {
            // Attempt to locate the selected VehicleWeapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_VehicleWeaponAccessories"), LanguageManager.GetString("MessageTitle_VehicleWeaponAccessories"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Make sure the Weapon allows Accessories to be added to it.
            if (!objWeapon.AllowAccessory)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotModifyWeapon"), LanguageManager.GetString("MessageTitle_CannotModifyWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Weapons XML file and locate the selected Weapon.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objWeapon.MyXmlNode;
            if (objXmlWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotFindWeapon"), LanguageManager.GetString("MessageTitle_CannotModifyWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectWeaponAccessory frmPickWeaponAccessory = new frmSelectWeaponAccessory(_objCharacter);

            XmlNodeList objXmlMountList = objXmlWeapon.SelectNodes("accessorymounts/mount");
            string strMounts = string.Empty;
            foreach (XmlNode objXmlMount in objXmlMountList)
            {
                // Run through the Weapon's currenct Accessories and filter out any used up Mount points.
                bool blnFound = false;
                foreach (WeaponAccessory objCurrentAccessory in objWeapon.WeaponAccessories)
                {
                    if ((objCurrentAccessory.Mount == objXmlMount.InnerText) || (objCurrentAccessory.ExtraMount == objXmlMount.InnerText))
                    {
                        blnFound = true;
                        break;
                    }
                }
                if (!blnFound)
                    strMounts += objXmlMount.InnerText + "/";
            }
            frmPickWeaponAccessory.AllowedMounts = strMounts;

            frmPickWeaponAccessory.CurrentWeaponName = objWeapon.Name;
            frmPickWeaponAccessory.WeaponCost = objWeapon.Cost;
            frmPickWeaponAccessory.AccessoryMultiplier = objWeapon.AccessoryMultiplier;
            frmPickWeaponAccessory.InstalledAccessories = objWeapon.WeaponAccessories;
            frmPickWeaponAccessory.ShowDialog();

            if (frmPickWeaponAccessory.DialogResult == DialogResult.Cancel)
                return;

            // Locate the selected piece.
            objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/accessories/accessory[name = \"" + frmPickWeaponAccessory.SelectedAccessory + "\"]");

            TreeNode objNode = new TreeNode();
            WeaponAccessory objAccessory = new WeaponAccessory(_objCharacter);
            objAccessory.Create(objXmlWeapon, objNode, frmPickWeaponAccessory.SelectedMount, Convert.ToInt32(frmPickWeaponAccessory.SelectedRating), cmsVehicleWeaponAccessoryGear);
            objAccessory.Parent = objWeapon;

            if (frmPickWeaponAccessory.FreeCost)
            {
                objAccessory.Cost = "0";
            }
            objWeapon.WeaponAccessories.Add(objAccessory);

            objNode.ContextMenuStrip = cmsVehicleWeaponAccessory;
            treVehicles.SelectedNode.Nodes.Add(objNode);
            treVehicles.SelectedNode.Expand();

            if (frmPickWeaponAccessory.AddAgain)
                tsVehicleAddWeaponAccessory_Click(sender, e);

            ScheduleCharacterUpdate();
        }

        private void tsVehicleAddUnderbarrelWeapon_Click(object sender, EventArgs e)
        {
            // Attempt to locate the selected VehicleWeapon.
            Weapon objSelectedWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objSelectedWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_VehicleWeaponUnderbarrel"), LanguageManager.GetString("MessageTitle_VehicleWeaponUnderbarrel"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (objSelectedWeapon.UnderbarrelWeapons.Count > 0)
            {
                return;
            }

            frmSelectWeapon frmPickWeapon = new frmSelectWeapon(_objCharacter);
            frmPickWeapon.LimitToCategories = "Underbarrel Weapons";
            frmPickWeapon.Mounts = objSelectedWeapon.AccessoryMounts;
            frmPickWeapon.Underbarrel = true;

            frmPickWeapon.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickWeapon.DialogResult == DialogResult.Cancel)
                return;

            // Open the Weapons XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/weapons/weapon[id = \"" + frmPickWeapon.SelectedWeapon + "\"]");

            List<TreeNode> lstNodes = new List<TreeNode>();
            Weapon objWeapon = new Weapon(_objCharacter);
            objWeapon.Create(objXmlWeapon, lstNodes, cmsVehicleWeapon, cmsVehicleWeaponAccessory, objSelectedWeapon.UnderbarrelWeapons, cmsVehicleWeaponAccessoryGear);
            objWeapon.DiscountCost = frmPickWeapon.BlackMarketDiscount;

            if (frmPickWeapon.FreeCost)
            {
                objWeapon.Cost = 0;
            }
            objWeapon.VehicleMounted = true;
            objWeapon.Parent = objSelectedWeapon;
            objSelectedWeapon.UnderbarrelWeapons.Add(objWeapon);
            if (objSelectedWeapon.AllowAccessory == false)
                objWeapon.AllowAccessory = false;

            foreach (TreeNode objLoopNode in lstNodes)
            {
                objLoopNode.ContextMenuStrip = cmsVehicleWeapon;
                treVehicles.SelectedNode.Nodes.Add(objLoopNode);
            }
            treVehicles.SelectedNode.Expand();
            //treWeapons.SelectedNode = objNode;

            ScheduleCharacterUpdate();
        }

        private void tsVehicleAddWeaponAccessoryAlt_Click(object sender, EventArgs e)
        {
            tsVehicleAddWeaponAccessory_Click(sender, e);
        }

        private void tsVehicleAddUnderbarrelWeaponAlt_Click(object sender, EventArgs e)
        {
            tsVehicleAddUnderbarrelWeapon_Click(sender, e);
        }

        private void tsMartialArtsAddAdvantage_Click(object sender, EventArgs e)
        {
            // Select the Martial Arts node if we're currently on a child.
            while (treMartialArts.SelectedNode != null && treMartialArts.SelectedNode.Level > 1)
                treMartialArts.SelectedNode = treMartialArts.SelectedNode.Parent;

            if (treMartialArts.SelectedNode == null || treMartialArts.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectMartialArtAdvantage"), LanguageManager.GetString("MessageTitle_SelectMartialArtAdvantage"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            MartialArt objMartialArt = CommonFunctions.FindByIdWithNameCheck(treMartialArts.SelectedNode.Tag.ToString(), _objCharacter.MartialArts);

            if (objMartialArt == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectMartialArtAdvantage"), LanguageManager.GetString("MessageTitle_SelectMartialArtAdvantage"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectMartialArtAdvantage frmPickMartialArtAdvantage = new frmSelectMartialArtAdvantage(_objCharacter);
            frmPickMartialArtAdvantage.MartialArt = objMartialArt.Name;
            frmPickMartialArtAdvantage.ShowDialog(this);

            if (frmPickMartialArtAdvantage.DialogResult == DialogResult.Cancel)
                return;

            // Open the Martial Arts XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("martialarts.xml");

            XmlNode objXmlAdvantage = objXmlDocument.SelectSingleNode("/chummer/techniques/technique[name = \"" + frmPickMartialArtAdvantage.SelectedAdvantage + "\"]");

            // Create the Improvements for the Advantage if there are any.
            TreeNode objNode = new TreeNode();
            MartialArtAdvantage objAdvantage = new MartialArtAdvantage(_objCharacter);
            objAdvantage.Create(objXmlAdvantage, objNode);
            if (objAdvantage.InternalId == Guid.Empty.ToString())
                return;

            objMartialArt.Advantages.Add(objAdvantage);

            objNode.ContextMenuStrip = cmsTechnique;
            treMartialArts.SelectedNode.Nodes.Add(objNode);
            treMartialArts.SelectedNode.Expand();

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsVehicleAddGear_Click(object sender, EventArgs e)
        {
            while (treVehicles.SelectedNode != null && treVehicles.SelectedNode.Level > 1)
                treVehicles.SelectedNode = treVehicles.SelectedNode.Parent;

            // Make sure a parent items is selected, then open the Select Gear window.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearVehicle"), LanguageManager.GetString("MessageTitle_SelectGearVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the selected Vehicle.
            Vehicle objSelectedVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objSelectedVehicle == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearVehicle"), LanguageManager.GetString("MessageTitle_SelectGearVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objSelectedVehicle.MyXmlNode);
            //frmPickGear.ShowPositiveCapacityOnly = true;
            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Gear objGear = null;

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating, false);

                objGear = objCommlink;
            }
            else
            {
                Gear objNewGear = new Gear(_objCharacter);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, false, true, frmPickGear.Aerodynamic);

                objGear = objNewGear;
            }

            objGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            if (objGear.InternalId == Guid.Empty.ToString())
                return;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objGear.Cost = (Convert.ToDouble(objGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objGear.Cost))
                    objGear.Cost = "(" + objGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objGear.Extra))
                    objGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objGear.Cost = "0";
            }

            objGear.Quantity = frmPickGear.SelectedQty;
            objNode.Text = objGear.DisplayName;
            nudVehicleRating.Increment = objGear.CostFor;
            nudVehicleRating.Minimum = nudVehicleRating.Increment;

            // Change the cost of the Sensor itself to 0.
            //if (frmPickGear.SelectedCategory == "Sensors")
            //{
            //    objGear.Cost = "0";
            //    objGear.DictionaryCostN = new Tuple<int, Dictionary<int, string>>(-1, new Dictionary<int, string>());
            //}

            objNode.ContextMenuStrip = cmsVehicleGear;

            bool blnMatchFound = false;
            // If this is Ammunition, see if the character already has it on them.
            if (objGear.Category == "Ammunition")
            {
                foreach (Gear objVehicleGear in objSelectedVehicle.Gear)
                {
                    if (objVehicleGear.Name == objGear.Name && objVehicleGear.Category == objGear.Category && objVehicleGear.Rating == objGear.Rating && objVehicleGear.Extra == objGear.Extra)
                    {
                        // A match was found, so increase the quantity instead.
                        objVehicleGear.Quantity += objGear.Quantity;
                        blnMatchFound = true;

                        foreach (TreeNode objGearNode in treVehicles.SelectedNode.Nodes)
                        {
                            if (objVehicleGear.InternalId == objGearNode.Tag.ToString())
                            {
                                objGearNode.Text = objVehicleGear.DisplayName;
                                break;
                            }
                        }

                        break;
                    }
                }
            }

            if (!blnMatchFound)
            {
                treVehicles.SelectedNode.Nodes.Add(objNode);
                treVehicles.SelectedNode.Expand();

                // Add the Gear to the Vehicle.
                objSelectedVehicle.Gear.Add(objGear);
            }

            if (frmPickGear.AddAgain)
                tsVehicleAddGear_Click(sender, e);

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();
        }

        private void tsVehicleSensorAddAsPlugin_Click(object sender, EventArgs e)
        {
            // Make sure a parent items is selected, then open the Select Gear window.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_ModifyVehicleGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

            // Make sure the Gear was found.
            if (objSensor == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_ModifyVehicleGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNode objXmlGear = objSensor.MyXmlNode;

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objXmlGear);
            //frmPickGear.ShowNegativeCapacityOnly = true;

            if (objXmlGear != null)
            {
                if (objXmlGear.InnerXml.Contains("<addoncategory>"))
                {
                    string strCategories = string.Empty;
                    foreach (XmlNode objXmlCategory in objXmlGear.SelectNodes("addoncategory"))
                        strCategories += objXmlCategory.InnerText + ",";
                    // Remove the trailing comma.
                    strCategories = strCategories.Substring(0, strCategories.Length - 1);
                    frmPickGear.AllowedCategories = strCategories;
                }
            }
            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Gear objGear = null;

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating, false);
                objCommlink.Quantity = frmPickGear.SelectedQty;

                objGear = objCommlink;
            }
            else
            {
                Gear objNewGear = new Gear(_objCharacter);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, false, true, frmPickGear.Aerodynamic);
                objNewGear.Quantity = frmPickGear.SelectedQty;

                objGear = objNewGear;
            }

            if (objGear.InternalId == Guid.Empty.ToString())
                return;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objGear.Cost = (Convert.ToDouble(objGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objGear.Cost))
                    objGear.Cost = "(" + objGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objGear.Extra))
                    objGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objGear.Cost = "0";
            }

            objNode.Text = objGear.DisplayName;

            _blnSkipRefresh = true;
            nudVehicleGearQty.Increment = objGear.CostFor;
            //nudVehicleGearQty.Minimum = objGear.CostFor;
            _blnSkipRefresh = false;

            objGear.Parent = objSensor;
            objNode.ContextMenuStrip = cmsVehicleGear;

            treVehicles.SelectedNode.Nodes.Add(objNode);
            treVehicles.SelectedNode.Expand();

            objSensor.Children.Add(objGear);
            if ((objSensor as Commlink)?.CanSwapAttributes == true)
            {
                (objSensor as Commlink).RefreshCyberdeckArray();
            }

            if (frmPickGear.AddAgain)
                tsVehicleSensorAddAsPlugin_Click(sender, e);

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();
        }

        private void tsVehicleGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            tsVehicleSensorAddAsPlugin_Click(sender, e);
        }

        private void tsVehicleGearNotes_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null)
                return;
            Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objGear != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objGear.Notes;
                string strOldValue = objGear.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objGear.Notes = frmItemNotes.Notes;
                    if (objGear.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objGear.Notes))
                    treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objGear.IncludedInParent)
                    treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                treVehicles.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objGear.Notes, 100);
            }
        }

        private void tsAdvancedLifestyle_Click(object sender, EventArgs e)
        {
            Lifestyle objNewLifestyle = new Lifestyle(_objCharacter);
            frmSelectLifestyleAdvanced frmPickLifestyle = new frmSelectLifestyleAdvanced(objNewLifestyle, _objCharacter);
            frmPickLifestyle.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                return;

            objNewLifestyle.StyleType = LifestyleType.Advanced;

            _objCharacter.Lifestyles.Add(objNewLifestyle);

            TreeNode objNode = new TreeNode();
            objNode.Text = objNewLifestyle.Name;
            objNode.Tag = objNewLifestyle.InternalId;
            objNode.ContextMenuStrip = cmsAdvancedLifestyle;
            treLifestyles.Nodes[0].Nodes.Add(objNode);
            treLifestyles.Nodes[0].Expand();

            if (frmPickLifestyle.AddAgain)
                tsAdvancedLifestyle_Click(sender, e);

            ScheduleCharacterUpdate();
        }

        private void tsWeaponName_Click(object sender, EventArgs e)
        {
            while (treWeapons.SelectedNode != null && treWeapons.SelectedNode.Level > 1)
                treWeapons.SelectedNode = treWeapons.SelectedNode.Parent;

            // Make sure a parent item is selected, then open the Select Accessory window.
            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponName"), LanguageManager.GetString("MessageTitle_SelectWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Weapon.
            Weapon objWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
            if (objWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponName"), LanguageManager.GetString("MessageTitle_SelectWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_WeaponName");
            frmPickText.DefaultString = objWeapon.WeaponName;
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objWeapon.WeaponName = frmPickText.SelectedValue;
            treWeapons.SelectedNode.Text = objWeapon.DisplayName;

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsGearName_Click(object sender, EventArgs e)
        {
            if (treGear.SelectedNode == null || treGear.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearName"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Gear.
            Gear objGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objGear == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearName"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_GearName");
            frmPickText.DefaultString = objGear.GearName;
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objGear.GearName = frmPickText.SelectedValue;
            treGear.SelectedNode.Text = objGear.DisplayName;

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsWeaponAddUnderbarrel_Click(object sender, EventArgs e)
        {
            while (treWeapons.SelectedNode != null && treWeapons.SelectedNode.Level > 1)
                treWeapons.SelectedNode = treWeapons.SelectedNode.Parent;

            // Make sure a parent item is selected, then open the Select Accessory window.
            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponUnderbarrel"), LanguageManager.GetString("MessageTitle_SelectWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Weapon.
            foreach (Weapon objCharacterWeapon in _objCharacter.Weapons)
            {
                if (treWeapons.SelectedNode.Tag.ToString() == objCharacterWeapon.InternalId)
                {
                    if (objCharacterWeapon.InternalId == treWeapons.SelectedNode.Tag.ToString())
                    {
                        if (objCharacterWeapon.Cyberware)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CyberwareUnderbarrel"), LanguageManager.GetString("MessageTitle_WeaponUnderbarrel"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                }
            }

            // Locate the Weapon that is selected in the tree.
            Weapon objSelectedWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
            if (objSelectedWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponUnderbarrel"), LanguageManager.GetString("MessageTitle_SelectWeapon"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (objSelectedWeapon.UnderbarrelWeapons.Count > 0)
            {
                return;
            }

            frmSelectWeapon frmPickWeapon = new frmSelectWeapon(_objCharacter);
            frmPickWeapon.LimitToCategories = "Underbarrel Weapons";
            frmPickWeapon.Mounts = objSelectedWeapon.AccessoryMounts;
            frmPickWeapon.Underbarrel = true;
            frmPickWeapon.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickWeapon.DialogResult == DialogResult.Cancel)
                return;

            // Open the Weapons XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/weapons/weapon[id = \"" + frmPickWeapon.SelectedWeapon + "\"]");

            List<TreeNode> lstNodes = new List<TreeNode>();
            Weapon objWeapon = new Weapon(_objCharacter);
            objWeapon.Create(objXmlWeapon, lstNodes, cmsWeapon, cmsWeaponAccessory, objSelectedWeapon.UnderbarrelWeapons, cmsWeaponAccessoryGear);
            objWeapon.DiscountCost = frmPickWeapon.BlackMarketDiscount;
            objWeapon.Parent = objSelectedWeapon;
            objWeapon.AllowAccessory = objSelectedWeapon.AllowAccessory;
            if (objSelectedWeapon.AllowAccessory == false)
                objWeapon.AllowAccessory = false;

            if (frmPickWeapon.FreeCost)
            {
                objWeapon.Cost = 0;
            }

            objSelectedWeapon.UnderbarrelWeapons.Add(objWeapon);

            foreach (TreeNode objLoopNode in lstNodes)
            {
                objLoopNode.ContextMenuStrip = cmsWeapon;
                treWeapons.SelectedNode.Nodes.Add(objLoopNode);
            }
            treWeapons.SelectedNode.Expand();
            //treWeapons.SelectedNode = objNode;

            ScheduleCharacterUpdate();
            RefreshSelectedWeapon();
        }

        private void tsGearAddNexus_Click(object sender, EventArgs e)
        {
            treGear.SelectedNode = treGear.Nodes[0];

            frmSelectNexus frmPickNexus = new frmSelectNexus(_objCharacter);
            frmPickNexus.ShowDialog(this);

            if (frmPickNexus.DialogResult == DialogResult.Cancel)
                return;

            Gear objGear = frmPickNexus.SelectedNexus;

            TreeNode nodNexus = new TreeNode();
            nodNexus.Text = objGear.Name;
            nodNexus.Tag = objGear.InternalId;
            nodNexus.ContextMenuStrip = cmsGear;

            foreach (Gear objChild in objGear.Children)
            {
                TreeNode nodModule = new TreeNode();
                nodModule.Text = objChild.Name;
                nodModule.Tag = objChild.InternalId;
                nodModule.ContextMenuStrip = cmsGear;
                nodNexus.Nodes.Add(nodModule);
                nodNexus.Expand();
            }

            treGear.Nodes[0].Nodes.Add(nodNexus);
            treGear.Nodes[0].Expand();

            _objCharacter.Gear.Add(objGear);

            ScheduleCharacterUpdate();
        }

        private void tsGearButtonAddAccessory_Click(object sender, EventArgs e)
        {
            tsGearAddAsPlugin_Click(sender, e);
        }

        private void tsGearRename_Click(object sender, EventArgs e)
        {
            frmSelectText frmPickText = new frmSelectText();
            //frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            Gear g = CommonFunctions.FindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            g.Extra = frmPickText.SelectedValue;
            treGear.SelectedNode.Text = g.DisplayName;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        private void tsVehicleAddNexus_Click(object sender, EventArgs e)
        {
            while (treVehicles.SelectedNode != null && treVehicles.SelectedNode.Level > 1)
                treVehicles.SelectedNode = treVehicles.SelectedNode.Parent;

            // Make sure a parent items is selected, then open the Select Gear window.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearVehicle"), LanguageManager.GetString("MessageTitle_SelectGearVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Attempt to locate the selected Vehicle.
            Vehicle objSelectedVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objSelectedVehicle == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearVehicle"), LanguageManager.GetString("MessageTitle_SelectGearVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectNexus frmPickNexus = new frmSelectNexus(_objCharacter);
            frmPickNexus.ShowDialog(this);

            if (frmPickNexus.DialogResult == DialogResult.Cancel)
                return;

            Gear objGear = frmPickNexus.SelectedNexus;

            TreeNode nodNexus = new TreeNode();
            nodNexus.Text = objGear.Name;
            nodNexus.Tag = objGear.InternalId;
            nodNexus.ContextMenuStrip = cmsVehicleGear;

            foreach (Gear objChild in objGear.Children)
            {
                TreeNode nodModule = new TreeNode();
                nodModule.Text = objChild.Name;
                nodModule.Tag = objChild.InternalId;
                nodModule.ContextMenuStrip = cmsVehicleGear;
                nodNexus.Nodes.Add(nodModule);
                nodNexus.Expand();
            }

            treVehicles.SelectedNode.Nodes.Add(nodNexus);
            treVehicles.SelectedNode.Expand();

            objSelectedVehicle.Gear.Add(objGear);

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();
        }

        private void tsArmorLocationAddArmor_Click(object sender, EventArgs e)
        {
            frmSelectArmor frmPickArmor = new frmSelectArmor(_objCharacter);
            frmPickArmor.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickArmor.DialogResult == DialogResult.Cancel)
                return;

            // Open the Armor XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("armor.xml");

            XmlNode objXmlArmor = objXmlDocument.SelectSingleNode("/chummer/armors/armor[name = \"" + frmPickArmor.SelectedArmor + "\"]");


            List<Weapon> objWeapons = new List<Weapon>();
            TreeNode objNode = new TreeNode();
            Armor objArmor = new Armor(_objCharacter);

            objArmor.Create(objXmlArmor, objNode, cmsArmorMod, cmsArmorGear, frmPickArmor.Rating, objWeapons);
            objArmor.DiscountCost = frmPickArmor.BlackMarketDiscount;
            if (objArmor.InternalId == Guid.Empty.ToString())
                return;

            if (frmPickArmor.FreeCost)
            {
                objArmor.Cost = 0;
            }
            _objCharacter.Armor.Add(objArmor);

            objNode.ContextMenuStrip = cmsArmor;
            treArmor.SelectedNode.Nodes.Add(objNode);
            treArmor.SelectedNode.Expand();
            treArmor.SelectedNode = objNode;

            foreach (Weapon objWeapon in objWeapons)
            {
                _objCharacter.Weapons.Add(objWeapon);
                CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
            }

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickArmor.AddAgain)
                cmdAddArmor_Click(sender, e);
        }

        private void tsAddArmorGear_Click(object sender, EventArgs e)
        {
            // Make sure a parent items is selected, then open the Select Gear window.
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmor"), LanguageManager.GetString("MessageTitle_SelectArmor"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Select the root Gear node then open the Select Gear window.
            bool blnAddAgain = PickArmorGear(true);
            if (blnAddAgain)
                tsAddArmorGear_Click(sender, e);
        }

        private void tsArmorGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            // Make sure a parent items is selected, then open the Select Gear window.
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmor"), LanguageManager.GetString("MessageTitle_SelectArmor"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Make sure the selected item is another piece of Gear.
            ArmorMod objMod = null;
            Gear objGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            if (objGear == null)
            {
                objMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
                if (objMod == null || string.IsNullOrEmpty(objMod.GearCapacity))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_SelectArmor"), LanguageManager.GetString("MessageTitle_SelectArmor"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            bool blnAddAgain = PickArmorGear(objMod != null);
            if (blnAddAgain)
                tsArmorGearAddAsPlugin_Click(sender, e);
        }

        private void tsArmorNotes_Click(object sender, EventArgs e)
        {
            if (treArmor.SelectedNode == null)
                return;
            Armor objArmor = CommonFunctions.FindByIdWithNameCheck(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            if (objArmor != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objArmor.Notes;
                string strOldValue = objArmor.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objArmor.Notes = frmItemNotes.Notes;
                    if (objArmor.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objArmor.Notes))
                    treArmor.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treArmor.SelectedNode.ForeColor = SystemColors.WindowText;
                treArmor.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objArmor.Notes, 100);
            }
        }

        private void tsArmorModNotes_Click(object sender, EventArgs e)
        {
            if (treArmor.SelectedNode == null)
                return;
            ArmorMod objArmorMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            if (objArmorMod != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objArmorMod.Notes;
                string strOldValue = objArmorMod.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objArmorMod.Notes = frmItemNotes.Notes;
                    if (objArmorMod.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objArmorMod.Notes))
                    treArmor.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objArmorMod.IncludedInArmor)
                    treArmor.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treArmor.SelectedNode.ForeColor = SystemColors.WindowText;
                treArmor.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objArmorMod.Notes, 100);
            }
        }

        private void tssLimitModifierNotes_Click(object sender, EventArgs e)
        {
            if (treLimit.SelectedNode == null)
                return;
            LimitModifier obLimitModifier = CommonFunctions.FindByIdWithNameCheck(treLimit.SelectedNode.Tag.ToString(), _objCharacter.LimitModifiers);
            if (obLimitModifier != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = obLimitModifier.Notes;
                string strOldValue = obLimitModifier.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    obLimitModifier.Notes = frmItemNotes.Notes;
                    if (obLimitModifier.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(obLimitModifier.Notes))
                    treLimit.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treLimit.SelectedNode.ForeColor = SystemColors.WindowText;
                treLimit.SelectedNode.ToolTipText = CommonFunctions.WordWrap(obLimitModifier.Notes, 100);
            }
            else
            {
                // the limit modifier has a source
                foreach (Improvement objImprovement in _objCharacter.Improvements)
                {
                    if (objImprovement.ImproveType == Improvement.ImprovementType.LimitModifier && objImprovement.SourceName == treLimit.SelectedNode.Tag.ToString())
                    {
                        frmNotes frmItemNotes = new frmNotes();
                        frmItemNotes.Notes = objImprovement.Notes;
                        string strOldValue = objImprovement.Notes;
                        frmItemNotes.ShowDialog(this);

                        if (frmItemNotes.DialogResult == DialogResult.OK)
                        {
                            objImprovement.Notes = frmItemNotes.Notes;
                            if (objImprovement.Notes != strOldValue)
                            {
                                _blnIsDirty = true;
                                UpdateWindowTitle();
                            }
                        }

                        if (!string.IsNullOrEmpty(objImprovement.Notes))
                            treLimit.SelectedNode.ForeColor = Color.SaddleBrown;
                        else
                            treLimit.SelectedNode.ForeColor = SystemColors.WindowText;
                        treLimit.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objImprovement.Notes, 100);
                    }
                }
            }
        }

        private void tsArmorGearNotes_Click(object sender, EventArgs e)
        {
            if (treArmor.SelectedNode == null)
                return;

            Gear objArmorGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            if (objArmorGear != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objArmorGear.Notes;
                string strOldValue = objArmorGear.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objArmorGear.Notes = frmItemNotes.Notes;
                    if (objArmorGear.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objArmorGear.Notes))
                    treArmor.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objArmorGear.IncludedInParent)
                    treArmor.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treArmor.SelectedNode.ForeColor = SystemColors.WindowText;
                treArmor.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objArmorGear.Notes, 100);
            }
        }

        private void tsWeaponNotes_Click(object sender, EventArgs e)
        {
            if (treWeapons.SelectedNode == null)
                return;

            Weapon objWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
            if (objWeapon != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objWeapon.Notes;
                string strOldValue = objWeapon.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objWeapon.Notes = frmItemNotes.Notes;
                    if (objWeapon.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objWeapon.Notes))
                    treWeapons.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objWeapon.Cyberware || objWeapon.Category == "Gear" || !string.IsNullOrEmpty(objWeapon.ParentID))
                    treWeapons.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treWeapons.SelectedNode.ForeColor = SystemColors.WindowText;
                treWeapons.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objWeapon.Notes, 100);
            }
        }

        private void tsWeaponAccessoryNotes_Click(object sender, EventArgs e)
        {
            if (treWeapons.SelectedNode == null)
                return;
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);

            if (objAccessory != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objAccessory.Notes;
                string strOldValue = objAccessory.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objAccessory.Notes = frmItemNotes.Notes;
                    if (objAccessory.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objAccessory.Notes))
                    treWeapons.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objAccessory.IncludedInWeapon)
                    treWeapons.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treWeapons.SelectedNode.ForeColor = SystemColors.WindowText;
                treWeapons.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objAccessory.Notes, 100);
            }
        }

        private void tsCyberwareNotes_Click(object sender, EventArgs e)
        {
            if (treCyberware.SelectedNode == null)
                return;
            Cyberware objCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);
            if (objCyberware != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objCyberware.Notes;
                string strOldValue = objCyberware.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objCyberware.Notes = frmItemNotes.Notes;
                    if (objCyberware.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objCyberware.Notes))
                    treCyberware.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objCyberware.Capacity == "[*]" || !string.IsNullOrEmpty(objCyberware.ParentID))
                    treCyberware.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treCyberware.SelectedNode.ForeColor = SystemColors.WindowText;
                treCyberware.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objCyberware.Notes, 100);
            }
        }

        private void tsQualityNotes_Click(object sender, EventArgs e)
        {
            if (treQualities.SelectedNode == null)
                return;

            Quality objQuality = CommonFunctions.FindByIdWithNameCheck(treQualities.SelectedNode.Tag.ToString(), _objCharacter.Qualities);
            if (objQuality != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objQuality.Notes;
                string strOldValue = objQuality.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objQuality.Notes = frmItemNotes.Notes;
                    if (objQuality.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objQuality.Notes))
                    treQualities.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objQuality.OriginSource == QualitySource.Metatype || objQuality.OriginSource == QualitySource.MetatypeRemovable || objQuality.OriginSource == QualitySource.Improvement)
                    treQualities.SelectedNode.ForeColor = SystemColors.GrayText;
                else if (!objQuality.Implemented)
                    treQualities.SelectedNode.ForeColor = Color.Red;
                else
                    treQualities.SelectedNode.ForeColor = SystemColors.WindowText;
                treQualities.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objQuality.Notes, 100);
            }
        }

        private void tsMartialArtsNotes_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode == null)
                return;

            MartialArt objMartialArt = CommonFunctions.FindByIdWithNameCheck(treMartialArts.SelectedNode.Tag.ToString(), _objCharacter.MartialArts);
            if (objMartialArt != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objMartialArt.Notes;
                string strOldValue = objMartialArt.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objMartialArt.Notes = frmItemNotes.Notes;
                    if (objMartialArt.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objMartialArt.Notes))
                    treMartialArts.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMartialArts.SelectedNode.ForeColor = SystemColors.WindowText;
                treMartialArts.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objMartialArt.Notes, 100);
                return;
            }
        }

        private void tsMartialArtManeuverNotes_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode == null)
                return;

            MartialArtManeuver objMartialArtManeuver = CommonFunctions.FindByIdWithNameCheck(treMartialArts.SelectedNode.Tag.ToString(), _objCharacter.MartialArtManeuvers);
            if (objMartialArtManeuver != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objMartialArtManeuver.Notes;
                string strOldValue = objMartialArtManeuver.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objMartialArtManeuver.Notes = frmItemNotes.Notes;
                    if (objMartialArtManeuver.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objMartialArtManeuver.Notes))
                    treMartialArts.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMartialArts.SelectedNode.ForeColor = SystemColors.WindowText;
                treMartialArts.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objMartialArtManeuver.Notes, 100);
            }
        }

        private void tsSpellNotes_Click(object sender, EventArgs e)
        {
            if (treSpells.SelectedNode == null)
                return;

            Spell objSpell = CommonFunctions.FindByIdWithNameCheck(treSpells.SelectedNode.Tag.ToString(), _objCharacter.Spells);
            if (objSpell != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objSpell.Notes;
                string strOldValue = objSpell.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objSpell.Notes = frmItemNotes.Notes;
                    if (objSpell.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objSpell.Notes))
                    treSpells.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treSpells.SelectedNode.ForeColor = SystemColors.WindowText;
                treSpells.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objSpell.Notes, 100);
            }
        }

        private void tsComplexFormNotes_Click(object sender, EventArgs e)
        {
            if (treComplexForms.SelectedNode == null)
                return;

            ComplexForm objComplexForm = CommonFunctions.FindByIdWithNameCheck(treComplexForms.SelectedNode.Tag.ToString(), _objCharacter.ComplexForms);
            if (objComplexForm != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objComplexForm.Notes;
                string strOldValue = objComplexForm.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objComplexForm.Notes = frmItemNotes.Notes;
                    if (objComplexForm.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objComplexForm.Notes))
                    treComplexForms.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treComplexForms.SelectedNode.ForeColor = SystemColors.WindowText;
                treComplexForms.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objComplexForm.Notes, 100);
            }
        }

        private void tsAIProgramNotes_Click(object sender, EventArgs e)
        {
            if (treComplexForms.SelectedNode == null)
                return;

            AIProgram objAIProgram = CommonFunctions.FindByIdWithNameCheck(treAIPrograms.SelectedNode.Tag.ToString(), _objCharacter.AIPrograms);
            if (objAIProgram != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objAIProgram.Notes;
                string strOldValue = objAIProgram.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objAIProgram.Notes = frmItemNotes.Notes;
                    if (objAIProgram.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objAIProgram.Notes))
                    treAIPrograms.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (!objAIProgram.CanDelete)
                    treAIPrograms.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treAIPrograms.SelectedNode.ForeColor = SystemColors.WindowText;
                treAIPrograms.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objAIProgram.Notes, 100);
            }
        }

        private void tsCritterPowersNotes_Click(object sender, EventArgs e)
        {
            if (treCritterPowers.SelectedNode == null)
                return;

            CritterPower objCritterPower = CommonFunctions.FindByIdWithNameCheck(treCritterPowers.SelectedNode.Tag.ToString(), _objCharacter.CritterPowers);
            if (objCritterPower != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objCritterPower.Notes;
                string strOldValue = objCritterPower.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objCritterPower.Notes = frmItemNotes.Notes;
                    if (objCritterPower.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objCritterPower.Notes))
                    treCritterPowers.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treCritterPowers.SelectedNode.ForeColor = SystemColors.WindowText;
                treCritterPowers.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objCritterPower.Notes, 100);
            }
        }

        private void tsMetamagicNotes_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode == null)
                return;

            Metamagic objMetamagic = CommonFunctions.FindByIdWithNameCheck(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.Metamagics);
            if (objMetamagic != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objMetamagic.Notes;
                string strOldValue = objMetamagic.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objMetamagic.Notes = frmItemNotes.Notes;
                    if (objMetamagic.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objMetamagic.Notes))
                    treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                treMetamagic.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objMetamagic.Notes, 100);
            }
        }

        private void tsGearNotes_Click(object sender, EventArgs e)
        {
            if (treGear.SelectedNode == null)
                return;

            Gear objGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objGear != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objGear.Notes;
                string strOldValue = objGear.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objGear.Notes = frmItemNotes.Notes;
                    if (objGear.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objGear.Notes))
                    treGear.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objGear.IncludedInParent)
                    treGear.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treGear.SelectedNode.ForeColor = SystemColors.WindowText;
                treGear.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objGear.Notes, 100);
            }
        }

        private void tsGearPluginNotes_Click(object sender, EventArgs e)
        {
            if (treGear.SelectedNode == null)
                return;

            Gear objGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objGear != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objGear.Notes;
                string strOldValue = objGear.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objGear.Notes = frmItemNotes.Notes;
                    if (objGear.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objGear.Notes))
                    treGear.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objGear.IncludedInParent)
                    treGear.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treGear.SelectedNode.ForeColor = SystemColors.WindowText;
                treGear.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objGear.Notes, 100);
            }
        }

        private void tsVehicleNotes_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null)
                return;
            Vehicle objVehicle = null;
            VehicleMod objMod = null;
            bool blnFoundVehicle = false;
            bool blnFoundMod = false;

            foreach (Vehicle objCharacterVehicle in _objCharacter.Vehicles)
            {
                if (objCharacterVehicle.InternalId == treVehicles.SelectedNode.Tag.ToString())
                {
                    objVehicle = objCharacterVehicle;
                    blnFoundVehicle = true;
                    break;
                }
                foreach (VehicleMod objVehicleMod in objCharacterVehicle.Mods)
                {
                    if (objVehicleMod.InternalId == treVehicles.SelectedNode.Tag.ToString())
                    {
                        objMod = objVehicleMod;
                        blnFoundMod = true;
                        break;
                    }
                }
            }

            if (blnFoundVehicle)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objVehicle.Notes;
                string strOldValue = objVehicle.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objVehicle.Notes = frmItemNotes.Notes;
                    if (objVehicle.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objVehicle.Notes))
                    treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (!string.IsNullOrEmpty(objVehicle.ParentID))
                    treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                treVehicles.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objVehicle.Notes, 100);
            }
            if (blnFoundMod)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objMod.Notes;
                string strOldValue = objMod.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objMod.Notes = frmItemNotes.Notes;
                    if (objMod.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objMod.Notes))
                    treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objMod.IncludedInVehicle)
                    treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                treVehicles.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objMod.Notes, 100);
            }
        }

        private void tsLifestyleNotes_Click(object sender, EventArgs e)
        {
            if (treLifestyles.SelectedNode == null)
                return;

            Lifestyle objLifestyle = CommonFunctions.FindByIdWithNameCheck(treLifestyles.SelectedNode.Tag.ToString(), _objCharacter.Lifestyles);
            if (objLifestyle != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objLifestyle.Notes;
                string strOldValue = objLifestyle.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objLifestyle.Notes = frmItemNotes.Notes;
                    if (objLifestyle.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objLifestyle.Notes))
                    treLifestyles.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treLifestyles.SelectedNode.ForeColor = SystemColors.WindowText;
                treLifestyles.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objLifestyle.Notes, 100);
            }
        }

        private void tsVehicleWeaponNotes_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null)
                return;
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objWeapon != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objWeapon.Notes;
                string strOldValue = objWeapon.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objWeapon.Notes = frmItemNotes.Notes;
                    if (objWeapon.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objWeapon.Notes))
                    treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.IncludedInWeapon)
                    treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                treVehicles.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objWeapon.Notes, 100);
            }
        }

        private void tsVehicleName_Click(object sender, EventArgs e)
        {
            while (treVehicles.SelectedNode != null && treVehicles.SelectedNode.Level > 1)
            {
                treVehicles.SelectedNode = treVehicles.SelectedNode.Parent;
            }

            // Make sure a parent item is selected.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectVehicleName"), LanguageManager.GetString("MessageTitle_SelectVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Vehicle.
            Vehicle objVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objVehicle == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectVehicleName"), LanguageManager.GetString("MessageTitle_SelectVehicle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_VehicleName");
            frmPickText.DefaultString = objVehicle.VehicleName;

            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objVehicle.VehicleName = frmPickText.SelectedValue;
            treVehicles.SelectedNode.Text = objVehicle.DisplayName;
        }

        private void tsVehicleAddCyberware_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_VehicleCyberwarePlugin"), LanguageManager.GetString("MessageTitle_NoCyberware"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            Vehicle objVehicle = null;
            Cyberware objCyberwareParent = null;
            VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objVehicle);
            if (objMod == null)
                objCyberwareParent = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objMod);

            if (objCyberwareParent == null && (objMod == null || !objMod.AllowCyberware))
            {
                MessageBox.Show(LanguageManager.GetString("Message_VehicleCyberwarePlugin"), LanguageManager.GetString("MessageTitle_NoCyberware"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectCyberware frmPickCyberware = new frmSelectCyberware(_objCharacter, Improvement.ImprovementSource.Cyberware, true, objCyberwareParent?.MyXmlNode ?? objMod.MyXmlNode);
            if (objCyberwareParent == null)
            {
                frmPickCyberware.SetGrade = "Standard";
                frmPickCyberware.MaximumCapacity = objMod.CapacityRemaining;
                frmPickCyberware.Subsystems = objMod.Subsystems;
                HashSet<string> setDisallowedMounts = new HashSet<string>();
                HashSet<string> setHasMounts = new HashSet<string>();
                foreach (Cyberware objLoopCyberware in objMod.Cyberware.DeepWhere(x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                {
                    string[] strLoopDisallowedMounts = objLoopCyberware.BlocksMounts.Split(',');
                    foreach (string strLoop in strLoopDisallowedMounts)
                        if (!setDisallowedMounts.Contains(strLoop + objLoopCyberware.Location))
                            setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                    string strLoopHasModularMount = objLoopCyberware.HasModularMount;
                    if (!string.IsNullOrEmpty(strLoopHasModularMount))
                        if (!setHasMounts.Contains(strLoopHasModularMount))
                            setHasMounts.Add(strLoopHasModularMount);
                }
                string strDisallowedMounts = string.Empty;
                foreach (string strLoop in setDisallowedMounts)
                    if (!strLoop.EndsWith("Right") && (!strLoop.EndsWith("Left") || setDisallowedMounts.Contains(strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                        strDisallowedMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strDisallowedMounts))
                    strDisallowedMounts = strDisallowedMounts.Substring(0, strDisallowedMounts.Length - 1);
                frmPickCyberware.DisallowedMounts = strDisallowedMounts;
                string strHasMounts = string.Empty;
                foreach (string strLoop in setHasMounts)
                    strHasMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strHasMounts))
                    strHasMounts = strHasMounts.Substring(0, strHasMounts.Length - 1);
                frmPickCyberware.HasModularMounts = strHasMounts;
            }
            else
            {
                frmPickCyberware.SetGrade = objCyberwareParent.Grade.Name;
                // If the Cyberware has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                if (!objCyberwareParent.Capacity.Contains('['))
                {
                    frmPickCyberware.Subsystems = objCyberwareParent.AllowedSubsystems;
                    frmPickCyberware.MaximumCapacity = objCyberwareParent.CapacityRemaining;

                    // Do not allow the user to add a new piece of Cyberware if its Capacity has been reached.
                    if (_objOptions.EnforceCapacity && objCyberwareParent.CapacityRemaining < 0)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CapacityReached"), LanguageManager.GetString("MessageTitle_CapacityReached"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                frmPickCyberware.CyberwareParent = objCyberwareParent;
                frmPickCyberware.Subsystems = objCyberwareParent.AllowedSubsystems;
                HashSet<string> setDisallowedMounts = new HashSet<string>();
                HashSet<string> setHasMounts = new HashSet<string>();
                string[] strLoopDisallowedMounts = objCyberwareParent.BlocksMounts.Split(',');
                foreach (string strLoop in strLoopDisallowedMounts)
                    setDisallowedMounts.Add(strLoop + objCyberwareParent.Location);
                string strLoopHasModularMount = objCyberwareParent.HasModularMount;
                if (!string.IsNullOrEmpty(strLoopHasModularMount))
                    setHasMounts.Add(strLoopHasModularMount);
                foreach (Cyberware objLoopCyberware in objCyberwareParent.Children.DeepWhere(x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                {
                    strLoopDisallowedMounts = objLoopCyberware.BlocksMounts.Split(',');
                    foreach (string strLoop in strLoopDisallowedMounts)
                        if (!setDisallowedMounts.Contains(strLoop + objLoopCyberware.Location))
                            setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                    strLoopHasModularMount = objLoopCyberware.HasModularMount;
                    if (!string.IsNullOrEmpty(strLoopHasModularMount))
                        if (!setHasMounts.Contains(strLoopHasModularMount))
                            setHasMounts.Add(strLoopHasModularMount);
                }
                string strDisallowedMounts = string.Empty;
                foreach (string strLoop in setDisallowedMounts)
                    if (!strLoop.EndsWith("Right") && (!strLoop.EndsWith("Left") || setDisallowedMounts.Contains(strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                        strDisallowedMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strDisallowedMounts))
                    strDisallowedMounts = strDisallowedMounts.Substring(0, strDisallowedMounts.Length - 1);
                frmPickCyberware.DisallowedMounts = strDisallowedMounts;
                string strHasMounts = string.Empty;
                foreach (string strLoop in setHasMounts)
                    strHasMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strHasMounts))
                    strHasMounts = strHasMounts.Substring(0, strHasMounts.Length - 1);
                frmPickCyberware.HasModularMounts = strHasMounts;
            }
            frmPickCyberware.LockGrade();
            frmPickCyberware.ParentVehicle = objVehicle ?? objMod.Parent;
            frmPickCyberware.ShowDialog(this);

            if (frmPickCyberware.DialogResult == DialogResult.Cancel)
                return;

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("cyberware.xml");

            XmlNode objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + frmPickCyberware.SelectedCyberware + "\"]");

            // Create the Cyberware object.
            Cyberware objCyberware = new Cyberware(_objCharacter);
            List<Weapon> objWeapons = new List<Weapon>();
            TreeNode objNode = new TreeNode();
            objNode.ContextMenuStrip = cmsCyberware;
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            List<Vehicle> objVehicles = new List<Vehicle>();
            List<TreeNode> objVehicleNodes = new List<TreeNode>();
            objCyberware.Create(objXmlCyberware, _objCharacter, frmPickCyberware.SelectedGrade, Improvement.ImprovementSource.Cyberware, frmPickCyberware.SelectedRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, false, true, string.Empty, null, objVehicle);
            if (objCyberware.InternalId == Guid.Empty.ToString())
                return;

            if (frmPickCyberware.FreeCost)
                objCyberware.Cost = "0";
            objCyberware.PrototypeTranshuman = frmPickCyberware.PrototypeTranshuman;
            objCyberware.DiscountCost = frmPickCyberware.BlackMarketDiscount;

            treVehicles.SelectedNode.Nodes.Add(objNode);
            treVehicles.SelectedNode.Expand();
            objMod.Cyberware.Add(objCyberware);

            foreach (Weapon objWeapon in objWeapons)
            {
                objWeapon.VehicleMounted = true;
                objVehicle.Weapons.Add(objWeapon);
            }

            // Create the Weapon Node if one exists.
            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsVehicleWeapon;
                treVehicles.SelectedNode.Parent.Nodes.Add(objWeaponNode);
                treVehicles.SelectedNode.Parent.Expand();
            }

            ScheduleCharacterUpdate();

            if (frmPickCyberware.AddAgain)
                tsVehicleAddCyberware_Click(sender, e);
        }

        private void tsArmorName_Click(object sender, EventArgs e)
        {
            while (treArmor.SelectedNode != null && treArmor.SelectedNode.Level > 1)
                treArmor.SelectedNode = treArmor.SelectedNode.Parent;

            // Make sure a parent item is selected, then open the Select Accessory window.
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmorName"), LanguageManager.GetString("MessageTitle_SelectArmor"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Armor.
            Armor objArmor = CommonFunctions.FindByIdWithNameCheck(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            if (objArmor == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmorName"), LanguageManager.GetString("MessageTitle_SelectArmor"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_ArmorName");
            frmPickText.DefaultString = objArmor.ArmorName;
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objArmor.ArmorName = frmPickText.SelectedValue;
            treArmor.SelectedNode.Text = objArmor.DisplayName;
        }

        private void tsEditAdvancedLifestyle_Click(object sender, EventArgs e)
        {
            treLifestyles_DoubleClick(sender, e);
        }

        private void tsAdvancedLifestyleNotes_Click(object sender, EventArgs e)
        {
            tsLifestyleNotes_Click(sender, e);
        }

        private void tsEditLifestyle_Click(object sender, EventArgs e)
        {
            treLifestyles_DoubleClick(sender, e);
        }

        private void tsLifestyleName_Click(object sender, EventArgs e)
        {
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectLifestyleName"), LanguageManager.GetString("MessageTitle_SelectLifestyle"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Lifestyle.
            Lifestyle objLifestyle = null;
            foreach (Lifestyle objSelectedLifestyle in _objCharacter.Lifestyles)
            {
                if (objSelectedLifestyle.InternalId == treLifestyles.SelectedNode.Tag.ToString())
                {
                    objLifestyle = objSelectedLifestyle;
                    break;
                }
            }

            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_LifestyleName");
            frmPickText.DefaultString = objLifestyle.LifestyleName;
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objLifestyle.LifestyleName = frmPickText.SelectedValue;
            treLifestyles.SelectedNode.Text = objLifestyle.DisplayName;
        }

        private void tsGearRenameLocation_Click(object sender, EventArgs e)
        {
            string strNewLocation = string.Empty;
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in _objCharacter.Locations)
            {
                i++;
                if (strLocation == treGear.SelectedNode.Text)
                {
                    foreach (Gear objGear in _objCharacter.Gear)
                    {
                        if (objGear.Location == strLocation)
                            objGear.Location = strNewLocation;
                    }

                    _objCharacter.Locations[i] = strNewLocation;
                    treGear.SelectedNode.Text = strNewLocation;
                    break;
                }
            }

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsWeaponRenameLocation_Click(object sender, EventArgs e)
        {
            string strNewLocation = string.Empty;
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in _objCharacter.WeaponLocations)
            {
                i++;
                if (strLocation == treWeapons.SelectedNode.Text)
                {
                    foreach (Weapon objWeapon in _objCharacter.Weapons)
                    {
                        if (objWeapon.Location == strLocation)
                            objWeapon.Location = strNewLocation;
                    }

                    _objCharacter.WeaponLocations[i] = strNewLocation;
                    treWeapons.SelectedNode.Text = strNewLocation;
                    break;
                }
            }

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsCreateSpell_Click(object sender, EventArgs e)
        {
            // Count the number of Spells the character currently has and make sure they do not try to select more Spells than they are allowed.
            // The maximum number of Spells a character can start with is 2 x (highest of Spellcasting or Ritual Spellcasting Skill).
            int intSpellCount = 0;
            foreach (TreeNode nodCategory in treSpells.Nodes)
            {
                foreach (TreeNode nodSpell in nodCategory.Nodes)
                {
                    intSpellCount++;
                }
            }

            // Run through the list of Active Skills and pick out the two applicable ones.
            int intSkillValue = Math.Max(_objCharacter.SkillsSection.GetActiveSkill("Spellcasting")?.Rating ?? 0, _objCharacter.SkillsSection.GetActiveSkill("Ritual Spellcasting")?.Rating ?? 0);

            if (intSpellCount >= (2 * intSkillValue + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.SpellLimit)) && !_objCharacter.IgnoreRules)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SpellLimit"), LanguageManager.GetString("MessageTitle_SpellLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // The character is still allowed to add Spells, so show the Create Spell window.
            frmCreateSpell frmSpell = new frmCreateSpell(_objCharacter);
            frmSpell.ShowDialog(this);

            if (frmSpell.DialogResult == DialogResult.Cancel)
                return;

            Spell objSpell = frmSpell.SelectedSpell;
            TreeNode objNode = new TreeNode();
            objNode.Text = objSpell.DisplayName;
            objNode.Tag = objSpell.InternalId;
            objNode.ContextMenuStrip = cmsSpell;

            _objCharacter.Spells.Add(objSpell);

            switch (objSpell.Category)
            {
                case "Combat":
                    treSpells.Nodes[0].Nodes.Add(objNode);
                    treSpells.Nodes[0].Expand();
                    break;
                case "Detection":
                    treSpells.Nodes[1].Nodes.Add(objNode);
                    treSpells.Nodes[1].Expand();
                    break;
                case "Health":
                    treSpells.Nodes[2].Nodes.Add(objNode);
                    treSpells.Nodes[2].Expand();
                    break;
                case "Illusion":
                    treSpells.Nodes[3].Nodes.Add(objNode);
                    treSpells.Nodes[3].Expand();
                    break;
                case "Manipulation":
                    treSpells.Nodes[4].Nodes.Add(objNode);
                    treSpells.Nodes[4].Expand();
                    break;
                case "Rituals":
                    treSpells.Nodes[5].Nodes.Add(objNode);
                    treSpells.Nodes[5].Expand();
                    break;
                case "Enchantments":
                    treSpells.Nodes[6].Nodes.Add(objNode);
                    treSpells.Nodes[6].Expand();
                    break;
            }

            treSpells.SelectedNode = objNode;

            treSpells.SortCustom();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsArmorRenameLocation_Click(object sender, EventArgs e)
        {
            string strNewLocation = string.Empty;
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in _objCharacter.ArmorBundles)
            {
                i++;
                if (strLocation == treArmor.SelectedNode.Text)
                {
                    foreach (Armor objArmor in _objCharacter.Armor)
                    {
                        if (objArmor.Location == strLocation)
                            objArmor.Location = strNewLocation;
                    }

                    _objCharacter.ArmorBundles[i] = strNewLocation;
                    treArmor.SelectedNode.Text = strNewLocation;
                    break;
                }
            }
        }

        private void tsCyberwareAddGear_Click(object sender, EventArgs e)
        {
            // Make sure a parent items is selected, then open the Select Gear window.
            if (treCyberware.SelectedNode == null || treCyberware.SelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectCyberware"), LanguageManager.GetString("MessageTitle_SelectCyberware"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            Cyberware objCyberware = null;
            foreach (Cyberware objCharacterCyberware in _objCharacter.Cyberware)
            {
                if (objCharacterCyberware.InternalId == treCyberware.SelectedNode.Tag.ToString())
                {
                    objCyberware = objCharacterCyberware;
                    break;
                }

                foreach (Cyberware objChild in objCharacterCyberware.Children)
                {
                    if (objChild.InternalId == treCyberware.SelectedNode.Tag.ToString())
                    {
                        objCyberware = objChild;
                        break;
                    }
                }
            }

            // Make sure the Cyberware is allowed to accept Gear.
            if (objCyberware.AllowGear == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CyberwareGear"), LanguageManager.GetString("MessageTitle_CyberwareGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objCyberware.MyXmlNode);
            string strCategories = string.Empty;
            foreach (XmlNode objXmlCategory in objCyberware.AllowGear)
                strCategories += objXmlCategory.InnerText + ",";
            frmPickGear.AllowedCategories = strCategories;
            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            TreeNode objNode = new TreeNode();

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Gear objNewGear = null;
            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                objNewGear = objCommlink;
            }
            else
            {
                Gear objGear = new Gear(_objCharacter);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, true, true, frmPickGear.Aerodynamic);
                objGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objGear.DisplayName;

                objNewGear = objGear;
            }

            objNewGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objNewGear.Cost = (Convert.ToDouble(objNewGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objNewGear.Cost))
                    objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objNewGear.Extra))
                    objNewGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objNewGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objNewGear.Cost = "0";
            }

            // Create any Weapons that came with this Gear.
            foreach (Weapon objWeapon in objWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            objCyberware.Gear.Add(objNewGear);

            objNode.ContextMenuStrip = cmsCyberwareGear;
            treCyberware.SelectedNode.Nodes.Add(objNode);
            treCyberware.SelectedNode.Expand();

            ScheduleCharacterUpdate();
            RefreshSelectedCyberware();

            if (frmPickGear.AddAgain)
                tsCyberwareAddGear_Click(sender, e);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsCyberwareGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            while (treCyberware.SelectedNode != null && treCyberware.SelectedNode.Level > 3)
                treCyberware.SelectedNode = treCyberware.SelectedNode.Parent;

            // Make sure a parent items is selected, then open the Select Gear window.
            if (treCyberware.SelectedNode == null || treCyberware.SelectedNode.Level < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware.GetAllDescendants(x => x.Children));
            if (objSensor == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNode objXmlGear = objSensor.MyXmlNode;

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objXmlGear);
            //frmPickGear.ShowNegativeCapacityOnly = true;

            if (objXmlGear.InnerXml.Contains("<addoncategory>"))
            {
                string strCategories = string.Empty;
                foreach (XmlNode objXmlCategory in objXmlGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
                frmPickGear.AllowedCategories = strCategories;
            }

            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Gear objGear = null;

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                objGear = objCommlink;
            }
            else
            {
                Gear objNewGear = new Gear(_objCharacter);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, true, true, frmPickGear.Aerodynamic);
                objNewGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objNewGear.DisplayName;

                objGear = objNewGear;
            }
            objGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            if (objGear.InternalId == Guid.Empty.ToString())
                return;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objGear.Cost = (Convert.ToDouble(objGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objGear.Cost))
                    objGear.Cost = "(" + objGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objGear.Extra))
                    objGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objGear.Cost = "0";
            }

            objNode.Text = objGear.DisplayName;

            if (treCyberware.SelectedNode.Level < 3)
                objNode.ContextMenuStrip = cmsCyberwareGear;

            treCyberware.SelectedNode.Nodes.Add(objNode);
            treCyberware.SelectedNode.Expand();

            objGear.Parent = objSensor;
            objSensor.Children.Add(objGear);
            Commlink objSensorCommlink = objSensor as Commlink;
            if (objSensorCommlink?.CanSwapAttributes == true)
            {
                objSensorCommlink.RefreshCyberdeckArray();
            }

            ScheduleCharacterUpdate();
            RefreshSelectedCyberware();

            if (frmPickGear.AddAgain)
                tsCyberwareGearAddAsPlugin_Click(sender, e);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsCyberwareGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            while (treCyberware.SelectedNode != null && treCyberware.SelectedNode.Level > 3)
                treCyberware.SelectedNode = treCyberware.SelectedNode.Parent;

            // Make sure a parent items is selected, then open the Select Gear window.
            if (treCyberware.SelectedNode == null || treCyberware.SelectedNode.Level < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware.GetAllDescendants(x => x.Children));
            if (objSensor == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNode objXmlGear = objSensor.MyXmlNode;

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objXmlGear);
            //frmPickGear.ShowNegativeCapacityOnly = true;

            if (objXmlGear.InnerXml.Contains("<addoncategory>"))
            {
                string strCategories = string.Empty;
                foreach (XmlNode objXmlCategory in objXmlGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
                frmPickGear.AllowedCategories = strCategories;
            }

            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Gear objGear = null;

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                objGear = objCommlink;
            }
            else
            {
                Gear objNewGear = new Gear(_objCharacter);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, true, true, frmPickGear.Aerodynamic);
                objNewGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objNewGear.DisplayName;

                objGear = objNewGear;
            }

            if (objGear.InternalId == Guid.Empty.ToString())
                return;

            objGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objGear.Cost = (Convert.ToDouble(objGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objGear.Cost))
                    objGear.Cost = "(" + objGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objGear.Extra))
                    objGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objGear.Cost = "0";
            }

            objNode.Text = objGear.DisplayName;

            if (treCyberware.SelectedNode.Level < 3)
                objNode.ContextMenuStrip = cmsCyberwareGear;

            treCyberware.SelectedNode.Nodes.Add(objNode);
            treCyberware.SelectedNode.Expand();

            objGear.Parent = objSensor;
            objSensor.Children.Add(objGear);
            Commlink objSensorCommlink = objSensor as Commlink;
            if (objSensorCommlink?.CanSwapAttributes == true)
            {
                objSensorCommlink.RefreshCyberdeckArray();
            }

            ScheduleCharacterUpdate();
            RefreshSelectedCyberware();

            if (frmPickGear.AddAgain)
                tsCyberwareGearMenuAddAsPlugin_Click(sender, e);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsCyberwarePluginGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            tsCyberwareGearAddAsPlugin_Click(sender, e);
        }

        private void tsWeaponAccessoryAddGear_Click(object sender, EventArgs e)
        {
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);

            // Make sure the Weapon Accessory is allowed to accept Gear.
            if (objAccessory.AllowGear == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_WeaponGear"), LanguageManager.GetString("MessageTitle_CyberwareGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objAccessory.MyXmlNode);
            string strCategories = string.Empty;
            foreach (XmlNode objXmlCategory in objAccessory.AllowGear)
                strCategories += objXmlCategory.InnerText + ",";
            frmPickGear.AllowedCategories = strCategories;
            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            TreeNode objNode = new TreeNode();

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Gear objNewGear = null;
            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                objNewGear = objCommlink;
            }
            else
            {
                Gear objGear = new Gear(_objCharacter);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, true, true, frmPickGear.Aerodynamic);
                objGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objGear.DisplayName;

                objNewGear = objGear;
            }
            if (objNewGear.InternalId == Guid.Empty.ToString())
                return;
            objNewGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objNewGear.Cost = (Convert.ToDouble(objNewGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objNewGear.Cost))
                    objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objNewGear.Extra))
                    objNewGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objNewGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objNewGear.Cost = "0";
            }

            // Create any Weapons that came with this Gear.
            foreach (Weapon objWeapon in objWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            objAccessory.Gear.Add(objNewGear);

            objNode.ContextMenuStrip = cmsWeaponAccessoryGear;
            treWeapons.SelectedNode.Nodes.Add(objNode);
            treWeapons.SelectedNode.Expand();

            ScheduleCharacterUpdate();
            RefreshSelectedWeapon();

            if (frmPickGear.AddAgain)
                tsWeaponAccessoryAddGear_Click(sender, e);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsWeaponAccessoryGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
            if (objSensor == null)
            // Make sure the Gear was found.
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNode objXmlGear = objSensor.MyXmlNode;

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objXmlGear);
            //frmPickGear.ShowNegativeCapacityOnly = true;

            if (objXmlGear.InnerXml.Contains("<addoncategory>"))
            {
                string strCategories = string.Empty;
                foreach (XmlNode objXmlCategory in objXmlGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
                frmPickGear.AllowedCategories = strCategories;
            }

            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Gear objGear = null;

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                objGear = objCommlink;
            }
            else
            {
                Gear objNewGear = new Gear(_objCharacter);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, true, true, frmPickGear.Aerodynamic);
                objNewGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objNewGear.DisplayName;

                objGear = objNewGear;
            }

            if (objGear.InternalId == Guid.Empty.ToString())
                return;

            objGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objGear.Cost = (Convert.ToDouble(objGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objGear.Cost))
                    objGear.Cost = "(" + objGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objGear.Extra))
                    objGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objGear.Cost = "0";
            }

            objNode.Text = objGear.DisplayName;

            objNode.ContextMenuStrip = cmsWeaponAccessoryGear;

            treWeapons.SelectedNode.Nodes.Add(objNode);
            treWeapons.SelectedNode.Expand();

            objGear.Parent = objSensor;
            objSensor.Children.Add(objGear);
            Commlink objSensorCommlink = objSensor as Commlink;
            if (objSensorCommlink?.CanSwapAttributes == true)
            {
                objSensorCommlink.RefreshCyberdeckArray();
            }

            ScheduleCharacterUpdate();
            RefreshSelectedWeapon();

            if (frmPickGear.AddAgain)
                tsWeaponAccessoryGearMenuAddAsPlugin_Click(sender, e);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsVehicleRenameLocation_Click(object sender, EventArgs e)
        {
            string strNewLocation = string.Empty;
            frmSelectText frmPickText = new frmSelectText();
            frmPickText.Description = LanguageManager.GetString("String_AddLocation");
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            // Determine if this is a Location.
            TreeNode objVehicleNode = treVehicles.SelectedNode;
            do
            {
                objVehicleNode = objVehicleNode.Parent;
            } while (objVehicleNode.Level > 1);

            // Get a reference to the affected Vehicle.
            Vehicle objVehicle = null;
            foreach (Vehicle objCharacterVehicle in _objCharacter.Vehicles)
            {
                if (objCharacterVehicle.InternalId == objVehicleNode.Tag.ToString())
                {
                    objVehicle = objCharacterVehicle;
                    break;
                }
            }

            strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in objVehicle.Locations)
            {
                i++;
                if (strLocation == treVehicles.SelectedNode.Text)
                {
                    foreach (Gear objGear in objVehicle.Gear)
                    {
                        if (objGear.Location == strLocation)
                            objGear.Location = strNewLocation;
                    }

                    objVehicle.Locations[i] = strNewLocation;
                    treVehicles.SelectedNode.Text = strNewLocation;
                    break;
                }
            }
        }

        private void tsCreateNaturalWeapon_Click(object sender, EventArgs e)
        {
            frmNaturalWeapon frmCreateNaturalWeapon = new frmNaturalWeapon(_objCharacter);
            frmCreateNaturalWeapon.ShowDialog(this);

            if (frmCreateNaturalWeapon.DialogResult == DialogResult.Cancel)
                return;

            Weapon objWeapon = frmCreateNaturalWeapon.SelectedWeapon;
            _objCharacter.Weapons.Add(objWeapon);
            CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        private void tsVehicleWeaponAccessoryNotes_Click(object sender, EventArgs e)
        {
            WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

            frmNotes frmItemNotes = new frmNotes();
            frmItemNotes.Notes = objAccessory.Notes;
            string strOldValue = objAccessory.Notes;
            frmItemNotes.ShowDialog(this);

            if (frmItemNotes.DialogResult == DialogResult.OK)
            {
                objAccessory.Notes = frmItemNotes.Notes;
                if (objAccessory.Notes != strOldValue)
                {
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }

            if (!string.IsNullOrEmpty(objAccessory.Notes))
                treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
            else if (objAccessory.IncludedInWeapon)
                treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
            else
                treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
            treVehicles.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objAccessory.Notes, 100);
        }

        private void tsVehicleWeaponAccessoryGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objSensor == null)
            // Make sure the Gear was found.
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear"), LanguageManager.GetString("MessageTitle_SelectGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNode objXmlGear = objSensor.MyXmlNode;

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objXmlGear);
            //frmPickGear.ShowNegativeCapacityOnly = true;

            if (objXmlGear.InnerXml.Contains("<addoncategory>"))
            {
                string strCategories = string.Empty;
                foreach (XmlNode objXmlCategory in objXmlGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
                frmPickGear.AllowedCategories = strCategories;
            }

            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Gear objGear = null;

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating, false);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                objGear = objCommlink;
            }
            else
            {
                Gear objNewGear = new Gear(_objCharacter);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, false, true, frmPickGear.Aerodynamic);
                objNewGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objNewGear.DisplayName;

                objGear = objNewGear;
            }

            if (objGear.InternalId == Guid.Empty.ToString())
                return;

            objGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objGear.Cost = (Convert.ToDouble(objGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objGear.Cost))
                    objGear.Cost = "(" + objGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objGear.Extra))
                    objGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objGear.Cost = "0";
            }

            objNode.Text = objGear.DisplayName;

            objNode.ContextMenuStrip = cmsVehicleWeaponAccessoryGear;

            treVehicles.SelectedNode.Nodes.Add(objNode);
            treVehicles.SelectedNode.Expand();

            objGear.Parent = objSensor;
            objSensor.Children.Add(objGear);
            Commlink objSensorCommlink = objSensor as Commlink;
            if (objSensorCommlink?.CanSwapAttributes == true)
            {
                objSensorCommlink.RefreshCyberdeckArray();
            }

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();

            if (frmPickGear.AddAgain)
                tsVehicleWeaponAccessoryGearMenuAddAsPlugin_Click(sender, e);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsVehicleWeaponAccessoryAddGear_Click(object sender, EventArgs e)
        {
            WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

            // Make sure the Weapon Accessory is allowed to accept Gear.
            if (objAccessory.AllowGear == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_WeaponGear"), LanguageManager.GetString("MessageTitle_CyberwareGear"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, false, 0, 1, objAccessory.MyXmlNode);
            string strCategories = string.Empty;
            foreach (XmlNode objXmlCategory in objAccessory.AllowGear)
                strCategories += objXmlCategory.InnerText + ",";
            frmPickGear.AllowedCategories = strCategories;
            frmPickGear.ShowDialog(this);

            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return;

            TreeNode objNode = new TreeNode();

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Gear objNewGear = null;
            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating, false);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                objNewGear = objCommlink;
            }
            else
            {
                Gear objGear = new Gear(_objCharacter);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, false, true, frmPickGear.Aerodynamic);
                objGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objGear.DisplayName;

                objNewGear = objGear;
            }

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return;

            objNewGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objNewGear.Cost = (Convert.ToDouble(objNewGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objNewGear.Cost))
                    objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objNewGear.Extra))
                    objNewGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objNewGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objNewGear.Cost = "0";
            }

            objAccessory.Gear.Add(objNewGear);

            objNode.ContextMenuStrip = cmsVehicleWeaponAccessoryGear;
            treVehicles.SelectedNode.Nodes.Add(objNode);
            treVehicles.SelectedNode.Expand();

            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();

            if (frmPickGear.AddAgain)
                tsVehicleWeaponAccessoryAddGear_Click(sender, e);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region Additional Common Tab Control Events
        private void treQualities_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // Locate the selected Quality.
            lblQualitySource.Text = string.Empty;
            tipTooltip.SetToolTip(lblQualitySource, null);
            if (treQualities.SelectedNode == null || treQualities.SelectedNode.Level <= 0)
            {
                nudQualityLevel_UpdateValue(null);
                return;
            }

            Quality objQuality = CommonFunctions.FindByIdWithNameCheck(treQualities.SelectedNode.Tag.ToString(), _objCharacter.Qualities);

            string strBook = _objOptions.LanguageBookShort(objQuality.Source);
            string strPage = objQuality.Page;
            lblQualitySource.Text = strBook + " " + strPage;
            tipTooltip.SetToolTip(lblQualitySource, _objOptions.LanguageBookLong(objQuality.Source) + " " + LanguageManager.GetString("String_Page") + " " + objQuality.Page);
            lblQualityBP.Text = (objQuality.BP * _objOptions.KarmaQuality).ToString() + " " + LanguageManager.GetString("String_Karma");

            nudQualityLevel_UpdateValue(objQuality);
        }

        private void nudQualityLevel_UpdateValue(Quality objSelectedQuality)
        {
            nudQualityLevel.Enabled = false;
            if (objSelectedQuality == null || objSelectedQuality.OriginSource == QualitySource.Improvement || objSelectedQuality.OriginSource == QualitySource.Metatype)
            {
                nudQualityLevel.Value = 1;
                return;
            }
            XmlDocument objXmlDocument = XmlManager.Load("qualities.xml");
            XmlNode objQualityNode = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objSelectedQuality.Name + "\"]");
            string strLimitString = objQualityNode?["limit"]?.InnerText;
            if (objQualityNode?["chargenlimit"] != null)
                strLimitString = objQualityNode["chargenlimit"].InnerText;
            int intMaxRating = 0;
            if (!string.IsNullOrWhiteSpace(strLimitString) && objQualityNode?["nolevels"] == null && Int32.TryParse(strLimitString, out intMaxRating))
            {
                nudQualityLevel.Maximum = intMaxRating;
                nudQualityLevel.Value = objSelectedQuality.Levels;
                nudQualityLevel.Enabled = true;
            }
            else
            {
                nudQualityLevel.Value = 1;
            }
        }

        private void nudQualityLevel_ValueChanged(object sender, EventArgs e)
        {
            if (nudQualityLevel.Enabled && treQualities.SelectedNode != null && treQualities.SelectedNode.Level > 0)
            {
                // Locate the selected Quality.
                Quality objSelectedQuality = CommonFunctions.FindByIdWithNameCheck(treQualities.SelectedNode.Tag.ToString(), _objCharacter.Qualities);
                int intCurrentLevels = objSelectedQuality.Levels;

                bool blnRequireUpdate = false;
                bool blnRequireTreQualitiesRebuild = false;
                // Adding new levels
                for (; nudQualityLevel.Value > intCurrentLevels; ++intCurrentLevels)
                {
                    XmlDocument objXmlDocument = XmlManager.Load("qualities.xml");
                    XmlNode objXmlSelectedQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objSelectedQuality.Name + "\"]");
                    if (!Backend.Shared_Methods.SelectionShared.RequirementsMet(objXmlSelectedQuality, true, _objCharacter, null, null, objXmlDocument))
                    {
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }
                    TreeNode objNode = new TreeNode();
                    List<Weapon> objWeapons = new List<Weapon>();
                    List<TreeNode> objWeaponNodes = new List<TreeNode>();
                    Quality objQuality = new Quality(_objCharacter);

                    objQuality.Create(objXmlSelectedQuality, _objCharacter, QualitySource.Selected, objNode, objWeapons, objWeaponNodes, objSelectedQuality.Extra);
                    if (objQuality.InternalId == Guid.Empty.ToString())
                    {
                        // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                        ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }
                    objNode.ContextMenuStrip = cmsQuality;

                    objQuality.BP = objSelectedQuality.BP;
                    objQuality.ContributeToLimit = objSelectedQuality.ContributeToLimit;

                    // If the item being checked would cause the limit of 25 BP spent on Positive Qualities to be exceed, do not let it be checked and display a message.
                    string strAmount = _objCharacter.GameplayOptionQualityLimit.ToString() + " " + LanguageManager.GetString("String_Karma");
                    int intMaxQualityAmount = _objCharacter.GameplayOptionQualityLimit;

                    // Make sure that adding the Quality would not cause the character to exceed their BP limits.
                    int intBP = 0;
                    bool blnAddItem = true;

                    // Add the cost of the Quality that is being added.
                    if (objQuality.ContributeToLimit)
                        intBP += objQuality.BP;

                    if (objQuality.Type == QualityType.Negative)
                    {
                        // Calculate the cost of the current Negative Qualities.
                        foreach (Quality objCharacterQuality in _objCharacter.Qualities)
                        {
                            if (objCharacterQuality.Type == QualityType.Negative && objCharacterQuality.ContributeToLimit)
                                intBP += objCharacterQuality.BP;
                        }

                        // Include the BP used by Enemies.
                        if (lblEnemiesBP.Text.Contains(LanguageManager.GetString("String_BP")))
                            intBP += int.Parse(lblEnemiesBP.Text.Replace(LanguageManager.GetString("String_Karma"), string.Empty));
                        else
                            intBP += int.Parse(lblEnemiesBP.Text.Replace(" " + LanguageManager.GetString("String_Karma"), string.Empty));

                        // Include the amount from Free Negative Quality BP cost Improvements.
                        intBP -= (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeNegativeQualities) * _objOptions.KarmaQuality);

                        // Check if adding this Quality would put the character over their limit.
                        if (!_objOptions.ExceedNegativeQualities)
                        {
                            if (intBP < (intMaxQualityAmount * -1) && !_objCharacter.IgnoreRules)
                            {
                                MessageBox.Show(LanguageManager.GetString("Message_NegativeQualityLimit").Replace("{0}", strAmount), LanguageManager.GetString("MessageTitle_NegativeQualityLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                                blnAddItem = false;
                            }
                            else if (_objCharacter.MetatypeBP < 0)
                            {
                                if ((intBP + _objCharacter.MetatypeBP) < (intMaxQualityAmount * -1) && !_objCharacter.IgnoreRules)
                                {
                                    MessageBox.Show(LanguageManager.GetString("Message_NegativeQualityAndMetatypeLimit").Replace("{0}", strAmount), LanguageManager.GetString("MessageTitle_NegativeQualityLimit"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    blnAddItem = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (objQuality.ContributeToLimit || objQuality.ContributeToBP)
                        {
                            // Calculate the cost of the current Positive Qualities.
                            foreach (Quality objCharacterQuality in _objCharacter.Qualities)
                            {
                                if (objCharacterQuality.Type == QualityType.Positive && objCharacterQuality.ContributeToLimit)
                                    intBP += objCharacterQuality.BP;
                            }
                            if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                                intBP *= _objOptions.KarmaQuality;

                            // Include the amount from Free Negative Quality BP cost Improvements.
                            intBP -= (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreePositiveQualities) *
                                      _objOptions.KarmaQuality);

                            // Check if adding this Quality would put the character over their limit.
                            if (!_objOptions.ExceedPositiveQualities)
                            {
                                if (intBP > intMaxQualityAmount && !_objCharacter.IgnoreRules)
                                {
                                    MessageBox.Show(
                                        LanguageManager.GetString("Message_PositiveQualityLimit")
                                            .Replace("{0}", strAmount),
                                        LanguageManager.GetString("MessageTitle_PositiveQualityLimit"),
                                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    blnAddItem = false;
                                }
                            }
                        }
                    }

                    if (blnAddItem)
                    {
                        blnRequireUpdate = true;
                        _objCharacter.Qualities.Add(objQuality);

                        // Add any created Weapons to the character.
                        foreach (Weapon objWeapon in objWeapons)
                            _objCharacter.Weapons.Add(objWeapon);

                        // Create the Weapon Node if one exists.
                        foreach (TreeNode objWeaponNode in objWeaponNodes)
                        {
                            objWeaponNode.ContextMenuStrip = cmsWeapon;
                            treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                            treWeapons.Nodes[0].Expand();
                        }
                        
                    }
                    else
                    {
                        // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                        ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }
                }
                // Removing levels
                for (; nudQualityLevel.Value < intCurrentLevels; --intCurrentLevels)
                {
                    Quality objInvisibleQuality = _objCharacter.Qualities.FirstOrDefault(x => x.QualityId == objSelectedQuality.QualityId && x.Extra == objSelectedQuality.Extra && x.SourceName == objSelectedQuality.SourceName && x.InternalId != objSelectedQuality.InternalId);
                    if (objInvisibleQuality != null && RemoveQuality(objInvisibleQuality, false, false))
                    {
                        blnRequireUpdate = true;
                    }
                    else if (RemoveQuality(objSelectedQuality, false, false))
                    {
                        blnRequireUpdate = true;
                        blnRequireTreQualitiesRebuild = true;
                        break;
                    }
                    else
                    {
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }
                }

                if (blnRequireUpdate)
                {
                    if (blnRequireTreQualitiesRebuild)
                        RefreshQualities(treQualities, cmsQuality, true);
                    else
                        RefreshQualityNames(treQualities);
                    UpdateMentorSpirits();
                    ScheduleCharacterUpdate();
                    RefreshMartialArts();
                    RefreshAIPrograms();
                    RefreshLimitModifiers();
                    RefreshSpells(treSpells, cmsSpell, _objCharacter);
                    PopulateGearList();
                    RefreshCritterPowers(treCritterPowers, cmsCritterPowers);
                    RefreshContacts();
                    RefreshSelectedCyberware();
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }
        #endregion

        #region Additional Cyberware Tab Control Events
        private void treCyberware_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedCyberware();
        }

        private void cboCyberwareGrade_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!_blnSkipRefresh && !_blnLoading)
            {
                // Locate the selected piece of Cyberware.
                Cyberware objCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);
                if (objCyberware == null)
                    return;

                List<Grade> objGradeList = CommonFunctions.GetGradeList(objCyberware.SourceType, _objCharacter.Options);

                // Updated the selected Cyberware Grade.
                objCyberware.Grade = objGradeList.FirstOrDefault(x => x.Name == cboCyberwareGrade.SelectedValue.ToString());

                // Run through all of the child pieces and make sure their Grade matches.
                foreach (Cyberware objChildCyberware in objCyberware.Children)
                {
                    objChildCyberware.Grade = objCyberware.Grade;
                }
                
                RefreshSelectedCyberware();
                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void chkPrototypeTranshuman_CheckedChanged(object sender, EventArgs e)
        {
            if (!_blnSkipRefresh)
            {
                // Locate the selected piece of Cyberware.
                bool blnFound = false;
                Cyberware objCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);
                if (objCyberware != null)
                    blnFound = true;

                if (blnFound)
                {
                    // Update the selected Cyberware Rating.
                    objCyberware.PrototypeTranshuman = chkPrototypeTranshuman.Checked;
                }

                RefreshSelectedCyberware();
                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }
        private void nudCyberwareRating_ValueChanged(object sender, EventArgs e)
        {
            if (!_blnSkipRefresh)
            {
                // Locate the selected piece of Cyberware.
                Cyberware objCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);
                if (objCyberware != null)
                {
                    // Update the selected Cyberware Rating.
                    objCyberware.Rating = decimal.ToInt32(nudCyberwareRating.Value);

                    // See if a Bonus node exists.
                    if ((objCyberware.Bonus != null && objCyberware.Bonus.InnerXml.Contains("Rating")) || (objCyberware.PairBonus != null && objCyberware.PairBonus.InnerXml.Contains("Rating")) || (objCyberware.WirelessOn && objCyberware.WirelessBonus != null && objCyberware.WirelessBonus.InnerXml.Contains("Rating")))
                    {
                        if (objCyberware.PairBonus != null)
                        {
                            List<Cyberware> lstPairableCyberwares = _objCharacter.Cyberware.DeepWhere(x => x.Children, x => x.Name == objCyberware.Name && x.Extra == objCyberware.Extra && x.IsModularCurrentlyEquipped).ToList();
                            int intCyberwaresCount = lstPairableCyberwares.Count;
                            if (!string.IsNullOrEmpty(objCyberware.Location))
                            {
                                intCyberwaresCount = Math.Min(lstPairableCyberwares.Count(x => x.Location == objCyberware.Location), lstPairableCyberwares.Count(x => x.Location != objCyberware.Location));
                            }
                            foreach (Cyberware objLoopCyberware in lstPairableCyberwares)
                            {
                                ImprovementManager.RemoveImprovements(_objCharacter, objLoopCyberware.SourceType, objLoopCyberware.InternalId);
                                if (objLoopCyberware.Bonus != null)
                                    ImprovementManager.CreateImprovements(_objCharacter, objLoopCyberware.SourceType, objLoopCyberware.InternalId, objLoopCyberware.Bonus, false, objLoopCyberware.Rating, objLoopCyberware.DisplayNameShort);
                                if (objLoopCyberware.WirelessOn && objLoopCyberware.WirelessBonus != null)
                                    ImprovementManager.CreateImprovements(_objCharacter, objLoopCyberware.SourceType, objLoopCyberware.InternalId, objLoopCyberware.WirelessBonus, false, objLoopCyberware.Rating, objLoopCyberware.DisplayNameShort);
                                if (intCyberwaresCount > 0 && intCyberwaresCount % 2 == 0)
                                {
                                    ImprovementManager.CreateImprovements(_objCharacter, objLoopCyberware.SourceType, objLoopCyberware.InternalId, objLoopCyberware.PairBonus, false, objLoopCyberware.Rating, objLoopCyberware.DisplayNameShort);
                                }
                                intCyberwaresCount -= 1;
                            }
                        }
                        else
                        {
                            // If the Bonus contains "Rating", remove the existing Improvements and create new ones.
                            ImprovementManager.RemoveImprovements(_objCharacter, objCyberware.SourceType, objCyberware.InternalId);
                            if (objCyberware.Bonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, objCyberware.SourceType, objCyberware.InternalId, objCyberware.Bonus, false, objCyberware.Rating, objCyberware.DisplayNameShort);
                            if (objCyberware.WirelessOn && objCyberware.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, objCyberware.SourceType, objCyberware.InternalId, objCyberware.WirelessBonus, false, objCyberware.Rating, objCyberware.DisplayNameShort);
                        }
                    }

                    treCyberware.SelectedNode.Text = objCyberware.DisplayName;
                }
                else
                {
                    // Find the selected piece of Gear.
                    Gear objGear = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware.GetAllDescendants(x => x.Children));

                    objGear.Rating = decimal.ToInt32(nudCyberwareRating.Value);

                    // See if a Bonus node exists.
                    if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                    {
                        ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                        if (!string.IsNullOrEmpty(objGear.Extra))
                        {
                            ImprovementManager.ForcedValue = objGear.Extra.TrimEnd(", Hacked");
                        }
                        if (objGear.Bonus != null)
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                        if (objGear.WirelessOn && objGear.WirelessBonus != null)
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                    }

                    treCyberware.SelectedNode.Text = objGear.DisplayName;
                }
                
                RefreshSelectedCyberware();
                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }
        #endregion

        #region Additional Street Gear Tab Control Events
        private void treWeapons_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedWeapon();
            RefreshPasteStatus();
        }

        private void treWeapons_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level > 1 || treWeapons.SelectedNode.Level < 0)
                return;

            // Do not allow the root element to be moved.
            if (treWeapons.SelectedNode.Tag.ToString() == "Node_SelectedWeapons")
                return;
            _intDragLevel = treWeapons.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treWeapons_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treWeapons_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else
            {
                intNewIndex = treWeapons.Nodes[treWeapons.Nodes.Count - 1].Nodes.Count;
                nodDestination = treWeapons.Nodes[treWeapons.Nodes.Count - 1];
            }

            if (treWeapons.SelectedNode.Level == 1)
                CommonFunctions.MoveWeaponNode(_objCharacter, intNewIndex, nodDestination, treWeapons);
            else
                CommonFunctions.MoveWeaponRoot(_objCharacter, intNewIndex, nodDestination, treWeapons);

            // Clear the background color for all Nodes.
            treWeapons.ClearNodeBackground(null);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void treWeapons_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treWeapons.ClearNodeBackground(objNode);
        }

        private void treArmor_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (treArmor.SelectedNode.Level == 0)
            {
                cmdArmorEquipAll.Visible = true;
                cmdArmorUnEquipAll.Visible = true;
                lblArmorEquippedLabel.Visible = true;
                lblArmorEquipped.Visible = true;
            }
            else
            {
                cmdArmorEquipAll.Visible = false;
                cmdArmorUnEquipAll.Visible = false;
                lblArmorEquippedLabel.Visible = false;
                lblArmorEquipped.Visible = false;
            }

            RefreshSelectedArmor();
            RefreshPasteStatus();
        }

        private void treArmor_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level != 1)
                return;

            _intDragLevel = treArmor.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treArmor_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treArmor_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else
            {
                intNewIndex = treArmor.Nodes[treArmor.Nodes.Count - 1].Nodes.Count;
                nodDestination = treArmor.Nodes[treArmor.Nodes.Count - 1];
            }

            CommonFunctions.MoveArmorNode(_objCharacter, intNewIndex, nodDestination, treArmor);

            // Clear the background color for all Nodes.
            treArmor.ClearNodeBackground(null);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void treArmor_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treArmor.ClearNodeBackground(objNode);
        }

        private void treLifestyles_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedLifestyle();
            RefreshPasteStatus();
        }

        private void treLifestyles_DoubleClick(object sender, EventArgs e)
        {
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level == 0)
                return;

            // Locate the selected Lifestyle.
            Lifestyle objLifestyle = null;
            string strGuid = string.Empty;
            int intMonths = 0;
            int intPosition = -1;
            foreach (Lifestyle objCharacterLifestyle in _objCharacter.Lifestyles)
            {
                intPosition++;
                if (objCharacterLifestyle.InternalId == treLifestyles.SelectedNode.Tag.ToString())
                {
                    objLifestyle = objCharacterLifestyle;
                    strGuid = objLifestyle.InternalId;
                    intMonths = objLifestyle.Months;
                    break;
                }
            }

            Lifestyle objNewLifestyle = new Lifestyle(_objCharacter);
            if (objLifestyle.StyleType.ToString() != "Standard")
            {
                // Edit Advanced Lifestyle.
                frmSelectLifestyleAdvanced frmPickLifestyle = new frmSelectLifestyleAdvanced(objNewLifestyle, _objCharacter);
                frmPickLifestyle.SetLifestyle(objLifestyle);
                frmPickLifestyle.ShowDialog(this);

                if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                    return;

                // Update the selected Lifestyle and refresh the list.
                objLifestyle = frmPickLifestyle.SelectedLifestyle;
                objLifestyle.SetInternalId(strGuid);
                objLifestyle.Months = intMonths;
                _objCharacter.Lifestyles[intPosition] = objLifestyle;
                treLifestyles.SelectedNode.Text = objLifestyle.DisplayName;
                RefreshSelectedLifestyle();
                ScheduleCharacterUpdate();
            }
            else
            {
                // Edit Basic Lifestyle.
                frmSelectLifestyle frmPickLifestyle = new frmSelectLifestyle(objNewLifestyle, _objCharacter);
                frmPickLifestyle.SetLifestyle(objLifestyle);
                frmPickLifestyle.ShowDialog(this);

                if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                    return;

                // Update the selected Lifestyle and refresh the list.
                objLifestyle = frmPickLifestyle.SelectedLifestyle;
                objLifestyle.SetInternalId(strGuid);
                objLifestyle.Months = intMonths;
                _objCharacter.Lifestyles[intPosition] = objLifestyle;
                treLifestyles.SelectedNode.Text = objLifestyle.DisplayName;
                RefreshSelectedLifestyle();
                ScheduleCharacterUpdate();
            }
        }

        private void treLifestyles_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treLifestyles.SelectedNode == null ||  treLifestyles.SelectedNode.Level != 1)
                return;

            _intDragLevel = treLifestyles.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treLifestyles_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treLifestyles_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else
            {
                intNewIndex = treLifestyles.Nodes[treLifestyles.Nodes.Count - 1].Nodes.Count;
                nodDestination = treLifestyles.Nodes[treLifestyles.Nodes.Count - 1];
            }

            CommonFunctions.MoveLifestyleNode(_objCharacter, intNewIndex, nodDestination, treLifestyles);

            // Clear the background color for all Nodes.
            treLifestyles.ClearNodeBackground(null);

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void treLifestyles_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treLifestyles.ClearNodeBackground(objNode);
        }

        private void nudLifestyleMonths_ValueChanged(object sender, EventArgs e)
        {
            if (treLifestyles.SelectedNode != null)
            {
                if (treLifestyles.SelectedNode.Level > 0)
                {
                    _blnSkipRefresh = true;

                    // Locate the selected Lifestyle.
                    Lifestyle objLifestyle = CommonFunctions.FindByIdWithNameCheck(treLifestyles.SelectedNode.Tag.ToString(), _objCharacter.Lifestyles);
                    if (objLifestyle == null)
                        return;

                    objLifestyle.Months = decimal.ToInt32(nudLifestyleMonths.Value);

                    _blnSkipRefresh = false;
                    ScheduleCharacterUpdate();
                    RefreshSelectedLifestyle();

                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }

        private void treGear_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedGear();
            RefreshPasteStatus();
        }

        private void nudGearRating_ValueChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            if (treGear.SelectedNode.Level > 0)
            {
                Gear objGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
                if (objGear == null)
                    return;

                objGear.Rating = decimal.ToInt32(nudGearRating.Value);
                if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                {
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                    if (!string.IsNullOrEmpty(objGear.Extra))
                    {
                        ImprovementManager.ForcedValue = objGear.Extra.TrimEnd(", Hacked");
                    }
                    bool blnAddBonus = true;
                    if (objGear.Name == "Qi Focus")
                    {
                        if (!objGear.Bonded)
                            blnAddBonus = false;
                    }
                    if (blnAddBonus)
                    {
                        if (objGear.Bonus != null)
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                        if (objGear.WirelessOn && objGear.WirelessBonus != null)
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                    }

                }

                CommonFunctions.PopulateFocusList(_objCharacter, treFoci);
                RefreshSelectedGear();
                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void nudGearQty_ValueChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treGear.SelectedNode == null)
                return;
            // Attempt to locate the selected piece of Gear.
            if (treGear.SelectedNode.Level > 0)
            {
                Gear objSelectedGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);

                if (objSelectedGear != null)
                {
                    objSelectedGear.Quantity = nudGearQty.Value;
                    RefreshSelectedGear();
                    ScheduleCharacterUpdate();

                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }

        private void chkArmorEquipped_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treArmor.SelectedNode == null)
                return;

            // Locate the selected Armor or Armor Mod.
            if (treArmor.SelectedNode.Level == 1)
            {
                Armor objArmor = CommonFunctions.FindByIdWithNameCheck(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
                if (objArmor != null)
                {
                    objArmor.Equipped = chkArmorEquipped.Checked;
                    if (chkArmorEquipped.Checked)
                    {
                        // Add the Armor's Improevments to the character.
                        if (objArmor.Bonus != null)
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.Bonus, false, 1, objArmor.DisplayNameShort);
                        if (objArmor.WirelessOn && objArmor.WirelessBonus != null)
                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.WirelessBonus, false, 1, objArmor.DisplayNameShort);
                        // Add the Improvements from any Armor Mods in the Armor.
                        foreach (ArmorMod objMod in objArmor.ArmorMods)
                        {
                            if (objMod.Equipped)
                            {
                                if (objMod.Bonus != null)
                                    ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort);
                                if (objMod.WirelessOn && objMod.WirelessBonus != null)
                                    ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.WirelessBonus, false, objMod.Rating, objMod.DisplayNameShort);
                                // Add the Improvements from any Gear in the Armor.
                                foreach (Gear objGear in objMod.Gear)
                                {
                                    if (objGear.Equipped)
                                    {
                                        if (objGear.Bonus != null)
                                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                                        if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                            ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                                    }
                                }
                            }
                        }
                        // Add the Improvements from any Gear in the Armor.
                        foreach (Gear objGear in objArmor.Gear)
                        {
                            if (objGear.Equipped)
                            {
                                if (objGear.Bonus != null)
                                    ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                                if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                    ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                            }
                        }
                    }
                    else
                    {
                        // Remove any Improvements the Armor created.
                        if (objArmor.Bonus != null || (objArmor.WirelessOn && objArmor.WirelessBonus != null))
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Armor, objArmor.InternalId);
                        // Remove any Improvements from any Armor Mods in the Armor.
                        foreach (ArmorMod objMod in objArmor.ArmorMods)
                        {
                            if (objMod.Bonus != null || (objMod.WirelessOn && objMod.WirelessBonus != null))
                                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                            // Remove any Improvements from any Gear in the Armor.
                            foreach (Gear objGear in objMod.Gear)
                            {
                                if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                            }
                        }
                        // Remove any Improvements from any Gear in the Armor.
                        foreach (Gear objGear in objArmor.Gear)
                        {
                            if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                        }
                    }
                }
                else
                    return;
            }
            else if (treArmor.SelectedNode.Level > 1)
            {
                ArmorMod objMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
                if (objMod != null)
                {
                    objMod.Equipped = chkArmorEquipped.Checked;
                    if (chkArmorEquipped.Checked)
                    {
                        if (objMod.Parent.Equipped)
                        {
                            // Add the Mod's Improevments to the character.
                            if (objMod.Bonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort);
                            if (objMod.WirelessOn && objMod.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.WirelessBonus, false, objMod.Rating, objMod.DisplayNameShort);
                        }
                    }
                    else
                    {
                        // Remove any Improvements the Mod created.
                        if (objMod.Bonus != null || (objMod.WirelessOn && objMod.WirelessBonus != null))
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                    }
                }

                Armor objFoundArmor = null;
                ArmorMod objFoundArmorMod = null;
                Gear objGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor, out objFoundArmor, out objFoundArmorMod);
                if (objGear != null)
                {
                    objGear.Equipped = chkArmorEquipped.Checked;
                    if (chkArmorEquipped.Checked)
                    {
                        // Add the Gear's Improevments to the character.
                        if (objFoundArmor.Equipped && (objFoundArmorMod == null || objFoundArmorMod.Equipped))
                        {
                            if (objGear.Bonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                            if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                        }
                    }
                    else
                    {
                        // Remove any Improvements the Gear created.
                        if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                    }
                }
                else if (objMod == null)
                    return;
            }
            RefreshSelectedArmor();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void chkWeaponAccessoryInstalled_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treWeapons.SelectedNode == null)
                return;
            // Locate the selected Weapon Accessory or Modification.
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
            if (objAccessory != null)
            {
                objAccessory.Installed = chkWeaponAccessoryInstalled.Checked;
            }
            else
            {
                // Determine if this is an Underbarrel Weapon.
                Weapon objWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                if (objWeapon != null)
                {
                    objWeapon.Installed = chkWeaponAccessoryInstalled.Checked;
                }
                else
                {
                    // Find the selected Gear.
                    Gear objSelectedGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                    if (objSelectedGear != null)
                    {
                        objSelectedGear.Equipped = chkWeaponAccessoryInstalled.Checked;

                        CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objSelectedGear, chkWeaponAccessoryInstalled.Checked);

                        ScheduleCharacterUpdate();
                    }
                    else
                        return;
                }
            }

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void chkIncludedInWeapon_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treWeapons.SelectedNode == null)
                return;
            // Locate the selected Weapon Accessory or Modification.
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
            if (objAccessory != null)
            {
                objAccessory.IncludedInWeapon = chkIncludedInWeapon.Checked;
                _blnIsDirty = true;
                UpdateWindowTitle();
                ScheduleCharacterUpdate();
            }
        }

        private void treGear_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treGear.SelectedNode == null)
                return;
            if (e.Button == MouseButtons.Left)
            {
                if (treGear.SelectedNode.Level > 1 || treGear.SelectedNode.Level < 0)
                    return;
                _objDragButton = MouseButtons.Left;
            }
            else
            {
                if (treGear.SelectedNode.Level == 0)
                    return;
                _objDragButton = MouseButtons.Right;
            }

            // Do not allow the root element to be moved.
            if (treGear.SelectedNode.Tag.ToString() == "Node_SelectedGear")
                return;

            _intDragLevel = treGear.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treGear_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treGear_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else
            {
                intNewIndex = treGear.Nodes[treGear.Nodes.Count - 1].Nodes.Count;
                nodDestination = treGear.Nodes[treGear.Nodes.Count - 1];
            }

            // If the item was moved using the left mouse button, change the order of things.
            if (_objDragButton == MouseButtons.Left)
            {
                if (treGear.SelectedNode.Level == 1)
                    CommonFunctions.MoveGearNode(_objCharacter, intNewIndex, nodDestination, treGear);
                else
                    CommonFunctions.MoveGearRoot(_objCharacter, intNewIndex, nodDestination, treGear);
            }
            if (_objDragButton == MouseButtons.Right)
                CommonFunctions.MoveGearParent(_objCharacter, nodDestination, treGear, cmsGear);

            // Clear the background color for all Nodes.
            treGear.ClearNodeBackground(null);

            _objDragButton = MouseButtons.None;

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void treGear_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (_objDragButton == MouseButtons.Left)
            {
                if (objNode.Level <= _intDragLevel)
                    objNode.BackColor = SystemColors.ControlDark;
            }
            else
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treGear.ClearNodeBackground(objNode);
        }

        private void chkGearEquipped_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treGear.SelectedNode == null)
                return;

            // Attempt to locate the selected piece of Gear.
            Gear objSelectedGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objSelectedGear != null)
            {
                objSelectedGear.Equipped = chkGearEquipped.Checked;

                CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objSelectedGear, chkGearEquipped.Checked);

                RefreshSelectedGear();
                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void chkGearHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treGear.SelectedNode == null)
                return;
            string strGuid = treGear.SelectedNode?.Tag.ToString() ?? string.Empty;
            if (!string.IsNullOrEmpty(strGuid))
            {
                Commlink objCommlink = CommonFunctions.FindCommlink(strGuid, _objCharacter.Gear.GetAllDescendants(x => x.Children));
                if (objCommlink != null)
                {
                    objCommlink.HomeNode = chkGearHomeNode.Checked;
                    RefreshSelectedGear();
                    if (chkVehicleHomeNode.Checked)
                        RefreshSelectedVehicle();
                    ScheduleCharacterUpdate();

                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }

        private void chkIncludedInArmor_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Locate the selected Armor Modification.
            ArmorMod objMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            if (objMod != null)
            {
                objMod.IncludedInArmor = chkIncludedInArmor.Checked;

                _blnIsDirty = true;
                UpdateWindowTitle();
                ScheduleCharacterUpdate();
            }
        }

        private void chkCommlinks_CheckedChanged(object sender, EventArgs e)
        {
            PopulateGearList();
        }

        private void chkActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treGear.SelectedNode == null)
                return;

            // Attempt to locate the selected piece of Gear.
            Commlink objSelectedCommlink = CommonFunctions.FindCommlink(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objSelectedCommlink != null)
            {
                objSelectedCommlink.IsActive = chkActiveCommlink.Checked;

                RefreshSelectedGear();
                ScheduleCharacterUpdate();

                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }


        private void cboGearAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearAttack.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindCommlink(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objCommlink == null)
                return;
            int intCurrentIndex = cboGearAttack.SelectedIndex;

            _blnLoading = true;
            string strTemp = objCommlink.Attack;
            bool blnRefreshCBOs = true;
            // Find the combo with the same value as this one and change it to the missing value.
            if (cboGearSleaze.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Attack = objCommlink.Sleaze;
                objCommlink.Sleaze = strTemp;
            }
            else if (cboGearDataProcessing.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Attack = objCommlink.DataProcessing;
                objCommlink.DataProcessing = strTemp;
            }
            else if (cboGearFirewall.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Attack = objCommlink.Firewall;
                objCommlink.Firewall = strTemp;
            }
            else
                blnRefreshCBOs = false;
            if (blnRefreshCBOs)
            {
                objCommlink.RefreshCommlinkCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);
                if (objCommlink.IsActive || objCommlink.HomeNode)
                {
                    ScheduleCharacterUpdate();
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }

            _blnLoading = false;
        }
        private void cboGearSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearSleaze.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindCommlink(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objCommlink == null)
                return;
            int intCurrentIndex = cboGearSleaze.SelectedIndex;

            _blnLoading = true;
            string strTemp = objCommlink.Sleaze;
            bool blnRefreshCBOs = true;
            // Find the combo with the same value as this one and change it to the missing value.
            if (cboGearAttack.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Sleaze = objCommlink.Attack;
                objCommlink.Attack = strTemp;
            }
            else if (cboGearDataProcessing.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Sleaze = objCommlink.DataProcessing;
                objCommlink.DataProcessing = strTemp;
            }
            else if (cboGearFirewall.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Sleaze = objCommlink.Firewall;
                objCommlink.Firewall = strTemp;
            }
            else
                blnRefreshCBOs = false;
            if (blnRefreshCBOs)
            {
                objCommlink.RefreshCommlinkCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);
                if (objCommlink.IsActive || objCommlink.HomeNode)
                {
                    ScheduleCharacterUpdate();
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }

            _blnLoading = false;
        }
        private void cboGearDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearDataProcessing.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindCommlink(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            int intCurrentIndex = cboGearDataProcessing.SelectedIndex;

            _blnLoading = true;
            string strTemp = objCommlink.DataProcessing;
            bool blnRefreshCBOs = true;
            // Find the combo with the same value as this one and change it to the missing value.
            if (cboGearSleaze.SelectedIndex == intCurrentIndex)
            {
                objCommlink.DataProcessing = objCommlink.Sleaze;
                objCommlink.Sleaze = strTemp;
            }
            else if (cboGearAttack.SelectedIndex == intCurrentIndex)
            {
                objCommlink.DataProcessing = objCommlink.Attack;
                objCommlink.Attack = strTemp;
            }
            else if (cboGearFirewall.SelectedIndex == intCurrentIndex)
            {
                objCommlink.DataProcessing = objCommlink.Firewall;
                objCommlink.Firewall = strTemp;
            }
            else
                blnRefreshCBOs = false;
            if (blnRefreshCBOs)
            {
                objCommlink.RefreshCommlinkCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);
                if (objCommlink.IsActive || objCommlink.HomeNode)
                {
                    ScheduleCharacterUpdate();
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }

            _blnLoading = false;
        }
        private void cboGearFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearFirewall.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindCommlink(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objCommlink == null)
                return;
            int intCurrentIndex = cboGearFirewall.SelectedIndex;

            _blnLoading = true;
            string strTemp = objCommlink.Firewall;
            bool blnRefreshCBOs = true;
            // Find the combo with the same value as this one and change it to the missing value.
            if (cboGearAttack.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Firewall = objCommlink.Attack;
                objCommlink.Attack = strTemp;
            }
            else if (cboGearSleaze.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Firewall = objCommlink.Sleaze;
                objCommlink.Sleaze = strTemp;
            }
            else if (cboGearDataProcessing.SelectedIndex == intCurrentIndex)
            {
                objCommlink.Firewall = objCommlink.DataProcessing;
                objCommlink.DataProcessing = strTemp;
            }
            else
                blnRefreshCBOs = false;
            if (blnRefreshCBOs)
            {
                objCommlink.RefreshCommlinkCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);
                if (objCommlink.IsActive || objCommlink.HomeNode)
                {
                    ScheduleCharacterUpdate();
                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }

            _blnLoading = false;
        }
        private void cboVehicleGearAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearAttack.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles) as Commlink;
            if (objCommlink != null)
            {
                int intCurrentIndex = cboVehicleGearAttack.SelectedIndex;

                _blnLoading = true;
                string strTemp = objCommlink.Attack;
                bool blnRefreshCBOs = true;
                // Find the combo with the same value as this one and change it to the missing value.
                if (cboVehicleGearSleaze.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Attack = objCommlink.Sleaze;
                    objCommlink.Sleaze = strTemp;
                }
                else if (cboVehicleGearDataProcessing.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Attack = objCommlink.DataProcessing;
                    objCommlink.DataProcessing = strTemp;
                }
                else if (cboVehicleGearFirewall.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Attack = objCommlink.Firewall;
                    objCommlink.Firewall = strTemp;
                }
                else
                    blnRefreshCBOs = false;
                if (blnRefreshCBOs)
                {
                    objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);
                    if (objCommlink.IsActive || objCommlink.HomeNode)
                    {
                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                _blnLoading = false;
            }
        }
        private void cboVehicleGearSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearSleaze.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles) as Commlink;
            if (objCommlink != null)
            {
                int intCurrentIndex = cboVehicleGearSleaze.SelectedIndex;

                _blnLoading = true;
                string strTemp = objCommlink.Sleaze;
                bool blnRefreshCBOs = true;
                // Find the combo with the same value as this one and change it to the missing value.
                if (cboVehicleGearAttack.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Sleaze = objCommlink.Attack;
                    objCommlink.Attack = strTemp;
                }
                else if (cboVehicleGearDataProcessing.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Sleaze = objCommlink.DataProcessing;
                    objCommlink.DataProcessing = strTemp;
                }
                else if (cboVehicleGearFirewall.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Sleaze = objCommlink.Firewall;
                    objCommlink.Firewall = strTemp;
                }
                else
                    blnRefreshCBOs = false;
                if (blnRefreshCBOs)
                {
                    objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);
                    if (objCommlink.IsActive || objCommlink.HomeNode)
                    {
                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                _blnLoading = false;
            }
        }
        private void cboVehicleGearFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearFirewall.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles) as Commlink;
            if (objCommlink != null)
            {
                int intCurrentIndex = cboVehicleGearFirewall.SelectedIndex;

                _blnLoading = true;
                string strTemp = objCommlink.Firewall;
                bool blnRefreshCBOs = true;
                // Find the combo with the same value as this one and change it to the missing value.
                if (cboVehicleGearAttack.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Firewall = objCommlink.Attack;
                    objCommlink.Attack = strTemp;
                }
                else if (cboVehicleGearSleaze.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Firewall = objCommlink.Sleaze;
                    objCommlink.Sleaze = strTemp;
                }
                else if (cboVehicleGearDataProcessing.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.Firewall = objCommlink.DataProcessing;
                    objCommlink.DataProcessing = strTemp;
                }
                else
                    blnRefreshCBOs = false;
                if (blnRefreshCBOs)
                {
                    objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);
                    if (objCommlink.IsActive || objCommlink.HomeNode)
                    {
                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                _blnLoading = false;
            }
        }
        private void cboVehicleGearDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearDataProcessing.Enabled)
                return;
            Commlink objCommlink = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles) as Commlink;
            if (objCommlink != null)
            {
                int intCurrentIndex = cboVehicleGearDataProcessing.SelectedIndex;

                _blnLoading = true;
                string strTemp = objCommlink.DataProcessing;
                bool blnRefreshCBOs = true;
                // Find the combo with the same value as this one and change it to the missing value.
                if (cboVehicleGearSleaze.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.DataProcessing = objCommlink.Sleaze;
                    objCommlink.Sleaze = strTemp;
                }
                else if (cboVehicleGearAttack.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.DataProcessing = objCommlink.Attack;
                    objCommlink.Attack = strTemp;
                }
                else if (cboVehicleGearFirewall.SelectedIndex == intCurrentIndex)
                {
                    objCommlink.DataProcessing = objCommlink.Firewall;
                    objCommlink.Firewall = strTemp;
                }
                else
                    blnRefreshCBOs = false;
                if (blnRefreshCBOs)
                {
                    objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);
                    if (objCommlink.IsActive || objCommlink.HomeNode)
                    {
                        ScheduleCharacterUpdate();
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                _blnLoading = false;
            }
        }
        #endregion

        #region Additional Vehicle Tab Control Events
        private void treVehicles_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedVehicle();
            RefreshPasteStatus();
        }

        private void treVehicles_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treVehicles.SelectedNode != null && treVehicles.SelectedNode.Level > 1)
            {
                // Determine if this is a piece of Gear. If not, don't let the user drag the Node.
                Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objGear != null)
                {
                    _objDragButton = e.Button;
                    _blnDraggingGear = true;
                    _intDragLevel = treVehicles.SelectedNode.Level;
                    DoDragDrop(e.Item, DragDropEffects.Move);
                }
            }
        }

        private void treVehicles_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treVehicles_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else
            {
                intNewIndex = treVehicles.Nodes[treVehicles.Nodes.Count - 1].Nodes.Count;
                nodDestination = treVehicles.Nodes[treVehicles.Nodes.Count - 1];
            }

            if (!_blnDraggingGear)
                CommonFunctions.MoveVehicleNode(_objCharacter, intNewIndex, nodDestination, treVehicles);
            else
            {
                if (_objDragButton == MouseButtons.Left)
                    return;
                else
                    CommonFunctions.MoveVehicleGearParent(_objCharacter, nodDestination, treVehicles, cmsVehicleGear);
            }

            // Clear the background color for all Nodes.
            treVehicles.ClearNodeBackground(null);

            _blnDraggingGear = false;

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void treVehicles_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (_objDragButton == MouseButtons.Left)
            {
                if (objNode.Level <= _intDragLevel)
                    objNode.BackColor = SystemColors.ControlDark;
            }
            else
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treVehicles.ClearNodeBackground(objNode);
        }

        private void nudVehicleRating_ValueChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            if (treVehicles.SelectedNode.Level == 2)
            {
                // Locate the currently selected VehicleMod.
                VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objMod != null)
                {
                    objMod.Rating = decimal.ToInt32(nudVehicleRating.Value);
                    treVehicles.SelectedNode.Text = objMod.DisplayName;
                }
                else
                {
                    // Locate the currently selected Vehicle Gear,.
                    Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

                    objGear.Rating = decimal.ToInt32(nudVehicleRating.Value);
                    treVehicles.SelectedNode.Text = objGear.DisplayName;
                }
            }
            else if (treVehicles.SelectedNode.Level > 2)
            {
                // Locate the currently selected Vehicle Sensor Plugin.
                Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objGear != null)
                {
                    objGear.Rating = decimal.ToInt32(nudVehicleRating.Value);
                    treVehicles.SelectedNode.Text = objGear.DisplayName;
                    
                }
                else
                {
                    // See if this is a piece of Cyberware.
                    Cyberware objCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                    if (objCyberware != null)
                    {
                        objCyberware.Rating = decimal.ToInt32(nudVehicleRating.Value);
                        treVehicles.SelectedNode.Text = objCyberware.DisplayName;
                    }
                }
            }
            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void chkVehicleWeaponAccessoryInstalled_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Locate the the Selected Vehicle Weapon Accessory of Modification.
            WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objAccessory != null)
                objAccessory.Installed = chkVehicleWeaponAccessoryInstalled.Checked;
            else
            {
                // If this isn't an Accessory, then it must be a Vehicle Mod.
                VehicleMod objVehicleMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objVehicleMod != null)
                    objVehicleMod.Installed = chkVehicleWeaponAccessoryInstalled.Checked;
                else
                {
                    // If everything else has failed, we're left with a Vehicle Weapon.
                    Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                    objWeapon.Installed = chkVehicleWeaponAccessoryInstalled.Checked;
                }
            }

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void nudVehicleGearQty_ValueChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            
            Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);

            objGear.Quantity = nudVehicleGearQty.Value;
            treVehicles.SelectedNode.Text = objGear.DisplayName;
            ScheduleCharacterUpdate();
            RefreshSelectedVehicle();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void chkVehicleHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            string strGuid = treVehicles.SelectedNode?.Tag.ToString() ?? string.Empty;
            if (!string.IsNullOrEmpty(strGuid))
            {
                Vehicle objVehicle = CommonFunctions.FindByIdWithNameCheck(strGuid, _objCharacter.Vehicles);
                if (objVehicle != null)
                {
                    objVehicle.HomeNode = chkVehicleHomeNode.Checked;
                    RefreshSelectedVehicle();
                    if (chkGearHomeNode.Checked)
                        RefreshSelectedGear();
                    ScheduleCharacterUpdate();

                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }
        #endregion

        #region Additional Spells and Spirits Tab Control Events
        private void treSpells_AfterSelect(object sender, TreeViewEventArgs e)
        {
            _blnSkipRefresh = true;
            if (treSpells.SelectedNode.Level > 0)
            {
                // Locate the selected Spell.
                Spell objSpell = CommonFunctions.FindByIdWithNameCheck(e.Node.Tag.ToString(), _objCharacter.Spells);

                lblSpellDescriptors.Text = objSpell.DisplayDescriptors;
                lblSpellCategory.Text = objSpell.DisplayCategory;
                lblSpellType.Text = objSpell.DisplayType;
                lblSpellRange.Text = objSpell.DisplayRange;
                lblSpellDamage.Text = objSpell.DisplayDamage;
                lblSpellDuration.Text = objSpell.DisplayDuration;
                lblSpellDV.Text = objSpell.DisplayDV;
                string strBook = _objOptions.LanguageBookShort(objSpell.Source);
                string strPage = objSpell.Page;
                lblSpellSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblSpellSource, _objOptions.LanguageBookLong(objSpell.Source) + " " + LanguageManager.GetString("String_Page") + " " + objSpell.Page);

                // Determine the size of the Spellcasting Dice Pool.
                lblSpellDicePool.Text = objSpell.DicePool.ToString();
                tipTooltip.SetToolTip(lblSpellDicePool, objSpell.DicePoolTooltip);

                // Build the DV tooltip.
                tipTooltip.SetToolTip(lblSpellDV, objSpell.DVTooltip);

                // Update the Drain CharacterAttribute Value.
                if (_objCharacter.MAGEnabled && !string.IsNullOrEmpty(_objCharacter.TraditionDrain))
                {
                    CalculateTraditionDrain(_objCharacter.TraditionDrain, Improvement.ImprovementType.DrainResistance, lblDrainAttributes, lblDrainAttributesValue, tipTooltip);
                }
            }
            else
            {
                lblSpellDescriptors.Text = string.Empty;
                lblSpellCategory.Text = string.Empty;
                lblSpellType.Text = string.Empty;
                lblSpellRange.Text = string.Empty;
                lblSpellDamage.Text = string.Empty;
                lblSpellDuration.Text = string.Empty;
                lblSpellDV.Text = string.Empty;
                lblSpellSource.Text = string.Empty;
                lblSpellDicePool.Text = string.Empty;
                tipTooltip.SetToolTip(lblSpellSource, null);
                tipTooltip.SetToolTip(lblSpellDV, null);
            }
            _blnSkipRefresh = false;
        }

        private void treFoci_AfterCheck(object sender, TreeViewEventArgs e)
        {
            if (!e.Node.Checked)
            {
                Focus objFocus = _objCharacter.Foci.FirstOrDefault(x => x.GearId == e.Node.Tag.ToString());

                // Mark the Gear as not Bonded and remove any Improvements.
                Gear objGear = objFocus != null ? CommonFunctions.DeepFindById(objFocus.GearId, _objCharacter.Gear) : null;

                if (objGear != null)
                {
                    objGear.Bonded = false;
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                    _objCharacter.Foci.Remove(objFocus);
                }
                else
                {
                    // This is a Stacked Focus.
                    StackedFocus objStack = _objCharacter.StackedFoci.FirstOrDefault(x => x.InternalId == e.Node.Tag.ToString());

                    if (objStack != null)
                    {
                        objStack.Bonded = false;
                        foreach (Gear objFocusGear in objStack.Gear)
                        {
                            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.StackedFocus, objStack.InternalId);
                        }
                    }
                }
            }

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void treFoci_BeforeCheck(object sender, TreeViewCancelEventArgs e)
        {
            // Don't bother to do anything since a node is being unchecked.
            if (e.Node.Checked)
                return;

            // Locate the Focus that is being touched.
            Gear objSelectedFocus = CommonFunctions.DeepFindById(e.Node.Tag.ToString(), _objCharacter.Gear);

            // Set the Focus count to 1 and get its current Rating (Force). This number isn't used in the following loops because it isn't yet checked or unchecked.
            int intFociCount = 1;
            int intFociTotal = 0;

            if (objSelectedFocus != null)
                intFociTotal = objSelectedFocus.Rating;
            else
            {
                // This is a Stacked Focus.
                StackedFocus objStack = new StackedFocus(_objCharacter);
                foreach (StackedFocus objCharacterFocus in _objCharacter.StackedFoci)
                {
                    if (e.Node.Tag.ToString() == objCharacterFocus.InternalId)
                    {
                        objStack = objCharacterFocus;
                        break;
                    }
                }
                intFociTotal = objStack.TotalForce;
            }

            // Run through the list of items. Count the number of Foci the character would have bonded including this one, plus the total Force of all checked Foci.
            foreach (TreeNode objNode in treFoci.Nodes)
            {
                if (objNode.Checked)
                {
                    intFociCount++;
                    foreach (Gear objCharacterFocus in _objCharacter.Gear)
                    {
                        if (objNode.Tag.ToString() == objCharacterFocus.InternalId)
                        {
                            if (objCharacterFocus.Bonded)
                            {
                                intFociTotal += objCharacterFocus.Rating;
                                break;
                            }
                        }
                    }

                    foreach (StackedFocus objStack in _objCharacter.StackedFoci)
                    {
                        if (objNode.Tag.ToString() == objStack.InternalId)
                        {
                            if (objStack.Bonded)
                            {
                                intFociTotal += objStack.TotalForce;
                                break;
                            }
                        }
                    }
                }
            }

            if (!_objCharacter.IgnoreRules)
            {
                if (intFociTotal > _objCharacter.MAG.TotalValue * 5 ||
                    (_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept && _objCharacter.InitiateGrade + 1 > _objCharacter.MAGAdept.TotalValue))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_FocusMaximumForce"), LanguageManager.GetString("MessageTitle_FocusMaximum"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    e.Cancel = true;
                    return;
                }

                if (intFociCount > _objCharacter.MAG.TotalValue ||
                    (_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept && intFociCount > _objCharacter.MAGAdept.TotalValue))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_FocusMaximumNumber"), LanguageManager.GetString("MessageTitle_FocusMaximum"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    e.Cancel = true;
                    return;
                }
            }

            if (objSelectedFocus != null)
            {
                Focus objFocus = new Focus(_objCharacter);
                objFocus.Name = objSelectedFocus.Name;
                objFocus.DisplayName = objSelectedFocus.DisplayNameShort;
                objFocus.Rating = objSelectedFocus.Rating;
                objFocus.GearId = e.Node.Tag.ToString();

                if (objSelectedFocus.Equipped)
                {
                    if (objSelectedFocus.Bonus != null || (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null))
                    {
                        if (!string.IsNullOrEmpty(objSelectedFocus.Extra))
                            ImprovementManager.ForcedValue = objSelectedFocus.Extra;
                        if (objSelectedFocus.Bonus != null)
                        {
                            if (!ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objSelectedFocus.InternalId, objSelectedFocus.Bonus, false, objSelectedFocus.Rating, objSelectedFocus.DisplayNameShort))
                            {
                                // Clear created improvements
                                CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objSelectedFocus, false);
                                CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objSelectedFocus, true);
                                e.Cancel = true;
                                return;
                            }
                            objSelectedFocus.Extra = ImprovementManager.SelectedValue;
                        }
                        if (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null)
                        {
                            if (!ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objSelectedFocus.InternalId, objSelectedFocus.WirelessBonus, false, objSelectedFocus.Rating, objSelectedFocus.DisplayNameShort))
                            {
                                // Clear created improvements
                                CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objSelectedFocus, false);
                                CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objSelectedFocus, true);
                                e.Cancel = true;
                                return;
                            }
                        }
                    }
                }
                _objCharacter.Foci.Add(objFocus);
                objSelectedFocus.Bonded = true;
                CommonFunctions.PopulateFocusList(_objCharacter, treFoci);
            }
            else
            {
                // This is a Stacked Focus.
                StackedFocus objStack = _objCharacter.StackedFoci.FirstOrDefault(x => x.InternalId == e.Node.Tag.ToString());
                if (objStack != null)
                {
                    Gear objStackGear = CommonFunctions.DeepFindById(objStack.GearId, _objCharacter.Gear);
                    if (objStackGear.Equipped)
                    {
                        foreach (Gear objGear in objStack.Gear)
                        {
                            if (objGear.Bonus != null || (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null))
                            {
                                if (!string.IsNullOrEmpty(objGear.Extra))
                                    ImprovementManager.ForcedValue = objGear.Extra;
                                if (objGear.Bonus != null)
                                {
                                    if (!ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.StackedFocus, objStack.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort))
                                    {
                                        // Clear created improvements
                                        CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objStackGear, false);
                                        CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objStackGear, true);
                                        e.Cancel = true;
                                        return;
                                    }
                                    objGear.Extra = ImprovementManager.SelectedValue;
                                }
                                if (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null)
                                {
                                    if (!ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.StackedFocus, objStack.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort))
                                    {
                                        // Clear created improvements
                                        CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objStackGear, false);
                                        CommonFunctions.ChangeGearEquippedStatus(_objCharacter, objStackGear, true);
                                        e.Cancel = true;
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    objStack.Bonded = true;
                }
            }
        }

        private void nudArmorRating_ValueChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Locate the selected ArmorMod.
            ArmorMod objMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            Gear objGear = null;
            if (objMod == null)
            // Locate the selected Gear.
                objGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);

            if (objGear != null)
            {

                objGear.Rating = decimal.ToInt32(nudArmorRating.Value);
                treArmor.SelectedNode.Text = objGear.DisplayName;

                // See if a Bonus node exists.
                if ((objGear.Bonus != null && objGear.Bonus.InnerXml.Contains("Rating")) || (objGear.WirelessOn && objGear.WirelessBonus != null && objGear.WirelessBonus.InnerXml.Contains("Rating")))
                {
                    // If the Bonus contains "Rating", remove the existing Improvements and create new ones.
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId);
                    if (objGear.Bonus != null)
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort);
                    if (objGear.WirelessOn && objGear.WirelessBonus != null)
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort);
                }
            }
            else if (objMod != null)
            {
                objMod.Rating = decimal.ToInt32(nudArmorRating.Value);
                treArmor.SelectedNode.Text = objMod.DisplayName;

                // See if a Bonus node exists.
                if ((objMod.Bonus != null && objMod.Bonus.InnerXml.Contains("Rating")) || (objMod.WirelessOn && objMod.WirelessBonus != null && objMod.WirelessBonus.InnerXml.Contains("Rating")))
                {
                    // If the Bonus contains "Rating", remove the existing Improvements and create new ones.
                    ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                    if (objMod.Bonus != null)
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort);
                    if (objMod.WirelessOn && objMod.WirelessBonus != null)
                        ImprovementManager.CreateImprovements(_objCharacter, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.WirelessBonus, false, objMod.Rating, objMod.DisplayNameShort);
                }
            }

            else
            {
                Armor objArmor = CommonFunctions.FindByIdWithNameCheck(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
                objArmor.Rating = decimal.ToInt32(nudArmorRating.Value);
                treArmor.SelectedNode.Text = objArmor.DisplayName;
            }

            RefreshSelectedArmor();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cboTradition_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboTradition.IsInitalized(_blnLoading))
                return;

            XmlDocument objXmlDocument = XmlManager.Load("traditions.xml");

            XmlNode objXmlTradition = objXmlDocument.SelectSingleNode("/chummer/traditions/tradition[name = \"" + cboTradition.SelectedValue + "\"]");

            if (objXmlTradition == null)
            {
                _objCharacter.MagicTradition = cboTradition.SelectedValue.ToString();
                _objCharacter.TraditionDrain = string.Empty;
                cboDrain.Visible = false;
                lblTraditionName.Visible = false;
                txtTraditionName.Visible = false;
                lblSpiritCombat.Visible = false;
                lblSpiritDetection.Visible = false;
                lblSpiritHealth.Visible = false;
                lblSpiritIllusion.Visible = false;
                lblSpiritManipulation.Visible = false;
                lblTraditionSource.Visible = false;
                lblTraditionSourceLabel.Visible = false;
                cboSpiritCombat.Visible = false;
                cboSpiritDetection.Visible = false;
                cboSpiritHealth.Visible = false;
                cboSpiritIllusion.Visible = false;
                cboSpiritManipulation.Visible = false;
                lblDrainAttributes.Visible = false;
                lblDrainAttributesValue.Visible = false;
            }
            else if (objXmlTradition["name"].InnerText == "Custom")
            {
                cboDrain.Visible = true;
                lblTraditionName.Visible = true;
                txtTraditionName.Visible = true;
                lblSpiritCombat.Visible = true;
                lblSpiritDetection.Visible = true;
                lblSpiritHealth.Visible = true;
                lblSpiritIllusion.Visible = true;
                lblSpiritManipulation.Visible = true;
                lblTraditionSource.Visible = false;
                lblTraditionSourceLabel.Visible = false;
                cboSpiritCombat.Visible = true;
                cboSpiritDetection.Visible = true;
                cboSpiritHealth.Visible = true;
                cboSpiritIllusion.Visible = true;
                cboSpiritManipulation.Visible = true;
                lblDrainAttributes.Visible = true;
                lblDrainAttributesValue.Visible = true;

                if (string.IsNullOrEmpty(txtTraditionName.Text))
                    _objCharacter.MagicTradition = cboTradition.SelectedValue.ToString();
                else
                    _objCharacter.MagicTradition = txtTraditionName.Text;

                if (cboDrain.SelectedIndex != 0)
                    lblDrainAttributes.Text = cboDrain.Text;
            }
            else
            {
                cboDrain.Visible = false;
                lblTraditionName.Visible = false;
                txtTraditionName.Visible = false;
                lblSpiritCombat.Visible = false;
                lblSpiritDetection.Visible = false;
                lblSpiritHealth.Visible = false;
                lblSpiritIllusion.Visible = false;
                lblSpiritManipulation.Visible = false;
                lblTraditionSource.Visible = true;
                lblTraditionSourceLabel.Visible = true;
                cboSpiritCombat.Visible = false;
                cboSpiritDetection.Visible = false;
                cboSpiritHealth.Visible = false;
                cboSpiritIllusion.Visible = false;
                cboSpiritManipulation.Visible = false;
                lblDrainAttributes.Visible = true;
                lblDrainAttributesValue.Visible = true;

                lblTraditionSource.Text = objXmlTradition["source"].InnerText + " " + objXmlTradition["page"].InnerText;
                _objCharacter.MagicTradition = cboTradition.SelectedValue.ToString();
                _objCharacter.TraditionDrain = objXmlTradition["drain"].InnerText;

                CalculateTraditionDrain(_objCharacter.TraditionDrain, Improvement.ImprovementType.DrainResistance, lblDrainAttributes, lblDrainAttributesValue, tipTooltip);
                foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                    objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            }
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cboDrain_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboDrain.IsInitalized(_blnLoading))
                return;

            _objCharacter.TraditionDrain = cboDrain.SelectedValue.ToString();

            CalculateTraditionDrain(_objCharacter.TraditionDrain, Improvement.ImprovementType.DrainResistance, lblDrainAttributes, lblDrainAttributesValue, tipTooltip);

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtTraditionName_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.TraditionName = txtTraditionName.Text;
            _blnIsDirty = true;
            UpdateWindowTitle(false);
        }

        private void cboSpiritCombat_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritCombat.IsInitalized(_blnLoading))
                return;
            if (cboSpiritCombat.SelectedValue == null)
                return;

            _objCharacter.SpiritCombat = cboSpiritCombat.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle(false);
        }

        private void cboSpiritDetection_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritDetection.IsInitalized(_blnLoading))
                return;
            if (cboSpiritDetection.SelectedValue == null)
                return;

            _objCharacter.SpiritDetection = cboSpiritDetection.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle(false);
        }

        private void cboSpiritHealth_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritHealth.IsInitalized(_blnLoading))
                return;
            if (cboSpiritHealth.SelectedValue == null)
                return;

            _objCharacter.SpiritHealth = cboSpiritHealth.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle(false);
        }

        private void cboSpiritIllusion_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritIllusion.IsInitalized(_blnLoading))
                return;
            if (cboSpiritIllusion.SelectedValue == null)
                return;
            _objCharacter.SpiritIllusion = cboSpiritIllusion.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle(false);
        }

        private void cboSpiritManipulation_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritManipulation.IsInitalized(_blnLoading))
                return;
            if (cboSpiritManipulation.SelectedValue == null)
                return;

            _objCharacter.SpiritManipulation = cboSpiritManipulation.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle(false);
        }
        #endregion

        #region Additional Sprites and Complex Forms Tab Control Events
        private void treComplexForms_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (treComplexForms.SelectedNode != null && treComplexForms.SelectedNode.Level == 1)
            {
                // Locate the Program that is selected in the tree.
                ComplexForm objProgram = CommonFunctions.FindByIdWithNameCheck(treComplexForms.SelectedNode.Tag.ToString(), _objCharacter.ComplexForms);

                if (objProgram != null)
                {
                    string strDuration = objProgram.Duration;
                    string strTarget = objProgram.Target;
                    string strFV = objProgram.FV;

                    lblDuration.Text = strDuration;
                    lblTarget.Text = strTarget;
                    lblFV.Text = strFV;

                    string strBook = _objOptions.LanguageBookShort(objProgram.Source);
                    string strPage = objProgram.Page;
                    lblComplexFormSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblComplexFormSource, _objOptions.LanguageBookLong(objProgram.Source) + " " + LanguageManager.GetString("String_Page") + " " + objProgram.Page);
                }
            }
        }

        private void nudComplexFormRating_ValueChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treComplexForms.SelectedNode == null)
                return;

            if (treComplexForms.SelectedNode.Level == 1)
            {
                // Locate the Program that is selected in the tree.
                ComplexForm objProgram = CommonFunctions.FindByIdWithNameCheck(treComplexForms.SelectedNode.Tag.ToString(), _objCharacter.ComplexForms);

                if (objProgram != null)
                {
                    treComplexForms.SelectedNode.Text = objProgram.DisplayName;
                    ScheduleCharacterUpdate();

                    _blnIsDirty = true;
                    UpdateWindowTitle();
                }
            }
        }

        private void treComplexForms_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteComplexForm_Click(sender, e);
            }
        }
        #endregion

        #region Additional AI Advanced Programs Tab Control Events
        private void treAIPrograms_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (treAIPrograms.SelectedNode != null && treAIPrograms.SelectedNode.Level == 1)
            {
                // Locate the Program that is selected in the tree.
                AIProgram objProgram = CommonFunctions.FindByIdWithNameCheck(treAIPrograms.SelectedNode.Tag.ToString(), _objCharacter.AIPrograms);

                if (objProgram != null)
                {
                    string strRequires = objProgram.DisplayRequiresProgram;

                    lblAIProgramsRequires.Text = strRequires;

                    string strBook = _objOptions.LanguageBookShort(objProgram.Source);
                    string strPage = objProgram.Page;
                    lblAIProgramsSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblAIProgramsSource, _objOptions.LanguageBookLong(objProgram.Source) + " " + LanguageManager.GetString("String_Page") + " " + objProgram.Page);
                }
            }
        }

        private void treAIPrograms_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteAIProgram_Click(sender, e);
            }
        }
        #endregion

        #region Additional Initiation Tab Control Events
        private void chkInitiationGroup_CheckedChanged(object sender, EventArgs e)
        {
            ScheduleCharacterUpdate();
        }

        private void chkInitiationOrdeal_CheckedChanged(object sender, EventArgs e)
        {
            ScheduleCharacterUpdate();
        }

        private void treMetamagic_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // Locate the selected Metamagic.
            Metamagic objMetamagic = CommonFunctions.FindByIdWithNameCheck(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.Metamagics);

            if (objMetamagic != null)
            {
                string strBook = _objOptions.LanguageBookShort(objMetamagic.Source);
                string strPage = objMetamagic.Page;
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, _objOptions.BookFromCode(objMetamagic.Source) + " " + LanguageManager.GetString("String_Page") + " " + objMetamagic.Page);
                return;
            }

            // Locate the selected Art.
            Art objArt = CommonFunctions.FindByIdWithNameCheck(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.Arts);

            if (objArt != null)
            {
                string strBook = _objOptions.LanguageBookShort(objArt.Source);
                string strPage = objArt.Page;
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, _objOptions.BookFromCode(objArt.Source) + " " + LanguageManager.GetString("String_Page") + " " + objArt.Page);
                return;
            }

            // Locate the selected Spell.
            Spell objSpell = CommonFunctions.FindByIdWithNameCheck(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.Spells);

            if (objSpell != null)
            {
                string strBook = _objOptions.LanguageBookShort(objSpell.Source);
                string strPage = objSpell.Page;
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, _objOptions.BookFromCode(objSpell.Source) + " " + LanguageManager.GetString("String_Page") + " " + objSpell.Page);
                return;
            }

            // Locate the selected Enhancement.
            Enhancement objEnhancement = CommonFunctions.FindEnhancement(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter);

            if (objEnhancement != null)
            {
                string strBook = _objOptions.LanguageBookShort(objEnhancement.Source);
                string strPage = objEnhancement.Page;
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, _objOptions.BookFromCode(objEnhancement.Source) + " " + LanguageManager.GetString("String_Page") + " " + objEnhancement.Page);
                return;
            }

            lblMetamagicSource.Text = string.Empty;
            tipTooltip.SetToolTip(lblMetamagicSource, string.Empty);
        }
        #endregion

        #region Additional Critter Powers Tab Control Events
        private void treCritterPowers_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // Look for the selected Critter Power.
            lblCritterPowerName.Text = string.Empty;
            lblCritterPowerCategory.Text = string.Empty;
            lblCritterPowerType.Text = string.Empty;
            lblCritterPowerAction.Text = string.Empty;
            lblCritterPowerRange.Text = string.Empty;
            lblCritterPowerDuration.Text = string.Empty;
            lblCritterPowerSource.Text = string.Empty;
            tipTooltip.SetToolTip(lblCritterPowerSource, null);
            lblCritterPowerPointCost.Visible = false;
            lblCritterPowerPointCostLabel.Visible = false;
            if (treCritterPowers.SelectedNode != null && treCritterPowers.SelectedNode.Level > 0)
            {
                CritterPower objPower = CommonFunctions.FindByIdWithNameCheck(treCritterPowers.SelectedNode.Tag.ToString(), _objCharacter.CritterPowers);

                if (objPower != null)
                {
                    lblCritterPowerName.Text = objPower.DisplayName;
                    lblCritterPowerCategory.Text = objPower.DisplayCategory;
                    lblCritterPowerType.Text = objPower.DisplayType;
                    lblCritterPowerAction.Text = objPower.DisplayAction;
                    lblCritterPowerRange.Text = objPower.DisplayRange;
                    lblCritterPowerDuration.Text = objPower.DisplayDuration;
                    chkCritterPowerCount.Checked = objPower.CountTowardsLimit;
                    string strBook = _objOptions.LanguageBookShort(objPower.Source);
                    string strPage = objPower.Page;
                    lblCritterPowerSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblCritterPowerSource, _objOptions.LanguageBookLong(objPower.Source) + " " + LanguageManager.GetString("String_Page") + " " + objPower.Page);
                    if (objPower.PowerPoints > 0)
                    {
                        lblCritterPowerPointCost.Text = objPower.PowerPoints.ToString(GlobalOptions.CultureInfo);
                        lblCritterPowerPointCost.Visible = true;
                        lblCritterPowerPointCostLabel.Visible = true;
                    }
                }
            }
        }

        private void chkCritterPowerCount_CheckedChanged(object sender, EventArgs e)
        {
            if (treCritterPowers.SelectedNode == null || treCritterPowers.SelectedNode.Level == 0)
                return;

            // Locate the selected Critter Power.
            CritterPower objPower = CommonFunctions.FindByIdWithNameCheck(treCritterPowers.SelectedNode.Tag.ToString(), _objCharacter.CritterPowers);

            objPower.CountTowardsLimit = chkCritterPowerCount.Checked;

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
        #endregion

        #region Character Info Tab Event
        private void txtSex_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Sex = txtSex.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtAge_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Age = txtAge.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtEyes_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Eyes = txtEyes.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtHair_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Hair = txtHair.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtHeight_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Height = txtHeight.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtWeight_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Weight = txtWeight.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtSkin_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Skin = txtSkin.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtDescription_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Description = txtDescription.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtBackground_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Background = txtBackground.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtConcept_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Concept = txtConcept.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtNotes_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Notes = txtNotes.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtPlayerName_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.PlayerName = txtPlayerName.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtAlias_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Alias = txtAlias.Text;
            _blnIsDirty = true;
            UpdateWindowTitle(false);
        }
        #endregion

        #region Tree KeyDown Events
        private void treQualities_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteQuality_Click(sender, e);
            }
        }

        private void treSpells_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteSpell_Click(sender, e);
            }
        }

        private void treCyberware_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteCyberware_Click(sender, e);
            }
        }

        private void treLifestyles_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteLifestyle_Click(sender, e);
            }
        }

        private void treArmor_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteArmor_Click(sender, e);
            }
        }

        private void treWeapons_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteWeapon_Click(sender, e);
            }
        }

        private void treGear_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteGear_Click(sender, e);
            }
        }

        private void treVehicles_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteVehicle_Click(sender, e);
            }
        }

        private void treMartialArts_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteMartialArt_Click(sender, e);
            }
        }

        private void treCritterPowers_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteCritterPower_Click(sender, e);
            }
        }

        private void treMetamagic_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteMetamagic_Click(sender, e);
            }
        }
        #endregion

        #region Other Control Events
        private void nudNuyen_ValueChanged(object sender, EventArgs e)
        {
            if (_blnLoading) return;

            // Calculate the amount of Nuyen for the selected BP cost.
            _objCharacter.NuyenBP = nudNuyen.Value;
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void txtCharacterName_TextChanged(object sender, EventArgs e)
        {
            _objCharacter.Name = txtCharacterName.Text;
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tabCharacterTabs_SelectedIndexChanged(object sender, EventArgs e)
        {
            RefreshPasteStatus();
        }

        private void tabStreetGearTabs_SelectedIndexChanged(object sender, EventArgs e)
        {
            RefreshPasteStatus();
        }
        #endregion

        #region Clear Tab Contents
        /// <summary>
        /// Clear the contents of the Spells and Spirits Tab.
        /// </summary>
        private void ClearSpellTab()
        {
            CommonFunctions.ClearSpellTab(_objCharacter, treSpells);

            // Remove the Spirits.
            panSpirits.Controls.Clear();

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        /// <summary>
        /// Clear the contents of the Adept Powers Tab.
        /// </summary>
        private void ClearAdeptTab()
        {
            CommonFunctions.ClearAdeptTab(_objCharacter);

            // Remove all of the Adept Powers from the panel.
            // TODO: Remove adept powers.

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        /// <summary>
        /// Clear the contents of the Sprites and Complex Forms Tab.
        /// </summary>
        private void ClearTechnomancerTab()
        {
            CommonFunctions.ClearTechnomancerTab(_objCharacter, treComplexForms);

            // Remove the Sprites.
            panSprites.Controls.Clear();

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        /// <summary>
        /// Clear the contents of the Advanced Programs Tab.
        /// </summary>
        private void ClearAdvancedProgramsTab()
        {
            CommonFunctions.ClearAdvancedProgramsTab(_objCharacter, treAIPrograms);

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        /// <summary>
        /// Clear the contents of the Cyberware Tab.
        /// </summary>
        private void ClearCyberwareTab()
        {
            CommonFunctions.ClearCyberwareTab(_objCharacter, treCyberware, treWeapons, treVehicles);

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        /// <summary>
        /// Clear the conents of the Critter Powers Tab.
        /// </summary>
        private void ClearCritterTab()
        {
            CommonFunctions.ClearCritterTab(_objCharacter, treCritterPowers);

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }

        /// <summary>
        /// Clear the content of the Initiation Tab.
        /// </summary>
        private void ClearInitiationTab()
        {
            CommonFunctions.ClearInitiations(_objCharacter);
            UpdateInitiationGradeTree();

            _blnIsDirty = true;
            ScheduleCharacterUpdate();
            UpdateWindowTitle();
        }
        #endregion

        #region Sourcebook Label Events
        private void lblWeaponSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblWeaponSource.Text, _objCharacter);
        }

        private void lblMetatypeSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblMetatypeSource.Text, _objCharacter);
        }

        private void lblQualitySource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblQualitySource.Text, _objCharacter);
        }

        private void lblMartialArtSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblMartialArtSource.Text, _objCharacter);
        }

        private void lblSpellSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblSpellSource.Text, _objCharacter);
        }

        private void lblTraditionSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblTraditionSource.Text, _objCharacter);
        }

        private void lblComplexFormSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblComplexFormSource.Text, _objCharacter);
        }

        private void lblAdvancedProgramsSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblAIProgramsSource.Text, _objCharacter);
        }

        private void lblCritterPowerSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblCritterPowerSource.Text, _objCharacter);
        }

        private void lblMetamagicSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblMetamagicSource.Text, _objCharacter);
        }

        private void lblCyberwareSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblCyberwareSource.Text, _objCharacter);
        }

        private void lblLifestyleSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblLifestyleSource.Text, _objCharacter);
        }

        private void lblArmorSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblArmorSource.Text, _objCharacter);
        }

        private void lblGearSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblGearSource.Text, _objCharacter);
        }

        private void lblVehicleSource_Click(object sender, EventArgs e)
        {
            CommonFunctions.OpenPDF(lblVehicleSource.Text, _objCharacter);
        }

        private void txtNotes_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.A)
            {
                e.SuppressKeyPress = true;
                if (sender != null)
                    ((TextBox)sender).SelectAll();
            }
        }
        #endregion

        #region Custom Methods
        /// <summary>
        /// Let the application know that a Metatype has been selected.
        /// </summary>
        public void MetatypeSelected()
        {
            // Set the Minimum and Maximum values for each CharacterAttribute based on the selected MetaType.
            // Also update the Maximum and Augmented Maximum values displayed.
            // Metatypes cost Karma.
            if (_objOptions.MetatypeCostsKarma)
            {
                lblKarmaMetatypeBP.Text = (_objCharacter.MetatypeBP * _objOptions.MetatypeCostsKarmaMultiplier).ToString() + " " +
                                          LanguageManager.GetString("String_Karma");
            }
            else
            {
                lblKarmaMetatypeBP.Text = "0 " + LanguageManager.GetString("String_Karma");
            }

            string strToolTip = _objCharacter.Metatype;
            if (!string.IsNullOrEmpty(_objCharacter.Metavariant))
            {
                strToolTip += " (" + _objCharacter.Metavariant + ")";
            }
            strToolTip += " (" + _objCharacter.MetatypeBP.ToString() + ")";
            tipTooltip.SetToolTip(lblKarmaMetatypeBP, strToolTip);

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        /// <summary>
        /// Calculate the BP used by Primary Attributes.
        /// </summary>
        private int CalculateAttributeBP(List<CharacterAttrib> attribs, List<CharacterAttrib> extraAttribs = null)
        {
            int intBP = 0;
            // Primary and Special Attributes are calculated separately since you can only spend a maximum of 1/2 your BP allotment on Primary Attributes.
            // Special Attributes are not subject to the 1/2 of max BP rule.
            foreach (CharacterAttrib att in attribs)
            {
                intBP += att.TotalKarmaCost();
            }
            if (extraAttribs != null)
            {
                foreach (CharacterAttrib att in extraAttribs)
                {
                    intBP += att.TotalKarmaCost();
                }
            }
            return intBP;
        }

        private int CalculateAttributePriorityPoints(List<CharacterAttrib> attribs, List<CharacterAttrib> extraAttribs = null)
        {
            int intAtt = 0;
            if (_objCharacter.BuildMethod == CharacterBuildMethod.Priority ||
                _objCharacter.BuildMethod == CharacterBuildMethod.SumtoTen)
            {
                // Get the total of "free points" spent
                foreach (CharacterAttrib att in attribs)
                {
                    intAtt += att.SpentPriorityPoints;
                }
                if (extraAttribs != null)
                {
                    // Get the total of "free points" spent
                    foreach (CharacterAttrib att in extraAttribs)
                    {
                        intAtt += att.SpentPriorityPoints;
                    }
                }
            }
            return intAtt;
        }

        private string BuildAttributes(List<CharacterAttrib> attribs, List<CharacterAttrib> extraAttribs = null, bool special = false)
        {
            int bp = CalculateAttributeBP(attribs, extraAttribs);
            string s = $"{bp} {LanguageManager.GetString("String_Karma")}";
            int att = CalculateAttributePriorityPoints(attribs, extraAttribs);
            int total = special ? _objCharacter.TotalSpecial : _objCharacter.TotalAttributes;
            if ((_objCharacter.BuildMethod == CharacterBuildMethod.Priority) ||
                (_objCharacter.BuildMethod == CharacterBuildMethod.SumtoTen))
            {
                if (bp > 0)
                {
                    s = string.Format(LanguageManager.GetString("String_OverPriorityPoints"),
                        (total - att).ToString(), total.ToString(), bp.ToString());
                }
                else
                {
                    s = string.Format("{0} " + LanguageManager.GetString("String_Of") + " {1}",
                        (total - att).ToString(), total.ToString());
                }
            }
            return s;
        }

        /// <summary>
        /// Calculate the number of Build Points the character has remaining.
        /// </summary>
        private int CalculateBP(bool blnDoUIUpdate = true)
        {
            int intKarmaPointsRemain =_objCharacter.BuildKarma;
            //int intPointsUsed = 0; // used as a running total for each section
            int intFreestyleBPMin = 0;
            int intFreestyleBP = 0;
            string strPoints = blnDoUIUpdate ? LanguageManager.GetString("String_Karma") : string.Empty;

            // ------------------------------------------------------------------------------
            // Metatype/Metavariant only cost points when working with BP (or when the Metatype Costs Karma option is enabled when working with Karma).
            if ((_objCharacter.BuildMethod == CharacterBuildMethod.Karma || _objCharacter.BuildMethod == CharacterBuildMethod.LifeModule) && _objOptions.MetatypeCostsKarma)
            {
                // Subtract the BP used for Metatype.
                intKarmaPointsRemain -= (_objCharacter.MetatypeBP * _objOptions.MetatypeCostsKarmaMultiplier);
            }

            if (_objCharacter.BuildMethod == CharacterBuildMethod.Priority || _objCharacter.BuildMethod == CharacterBuildMethod.SumtoTen)
            {
                intKarmaPointsRemain -= (_objCharacter.MetatypeBP);
            }

            // ------------------------------------------------------------------------------
            // Calculate the points used by Contacts.
            int intPointsInContacts = 0;

            int intContactPoints = _objCharacter.ContactPoints;
            int intContactPointsLeft = intContactPoints;
            int intGroupContacts = 0;
            int intHighPlacesFriends = 0;
            foreach (ContactControl objContactControl in panContacts.Controls)
            {
                //Don't care about free contacts
                if (objContactControl.ContactObject.Free) continue;

                if (objContactControl.ContactObject.Connection >= 8 && _objCharacter.FriendsInHighPlaces)
                {
                    intHighPlacesFriends += (objContactControl.ContactObject.Connection +
                                            objContactControl.ContactObject.Loyalty);
                }
                else if (objContactControl.IsGroup == false)
                {
                    int over = intContactPointsLeft - objContactControl.ContactObject.ContactPoints;

                    //Prefers to eat 0, we went over
                    if (over < 0)
                    {
                        //over is negative so to add we substract
                        //instead of +abs(over)
                        intPointsInContacts -= over;
                        intContactPointsLeft = 0; //we went over so we know none are left
                    }
                    else
                    {
                        //otherwise just set;
                        intContactPointsLeft = over;
                    }
                }
                else
                {
                    //save this for later, as a group contract is counted as a positive quality
                    if (objContactControl.ContactObject.MadeMan)
                    {
                        //Made man is free, contact (No i don't see any reason for not to have con4)
                        //per RAW. We keep it that way, can always create a house rule for it later

                    }
                    else
                    {
                        intGroupContacts += objContactControl.ContactObject.ContactPoints;
                    }
                }
            }

            _objCharacter.ContactPointsUsed = intContactPointsLeft;

            if (intPointsInContacts > 0 || (_objCharacter.CHA.Value * 4 < intHighPlacesFriends))
            {
                intPointsInContacts += Math.Max(0, intHighPlacesFriends - (_objCharacter.CHA.Value * 4));
            }

            intKarmaPointsRemain -= intPointsInContacts;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Enemies. These are added to the BP since they are technically
            // a Negative Quality.
            int intEnemyPoints = 0;
            foreach (ContactControl objContactControl in panEnemies.Controls)
            {
                if (!objContactControl.Free)
                {
                    // The Enemy's Karma cost = their (Connection + Loyalty Rating) x Karma multiplier.
                    intEnemyPoints -= (objContactControl.ConnectionRating + objContactControl.LoyaltyRating) * _objOptions.KarmaEnemy;
                }
            }

                // dont add in enemy costs here, carry it over later under qualities

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Qualities.
            int intQualityPointsUsed = 0;
            int intPositiveQualities = intGroupContacts; // group contacts are positive qualities
            int intNegativeQualities = intEnemyPoints;   // enemies are negative qualities
            int intLifeModuleQualities = 0;

            intPositiveQualities += _objCharacter.Qualities.Where(q => q.Type == QualityType.Positive && q.ContributeToBP && q.ContributeToLimit).Sum(q => q.BP * _objOptions.KarmaQuality);
            int unlimitedPositive = _objCharacter.Qualities.Where(q => q.Type == QualityType.Positive && q.ContributeToBP && !q.ContributeToLimit).Sum(q => q.BP * _objOptions.KarmaQuality);
            intNegativeQualities += _objCharacter.Qualities.Where(q => q.Type == QualityType.Negative && q.ContributeToBP && q.ContributeToLimit).Sum(q => q.BP * _objOptions.KarmaQuality);
            int unlimitedNegative = _objCharacter.Qualities.Where(q => q.Type == QualityType.Negative && q.ContributeToBP && !q.ContributeToLimit).Sum(q => q.BP * _objOptions.KarmaQuality);
            intLifeModuleQualities += _objCharacter.Qualities.Where(q => q.Type == QualityType.LifeModule && q.ContributeToBP && q.ContributeToLimit).Sum(q => q.BP * _objOptions.KarmaQuality);

            // Deduct the amounts for free Qualities.
            int intPositiveFree = ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreePositiveQualities) * _objOptions.KarmaQuality;
            int intNegativeFree = ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeNegativeQualities) * _objOptions.KarmaQuality;

            intNegativeQualities -= intNegativeFree;
            intPositiveQualities -= intPositiveFree;

            // If the character is only allowed to gain 25 BP from Negative Qualities but allowed to take as many as they'd like, limit their refunded points.
            if (_objOptions.ExceedNegativeQualitiesLimit)
            {
                int intNegativeQualityLimit = -_objCharacter.GameplayOptionQualityLimit;
                if (intNegativeQualities < intNegativeQualityLimit)
                {
                    intNegativeQualities = intNegativeQualityLimit;
                }
            }

            // If the character is allowed to take as many Positive Qualities as they'd like but all costs in excess are doubled, add the excess to their point cost.
            if (_objOptions.ExceedPositiveQualitiesCostDoubled)
            {
                int intPositiveQualityExcess = intPositiveQualities - _objCharacter.GameplayOptionQualityLimit;
                if (intPositiveQualityExcess > 0)
                {
                    intPositiveQualities += intPositiveQualityExcess;
                }
            }

            intQualityPointsUsed = intLifeModuleQualities + intNegativeQualities + intPositiveQualities + unlimitedPositive + unlimitedNegative;

            intKarmaPointsRemain -= intQualityPointsUsed;
            intFreestyleBP += intQualityPointsUsed;

            // ------------------------------------------------------------------------------
            // Update Primary Attributes and Special Attributes values.
            int intAttributePointsUsed = CalculateAttributeBP(_objCharacter.AttributeSection.AttributeList);
			intAttributePointsUsed += CalculateAttributeBP(_objCharacter.AttributeSection.SpecialAttributeList);
			intKarmaPointsRemain -= intAttributePointsUsed;

			// ------------------------------------------------------------------------------
			// Include the BP used by Martial Arts.
			int intMartialArtsPoints = 0;
            foreach (MartialArt objMartialArt in _objCharacter.MartialArts)
            {
                if (!objMartialArt.IsQuality)
                {
                    intMartialArtsPoints += (objMartialArt.Rating * 7) * _objOptions.KarmaQuality;
                    // Add in the Techniques
                    intMartialArtsPoints += (Math.Max(objMartialArt.Advantages.Count - 1, 0) * 5) * _objOptions.KarmaQuality;
                }
            }
            intKarmaPointsRemain -= intMartialArtsPoints;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Skill Groups.
            int intSkillGroupsPoints = _objCharacter.SkillsSection.SkillGroups.TotalCostKarma();
            intKarmaPointsRemain -= intSkillGroupsPoints;
            // ------------------------------------------------------------------------------
            // Calculate the BP used by Active Skills.
            int skillPointsKarma = _objCharacter.SkillsSection.Skills.TotalCostKarma();
            intKarmaPointsRemain -= skillPointsKarma;

            // ------------------------------------------------------------------------------
            // Calculate the points used by Knowledge Skills.
            int knowledgeKarmaUsed = _objCharacter.SkillsSection.KnowledgeSkills.Sum(x => x.CurrentKarmaCost());
            //TODO: Remaining is named USED?
            intKarmaPointsRemain -= knowledgeKarmaUsed;

            intFreestyleBP += knowledgeKarmaUsed;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Resources/Nuyen.
            intKarmaPointsRemain -= (int)nudNuyen.Value;

            intFreestyleBP += (int)nudNuyen.Value;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Spells.
            int intSpellPointsUsed = 0;
            int intRitualPointsUsed = 0;
            int intPrepPointsUsed = 0;
            int spellPoints = 0;
            int ritualPoints = 0;
            int prepPoints = 0;
            if (_objCharacter.MagicianEnabled ||
                    _objCharacter.Improvements.Any(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.FreeSpells ||
                                                                     objImprovement.ImproveType == Improvement.ImprovementType.FreeSpellsATT ||
                                                                     objImprovement.ImproveType == Improvement.ImprovementType.FreeSpellsSkill))
            {
                // Count the number of Spells the character currently has and make sure they do not try to select more Spells than they are allowed.
                int spells = _objCharacter.Spells.Count(spell => (!spell.Alchemical) && spell.Category != "Rituals" && !spell.FreeBonus);
                int intTouchOnlySpells = _objCharacter.Spells.Count(spell => (!spell.Alchemical) && spell.Category != "Rituals" && spell.Range == "T" && !spell.FreeBonus);
                int rituals = _objCharacter.Spells.Count(spell => (!spell.Alchemical) && spell.Category == "Rituals" && !spell.FreeBonus);
                int preps = _objCharacter.Spells.Count(spell => spell.Alchemical && !spell.FreeBonus);

                // Each spell costs KarmaSpell.
                int spellCost = _objCharacter.SpellKarmaCost;
                int limit = _objCharacter.SpellLimit;

                // It is only karma-efficient to use spell points for Mastery qualities if real spell karma cost is not greater than unmodified spell karma cost
                if (spellCost <= _objOptions.KarmaSpell)
                {
                    // Assume that every [spell cost] karma spent on a Mastery quality is paid for with a priority-given spell point instead, as that is the most karma-efficient.
                    int intQualityKarmaToSpellPoints = Math.Min(limit, (_objCharacter.Qualities.Where(objQuality => objQuality.CanBuyWithSpellPoints).Sum(objQuality => objQuality.BP) * _objOptions.KarmaQuality) / _objOptions.KarmaSpell);
                    spells += intQualityKarmaToSpellPoints;
                    // Add the karma paid for by spell points back into the available karma pool.
                    intKarmaPointsRemain += intQualityKarmaToSpellPoints * _objOptions.KarmaSpell;
                }

                int limitMod = ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.SpellLimit) +
                               ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeSpells);
                int limitModTouchOnly = 0;
                foreach (Improvement imp in _objCharacter.Improvements.Where(i => i.ImproveType == Improvement.ImprovementType.FreeSpellsATT && i.Enabled))
                {
                    int intAttValue = _objCharacter.GetAttribute(imp.ImprovedName).TotalValue;
                    if (imp.UniqueName.Contains("half"))
                        intAttValue = (intAttValue + 1) / 2;
                    if (imp.UniqueName.Contains("touchonly"))
                        limitModTouchOnly += intAttValue;
                    else
                        limitMod += intAttValue;
                }
                foreach (Improvement imp in _objCharacter.Improvements.Where(i => i.ImproveType == Improvement.ImprovementType.FreeSpellsSkill && i.Enabled))
                {
                    int intSkillValue = _objCharacter.SkillsSection.GetActiveSkill(imp.ImprovedName)?.TotalBaseRating ?? 0;
                    if (imp.UniqueName.Contains("half"))
                        intSkillValue = (intSkillValue + 1) / 2;
                    if (imp.UniqueName.Contains("touchonly"))
                        limitModTouchOnly += intSkillValue;
                    else
                        limitMod += intSkillValue;
                }

                if (nudMysticAdeptMAGMagician.Value > 0)
                {
                    int intPPBought = decimal.ToInt32(nudMysticAdeptMAGMagician.Value);
                    if (_objOptions.PrioritySpellsAsAdeptPowers)
                    {
                        spells += Math.Min(limit, intPPBought);
                        intPPBought = Math.Max(0, intPPBought - limit);
                    }
                    intAttributePointsUsed = intPPBought * 5;
                    intKarmaPointsRemain -= intAttributePointsUsed;
                }
                spells -= intTouchOnlySpells - Math.Max(0, intTouchOnlySpells - limitModTouchOnly);

                for (int i = limit + limitMod; i > 0; i--)
                {
                    if (spells > 0)
                    {
                        spells--;
                        spellPoints++;
                    }
                    else if (rituals > 0)
                    {
                        rituals--;
                        ritualPoints++;
                    }
                    else if (preps > 0)
                    {
                        preps--;
                        prepPoints++;
                    }
                    else
                    {
                        break;
                    }
                }
                intKarmaPointsRemain -= Math.Max(0, spells + rituals + preps) * (spellCost);
                intSpellPointsUsed += Math.Max(Math.Max(0, spells) * (spellCost), 0);
                intRitualPointsUsed += Math.Max(Math.Max(0, rituals) * (spellCost), 0);
                intPrepPointsUsed += Math.Max(Math.Max(0, preps) * spellCost, 0);
                if (blnDoUIUpdate)
                {
                    tipTooltip.SetToolTip(lblSpellsBP, $"{spells} x {spellCost} + {LanguageManager.GetString("String_Karma")} = {intSpellPointsUsed} {LanguageManager.GetString("String_Karma")}");
                    tipTooltip.SetToolTip(lblBuildRitualsBP, $"{rituals} x {spellCost} + {LanguageManager.GetString("String_Karma")} = {intRitualPointsUsed} {LanguageManager.GetString("String_Karma")}");
                    tipTooltip.SetToolTip(lblBuildPrepsBP, $"{preps} x {spellCost} + {LanguageManager.GetString("String_Karma")} = {intPrepPointsUsed} {LanguageManager.GetString("String_Karma")}");
                    if (limit + limitMod > 0)
                    {
                        lblBuildPrepsBP.Text =
                            string.Format(
                                $"{prepPoints} {LanguageManager.GetString("String_Of")} {limit + limitMod}: {intPrepPointsUsed} {strPoints}");
                        lblSpellsBP.Text =
                            string.Format(
                                $"{spellPoints} {LanguageManager.GetString("String_Of")} {limit + limitMod}: {intSpellPointsUsed} {strPoints}");
                        lblBuildRitualsBP.Text =
                            string.Format(
                                $"{ritualPoints} {LanguageManager.GetString("String_Of")} {limit + limitMod}: {intRitualPointsUsed} {strPoints}");
                    }
                    else
                    {
                        if (limitMod == 0)
                        {
                            lblBuildPrepsBP.Text =
                                string.Format($"{intPrepPointsUsed} {strPoints}");
                            lblSpellsBP.Text =
                                string.Format($"{intSpellPointsUsed} {strPoints}");
                            lblBuildRitualsBP.Text =
                                string.Format($"{intRitualPointsUsed} {strPoints}");
                        }
                        else
                        {
                            //TODO: Make the costs render better, currently looks wrong as hell
                            lblBuildPrepsBP.Text =
                                string.Format(
                                    $"{prepPoints} {LanguageManager.GetString("String_Of")} {limitMod}: {intPrepPointsUsed} {strPoints}");
                            lblSpellsBP.Text =
                                string.Format(
                                    $"{spellPoints} {LanguageManager.GetString("String_Of")} {limitMod}: {intSpellPointsUsed} {strPoints}");
                            lblBuildRitualsBP.Text =
                                string.Format(
                                    $"{ritualPoints} {LanguageManager.GetString("String_Of")} {limitMod}: {intRitualPointsUsed} {strPoints}");
                        }
                    }
                }
            }

            intFreestyleBP += intSpellPointsUsed + intRitualPointsUsed + intPrepPointsUsed;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Foci.
            int intFociPointsUsed = 0;
            foreach (Focus objFocus in _objCharacter.Foci)
            {
                Gear objFocusGear = _objCharacter.Gear.DeepFirstOrDefault(x => x.Children, x => x.InternalId == objFocus.GearId);
                if (objFocusGear == null)
                {
                    objFocusGear = CommonFunctions.FindArmorGear(objFocus.GearId, _objCharacter.Armor);
                    if (objFocusGear == null)
                    {
                        objFocusGear = CommonFunctions.FindWeaponGear(objFocus.GearId, _objCharacter.Weapons);
                        if (objFocusGear == null)
                        {
                            objFocusGear = CommonFunctions.FindCyberwareGear(objFocus.GearId, _objCharacter.Cyberware);
                            if (objFocusGear == null)
                            {
                                objFocusGear = CommonFunctions.FindVehicleGear(objFocus.GearId, _objCharacter.Vehicles);
                                if (objFocusGear == null)
                                    continue;
                            }
                        }
                    }
                }
                // Each Focus costs an amount of Karma equal to their Force x speicific Karma cost.
                string strFocusName = objFocusGear.Name;
                string strFocusExtra = objFocusGear.Extra;
                int intPosition = strFocusName.IndexOf('(');
                if (intPosition > -1)
                    strFocusName = strFocusName.Substring(0, intPosition - 1);
                intPosition = strFocusName.IndexOf(',');
                if (intPosition > -1)
                    strFocusName = strFocusName.Substring(0, intPosition - 1);
                int intKarmaMultiplier = 1;
                int intExtraKarmaCost = 0;
                switch (strFocusName)
                {
                    case "Qi Focus":
                        intKarmaMultiplier = _objOptions.KarmaQiFocus;
                        break;
                    case "Sustaining Focus":
                        intKarmaMultiplier = _objOptions.KarmaSustainingFocus;
                        break;
                    case "Counterspelling Focus":
                        intKarmaMultiplier = _objOptions.KarmaCounterspellingFocus;
                        break;
                    case "Banishing Focus":
                        intKarmaMultiplier = _objOptions.KarmaBanishingFocus;
                        break;
                    case "Binding Focus":
                        intKarmaMultiplier = _objOptions.KarmaBindingFocus;
                        break;
                    case "Weapon Focus":
                        intKarmaMultiplier = _objOptions.KarmaWeaponFocus;
                        break;
                    case "Spellcasting Focus":
                        intKarmaMultiplier = _objOptions.KarmaSpellcastingFocus;
                        break;
                    case "Ritual Spellcasting Focus":
                        intKarmaMultiplier = _objOptions.KarmaRitualSpellcastingFocus;
                        break;
                    case "Spell Shaping Focus":
                        intKarmaMultiplier = _objOptions.KarmaSpellShapingFocus;
                        break;
                    case "Summoning Focus":
                        intKarmaMultiplier = _objOptions.KarmaSummoningFocus;
                        break;
                    case "Alchemical Focus":
                        intKarmaMultiplier = _objOptions.KarmaAlchemicalFocus;
                        break;
                    case "Centering Focus":
                        intKarmaMultiplier = _objOptions.KarmaCenteringFocus;
                        break;
                    case "Masking Focus":
                        intKarmaMultiplier = _objOptions.KarmaMaskingFocus;
                        break;
                    case "Disenchanting Focus":
                        intKarmaMultiplier = _objOptions.KarmaDisenchantingFocus;
                        break;
                    case "Power Focus":
                        intKarmaMultiplier = _objOptions.KarmaPowerFocus;
                        break;
                    case "Flexible Signature Focus":
                        intKarmaMultiplier = _objOptions.KarmaFlexibleSignatureFocus;
                        break;
                }
                foreach (Improvement objLoopImprovement in _objCharacter.Improvements.Where(x => x.ImprovedName == strFocusName && (string.IsNullOrEmpty(x.Target) || strFocusExtra.Contains(x.Target)) && x.Enabled))
                {
                    if (objLoopImprovement.ImproveType == Improvement.ImprovementType.FocusBindingKarmaCost)
                        intExtraKarmaCost += objLoopImprovement.Value;
                    else if (objLoopImprovement.ImproveType == Improvement.ImprovementType.FocusBindingKarmaMultiplier)
                        intKarmaMultiplier += objLoopImprovement.Value;
                }
                intKarmaPointsRemain -= objFocus.Rating * intKarmaMultiplier + intExtraKarmaCost;
                intFociPointsUsed += objFocus.Rating * intKarmaMultiplier + intExtraKarmaCost;
            }

            // Calculate the BP used by Stacked Foci.
            foreach (StackedFocus objFocus in _objCharacter.StackedFoci)
            {
                if (objFocus.Bonded)
                {
                    int intBindingCost = objFocus.BindingCost;
                    intKarmaPointsRemain -= intBindingCost;
                    intFociPointsUsed += intBindingCost;
                }
            }

            intFreestyleBP += intFociPointsUsed;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Spirits.
            int intSpiritPointsUsed = 0;
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
            {
                // Each Spirit costs KarmaSpirit x Services Owed.
                intKarmaPointsRemain -= objSpiritControl.ServicesOwed * _objOptions.KarmaSpirit;
                intSpiritPointsUsed += objSpiritControl.ServicesOwed * _objOptions.KarmaSpirit;

                // Each Fettered Spirit costs 3 x Force.
                //TODO: Bind the 3 to an option.
                if (objSpiritControl.Fettered)
                {
                    intKarmaPointsRemain -= objSpiritControl.Force * 3;
                    intSpiritPointsUsed += objSpiritControl.Force * 3;
                }
            }
            intFreestyleBP += intSpiritPointsUsed;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Sprites.
            int intSpritePointsUsed = 0;
            foreach (SpiritControl objSpriteControl in panSprites.Controls)
            {
                // Each Sprite costs KarmaSpirit x Services Owed.
                intKarmaPointsRemain -= objSpriteControl.ServicesOwed * _objOptions.KarmaSpirit;
                intSpritePointsUsed += objSpriteControl.ServicesOwed * _objOptions.KarmaSpirit;
            }
            intFreestyleBP += intSpritePointsUsed;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Complex Forms.
            int intFormsPointsUsed = 0;
            foreach (ComplexForm objProgram in _objCharacter.ComplexForms)
            {
                intFormsPointsUsed += 1;
            }
            if (intFormsPointsUsed > _objCharacter.CFPLimit)
                intKarmaPointsRemain -= (intFormsPointsUsed - _objCharacter.CFPLimit) * _objCharacter.ComplexFormKarmaCost;
            intFreestyleBP += intFormsPointsUsed;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Programs and Advanced Programs.
            int intAINormalProgramPointsUsed = 0;
            int intAIAdvancedProgramPointsUsed = 0;
            foreach (AIProgram objProgram in _objCharacter.AIPrograms)
            {
                if (objProgram.CanDelete)
                {
                    if (objProgram.IsAdvancedProgram)
                        intAIAdvancedProgramPointsUsed += 1;
                    else
                        intAINormalProgramPointsUsed += 1;
                }
            }
            int intKarmaCost = 0;
            int intNumAdvancedProgramPointsAsNormalPrograms = 0;
            if (intAINormalProgramPointsUsed > _objCharacter.AINormalProgramLimit)
            {
                if (intAIAdvancedProgramPointsUsed < _objCharacter.AIAdvancedProgramLimit)
                {
                    intNumAdvancedProgramPointsAsNormalPrograms = Math.Min(intAINormalProgramPointsUsed - _objCharacter.AINormalProgramLimit, _objCharacter.AIAdvancedProgramLimit - intAIAdvancedProgramPointsUsed);
                    intAINormalProgramPointsUsed -= intNumAdvancedProgramPointsAsNormalPrograms;
                }
                if (intAINormalProgramPointsUsed > _objCharacter.AINormalProgramLimit)
                    intKarmaCost += (intAINormalProgramPointsUsed - _objCharacter.AINormalProgramLimit) * _objCharacter.AIProgramKarmaCost;
            }
            if (intAIAdvancedProgramPointsUsed > _objCharacter.AIAdvancedProgramLimit)
            {
                intKarmaCost += (intAIAdvancedProgramPointsUsed - _objCharacter.AIAdvancedProgramLimit) * _objCharacter.AIAdvancedProgramKarmaCost;
            }
            intKarmaPointsRemain -= intKarmaCost;
            intFreestyleBP += intAIAdvancedProgramPointsUsed + intAINormalProgramPointsUsed + intNumAdvancedProgramPointsAsNormalPrograms;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Martial Art Maneuvers.
            // Each Maneuver costs KarmaManeuver.
            int intManeuverPointsUsed = _objCharacter.MartialArtManeuvers.Count * _objOptions.KarmaManeuver;
            intFreestyleBP += intManeuverPointsUsed;
            intKarmaPointsRemain -= intManeuverPointsUsed;

            // ------------------------------------------------------------------------------
            // Calculate the BP used by Initiation.
            int intInitiationPoints = 0;
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                decimal decMultiplier = 1.0m;
                if (objGrade.Group == true)
                    decMultiplier -= 0.1m;
                if (objGrade.Ordeal == true)
                    decMultiplier -= _objCharacter.TechnomancerEnabled ? 0.2m : 0.1m;
                if (objGrade.Schooling == true)
                    decMultiplier -= 0.1m;

                intInitiationPoints += decimal.ToInt32(decimal.Ceiling(decMultiplier * objGrade.KarmaCost));
            }
            // Add the Karma cost of extra Metamagic/Echoes to the Initiation cost.
            foreach (Metamagic objMetamagic in _objCharacter.Metamagics.Where(x => x.Grade >= 0))
            {
                if (objMetamagic.PaidWithKarma)
                    intInitiationPoints += _objOptions.KarmaMetamagic;
            }

            // Add the Karma cost of extra Metamagic/Echoes to the Initiation cost.
            foreach (Enhancement objEnhancement in _objCharacter.Enhancements)
            {
                intInitiationPoints += 2;
            }

            foreach (Power objPower in _objCharacter.Powers)
            {
                foreach (Enhancement objEnhancement in objPower.Enhancements)
                    intInitiationPoints += 2;
            }

            // Check to see if the character is a member of a Group.
            if (_objCharacter.GroupMember && _objCharacter.MAGEnabled)
                intInitiationPoints += _objOptions.KarmaJoinGroup;

            intKarmaPointsRemain -= intInitiationPoints;
            intFreestyleBP += intInitiationPoints;

            // Add the Karma cost of any Critter Powers.
            foreach (CritterPower objPower in _objCharacter.CritterPowers)
            {
                intKarmaPointsRemain -= objPower.Karma;
            }

            _objCharacter.Karma = intKarmaPointsRemain;

            if (blnDoUIUpdate)
            {
                string strContactPoints = _objCharacter.ContactPointsUsed.ToString();
                if (_objCharacter.FriendsInHighPlaces)
                {
                    strContactPoints += '/' + Math.Max(0, (_objCharacter.CHA.Value * 4) - intHighPlacesFriends).ToString();
                }
                strContactPoints += ' ' + LanguageManager.GetString("String_Of") + ' ' + intContactPoints.ToString();
                if (_objCharacter.FriendsInHighPlaces)
                {
                    strContactPoints += '/' + (_objCharacter.CHA.Value * 4).ToString();
                }
                if (intPointsInContacts > 0 || (_objCharacter.CHA.Value * 4 < intHighPlacesFriends))
                {
                    strContactPoints += " (" + intPointsInContacts.ToString() + ' ' + strPoints + ')';
                }

                lblContactsBP.Text = strContactPoints.ToString();
                lblContactPoints.Text = strContactPoints.ToString();
                lblEnemiesBP.Text = string.Format("{0} " + strPoints, intEnemyPoints.ToString());

                lblPositiveQualitiesBP.Text = unlimitedPositive > 0
                   ? $"{intPositiveQualities}/{_objCharacter.GameplayOptionQualityLimit} {strPoints} ({intPositiveQualities + unlimitedPositive})"
                   : $"{intPositiveQualities}/{_objCharacter.GameplayOptionQualityLimit} {strPoints}";

                lblNegativeQualitiesBP.Text = unlimitedNegative > 0
                    ? $"{intNegativeQualities * -1}/{_objCharacter.GameplayOptionQualityLimit} {strPoints} ({intNegativeQualities + unlimitedNegative})"
                    : $"{intNegativeQualities * -1}/{_objCharacter.GameplayOptionQualityLimit} {strPoints}";

                lblAttributesBP.Text = BuildAttributes(_objCharacter.AttributeSection.AttributeList, null);
                lblPBuildSpecial.Text = BuildAttributes(_objCharacter.AttributeSection.SpecialAttributeList, null, true);

                tabSkillUc.MissingDatabindingsWorkaround();

                lblNuyenBP.Text = nudNuyen.Value.ToString(GlobalOptions.CultureInfo) + " " + strPoints;

                lblFociBP.Text = string.Format("{0} " + strPoints, intFociPointsUsed.ToString());

                lblSpiritsBP.Text = string.Format("{0} " + strPoints, intSpiritPointsUsed.ToString());

                lblSpritesBP.Text = string.Format("{0} " + strPoints, intSpritePointsUsed.ToString());

                string s = $"0 {strPoints}";
                if (_objCharacter.CFPLimit > 0)
                {
                    s = $"{intFormsPointsUsed} {LanguageManager.GetString("String_Of")} {_objCharacter.CFPLimit}";
                    if (intFormsPointsUsed > _objCharacter.CFPLimit)
                    {
                        s += $": {(intFormsPointsUsed - _objCharacter.CFPLimit) * _objCharacter.ComplexFormKarmaCost} {strPoints}";
                    }
                }
                else
                {
                    s = $"{(intFormsPointsUsed - _objCharacter.CFPLimit) * _objCharacter.ComplexFormKarmaCost} {strPoints}";
                }
                lblComplexFormsBP.Text = s;

                lblAINormalProgramsBP.Text = string.Format("{0} " + strPoints, ((intAINormalProgramPointsUsed - _objCharacter.AINormalProgramLimit) * _objCharacter.AIProgramKarmaCost).ToString());
                lblAIAdvancedProgramsBP.Text = string.Format("{0} " + strPoints, ((intAIAdvancedProgramPointsUsed - _objCharacter.AIAdvancedProgramLimit) * _objCharacter.AIAdvancedProgramKarmaCost).ToString());

                lblManeuversBP.Text = string.Format("{0} " + strPoints, intManeuverPointsUsed.ToString());

                lblInitiationBP.Text = string.Format("{0} " + strPoints, intInitiationPoints.ToString());
                // ------------------------------------------------------------------------------
                // Update the number of BP remaining in the StatusBar.
                tssBP.Text = _objCharacter.BuildKarma.ToString();
                tssBPRemain.Text = intKarmaPointsRemain.ToString();
                if (_blnFreestyle)
                {
                    tssBP.Text = Math.Max(intFreestyleBP, intFreestyleBPMin).ToString();
                    if (intFreestyleBP < intFreestyleBPMin)
                        tssBP.ForeColor = Color.OrangeRed;
                    else
                        tssBP.ForeColor = SystemColors.ControlText;
                }
            }

            return intKarmaPointsRemain;
        }

        private void UpdateSkillRelatedInfo()
        {
            string karma = LanguageManager.GetString("String_Karma");
            string of = LanguageManager.GetString("String_Of");
            string def = $"0 {karma}";
            string s = string.Empty;
            //Update Skill Labels
            //Active skills
            s = def;
            int intActiveSkillPointsMaximum = _objCharacter.SkillsSection.SkillPointsMaximum;
            if (intActiveSkillPointsMaximum > 0)
            {
                s = $"{_objCharacter.SkillsSection.SkillPoints} {of} {intActiveSkillPointsMaximum}";
            }
            int intActiveSkillsTotalCostKarma = _objCharacter.SkillsSection.Skills.TotalCostKarma();
            if (intActiveSkillsTotalCostKarma > 0)
            {
                if (s != def)
                    { s += $": {intActiveSkillsTotalCostKarma} {karma}"; }
                else
                    { s  = $"{intActiveSkillsTotalCostKarma} {karma}"; }
                
            }
            lblActiveSkillsBP.Text = s;
            //Knowledge skills
            s = def;
            int intKnowledgeSkillPointsMaximum = _objCharacter.SkillsSection.KnowledgeSkillPoints;
            if (intKnowledgeSkillPointsMaximum > 0)
            {
                s = $"{_objCharacter.SkillsSection.KnowledgeSkillPointsRemain} {of} {intKnowledgeSkillPointsMaximum}";
            }
            int intKnowledgeSkillsTotalCostKarma = _objCharacter.SkillsSection.KnowledgeSkills.TotalCostKarma();
            if (intKnowledgeSkillsTotalCostKarma > 0)
            {
                if (s != def)
                    { s += $": {intKnowledgeSkillsTotalCostKarma} {karma}";}
                else
                    { s  = $"{intKnowledgeSkillsTotalCostKarma} {karma}"; }
            }
            lblKnowledgeSkillsBP.Text = s;
            //Groups
            s = def;
            int intSkillGroupPointsMaximum = _objCharacter.SkillsSection.SkillGroupPointsMaximum;
            if (intSkillGroupPointsMaximum > 0)
            {
                s = $"{_objCharacter.SkillsSection.SkillGroupPoints} {of} {intSkillGroupPointsMaximum}";
            }
            int intSkillGroupsTotalCostKarma = _objCharacter.SkillsSection.SkillGroups.TotalCostKarma();
            if (intSkillGroupsTotalCostKarma > 0)
            {
                if (s != def)
                { s += $": {intSkillGroupsTotalCostKarma} {karma}"; }
                else
                { s  = $"{intSkillGroupsTotalCostKarma} {karma}"; }
                
            }
            lblSkillGroupsBP.Text = s;
        }

        /// <summary>
        /// Update the Character information.
        /// </summary>
        public void UpdateCharacterInfo(object sender = null, EventArgs e = null)
        {
            // TODO: Databind as much of this as possible
            if (_blnLoading || _blnSkipUpdate || !_blnRequestCharacterUpdate)
                return;

            _blnSkipUpdate = true;
            string strTip = string.Empty;

            //Redliner/Cyber Singularity Seeker(hackish)
            if (!_objCharacter.RefreshRedliner())
                RefreshSelectedCyberware();
            // Nuyen can be affected by Qualities, so adjust the total amount available to the character.
            //if (_objCharacter.IgnoreRules == true)
            //    nudNuyen.Maximum = _objCharacter.NuyenMaximumBP;
            //else
            //    nudNuyen.Maximum = 100000;

            decimal decNuyen = _objCharacter.StartingNuyen;
            decNuyen += nudNuyen.Value * _objOptions.NuyenPerBP;
            decNuyen += Convert.ToDecimal(ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.Nuyen));

            lblNuyenTotal.Text = "= " + decNuyen.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

            decimal decESS = _objCharacter.Essence;
            decimal decRoundedESS = decimal.Round(decESS, _objCharacter.Options.EssenceDecimals, MidpointRounding.AwayFromZero);
            if (!_objCharacter.Options.DontRoundEssenceInternally)
                decESS = decRoundedESS;
            lblESSMax.Text = decRoundedESS.ToString(GlobalOptions.CultureInfo);
            tssEssence.Text = lblESSMax.Text;

            lblCyberwareESS.Text = decimal.Round(_objCharacter.CyberwareEssence, _objCharacter.Options.EssenceDecimals, MidpointRounding.AwayFromZero).ToString(GlobalOptions.CultureInfo);
            lblBiowareESS.Text = decimal.Round(_objCharacter.BiowareEssence, _objCharacter.Options.EssenceDecimals, MidpointRounding.AwayFromZero).ToString(GlobalOptions.CultureInfo);
            lblEssenceHoleESS.Text = decimal.Round(_objCharacter.EssenceHole, _objCharacter.Options.EssenceDecimals, MidpointRounding.AwayFromZero).ToString(GlobalOptions.CultureInfo);

            // Reduce a character's MAG and RES from Essence Loss.
            int intMetatypeMaximumESS = _objCharacter.ESS.MetatypeMaximum;
            int intReduction = intMetatypeMaximumESS - decimal.ToInt32(decimal.Floor(decESS));
            decimal decESSMag = _objCharacter.Essence + _objCharacter.EssencePenalty - _objCharacter.EssencePenaltyMAG;
            if (!_objCharacter.Options.DontRoundEssenceInternally)
                decESSMag = decimal.Round(decESSMag, _objCharacter.Options.EssenceDecimals, MidpointRounding.AwayFromZero);
            int intMagReduction = intMetatypeMaximumESS - decimal.ToInt32(decimal.Floor(decESSMag));

            // Remove any Improvements from MAG and RES from Essence Loss.
            ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.EssenceLoss, "Essence Loss");

            // Create the Essence Loss Improvements.
            if (intReduction > 0)
            {
                if (_objCharacter.Options.SpecialKarmaCostBasedOnShownValue)
                {
                    ImprovementManager.CreateImprovement(_objCharacter, "RES", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intReduction * -1);
                    ImprovementManager.CreateImprovement(_objCharacter, "DEP", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intReduction * -1);
                }
                else
                {
                    ImprovementManager.CreateImprovement(_objCharacter, "RES", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intReduction * -1);
                    ImprovementManager.CreateImprovement(_objCharacter, "DEP", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intReduction * -1);
                }
            }
            if (intMagReduction > 0)
            {
                if (_objCharacter.Options.SpecialKarmaCostBasedOnShownValue)
                {
                    ImprovementManager.CreateImprovement(_objCharacter, "MAG", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intMagReduction * -1);
                    ImprovementManager.CreateImprovement(_objCharacter, "MAGAdept", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intMagReduction * -1);
                }
                else
                {
                    ImprovementManager.CreateImprovement(_objCharacter, "MAG", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intMagReduction * -1);
                    ImprovementManager.CreateImprovement(_objCharacter, "MAGAdept", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intMagReduction * -1);
                }
            }

            // If the character is Cyberzombie, adjust their Attributes based on their Essence.
            if (_objCharacter.MetatypeCategory == "Cyberzombie")
            {
                int intESSModifier = _objCharacter.EssencePenalty - decimal.ToInt32(_objCharacter.EssenceMaximum);
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes");
                ImprovementManager.CreateImprovement(_objCharacter, "BOD", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(_objCharacter, "AGI", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(_objCharacter, "REA", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(_objCharacter, "STR", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(_objCharacter, "CHA", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(_objCharacter, "INT", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(_objCharacter, "LOG", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(_objCharacter, "WIL", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
            }

            // If the character is an A.I., set the Edge MetatypeMaximum to their Rating.
            if (_objCharacter.DEPEnabled)
                _objCharacter.EDG.MetatypeMaximum = _objCharacter.DEP.Value;

            if (_objCharacter.AdeptEnabled)
            {
                tabPowerUc.MissingDatabindingsWorkaround();
            }

            Dictionary<string, int> dicAttributeValues = new Dictionary<string, int>(AttributeSection.AttributeStrings.Length);
            foreach (string strAttribute in AttributeSection.AttributeStrings)
            {
                dicAttributeValues.Add(strAttribute, _objCharacter.GetAttribute(strAttribute).Value);
            }
            Dictionary<string, int> dicAttributeTotalValues = new Dictionary<string, int>(AttributeSection.AttributeStrings.Length);
            foreach (string strAttribute in AttributeSection.AttributeStrings)
            {
                dicAttributeTotalValues.Add(strAttribute, _objCharacter.GetAttribute(strAttribute).TotalValue);
            }

            UpdateSkillRelatedInfo();

            UpdateConditionMonitor(lblCMPhysical, lblCMStun, tipTooltip);

            UpdateSpellDefence(dicAttributeTotalValues);

            UpdateArmorRating(lblArmor, tipTooltip);

            // Calculate Free Contacts Points. Free points = (CHA) * 2.
            int intCHA = dicAttributeValues["CHA"];
            if (_objOptions.UseTotalValueForFreeKnowledge)
            {
                intCHA = dicAttributeTotalValues["CHA"];
            }
            _objCharacter.ContactPoints = intCHA * _objOptions.FreeContactsMultiplier;

            // If MAG is enabled, update the Force for Spirits (equal to Magician MAG Rating) and Adept Powers.
            if (_objCharacter.MAGEnabled)
            {
                foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                {
                    if (_objOptions.SpiritForceBasedOnTotalMAG)
                    {
                        objSpiritControl.ForceMaximum = dicAttributeTotalValues["MAG"];
                    }
                    else
                    {
                        int intLocalMAG = dicAttributeValues["MAG"];
                        if (intLocalMAG == 0)
                            intLocalMAG = 1;

                        objSpiritControl.ForceMaximum = intLocalMAG;
                    }
                    objSpiritControl.Force = objSpiritControl.ForceMaximum;
                    objSpiritControl.RebuildSpiritList(_objCharacter.MagicTradition);
                }
            }

            // If RES is enabled, update the Rating for Sprites (equal to Technomancer RES Rating).
            if (_objCharacter.RESEnabled)
            {
                foreach (SpiritControl objSpiritControl in panSprites.Controls)
                {
                    objSpiritControl.ForceMaximum = dicAttributeTotalValues["RES"];
                    objSpiritControl.Force = objSpiritControl.ForceMaximum;
                    objSpiritControl.RebuildSpiritList(_objCharacter.TechnomancerStream);
                }
            }

            // Update the Drain CharacterAttribute Value.
            if (_objCharacter.MAGEnabled && !string.IsNullOrEmpty(lblDrainAttributes.Text))
            {
                CalculateTraditionDrain(_objCharacter.TraditionDrain, Improvement.ImprovementType.DrainResistance, lblDrainAttributes, lblDrainAttributesValue, tipTooltip);
            }

            // Update the Fading CharacterAttribute Value.
            if (_objCharacter.RESEnabled)
            {
                CalculateTraditionDrain(_objCharacter.TechnomancerFading, Improvement.ImprovementType.FadingResistance, lblFadingAttributes, lblFadingAttributesValue, tipTooltip);
            }

            // Skill Limits
            RefreshLimits(lblPhysical, lblMental, lblSocial, lblAstral, tipTooltip);

            int intINTAttributeModifiers = _objCharacter.INT.AttributeModifiers;
            int intREAAttributeModifiers = _objCharacter.REA.AttributeModifiers;

            // Initiative.
            lblINI.Text = _objCharacter.Initiative;
            string strInitText = LanguageManager.GetString("String_Initiative");
            string strMatrixInitText = LanguageManager.GetString("String_MatrixInitiativeLong");
            string strModifiers = LanguageManager.GetString("Tip_Modifiers");
            string strInit = $"{_objCharacter.REA.DisplayAbbrev} ({dicAttributeValues["REA"]}) + {_objCharacter.INT.DisplayAbbrev} ({dicAttributeValues["INT"]})";
            if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.Initiative) > 0 || intINTAttributeModifiers > 0 || intREAAttributeModifiers > 0)
                strInit += " + " + LanguageManager.GetString("Tip_Modifiers") + " (" + (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.Initiative) + intINTAttributeModifiers + intREAAttributeModifiers).ToString() + ")";
            tipTooltip.SetToolTip(lblINI, strInitText.Replace("{0}", strInit).Replace("{1}", _objCharacter.InitiativeDice.ToString()));

            // Astral Initiative.
            lblAstralINI.Visible = _objCharacter.MAGEnabled;
            if (_objCharacter.MAGEnabled)
            {
                lblAstralINI.Text = _objCharacter.AstralInitiative;
                strInit = $"{_objCharacter.INT.DisplayAbbrev} ({dicAttributeValues["INT"]}) x 2";
                if (intINTAttributeModifiers > 0)
                    strInit += $"{strModifiers} ({intINTAttributeModifiers})";
                tipTooltip.SetToolTip(lblAstralINI, strInitText.Replace("{0}", strInit).Replace("{1}", _objCharacter.AstralInitiativeDice.ToString()));
            }

            // Matrix Initiative (AR).
            lblMatrixINI.Text = _objCharacter.MatrixInitiative;
            strInit = $"{_objCharacter.REA.DisplayAbbrev} ({dicAttributeValues["REA"]}) + {_objCharacter.INT.DisplayAbbrev} ({dicAttributeValues["INT"]})";
            if (intINTAttributeModifiers > 0 || intREAAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intREAAttributeModifiers + intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblMatrixINI, strInitText.Replace("{0}", strInit).Replace("{1}", _objCharacter.InitiativeDice.ToString()));

            // Matrix Initiative (Cold).
            lblMatrixINICold.Text = _objCharacter.MatrixInitiativeCold;
            strInit = strMatrixInitText.Replace("{0}", dicAttributeValues["INT"].ToString()).Replace("{1}", _objCharacter.MatrixInitiativeColdDice.ToString());
            if (intINTAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblMatrixINICold, strInit);

            // Matrix Initiative (Hot).
            lblMatrixINIHot.Text = _objCharacter.MatrixInitiativeHot;
            strInit = strMatrixInitText.Replace("{0}", dicAttributeValues["INT"].ToString()).Replace("{1}", _objCharacter.MatrixInitiativeHotDice.ToString());
            if (intINTAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblMatrixINIHot, strInit);

            // Rigger Initiative.
            lblRiggingINI.Text = _objCharacter.Initiative;
            strInit = $"{_objCharacter.REA.DisplayAbbrev} ({dicAttributeValues["REA"]}) + {_objCharacter.INT.DisplayAbbrev} ({dicAttributeValues["INT"]})";
            if (intINTAttributeModifiers > 0 || intREAAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intREAAttributeModifiers + intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblRiggingINI, strInitText.Replace("{0}", strInit).Replace("{1}", _objCharacter.InitiativeDice.ToString()));

            //// Matrix Initiative.
            //int intCommlinkResponse = 0;

            //// Retrieve the highest Response in case the Character has more than 1 Commlink.
            //foreach (Commlink objCommlink in _objCharacter.Gear.OfType<Commlink>())
            //{
            //    if (objCommlink.TotalResponse > intCommlinkResponse)
            //        intCommlinkResponse = objCommlink.TotalResponse;
            //}

            //lblMatrixINI.Text = _objCharacter.MatrixInitiative;
            //if (!_objCharacter.TechnomancerEnabled)
            //{
            //    tipTooltip.SetToolTip(lblMatrixINI, "INT (" + dicAttributeTotalValues["INT"].ToString() + ") + " + LanguageManager.GetString("Tip_CommlinkResponse") + " (" + intCommlinkResponse.ToString() + ")");
            //}
            //else
            //{
            //    strInit = "INT x 2 (" + dicAttributeTotalValues["INT"].ToString() + ") + 1";
            //    if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.LivingPersonaResponse) > 0)
            //        strInit += " + " + LanguageManager.GetString("Tip_Modifiers") + " (" + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.LivingPersonaResponse).ToString() + ")";
            //    tipTooltip.SetToolTip(lblMatrixINI, strInit);
            //}

            // Calculate the number of Build Points remaining.
            CalculateBP();
            CalculateNuyen();
            if ((_objCharacter.Metatype == "Free Spirit" && !_objCharacter.IsCritter) || _objCharacter.MetatypeCategory.EndsWith("Spirits"))
            {
                lblCritterPowerPointsLabel.Visible = true;
                lblCritterPowerPoints.Visible = true;
                lblCritterPowerPoints.Text = CommonFunctions.CalculateFreeSpiritPowerPoints(_objCharacter);
            }
            if (_objCharacter.IsFreeSprite)
            {
                lblCritterPowerPointsLabel.Visible = true;
                lblCritterPowerPoints.Visible = true;
                lblCritterPowerPoints.Text = CommonFunctions.CalculateFreeSpritePowerPoints(_objCharacter);
            }

            // Movement.
            lblMovement.Text = _objCharacter.GetMovement(GlobalOptions.CultureInfo);
            //strTip = _objCharacter.CalculatedMovementSpeed;
            //tipTooltip.SetToolTip(lblMovement, strTip);
            lblSwim.Text = _objCharacter.GetSwim(GlobalOptions.CultureInfo);
            lblFly.Text = _objCharacter.GetFly(GlobalOptions.CultureInfo);

            // Special CharacterAttribute-Only Test.
            lblComposure.Text = _objCharacter.Composure.ToString();
            strTip = $"{_objCharacter.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) + {_objCharacter.CHA.DisplayAbbrev} ({dicAttributeTotalValues["CHA"]})";
            tipTooltip.SetToolTip(lblComposure, strTip);
            lblJudgeIntentions.Text = _objCharacter.JudgeIntentions.ToString();
            strTip = $"{_objCharacter.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) + {_objCharacter.CHA.DisplayAbbrev} ({dicAttributeTotalValues["CHA"]})";
            if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.JudgeIntentions) != 0)
                strTip += " + " + LanguageManager.GetString("Tip_Modifiers") + " (" + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.JudgeIntentions).ToString() + ")";
            tipTooltip.SetToolTip(lblJudgeIntentions, strTip);
            lblLiftCarry.Text = _objCharacter.LiftAndCarry.ToString();
            strTip = $"{_objCharacter.STR.DisplayAbbrev} ({dicAttributeTotalValues["STR"]}) + {_objCharacter.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]})";
            if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.LiftAndCarry) != 0)
                strTip += " + " + LanguageManager.GetString("Tip_Modifiers") + " (" + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.LiftAndCarry).ToString() + ")";
            strTip += "\n" + LanguageManager.GetString("Tip_LiftAndCarry").Replace("{0}", (dicAttributeTotalValues["STR"] * 15).ToString()).Replace("{1}", (dicAttributeTotalValues["STR"] * 10).ToString());
            tipTooltip.SetToolTip(lblLiftCarry, strTip);
            lblMemory.Text = _objCharacter.Memory.ToString();
            strTip = $"{_objCharacter.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) + {_objCharacter.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]})";
            if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.Memory) != 0)
                strTip += " + " + LanguageManager.GetString("Tip_Modifiers") + " (" + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.Memory).ToString() + ")";
            tipTooltip.SetToolTip(lblMemory, strTip);

            ImprovementManager.Commit(_objCharacter);

            // If the Viewer window is open for this character, call its RefreshView method which updates it asynchronously
            if (_objCharacter.PrintWindow != null)
                _objCharacter.PrintWindow.RefreshView();
            if (GlobalOptions.MainForm.PrintMultipleCharactersForm?.CharacterList?.Contains(_objCharacter) == true)
                GlobalOptions.MainForm.PrintMultipleCharactersForm.PrintViewForm?.RefreshView();

            cmdAddBioware.Enabled = !_objCharacter.HasImprovement(Improvement.ImprovementType.DisableBioware, true);
            cmdAddCyberware.Enabled = !_objCharacter.HasImprovement(Improvement.ImprovementType.DisableCyberware, true);
            RefreshImprovements();
            RefreshLimitModifiers();
            UpdateReputation();
            if (_objOptions.AllowInitiationInCreateMode)
                UpdateInitiationCost();

            if (Autosave_StopWatch.Elapsed.Minutes >= 5 && _blnIsDirty)
            {
                AutoSaveCharacter();
            }
            _blnSkipUpdate = false;
            _blnRequestCharacterUpdate = false;
        }

        /// <summary>
        /// Calculate the amount of Nuyen the character has remaining.
        /// </summary>
        private decimal CalculateNuyen(bool blnDoUIUpdate = true)
        {
            decimal decNuyen = _objCharacter.StartingNuyen;
            decNuyen += nudNuyen.Value * _objOptions.NuyenPerBP;
            decNuyen += Convert.ToDecimal(ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.Nuyen));

            decimal decDeductions = 0;

            // Cyberware/Bioware cost.
            foreach (Cyberware objCyberware in _objCharacter.Cyberware)
                decDeductions += objCyberware.TotalCost;

            // Initiation Grade cost.
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                if (objGrade.Schooling)
                    decDeductions += 10000;
            }

            // Armor cost.
            foreach (Armor objArmor in _objCharacter.Armor)
                decDeductions += objArmor.TotalCost;

            // Weapon cost.
            foreach (Weapon objWeapon in _objCharacter.Weapons)
                decDeductions += objWeapon.TotalCost;

            // Gear cost.
            foreach (Gear objGear in _objCharacter.Gear)
                decDeductions += objGear.TotalCost;

            // Lifestyle cost.
            foreach (Lifestyle objLifestyle in _objCharacter.Lifestyles)
                decDeductions += objLifestyle.TotalCost;

            // Vehicle cost.
            foreach (Vehicle objVehcile in _objCharacter.Vehicles)
                decDeductions += objVehcile.TotalCost;

            _objCharacter.Nuyen = decNuyen - decDeductions;
            if (blnDoUIUpdate)
            {
                lblRemainingNuyen.Text = _objCharacter.Nuyen.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                tssNuyenRemaining.Text = _objCharacter.Nuyen.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                //lblNuyenBP.Text = _objCharacter.Nuyen.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
            }

            return _objCharacter.Nuyen;
        }

        /// <summary>
        /// Refresh the information for the currently displayed piece of Cyberware.
        /// </summary>
        public void RefreshSelectedCyberware()
        {
            _blnSkipRefresh = true;
            lblCyberDeviceRating.Visible = false;
            lblCyberAttack.Visible = false;
            lblCyberSleaze.Visible = false;
            lblCyberDataProcessing.Visible = false;
            lblCyberFirewall.Visible = false;
            lblCyberDeviceRatingLabel.Visible = false;
            lblCyberAttackLabel.Visible = false;
            lblCyberSleazeLabel.Visible = false;
            lblCyberDataProcessingLabel.Visible = false;
            lblCyberFirewallLabel.Visible = false;
            chkPrototypeTranshuman.Visible = false;
            cmdDeleteCyberware.Enabled = treCyberware.SelectedNode != null;
            cmdCyberwareChangeMount.Visible = false;

            if (treCyberware.SelectedNode == null || treCyberware.SelectedNode.Level == 0)
            {
                nudCyberwareRating.Enabled = false;
                cboCyberwareGrade.Enabled = false;
                lblCyberwareName.Text = string.Empty;
                lblCyberwareCategory.Text = string.Empty;
                lblCyberwareAvail.Text = string.Empty;
                lblCyberwareCost.Text = string.Empty;
                lblCyberwareCapacity.Text = string.Empty;
                lblCyberwareEssence.Text = string.Empty;
                lblCyberwareSource.Text = string.Empty;
                tipTooltip.SetToolTip(lblCyberwareSource, null);
                lblCyberlimbAGI.Visible = false;
                lblCyberlimbAGILabel.Visible = false;
                lblCyberlimbSTR.Visible = false;
                lblCyberlimbSTRLabel.Visible = false;
                _blnSkipRefresh = false;
                return;
            }

            // Locate the selected piece of Cyberware.
            Cyberware objCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);
            if (objCyberware != null)
            {
                if (!string.IsNullOrEmpty(objCyberware.ParentID))
                    cmdDeleteCyberware.Enabled = false;
                cmdCyberwareChangeMount.Visible = !string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount);
                lblCyberwareName.Text = objCyberware.DisplayNameShort;
                lblCyberwareCategory.Text = objCyberware.DisplayCategory;
                string strBook = _objOptions.LanguageBookShort(objCyberware.Source);
                string strPage = objCyberware.Page;
                lblCyberwareSource.Text = $"{strBook} {strPage}";
                tipTooltip.SetToolTip(lblCyberwareSource, _objOptions.LanguageBookLong(objCyberware.Source) + " " + LanguageManager.GetString("String_Page") + " " + objCyberware.Page);
                // Enable and set the Rating values as needed.
                if (objCyberware.MaxRating == 0)
                {
                    nudCyberwareRating.Maximum = 0;
                    nudCyberwareRating.Minimum = 0;
                    nudCyberwareRating.Value = 0;
                    nudCyberwareRating.Enabled = false;
                }
                else
                {
                    nudCyberwareRating.Maximum = Convert.ToDecimal(objCyberware.MaxRating, GlobalOptions.CultureInfo);
                    nudCyberwareRating.Minimum = Convert.ToDecimal(objCyberware.MinRating, GlobalOptions.CultureInfo);
                    nudCyberwareRating.Value = Convert.ToDecimal(objCyberware.Rating, GlobalOptions.CultureInfo);
                    nudCyberwareRating.Enabled = true;
                }

                bool blnIgnoreSecondHand = objCyberware.MyXmlNode?["nosecondhand"] != null;

                // Cyberware Grade is not available for Genetech items.
                // Cyberware Grade is only available on root-level items (sub-components cannot have a different Grade than the piece they belong to).
                if (objCyberware.Parent == null && !objCyberware.Suite && string.IsNullOrWhiteSpace(objCyberware.ForceGrade))
                    cboCyberwareGrade.Enabled = true;
                else
                    cboCyberwareGrade.Enabled = false;

                PopulateCyberwareGradeList(objCyberware.SourceType == Improvement.ImprovementSource.Bioware, blnIgnoreSecondHand, cboCyberwareGrade.Enabled ? string.Empty : objCyberware.Grade.Name);

                if (!string.IsNullOrEmpty(objCyberware.ParentID))
                    nudCyberwareRating.Enabled = false;
                else
                    nudCyberwareRating.Enabled = true;

                cboCyberwareGrade.SelectedValue = objCyberware.Grade.Name;
                if (cboCyberwareGrade.SelectedIndex == -1 && cboCyberwareGrade.Items.Count > 0)
                    cboCyberwareGrade.SelectedIndex = 0;
                if (objCyberware.Category.Equals("Cyberlimb") || objCyberware.AllowedSubsystems.Contains("Cyberlimb"))
                {
                    lblCyberlimbAGI.Visible = true;
                    lblCyberlimbAGILabel.Visible = true;
                    lblCyberlimbSTR.Visible = true;
                    lblCyberlimbSTRLabel.Visible = true;

                    lblCyberlimbAGILabel.Text = _objCharacter.AGI.DisplayAbbrev + ":";
                    lblCyberlimbSTRLabel.Text = _objCharacter.STR.DisplayAbbrev + ":";
                    lblCyberlimbAGI.Text = objCyberware.TotalAgility.ToString();
                    lblCyberlimbSTR.Text = objCyberware.TotalStrength.ToString();
                }
                else
                {
                    lblCyberlimbAGI.Visible = false;
                    lblCyberlimbAGILabel.Visible = false;
                    lblCyberlimbSTR.Visible = false;
                    lblCyberlimbSTRLabel.Visible = false;
                }

                chkPrototypeTranshuman.Visible = _objCharacter.PrototypeTranshuman > 0;
                chkPrototypeTranshuman.Checked = objCyberware.PrototypeTranshuman;

                lblCyberwareAvail.Text = objCyberware.TotalAvail;
                lblCyberwareCost.Text = objCyberware.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblCyberwareCapacity.Text =
                    $"{objCyberware.CalculatedCapacity} ({objCyberware.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo)} {LanguageManager.GetString("String_Remaining")})";
                lblCyberwareEssence.Text = objCyberware.CalculatedESS().ToString(GlobalOptions.CultureInfo);
                if (objCyberware.AddToParentESS)
                    lblCyberwareEssence.Text = "+" + lblCyberwareEssence.Text;
            }
            else
            {
                // Locate the piece of Gear.
                Gear objGear = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware.GetAllDescendants(x => x.Children));

                if (objGear.IncludedInParent)
                    cmdDeleteCyberware.Enabled = false;
                lblCyberwareName.Text = objGear.DisplayNameShort;
                lblCyberwareCategory.Text = objGear.DisplayCategory;
                lblCyberwareAvail.Text = objGear.TotalAvail(true);
                lblCyberwareCost.Text = objGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblCyberwareCapacity.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                lblCyberwareEssence.Text = "0";
                cboCyberwareGrade.Enabled = false;
                string strBook = _objOptions.LanguageBookShort(objGear.Source);
                string strPage = objGear.Page;
                lblCyberwareSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblCyberwareSource, _objOptions.LanguageBookLong(objGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objGear.Page);

                if (objGear.GetType() == typeof(Commlink))
                {
                    Commlink objCommlink = (Commlink)objGear;
                    lblCyberDeviceRating.Text = objCommlink.GetTotalMatrixAttribute("Device Rating").ToString();
                    lblCyberAttack.Text = objCommlink.GetTotalMatrixAttribute("Attack").ToString();
                    lblCyberSleaze.Text = objCommlink.GetTotalMatrixAttribute("Sleaze").ToString();
                    lblCyberDataProcessing.Text = objCommlink.GetTotalMatrixAttribute("Data Processing").ToString();
                    lblCyberFirewall.Text = objCommlink.GetTotalMatrixAttribute("Firewall").ToString();

                    lblCyberDeviceRating.Visible = true;
                    lblCyberAttack.Visible = true;
                    lblCyberSleaze.Visible = true;
                    lblCyberDataProcessing.Visible = true;
                    lblCyberFirewall.Visible = true;
                    lblCyberDeviceRatingLabel.Visible = true;
                    lblCyberAttackLabel.Visible = true;
                    lblCyberSleazeLabel.Visible = true;
                    lblCyberDataProcessingLabel.Visible = true;
                    lblCyberFirewallLabel.Visible = true;
                }
                else
                {
                    lblCyberDeviceRating.Visible = false;
                    lblCyberAttack.Visible = false;
                    lblCyberSleaze.Visible = false;
                    lblCyberDataProcessing.Visible = false;
                    lblCyberFirewall.Visible = false;
                    lblCyberDeviceRatingLabel.Visible = false;
                    lblCyberAttackLabel.Visible = false;
                    lblCyberSleazeLabel.Visible = false;
                    lblCyberDataProcessingLabel.Visible = false;
                    lblCyberFirewallLabel.Visible = false;
                }

                if (objGear.MaxRating > 0)
                {
                    if (objGear.MinRating > 0)
                        nudCyberwareRating.Minimum = objGear.MinRating;
                    else if (objGear.MinRating == 0 && objGear.Name.Contains("Credstick,"))
                        nudCyberwareRating.Minimum = 0;
                    else
                        nudCyberwareRating.Minimum = 1;
                    nudCyberwareRating.Maximum = objGear.MaxRating;
                    nudCyberwareRating.Value = objGear.Rating;
                    if (nudCyberwareRating.Minimum == nudCyberwareRating.Maximum)
                        nudCyberwareRating.Enabled = false;
                    else
                        nudCyberwareRating.Enabled = true;
                }
                else
                {
                    nudCyberwareRating.Minimum = 0;
                    nudCyberwareRating.Maximum = 0;
                    nudCyberwareRating.Enabled = false;
                }
            }
            _blnSkipRefresh = false;
        }

        public void RefreshContacts()
        {
            HashSet<Contact> existing = new HashSet<Contact>();

            for (int i = panContacts.Controls.Count - 1; i >= 0; i--)
            {
                Control contact = panContacts.Controls[i];
                ContactControl contactControl = contact as ContactControl;

                if (contactControl != null)
                {
                    if (_objCharacter.Contacts.Contains(contactControl.ContactObject))
                    {
                        contactControl.LoyaltyRating = contactControl.LoyaltyRating; //Force refresh
                        existing.Add(contactControl.ContactObject);
                    }
                    else
                    {
                        objContact_DeleteContact(contactControl, true);
                    }
                }
            }

            //Sync panContacts to character.contacts
            //objContactControl.ConnectionRatingChanged += objContact_ConnectionRatingChanged;
            //objContactControl.LoyaltyRatingChanged += objContact_LoyaltyRatingChanged;
            //objContactControl.DeleteContact += objContact_DeleteContact;
            //objContactControl.FileNameChanged += objContact_FileNameChanged;

            var newcontacts = from contact in _objCharacter.Contacts
                              where contact.EntityType == ContactType.Contact
                              && !existing.Contains(contact)
                              select contact;

            foreach (Contact contact in newcontacts)
            {
                ContactControl ctrl = new ContactControl(_objCharacter);
                ctrl.ContactObject = contact;

                ctrl.ConnectionRatingChanged += objContact_ConnectionRatingChanged;
                ctrl.LoyaltyRatingChanged += objContact_LoyaltyRatingChanged;
                ctrl.DeleteContact += objContact_DeleteContact;
                ctrl.FileNameChanged += objContact_FileNameChanged;
                ctrl.FreeRatingChanged += objContact_OtherCostChanged;
                ctrl.FamilyChanged += objContact_OtherCostChanged;
                ctrl.BlackmailChanged += objContact_OtherCostChanged;

                panContacts.Controls.Add(ctrl);
            }

        }

        public void RefreshAIPrograms()
        {
            treAIPrograms.Nodes[0].Nodes.Clear();

            // Populate AI Programs.
            foreach (AIProgram objAIProgram in _objCharacter.AIPrograms)
            {
                TreeNode objNode = new TreeNode();
                objNode.Text = objAIProgram.DisplayName;
                objNode.Tag = objAIProgram.InternalId;
                if (!string.IsNullOrEmpty(objAIProgram.Notes))
                    objNode.ForeColor = Color.SaddleBrown;
                else if (!objAIProgram.CanDelete)
                    objNode.ForeColor = SystemColors.GrayText;
                else
                    objNode.ForeColor = SystemColors.WindowText;
                objNode.ToolTipText = CommonFunctions.WordWrap(objAIProgram.Notes, 100);
                objNode.ContextMenuStrip = cmsAdvancedProgram;
                treAIPrograms.Nodes[0].Nodes.Add(objNode);
            }
            treAIPrograms.Nodes[0].Expand();
        }

        public void RefreshMartialArts()
        {
            treMartialArts.Nodes[0].Nodes.Clear();
            treMartialArts.Nodes[1].Nodes.Clear();

            // Populate Martial Arts.
            foreach (MartialArt objMartialArt in _objCharacter.MartialArts)
            {
                treMartialArts.Add(objMartialArt, cmsMartialArts);
                }
                }

        public void RefreshLimitModifiers()
        {
            treLimit.Nodes[0].Nodes.Clear();
            treLimit.Nodes[1].Nodes.Clear();
            treLimit.Nodes[2].Nodes.Clear();

            // Populate Limit Modifiers.
            foreach (LimitModifier objLimitModifier in _objCharacter.LimitModifiers)
            {
                treLimit.Add(objLimitModifier, cmsLimitModifier);
            }

            // Populate Limit Modifiers from Improvements
            foreach (Improvement objImprovement in _objCharacter.Improvements.Where(objImprovement => objImprovement.ImproveSource == Improvement.ImprovementSource.Custom))
            {
                if (objImprovement.ImproveType == Improvement.ImprovementType.LimitModifier || objImprovement.ImproveType == Improvement.ImprovementType.PhysicalLimit || objImprovement.ImproveType == Improvement.ImprovementType.MentalLimit || objImprovement.ImproveType == Improvement.ImprovementType.SocialLimit)
                {
                    treLimit.Add(objImprovement, cmsLimitModifier);
                }
            }
        }

        /// <summary>
        /// Refresh the information for the currently displayed Weapon.
        /// </summary>
        public void RefreshSelectedWeapon()
        {
            _blnSkipRefresh = true;
            lblWeaponDeviceRating.Text = string.Empty;
            lblWeaponAttack.Text = string.Empty;
            lblWeaponSleaze.Text = string.Empty;
            lblWeaponDataProcessing.Text = string.Empty;
            lblWeaponFirewall.Text = string.Empty;
            cmdDeleteWeapon.Enabled = treWeapons.SelectedNode != null;
            // Hide Weapon Ranges.
            lblWeaponRangeMain.Text = string.Empty;
            lblWeaponRangeAlternate.Text = string.Empty;
            lblWeaponRangeShort.Text = string.Empty;
            lblWeaponRangeMedium.Text = string.Empty;
            lblWeaponRangeLong.Text = string.Empty;
            lblWeaponRangeExtreme.Text = string.Empty;
            lblWeaponAlternateRangeShort.Text = string.Empty;
            lblWeaponAlternateRangeMedium.Text = string.Empty;
            lblWeaponAlternateRangeLong.Text = string.Empty;
            lblWeaponAlternateRangeExtreme.Text = string.Empty;

            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level == 0)
            {
                lblWeaponName.Text = string.Empty;
                lblWeaponCategory.Text = string.Empty;
                lblWeaponAvail.Text = string.Empty;
                lblWeaponCost.Text = string.Empty;
                lblWeaponAccuracy.Text = string.Empty;
                lblWeaponConceal.Text = string.Empty;
                lblWeaponDamage.Text = string.Empty;
                lblWeaponRC.Text = string.Empty;
                lblWeaponAP.Text = string.Empty;
                lblWeaponReach.Text = string.Empty;
                lblWeaponMode.Text = string.Empty;
                lblWeaponAmmo.Text = string.Empty;
                lblWeaponRating.Text = string.Empty;
                lblWeaponSource.Text = string.Empty;
                tipTooltip.SetToolTip(lblWeaponSource, null);
                chkWeaponAccessoryInstalled.Enabled = false;
                chkIncludedInWeapon.Enabled = false;
                chkIncludedInWeapon.Checked = false;
                _blnSkipRefresh = false;
                return;
            }

            lblWeaponDicePool.Text = string.Empty;
            tipTooltip.SetToolTip(lblWeaponDicePool, string.Empty);

            // Locate the selected Weapon.
            if (treWeapons.SelectedNode.Level == 1)
            {
                Weapon objWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                if (objWeapon == null)
                    return;

                if (objWeapon.IncludedInWeapon || objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || !string.IsNullOrEmpty(objWeapon.ParentID))
                    cmdDeleteWeapon.Enabled = false;

                // If this is a Cyberweapon, grab the STR of the limb.
                int intUseSTR = 0;
                if (objWeapon.Cyberware)
                {
                    if (objWeapon.Cyberware)
                    {
                        intUseSTR = _objCharacter.Cyberware.DeepFirstOrDefault(x => x.Children, x => x.WeaponID == objWeapon.InternalId)?.TotalStrength ?? 0;
                    }
                }

                lblWeaponName.Text = objWeapon.DisplayNameShort;
                lblWeaponCategory.Text = objWeapon.DisplayCategory;
                string strBook = _objOptions.LanguageBookShort(objWeapon.Source);
                string strPage = objWeapon.Page;
                lblWeaponSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblWeaponSource, _objOptions.LanguageBookLong(objWeapon.Source) + " " + LanguageManager.GetString("String_Page") + " " + objWeapon.Page);
                chkWeaponAccessoryInstalled.Enabled = false;
                chkIncludedInWeapon.Enabled = false;
                chkIncludedInWeapon.Checked = false;

                // Show the Weapon Ranges.
                lblWeaponRangeMain.Text = objWeapon.Range;
                lblWeaponRangeAlternate.Text = objWeapon.AlternateRange;
                Dictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                lblWeaponRangeShort.Text = dictionaryRanges["short"];
                lblWeaponRangeMedium.Text = dictionaryRanges["medium"];
                lblWeaponRangeLong.Text = dictionaryRanges["long"];
                lblWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                lblWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                lblWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                lblWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                lblWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                lblWeaponAvail.Text = objWeapon.TotalAvail;
                lblWeaponCost.Text = objWeapon.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblWeaponConceal.Text = objWeapon.CalculatedConcealability(GlobalOptions.CultureInfo);
                lblWeaponDamage.Text = objWeapon.CalculatedDamage(intUseSTR);
                lblWeaponAccuracy.Text = objWeapon.TotalAccuracy.ToString();
                lblWeaponRC.Text = objWeapon.TotalRC;
                lblWeaponAP.Text = objWeapon.TotalAP;
                lblWeaponReach.Text = objWeapon.TotalReach.ToString();
                lblWeaponMode.Text = objWeapon.CalculatedMode;
                lblWeaponAmmo.Text = objWeapon.CalculatedAmmo();
                lblWeaponRating.Text = string.Empty;
                if (GlobalOptions.Language != GlobalOptions.DefaultLanguage)
                {
                    string strSlotsText = string.Empty;
                    foreach (string strMount in objWeapon.AccessoryMounts.Split('/'))
                    {
                        strSlotsText += LanguageManager.GetString("String_Mount" + strMount) + '/';
                    }
                    lblWeaponSlots.Text = strSlotsText.TrimEnd('/');
                }
                else
                    lblWeaponSlots.Text = objWeapon.AccessoryMounts;
                lblWeaponDicePool.Text = objWeapon.GetDicePool(GlobalOptions.CultureInfo);
                tipTooltip.SetToolTip(lblWeaponDicePool, objWeapon.DicePoolTooltip);
                tipTooltip.SetToolTip(lblWeaponRC, objWeapon.RCToolTip);
            }
            else
            {
                // See if this is an Underbarrel Weapon.
                Weapon objWeapon = CommonFunctions.DeepFindById(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                if (objWeapon != null && objWeapon.IsUnderbarrelWeapon)
                {
                    if (objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                        cmdDeleteWeapon.Enabled = false;
                    lblWeaponName.Text = objWeapon.DisplayNameShort;
                    lblWeaponCategory.Text = objWeapon.DisplayCategory;
                    string strBook = _objOptions.LanguageBookShort(objWeapon.Source);
                    string strPage = objWeapon.Page;
                    lblWeaponSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblWeaponSource, _objOptions.LanguageBookLong(objWeapon.Source) + " " + LanguageManager.GetString("String_Page") + " " + objWeapon.Page);
                    chkWeaponAccessoryInstalled.Enabled = true;
                    chkWeaponAccessoryInstalled.Checked = objWeapon.Installed;
                    chkIncludedInWeapon.Enabled = false;
                    chkIncludedInWeapon.Checked = objWeapon.IncludedInWeapon;

                    // Show the Weapon Ranges.
                    lblWeaponRangeMain.Text = objWeapon.Range;
                    lblWeaponRangeAlternate.Text = objWeapon.AlternateRange;
                    Dictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                    lblWeaponRangeShort.Text = dictionaryRanges["short"];
                    lblWeaponRangeMedium.Text = dictionaryRanges["medium"];
                    lblWeaponRangeLong.Text = dictionaryRanges["long"];
                    lblWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                    lblWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                    lblWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                    lblWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                    lblWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                    lblWeaponAvail.Text = objWeapon.TotalAvail;
                    lblWeaponCost.Text = objWeapon.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblWeaponConceal.Text = objWeapon.CalculatedConcealability(GlobalOptions.CultureInfo);
                    lblWeaponDamage.Text = objWeapon.CalculatedDamage();
                    lblWeaponAccuracy.Text = objWeapon.TotalAccuracy.ToString();
                    lblWeaponRC.Text = objWeapon.TotalRC;
                    lblWeaponAP.Text = objWeapon.TotalAP;
                    lblWeaponReach.Text = objWeapon.TotalReach.ToString();
                    lblWeaponMode.Text = objWeapon.CalculatedMode;
                    lblWeaponAmmo.Text = objWeapon.CalculatedAmmo();
                    lblWeaponRating.Text = string.Empty;
                    if (GlobalOptions.Language != GlobalOptions.DefaultLanguage)
                    {
                        string strSlotsText = string.Empty;
                        foreach (string strMount in objWeapon.AccessoryMounts.Split('/'))
                        {
                            strSlotsText += LanguageManager.GetString("String_Mount" + strMount) + '/';
                        }
                        lblWeaponSlots.Text = strSlotsText.TrimEnd('/');
                    }
                    else
                        lblWeaponSlots.Text = objWeapon.AccessoryMounts;
                    lblWeaponDicePool.Text = objWeapon.GetDicePool(GlobalOptions.CultureInfo);
                    tipTooltip.SetToolTip(lblWeaponDicePool, objWeapon.DicePoolTooltip);
                }
                else
                {
                    Weapon objSelectedWeapon = null;
                    WeaponAccessory objSelectedAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                    if (objSelectedAccessory != null)
                    {
                        if (objSelectedAccessory.IncludedInWeapon)
                            cmdDeleteWeapon.Enabled = false;
                        objSelectedWeapon = objSelectedAccessory.Parent;
                        lblWeaponName.Text = objSelectedAccessory.DisplayNameShort;
                        lblWeaponCategory.Text = LanguageManager.GetString("String_WeaponAccessory");
                        lblWeaponAvail.Text = objSelectedAccessory.TotalAvail;
                        lblWeaponCost.Text = objSelectedAccessory.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblWeaponConceal.Text = objSelectedAccessory.Concealability.ToString();
                        lblWeaponDamage.Text = string.Empty;
                        lblWeaponAccuracy.Text = objSelectedAccessory.Accuracy.ToString();
                        lblWeaponRC.Text = objSelectedAccessory.RC;
                        lblWeaponAP.Text = string.Empty;
                        lblWeaponReach.Text = string.Empty;
                        lblWeaponMode.Text = string.Empty;
                        lblWeaponAmmo.Text = string.Empty;
                        lblWeaponRating.Text = objSelectedAccessory.Rating.ToString();

                        string[] strMounts = objSelectedAccessory.Mount.Split('/');
                        string strMount = string.Empty;
                        foreach (string strCurrentMount in strMounts)
                        {
                            if (!string.IsNullOrEmpty(strCurrentMount))
                                strMount += LanguageManager.GetString("String_Mount" + strCurrentMount) + "/";
                        }
                        // Remove the trailing /
                        if (!string.IsNullOrEmpty(strMount) && strMount.Contains('/'))
                            strMount = strMount.Substring(0, strMount.Length - 1);

                        if (!string.IsNullOrEmpty(objSelectedAccessory.ExtraMount) && (objSelectedAccessory.ExtraMount != "None"))
                        {
                            bool boolHaveAddedItem = false;
                            string[] strExtraMounts = objSelectedAccessory.ExtraMount.Split('/');
                            foreach (string strCurrentExtraMount in strExtraMounts)
                            {
                                if (!string.IsNullOrEmpty(strCurrentExtraMount))
                                {
                                    if (!boolHaveAddedItem)
                                    {
                                        strMount += " + ";
                                        boolHaveAddedItem = true;
                                    }
                                    strMount += LanguageManager.GetString("String_Mount" + strCurrentExtraMount) + "/";
                                }
                            }
                            // Remove the trailing /
                            if (boolHaveAddedItem)
                                strMount = strMount.Substring(0, strMount.Length - 1);
                        }

                        lblWeaponSlots.Text = strMount;
                        string strBook = _objOptions.LanguageBookShort(objSelectedAccessory.Source);
                        string strPage = objSelectedAccessory.Page;
                        lblWeaponSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblWeaponSource, _objOptions.BookFromCode(objSelectedAccessory.Source) + " " + LanguageManager.GetString("String_Page") + " " + objSelectedAccessory.Page);
                        chkWeaponAccessoryInstalled.Enabled = true;
                        chkWeaponAccessoryInstalled.Checked = objSelectedAccessory.Installed;
                        chkIncludedInWeapon.Enabled = _objOptions.AllowEditPartOfBaseWeapon;
                        chkIncludedInWeapon.Checked = objSelectedAccessory.IncludedInWeapon;
                    }
                    else
                    {
                        // Find the selected Gear.
                        Gear objGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons, out objSelectedAccessory);
                        if (objGear != null)
                        {
                            if (objGear.IncludedInParent)
                                cmdDeleteWeapon.Enabled = false;
                            objSelectedWeapon = objSelectedAccessory.Parent;

                            lblWeaponName.Text = objGear.DisplayNameShort;
                            lblWeaponCategory.Text = objGear.DisplayCategory;
                            lblWeaponAvail.Text = objGear.TotalAvail(true);
                            lblWeaponCost.Text = objGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                            lblWeaponConceal.Text = string.Empty;
                            lblWeaponDamage.Text = string.Empty;
                            lblWeaponRC.Text = string.Empty;
                            lblWeaponAP.Text = string.Empty;
                            lblWeaponAccuracy.Text = string.Empty;
                            lblWeaponReach.Text = string.Empty;
                            lblWeaponMode.Text = string.Empty;
                            lblWeaponAmmo.Text = string.Empty;
                            lblWeaponSlots.Text = string.Empty;
                            lblWeaponRating.Text = string.Empty;
                            string strBook = _objOptions.LanguageBookShort(objGear.Source);
                            string strPage = objGear.Page;
                            lblWeaponSource.Text = strBook + " " + strPage;
                            tipTooltip.SetToolTip(lblWeaponSource, _objOptions.BookFromCode(objGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objGear.Page);
                            chkWeaponAccessoryInstalled.Enabled = true;
                            chkWeaponAccessoryInstalled.Checked = objGear.Equipped;
                            chkIncludedInWeapon.Enabled = false;
                            chkIncludedInWeapon.Checked = false;

                            if (objGear.GetType() == typeof(Commlink))
                            {
                                Commlink objCommlink = (Commlink)objGear;
                                lblWeaponDeviceRating.Text = objCommlink.GetTotalMatrixAttribute("Device Rating").ToString();
                                lblWeaponAttack.Text = objCommlink.GetTotalMatrixAttribute("Attack").ToString();
                                lblWeaponSleaze.Text = objCommlink.GetTotalMatrixAttribute("Sleaze").ToString();
                                lblWeaponDataProcessing.Text = objCommlink.GetTotalMatrixAttribute("Data Processing").ToString();
                                lblWeaponFirewall.Text = objCommlink.GetTotalMatrixAttribute("Firewall").ToString();
                            }
                        }
                    }

                    if (objSelectedWeapon != null)
                    {
                        // Show the Weapon Ranges.
                        lblWeaponRangeMain.Text = objSelectedWeapon.Range;
                        lblWeaponRangeAlternate.Text = objSelectedWeapon.AlternateRange;
                        Dictionary<string, string> dictionaryRanges = objSelectedWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];
                    }
                }
            }
            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Refresh the information for the currently displayed Armor.
        /// </summary>
        public void RefreshSelectedArmor()
        {
            _blnSkipRefresh = true;
            lblArmorDeviceRating.Text = string.Empty;
            lblArmorAttack.Text = string.Empty;
            lblArmorSleaze.Text = string.Empty;
            lblArmorDataProcessing.Text = string.Empty;
            lblArmorFirewall.Text = string.Empty;
            cmdDeleteArmor.Enabled = treArmor.SelectedNode != null;

            if (treArmor.SelectedNode.Level == 0)
            {
                lblArmorEquipped.Text = string.Empty;
                foreach (Armor objArmor in _objCharacter.Armor)
                {
                    if (objArmor.Equipped && (objArmor.Location == treArmor.SelectedNode.Text || string.IsNullOrEmpty(objArmor.Location) && treArmor.SelectedNode == treArmor.Nodes[0]))
                        lblArmorEquipped.Text += objArmor.DisplayName + " (" + objArmor.TotalArmor.ToString() + ")\n";
                }
                if (string.IsNullOrEmpty(lblArmorEquipped.Text))
                    lblArmorEquipped.Text = LanguageManager.GetString("String_None");

                lblArmorEquipped.Visible = true;

                chkIncludedInArmor.Enabled = false;
                chkIncludedInArmor.Checked = false;
            }
            else
                lblArmorEquipped.Visible = false;

            if (treArmor.SelectedNode.Level == 1)
            {
                // Loclate the selected Armor
                Armor objArmor = CommonFunctions.FindByIdWithNameCheck(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
                if (objArmor == null)
                {
                    _blnSkipRefresh = false;
                    return;
                }

                lblArmorValue.Text = objArmor.TotalArmor.ToString();
                lblArmorAvail.Text = objArmor.TotalAvail;
                lblArmorCapacity.Text = objArmor.CalculatedCapacity + " (" + objArmor.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                lblArmorCost.Text = objArmor.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                string strBook = _objOptions.LanguageBookShort(objArmor.Source);
                string strPage = objArmor.Page;
                lblArmorSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblArmorSource, _objOptions.LanguageBookLong(objArmor.Source) + " " + LanguageManager.GetString("String_Page") + " " + objArmor.Page);
                chkArmorEquipped.Enabled = true;
                chkArmorEquipped.Checked = objArmor.Equipped;
                if (objArmor.MaxRating == 0)
                {
                    nudArmorRating.Enabled = false;
                }
                else
                {
                    nudArmorRating.Maximum = objArmor.MaxRating;
                    nudArmorRating.Value = objArmor.Rating;
                    nudArmorRating.Enabled = true;
                }
            }
            else if (treArmor.SelectedNode.Level == 2)
            {
                bool blnIsMod = false;
                Armor objSelectedArmor = null;
                ArmorMod objSelectedMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
                if (objSelectedMod != null)
                {
                    blnIsMod = true;
                    objSelectedArmor = objSelectedMod.Parent;
                }

                if (blnIsMod)
                {
                    if (objSelectedMod.IncludedInArmor)
                        cmdDeleteArmor.Enabled = false;
                    lblArmorValue.Text = objSelectedMod.Armor.ToString();
                    lblArmorAvail.Text = objSelectedMod.TotalAvail;
                    if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Standard)
                        lblArmorCapacity.Text = objSelectedMod.CalculatedCapacity;
                    else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Zero)
                        lblArmorCapacity.Text = "[0]";
                    else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.PerRating)
                    {
                        if (objSelectedMod.Rating > 0)
                            lblArmorCapacity.Text = "[" + objSelectedMod.Rating.ToString() + "]";
                        else
                            lblArmorCapacity.Text = "[1]";
                    }
                    if (!string.IsNullOrEmpty(objSelectedMod.GearCapacity))
                        lblArmorCapacity.Text = objSelectedMod.GearCapacity + "/" + lblArmorCapacity.Text + " (" + objSelectedMod.GearCapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                    lblArmorCost.Text = objSelectedMod.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

                    string strBook = _objOptions.LanguageBookShort(objSelectedMod.Source);
                    string strPage = objSelectedMod.Page;
                    lblArmorSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblArmorSource, _objOptions.LanguageBookLong(objSelectedMod.Source) + " " + LanguageManager.GetString("String_Page") + " " + objSelectedMod.Page);
                    chkArmorEquipped.Enabled = true;
                    chkArmorEquipped.Checked = objSelectedMod.Equipped;
                    if (objSelectedMod.MaximumRating > 1)
                    {
                        nudArmorRating.Maximum = objSelectedMod.MaximumRating;
                        nudArmorRating.Enabled = true;
                        nudArmorRating.Value = objSelectedMod.Rating;
                    }
                    else
                    {
                        nudArmorRating.Maximum = 1;
                        nudArmorRating.Enabled = false;
                        nudArmorRating.Value = 1;
                    }
                    
                    chkIncludedInArmor.Enabled = true;
                    chkIncludedInArmor.Checked = objSelectedMod.IncludedInArmor;
                }
                else
                {
                    Gear objSelectedGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor, out objSelectedArmor, out objSelectedMod);

                    if (objSelectedGear.IncludedInParent)
                        cmdDeleteArmor.Enabled = false;
                    lblArmorValue.Text = string.Empty;
                    lblArmorAvail.Text = objSelectedGear.TotalAvail(true);
                    if (objSelectedMod != null)
                    {
                        lblArmorCapacity.Text = objSelectedGear.CalculatedCapacity;
                    }
                    else
                    {
                        if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Standard)
                            lblArmorCapacity.Text = objSelectedGear.CalculatedArmorCapacity;
                        else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Zero)
                            lblArmorCapacity.Text = "[0]";
                        else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.PerRating)
                        {
                            if (objSelectedGear.Rating > 0)
                                lblArmorCapacity.Text = "[" + objSelectedGear.Rating.ToString() + "]";
                            else
                                lblArmorCapacity.Text = "[1]";
                        }
                    }
                    try
                    {
                        lblArmorCost.Text = objSelectedGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    }
                    catch (FormatException)
                    {
                        lblArmorCost.Text = objSelectedGear.Cost + '¥';
                    }
                    string strBook = _objOptions.LanguageBookShort(objSelectedGear.Source);
                    string strPage = objSelectedGear.Page;
                    lblArmorSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblArmorSource, _objOptions.LanguageBookLong(objSelectedGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objSelectedGear.Page);
                    chkArmorEquipped.Enabled = true;
                    chkArmorEquipped.Checked = objSelectedGear.Equipped;
                    if (objSelectedGear.MaxRating > 1)
                    {
                        nudArmorRating.Maximum = objSelectedGear.MaxRating;
                        nudArmorRating.Enabled = true;
                        nudArmorRating.Value = objSelectedGear.Rating;
                    }
                    else
                    {
                        nudArmorRating.Maximum = 1;
                        nudArmorRating.Enabled = false;
                        nudArmorRating.Value = 1;
                    }

                    if (objSelectedGear.GetType() == typeof(Commlink))
                    {
                        Commlink objCommlink = (Commlink)objSelectedGear;
                        lblArmorDeviceRating.Text = objCommlink.GetTotalMatrixAttribute("Device Rating").ToString();
                        lblArmorAttack.Text = objCommlink.GetTotalMatrixAttribute("Attack").ToString();
                        lblArmorSleaze.Text = objCommlink.GetTotalMatrixAttribute("Sleaze").ToString();
                        lblArmorDataProcessing.Text = objCommlink.GetTotalMatrixAttribute("Data Processing").ToString();
                        lblArmorFirewall.Text = objCommlink.GetTotalMatrixAttribute("Firewall").ToString();
                    }
                    
                    chkIncludedInArmor.Enabled = false;
                    chkIncludedInArmor.Checked = false;
                }
            }
            else if (treArmor.SelectedNode.Level > 2)
            {
                Gear objSelectedGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);

                if (objSelectedGear.IncludedInParent)
                    cmdDeleteArmor.Enabled = false;
                lblArmorValue.Text = string.Empty;
                lblArmorAvail.Text = objSelectedGear.TotalAvail(true);
                lblArmorCapacity.Text = objSelectedGear.CalculatedArmorCapacity;
                try
                {
                    lblArmorCost.Text = objSelectedGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                }
                catch (FormatException)
                {
                    lblArmorCost.Text = objSelectedGear.Cost + '¥';
                }
                string strBook = _objOptions.LanguageBookShort(objSelectedGear.Source);
                string strPage = objSelectedGear.Page;
                lblArmorSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblArmorSource, _objOptions.LanguageBookLong(objSelectedGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objSelectedGear.Page);
                chkArmorEquipped.Enabled = true;
                chkArmorEquipped.Checked = objSelectedGear.Equipped;
                if (objSelectedGear.MaxRating > 1)
                {
                    nudArmorRating.Maximum = objSelectedGear.MaxRating;
                    nudArmorRating.Enabled = true;
                    nudArmorRating.Value = objSelectedGear.Rating;
                }
                else
                {
                    nudArmorRating.Maximum = 1;
                    nudArmorRating.Enabled = false;
                    nudArmorRating.Value = 1;
                }

                if (objSelectedGear.GetType() == typeof(Commlink))
                {
                    Commlink objCommlink = (Commlink)objSelectedGear;
                    lblArmorDeviceRating.Text = objCommlink.GetTotalMatrixAttribute("Device Rating").ToString();
                    lblArmorAttack.Text = objCommlink.GetTotalMatrixAttribute("Attack").ToString();
                    lblArmorSleaze.Text = objCommlink.GetTotalMatrixAttribute("Sleaze").ToString();
                    lblArmorDataProcessing.Text = objCommlink.GetTotalMatrixAttribute("Data Processing").ToString();
                    lblArmorFirewall.Text = objCommlink.GetTotalMatrixAttribute("Firewall").ToString();
                }
            }
            else
            {
                lblArmorValue.Text = string.Empty;
                lblArmorAvail.Text = string.Empty;
                lblArmorCost.Text = string.Empty;
                lblArmorSource.Text = string.Empty;
                tipTooltip.SetToolTip(lblArmorSource, null);
                chkArmorEquipped.Enabled = false;
                nudArmorRating.Enabled = false;
            }
            _blnSkipRefresh = false;
        }

        private void UpdateSpellDefence(Dictionary<string,int> dicAttributeTotalValues)
        {
            // Update the Spell Defence labels.
            string strSpellTooltip = string.Empty;
            string strModifiers = LanguageManager.GetString("Tip_Modifiers");
            string strCounterSpelling = LanguageManager.GetString("Label_CounterspellingDice");
            string strSpellResistance = LanguageManager.GetString("String_SpellResistanceDice");
            //Indirect Dodge
            lblSpellDefenceIndirectDodge.Text = (dicAttributeTotalValues["INT"] + dicAttributeTotalValues["REA"] + _objCharacter.TotalBonusDodgeRating).ToString();
            strSpellTooltip = $"{strModifiers}: " +
                              $"{_objCharacter.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) + {_objCharacter.REA.DisplayAbbrev} ({dicAttributeTotalValues["REA"]}) + {strModifiers} ({_objCharacter.TotalBonusDodgeRating})";
            tipTooltip.SetToolTip(lblSpellDefenceIndirectDodge, strSpellTooltip);
            //Indirect Soak
            int intTotalArmor = _objCharacter.TotalArmorRating;
            lblSpellDefenceIndirectSoak.Text = (intTotalArmor + dicAttributeTotalValues["BOD"]).ToString();
            strSpellTooltip = $"{strModifiers}: " +
                              $"{LanguageManager.GetString("Tip_Armor")} ({intTotalArmor}) + {_objCharacter.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]})";
            tipTooltip.SetToolTip(lblSpellDefenceIndirectSoak, strSpellTooltip);
            //Direct Soak - Mana
            lblSpellDefenceDirectSoakMana.Text = (dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: " +
                              $"{_objCharacter.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDirectSoakMana, strSpellTooltip);
            //Direct Soak - Physical
            lblSpellDefenceDirectSoakPhysical.Text = (dicAttributeTotalValues["BOD"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDirectSoakPhysical, strSpellTooltip);
            //Detection Spells
            lblSpellDefenceDetection.Text =
                (dicAttributeTotalValues["LOG"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.DetectionSpellResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: " +
                              $"{_objCharacter.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) + {_objCharacter.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) " +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.DetectionSpellResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceDetection, strSpellTooltip);
            //Decrease Attribute - BOD
            lblSpellDefenceDecAttBOD.Text =
                (dicAttributeTotalValues["BOD"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttBOD, strSpellTooltip);
            //Decrease Attribute - AGI
            lblSpellDefenceDecAttAGI.Text =
                (dicAttributeTotalValues["AGI"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.AGI.DisplayAbbrev} ({dicAttributeTotalValues["AGI"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttAGI, strSpellTooltip);
            //Decrease Attribute - REA
            lblSpellDefenceDecAttREA.Text =
                (dicAttributeTotalValues["REA"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.REA.DisplayAbbrev} ({dicAttributeTotalValues["REA"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttREA, strSpellTooltip);
            //Decrease Attribute - STR
            lblSpellDefenceDecAttSTR.Text =
                (dicAttributeTotalValues["STR"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.STR.DisplayAbbrev} ({dicAttributeTotalValues["STR"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttSTR, strSpellTooltip);
            //Decrease Attribute - CHA
            lblSpellDefenceDecAttCHA.Text =
                (dicAttributeTotalValues["CHA"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.CHA.DisplayAbbrev} ({dicAttributeTotalValues["CHA"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttCHA, strSpellTooltip);
            //Decrease Attribute - INT
            lblSpellDefenceDecAttINT.Text =
                (dicAttributeTotalValues["INT"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttINT, strSpellTooltip);
            //Decrease Attribute - LOG
            lblSpellDefenceDecAttLOG.Text =
                (dicAttributeTotalValues["LOG"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttLOG, strSpellTooltip);
            //Decrease Attribute - WIL
            lblSpellDefenceDecAttWIL.Text =
                (dicAttributeTotalValues["WIL"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttWIL, strSpellTooltip);
            //Illusion - Mana
            lblSpellDefenceIllusionMana.Text =
                (dicAttributeTotalValues["WIL"] + dicAttributeTotalValues["LOG"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.ManaIllusionResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.ManaIllusionResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceIllusionMana, strSpellTooltip);
            //Illusion - Physical
            lblSpellDefenceIllusionPhysical.Text =
                (dicAttributeTotalValues["INT"] + dicAttributeTotalValues["LOG"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.PhysicalIllusionResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) +{_objCharacter.LOG.DisplayAbbrev} +({dicAttributeTotalValues["LOG"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.PhysicalIllusionResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceIllusionPhysical, strSpellTooltip);
            //Manipulation - Mental
            lblSpellDefenceManipMental.Text =
                (dicAttributeTotalValues["WIL"] + dicAttributeTotalValues["LOG"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.MentalManipulationResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) +{_objCharacter.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.MentalManipulationResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceManipMental, strSpellTooltip);
            //Manipulation - Physical
            lbllSpellDefenceManipPhysical.Text =
                (dicAttributeTotalValues["STR"] + dicAttributeTotalValues["BOD"] + nudCounterspellingDice.Value + _objCharacter.SpellResistance + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.PhysicalManipulationResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {_objCharacter.STR.DisplayAbbrev} ({dicAttributeTotalValues["STR"]}) +{_objCharacter.BOD.DisplayAbbrev} +({dicAttributeTotalValues["BOD"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({_objCharacter.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.PhysicalManipulationResist)})";
            tipTooltip.SetToolTip(lbllSpellDefenceManipPhysical, strSpellTooltip);
        }

        /// <summary>
        /// Refresh the information for the currently displayed Gear.
        /// </summary>
        public void RefreshSelectedGear()
        {
            _blnSkipRefresh = true;
            cmdDeleteGear.Enabled = treGear.SelectedNode != null;
            if (treGear.SelectedNode == null || treGear.SelectedNode.Level == 0)
            {
                nudGearRating.Minimum = 0;
                nudGearRating.Maximum = 0;
                nudGearRating.Enabled = false;
                nudGearQty.Enabled = false;
                chkGearEquipped.Text = LanguageManager.GetString("Checkbox_Equipped");
                chkGearEquipped.Visible = false;
                chkActiveCommlink.Visible = false;
                _blnSkipRefresh = false;
                return;
            }
            chkGearHomeNode.Visible = false;

            if (treGear.SelectedNode.Level > 0)
            {
                Gear objGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);

                if (objGear.IncludedInParent)
                    cmdDeleteGear.Enabled = false;
                lblGearName.Text = objGear.DisplayNameShort;
                lblGearCategory.Text = objGear.DisplayCategory;
                lblGearAvail.Text = objGear.TotalAvail(true);
                nudGearQty.Enabled = !objGear.DisableQuantity;
                nudGearQty.Increment = objGear.CostFor;
                try
                {
                    lblGearCost.Text = objGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat + '¥', GlobalOptions.CultureInfo);
                }
                catch (FormatException)
                {
                    lblGearCost.Text = objGear.Cost + "¥";
                }
                lblGearCapacity.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                string strBook = _objOptions.LanguageBookShort(objGear.Source);
                string strPage = objGear.Page;
                lblGearSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblGearSource, _objOptions.LanguageBookLong(objGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objGear.Page);

                if (objGear.GetType() == typeof(Commlink))
                {
                    Commlink objCommlink = (Commlink)objGear;

                    objCommlink.RefreshCommlinkCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);

                    lblGearDeviceRating.Text = objCommlink.GetTotalMatrixAttribute("Device Rating").ToString();

                    lblGearDeviceRating.Visible = true;
                    lblGearDeviceRatingLabel.Visible = true;
                    lblGearAttackLabel.Visible = true;
                    lblGearSleazeLabel.Visible = true;
                    lblGearDataProcessingLabel.Visible = true;
                    lblGearFirewallLabel.Visible = true;

                    chkActiveCommlink.Checked = objCommlink.IsActive;

                    if (objCommlink.Category != "Commlink Upgrade")
                        chkActiveCommlink.Visible = true;

                    if (_objCharacter.Metatype == "A.I.")
                    {
                        chkGearHomeNode.Visible = true;
                        chkGearHomeNode.Checked = objCommlink.HomeNode;
                    }
                }
                else
                {
                    lblGearDeviceRating.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    chkActiveCommlink.Visible = false;
                    cboGearAttack.Visible = false;
                    cboGearSleaze.Visible = false;
                    cboGearDataProcessing.Visible = false;
                    cboGearFirewall.Visible = false;
                    lblGearAttackLabel.Visible = false;
                    lblGearSleazeLabel.Visible = false;
                    lblGearDataProcessingLabel.Visible = false;
                    lblGearFirewallLabel.Visible = false;
                }

                if (objGear.MaxRating > 0)
                {
                    if (objGear.MinRating > 0)
                        nudGearRating.Minimum = objGear.MinRating;
                    else if (objGear.MinRating == 0 && objGear.Name.Contains("Credstick,"))
                        nudGearRating.Minimum = 0;
                    else
                        nudGearRating.Minimum = 1;
                    nudGearRating.Maximum = objGear.MaxRating;
                    nudGearRating.Value = objGear.Rating;
                    if (nudGearRating.Minimum == nudGearRating.Maximum)
                        nudGearRating.Enabled = false;
                    else
                        nudGearRating.Enabled = true;
                }
                else
                {
                    nudGearRating.Minimum = 0;
                    nudGearRating.Maximum = 0;
                    nudGearRating.Enabled = false;
                }

                //nudGearQty.Minimum = objGear.CostFor;
                nudGearQty.Increment = objGear.CostFor;
                if (objGear.Category == "Currency")
                {
                    nudGearQty.DecimalPlaces = 2;
                    nudGearQty.Minimum = 0.01m;
                }
                else
                {
                    nudGearQty.DecimalPlaces = 0;
                    nudGearQty.Minimum = 1.0m;
                }
                nudGearQty.Value = objGear.Quantity;

                if (treGear.SelectedNode.Level == 1)
                {
                    //nudGearQty.Minimum = objGear.CostFor;
                    chkGearEquipped.Visible = true;
                    chkGearEquipped.Checked = objGear.Equipped;
                }
                else
                {
                    //nudGearQty.Enabled = false;
                    chkGearEquipped.Visible = true;
                    chkGearEquipped.Checked = objGear.Equipped;

                    // If this is a Program, determine if its parent Gear (if any) is a Commlink. If so, show the Equipped checkbox.
                    if (objGear.IsProgram && _objOptions.CalculateCommlinkResponse)
                    {
                        Gear objParent = objGear.Parent;
                        if (!string.IsNullOrEmpty(objParent?.Category))
                        {
                            if (objParent.Category == "Commlinks" || objParent.Category == "Cyberdecks" || objParent.Category == "Nexus")
                                chkGearEquipped.Text = LanguageManager.GetString("Checkbox_SoftwareRunning");
                        }
                    }
                }

                // Show the Weapon Bonus information if it's available.
                if (objGear.WeaponBonus != null)
                {
                    lblGearDamageLabel.Visible = true;
                    lblGearDamage.Visible = true;
                    lblGearAPLabel.Visible = true;
                    lblGearAP.Visible = true;
                    lblGearDamage.Text = objGear.WeaponBonusDamage();
                    lblGearAP.Text = objGear.WeaponBonusAP;
                }
                else
                {
                    lblGearDamageLabel.Visible = false;
                    lblGearDamage.Visible = false;
                    lblGearAPLabel.Visible = false;
                    lblGearAP.Visible = false;
                }

                treGear.SelectedNode.Text = objGear.DisplayName;
            }
            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Update the Window title to show the Character's name and unsaved changes status.
        /// </summary>
        private void UpdateWindowTitle(bool blnCanSkip = true)
        {
            if (Text.EndsWith('*') && blnCanSkip)
                return;

            Text = string.Empty;
            if (!string.IsNullOrEmpty(txtAlias.Text))
                Text += txtAlias.Text + " - ";
            Text += LanguageManager.GetString("Title_CreateNewCharacter");
            Text += " (" + _objCharacter.Options.Name + ")";
            if (_blnIsDirty)
                Text += "*";
        }

        /// <summary>
        /// Save the Character.
        /// </summary>
        private bool SaveCharacter(bool blnNeedConfirm = true)
        {
            // If the Character does not have a file name, trigger the Save As menu item instead.
            if (string.IsNullOrEmpty(_objCharacter.FileName))
            {
                return SaveCharacterAs();
            }
            // If the Created is checked, make sure the user wants to actually save this character.
            if (chkCharacterCreated.Checked)
            {
                if (blnNeedConfirm && !ConfirmSaveCreatedCharacter())
                {
                    chkCharacterCreated.Checked = false;
                    return false;
                }
            }
            //if (_objCharacter.Created)
            //{
            //    foreach (Skill objSkill in _objCharacter.Skills)
            //    {
            //        if (objSkill.RatingMaximum == 6)
            //            objSkill.RatingMaximum = 12;
            //        else if (objSkill.RatingMaximum == 7)
            //            objSkill.RatingMaximum = 13;
            //    }
            //    foreach (SkillGroup objSkillGroup in _objCharacter.SkillGroups)
            //    {
            //        if (objSkillGroup.RatingMaximum == 6)
            //            objSkillGroup.RatingMaximum = 12;
            //    }
            //}

            Cursor = Cursors.WaitCursor;
            if (_objCharacter.Save())
            {
                _blnIsDirty = false;
                GlobalOptions.AddToMRUList(_objCharacter.FileName);
                UpdateWindowTitle(false);
                Cursor = Cursors.Default;

                // If this character has just been saved as Created, close this form and re-open the character which will open it in the Career window instead.
                if (chkCharacterCreated.Checked)
                {
                    SaveCharacterAsCreated();
                }

                return true;
            }
            Cursor = Cursors.Default;
            return false;
        }

        /// <summary>
        /// Save the Character using the Save As dialogue box.
        /// </summary>
        private bool SaveCharacterAs()
        {
            // If the Created is checked, make sure the user wants to actually save this character.
            if (chkCharacterCreated.Checked)
            {
                if (!ConfirmSaveCreatedCharacter())
                {
                    chkCharacterCreated.Checked = false;
                    return false;
                }
            }

            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Chummer5 Files (*.chum5)|*.chum5|All Files (*.*)|*.*";

            string strShowFileName = string.Empty;
            string[] strFile = _objCharacter.FileName.Split(Path.DirectorySeparatorChar);
            strShowFileName = strFile[strFile.Length - 1];

            if (string.IsNullOrEmpty(strShowFileName))
                strShowFileName = _objCharacter.Alias;

            saveFileDialog.FileName = strShowFileName;

            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                _objCharacter.FileName = saveFileDialog.FileName;
                return SaveCharacter(false);
            }

            return false;
        }

        /// <summary>
        /// Save the character as Created and re-open it in Career Mode.
        /// </summary>
        private void SaveCharacterAsCreated()
        {
            Cursor = Cursors.WaitCursor;
            // If the character was built with Karma, record their staring Karma amount (if any).
            if (_objCharacter.Karma > 0)
            {
                ExpenseLogEntry objKarma = new ExpenseLogEntry(_objCharacter);
                objKarma.Create(_objCharacter.Karma, "Starting Karma", ExpenseType.Karma, DateTime.Now);
                _objCharacter.ExpenseEntries.Add(objKarma);

                // Create an Undo entry so that the starting Karma amount can be modified if needed.
                ExpenseUndo objKarmaUndo = new ExpenseUndo();
                objKarmaUndo.CreateKarma(KarmaExpenseType.ManualAdd, string.Empty);
                objKarma.Undo = objKarmaUndo;
            }
	        if (_objCharacter.MetatypeCategory == "Shapeshifter")
	        {
		        List<CharacterAttrib> staging = new List<CharacterAttrib>();
		        XmlDocument xmlDoc = XmlManager.Load("metatypes.xml");
                string s = $"/chummer/metatypes/metatype[name = \"{_objCharacter.Metatype}\"]";
		        foreach (CharacterAttrib att in _objCharacter.AttributeSection.AttributeList)
		        {
			        CharacterAttrib newAtt = new CharacterAttrib(_objCharacter, att.Abbrev,
				        CharacterAttrib.AttributeCategory.Shapeshifter);
					_objCharacter.AttributeSection.CopyAttribute(att,newAtt, s, xmlDoc);
					staging.Add(newAtt);
		        }
		        foreach (CharacterAttrib att in staging)
		        {
					_objCharacter.AttributeSection.AttributeList.Add(att);
				}
	        }

	        // Create an Expense Entry for Starting Nuyen.
            ExpenseLogEntry objNuyen = new ExpenseLogEntry(_objCharacter);
            objNuyen.Create(_objCharacter.Nuyen, "Starting Nuyen", ExpenseType.Nuyen, DateTime.Now);
            _objCharacter.ExpenseEntries.Add(objNuyen);

            // Create an Undo entry so that the Starting Nuyen amount can be modified if needed.
            ExpenseUndo objNuyenUndo = new ExpenseUndo();
            objNuyenUndo.CreateNuyen(NuyenExpenseType.ManualAdd, string.Empty);
            objNuyen.Undo = objNuyenUndo;

            _blnSkipToolStripRevert = true;
            if (_objCharacter.Save())
            {
                Character objOpenCharacter = frmMain.LoadCharacter(_objCharacter.FileName);
                Cursor = Cursors.Default;
                GlobalOptions.MainForm.OpenCharacter(objOpenCharacter);
                Close();
            }
            else
            {
                Cursor = Cursors.Default;
            }
        }

        /// <summary>
        /// Open the Select Cyberware window and handle adding to the Tree and Character.
        /// </summary>
        private bool PickCyberware(Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Cyberware)
        {
            Cyberware objSelectedCyberware = null;
            int intNode = 0;
            if (objSource == Improvement.ImprovementSource.Bioware)
                intNode = 1;

            // Attempt to locate the selected piece of Cyberware.
            if (treCyberware.SelectedNode != null && treCyberware.SelectedNode.Level > 0)
                objSelectedCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);

            frmSelectCyberware frmPickCyberware = new frmSelectCyberware(_objCharacter, objSource, false, objSelectedCyberware?.MyXmlNode);
            decimal decMultiplier = 1.0m;
            // Apply the character's Cyberware Essence cost multiplier if applicable.
            if (objSource == Improvement.ImprovementSource.Cyberware)
            {
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.CyberwareEssCost) != 0)
                {
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareEssCost && objImprovement.Enabled)
                            decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                    }
                    frmPickCyberware.CharacterESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.CyberwareTotalEssMultiplier) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareTotalEssMultiplier && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.CyberwareEssCostNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareEssCostNonRetroactive && objImprovement.Enabled)
                            decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                    }
                    frmPickCyberware.CharacterESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.CyberwareTotalEssMultiplierNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareTotalEssMultiplierNonRetroactive && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
            }
            // Apply the character's Bioware Essence cost multiplier if applicable.
            else if (objSource == Improvement.ImprovementSource.Bioware)
            {
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.BiowareEssCost) != 0)
                {
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareEssCost && objImprovement.Enabled)
                            decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                    }
                    frmPickCyberware.CharacterESSMultiplier = decMultiplier;
                }
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.BiowareTotalEssMultiplier) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareTotalEssMultiplier && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.BiowareEssCostNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareEssCostNonRetroactive && objImprovement.Enabled)
                            decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                    }
                    frmPickCyberware.CharacterESSMultiplier = decMultiplier;
                }
                if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.BiowareTotalEssMultiplierNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in _objCharacter.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareTotalEssMultiplierNonRetroactive && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
            }

            // Apply the character's Basic Bioware Essence cost multiplier if applicable.
            if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.BasicBiowareEssCost) != 0 && objSource == Improvement.ImprovementSource.Bioware)
            {
                decMultiplier = 1.0m;
                foreach (Improvement objImprovement in _objCharacter.Improvements)
                {
                    if (objImprovement.ImproveType == Improvement.ImprovementType.BasicBiowareEssCost && objImprovement.Enabled)
                        decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                }
                frmPickCyberware.BasicBiowareESSMultiplier = decMultiplier;
            }

            // Genetech Cost multiplier.
            if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.GenetechCostMultiplier) != 0 && objSource == Improvement.ImprovementSource.Bioware)
            {
                decMultiplier = 1.0m;
                foreach (Improvement objImprovement in _objCharacter.Improvements)
                {
                    if (objImprovement.ImproveType == Improvement.ImprovementType.GenetechCostMultiplier && objImprovement.Enabled)
                        decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                }
                frmPickCyberware.GenetechCostMultiplier = decMultiplier;
            }

            // Transgenics Cost multiplier.
            if (ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.TransgenicsBiowareCost) != 0 && objSource == Improvement.ImprovementSource.Bioware)
            {
                decMultiplier = 1.0m;
                foreach (Improvement objImprovement in _objCharacter.Improvements)
                {
                    if (objImprovement.ImproveType == Improvement.ImprovementType.TransgenicsBiowareCost && objImprovement.Enabled)
                        decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                }
                frmPickCyberware.TransgenicsBiowareCostMultiplier = decMultiplier;
            }

            if (objSelectedCyberware != null)
            {
                frmPickCyberware.SetGrade = cboCyberwareGrade.SelectedValue.ToString();
                frmPickCyberware.LockGrade();
                // If the Cyberware has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                if (!objSelectedCyberware.Capacity.Contains('['))
                {
                    frmPickCyberware.Subsystems = objSelectedCyberware.AllowedSubsystems;
                    frmPickCyberware.MaximumCapacity = objSelectedCyberware.CapacityRemaining;
                }

                frmPickCyberware.Subsystems = objSelectedCyberware.AllowedSubsystems;
                HashSet<string> setDisallowedMounts = new HashSet<string>();
                HashSet<string> setHasMounts = new HashSet<string>();
                string[] strLoopDisallowedMounts = objSelectedCyberware.BlocksMounts.Split(',');
                foreach (string strLoop in strLoopDisallowedMounts)
                    setDisallowedMounts.Add(strLoop + objSelectedCyberware.Location);
                string strLoopHasModularMount = objSelectedCyberware.HasModularMount;
                if (!string.IsNullOrEmpty(strLoopHasModularMount))
                    setHasMounts.Add(strLoopHasModularMount);
                foreach (Cyberware objLoopCyberware in objSelectedCyberware.Children.DeepWhere(x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                {
                    strLoopDisallowedMounts = objLoopCyberware.BlocksMounts.Split(',');
                    foreach (string strLoop in strLoopDisallowedMounts)
                        if (!setDisallowedMounts.Contains(strLoop + objLoopCyberware.Location))
                            setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                    strLoopHasModularMount = objLoopCyberware.HasModularMount;
                    if (!string.IsNullOrEmpty(strLoopHasModularMount))
                        if (!setHasMounts.Contains(strLoopHasModularMount))
                            setHasMounts.Add(strLoopHasModularMount);
                }
                string strDisallowedMounts = string.Empty;
                foreach (string strLoop in setDisallowedMounts)
                    if (!strLoop.EndsWith("Right") && (!strLoop.EndsWith("Left") || setDisallowedMounts.Contains(strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                        strDisallowedMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strDisallowedMounts))
                    strDisallowedMounts = strDisallowedMounts.Substring(0, strDisallowedMounts.Length - 1);
                frmPickCyberware.DisallowedMounts = strDisallowedMounts;
                string strHasMounts = string.Empty;
                foreach (string strLoop in setHasMounts)
                    strHasMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strHasMounts))
                    strHasMounts = strHasMounts.Substring(0, strHasMounts.Length - 1);
                frmPickCyberware.HasModularMounts = strHasMounts;
            }
            frmPickCyberware.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickCyberware.DialogResult == DialogResult.Cancel)
                return false;

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = null;
            if (objSource == Improvement.ImprovementSource.Bioware)
                objXmlDocument = XmlManager.Load("bioware.xml");
            else
                objXmlDocument = XmlManager.Load("cyberware.xml");

            XmlNode objXmlCyberware;
            if (objSource == Improvement.ImprovementSource.Bioware)
                objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/biowares/bioware[name = \"" + frmPickCyberware.SelectedCyberware + "\"]");
            else
                objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + frmPickCyberware.SelectedCyberware + "\"]");

            // Create the Cyberware object.
            Cyberware objCyberware = new Cyberware(_objCharacter);

            List<Weapon> objWeapons = new List<Weapon>();
            TreeNode objNode = new TreeNode();
            objNode.ContextMenuStrip = cmsCyberware;
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            List<Vehicle> objVehicles = new List<Vehicle>();
            List<TreeNode> objVehicleNodes = new List<TreeNode>();
            objCyberware.Create(objXmlCyberware, _objCharacter, frmPickCyberware.SelectedGrade, objSource, frmPickCyberware.SelectedRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, true, true, string.Empty, objSelectedCyberware);
            if (objCyberware.InternalId == Guid.Empty.ToString())
                return false;
            objCyberware.DiscountCost = frmPickCyberware.BlackMarketDiscount;
            objCyberware.PrototypeTranshuman = frmPickCyberware.PrototypeTranshuman;
            // Force the item to be Transgenic if selected.
            if (frmPickCyberware.ForceTransgenic)
                objCyberware.Category = "Genetech: Transgenics";

            // Apply the ESS discount if applicable.
            if (_objOptions.AllowCyberwareESSDiscounts)
                objCyberware.ESSDiscount = frmPickCyberware.SelectedESSDiscount;

            if (frmPickCyberware.FreeCost)
                objCyberware.Cost = "0";

            if (objSelectedCyberware != null)
            {
                treCyberware.SelectedNode.Nodes.Add(objNode);
                treCyberware.SelectedNode.Expand();
                objSelectedCyberware.Children.Add(objCyberware);
            }
            else
            {
                treCyberware.Nodes[intNode].Nodes.Add(objNode);
                treCyberware.Nodes[intNode].Expand();
                _objCharacter.Cyberware.Add(objCyberware);
            }

            foreach (Weapon objWeapon in objWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            // Create the Weapon Node if one exists.
            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            foreach (Vehicle objVehicle in objVehicles)
                _objCharacter.Vehicles.Add(objVehicle);

            // Create the Vehicle Node if one exists.
            foreach (TreeNode objVehicleNode in objVehicleNodes)
            {
                objVehicleNode.ContextMenuStrip = cmsVehicle;
                treVehicles.Nodes[0].Nodes.Add(objVehicleNode);
                treVehicles.Nodes[0].Expand();
            }

            treCyberware.SortCustom();
            treCyberware.SelectedNode = objNode;
            _blnSkipRefresh = true;
            PopulateCyberwareGradeList();
            _blnSkipRefresh = false;
            ScheduleCharacterUpdate();
            RefreshSelectedCyberware();
            RefreshQualities(treQualities,cmsQuality);
            treQualities.SortCustom();

            _blnIsDirty = true;
            PopulateGearList();
            UpdateWindowTitle();

            return frmPickCyberware.AddAgain;
        }

        /// <summary>
        /// Select a piece of Gear to be added to the character.
        /// </summary>
        private bool PickGear()
        {
            bool blnNullParent = false;
            Gear objSelectedGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
            if (objSelectedGear == null)
            {
                objSelectedGear = new Gear(_objCharacter);
                blnNullParent = true;
            }

            // Open the Gear XML file and locate the selected Gear.
            XmlNode objXmlGear = blnNullParent ? null : objSelectedGear.MyXmlNode;

            bool blnFakeCareerMode = false;
            if (_objCharacter.Metatype.Contains("A.I.") || _objCharacter.MetatypeCategory == "Protosapients")
                blnFakeCareerMode = true;
            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, blnFakeCareerMode, objSelectedGear.ChildAvailModifier, objSelectedGear.ChildCostMultiplier, objXmlGear);
            if (treGear.SelectedNode != null && treGear.SelectedNode.Level > 0)
            {
                if (objXmlGear != null && objXmlGear.InnerXml.Contains("<addoncategory>"))
                {
                    string strCategories = string.Empty;
                    foreach (XmlNode objXmlCategory in objXmlGear.SelectNodes("addoncategory"))
                        strCategories += objXmlCategory.InnerText + ",";
                    // Remove the trailing comma.
                    if (strCategories.Length > 0)
                        strCategories = strCategories.Substring(0, strCategories.Length - 1);
                    frmPickGear.AllowedCategories = strCategories;
                }

                // If the Gear has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                if (!objSelectedGear.Capacity.Contains('['))
                    frmPickGear.MaximumCapacity = objSelectedGear.CapacityRemaining;
            }

            frmPickGear.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return false;

            TreeNode objNode = new TreeNode();

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Gear objNewGear = null; 

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating);
                objCommlink.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objCommlink.DisplayName;

                // If a Commlink has just been added, see if the character already has one. If not, make it the active Commlink.
                if (_objCharacter.ActiveCommlink == null)
                {
                    objCommlink.IsActive = true;
                }

                objNewGear = objCommlink;
            }
            else
            {
                Gear objGear = new Gear(_objCharacter);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, frmPickGear.Hacked, frmPickGear.InherentProgram, true, true, frmPickGear.Aerodynamic);
                objGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objGear.DisplayName;

                objNewGear = objGear;
            }
            objNewGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return false;

            // reduce the cost for Black Market Pipeline
            objNewGear.DiscountCost = frmPickGear.BlackMarketDiscount;
            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objNewGear.Cost = (Convert.ToDouble(objNewGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // Reduce the cost to 10% for Hacked programs.
            if (frmPickGear.Hacked)
            {
                if (!string.IsNullOrEmpty(objNewGear.Cost))
                    objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.1";
                if (string.IsNullOrEmpty(objNewGear.Extra))
                    objNewGear.Extra = LanguageManager.GetString("Label_SelectGear_Hacked");
                else
                    objNewGear.Extra += ", " + LanguageManager.GetString("Label_SelectGear_Hacked");
            }
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objNewGear.Cost = "0";
            }

            // Create any Weapons that came with this Gear.
            foreach (Weapon objWeapon in objWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            objNewGear.Parent = objSelectedGear;
            if (blnNullParent)
                objNewGear.Parent = null;

            if (treGear.SelectedNode != null && treGear.SelectedNode.Level > 0 && !blnNullParent)
            {
                objNode.ContextMenuStrip = cmsGear;
                treGear.SelectedNode.Nodes.Add(objNode);
                treGear.SelectedNode.Expand();
                objSelectedGear.Children.Add(objNewGear);
                Commlink objSelectedCommlink = objSelectedGear as Commlink;
                if (objSelectedCommlink?.CanSwapAttributes == true)
                {
                    objSelectedCommlink.RefreshCyberdeckArray();
                }
            }
            else
            {
                objNode.ContextMenuStrip = cmsGear;
                treGear.Nodes[0].Nodes.Add(objNode);
                treGear.Nodes[0].Expand();
                _objCharacter.Gear.Add(objNewGear);
            }

            // Select the node that was just added.
            if (objNode.Level < 2)
                treGear.SelectedNode = objNode;

            if (objNewGear.AllowRename)
            {
                objNode.ContextMenuStrip = cmsGearAllowRename;
            }

            ScheduleCharacterUpdate();
            RefreshSelectedGear();

            _blnIsDirty = true;
            UpdateWindowTitle();

            return frmPickGear.AddAgain;
        }

        /// <summary>
        /// Select a piece of Gear and add it to a piece of Armor.
        /// </summary>
        /// <param name="blnShowArmorCapacityOnly">Whether or not only items that consume capacity should be shown.</param>
        private bool PickArmorGear(bool blnShowArmorCapacityOnly = false)
        {
            Gear objSelectedGear = null;
            Armor objSelectedArmor = CommonFunctions.FindById(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            ArmorMod objSelectedMod = null;

            if (treArmor.SelectedNode.Level > 1)
            {
                objSelectedGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor, out objSelectedArmor, out objSelectedMod);
                if (objSelectedGear == null)
                    objSelectedMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
            }

            // Open the Gear XML file and locate the selected Gear.
            XmlNode objXmlGear = objSelectedGear?.MyXmlNode;

            bool blnFakeCareerMode = false;
            if (_objCharacter.Metatype.Contains("A.I.") || _objCharacter.MetatypeCategory == "Protosapients")
                blnFakeCareerMode = true;
            XmlNode objXmlParentNode = objXmlGear;
            if (objXmlParentNode == null && objSelectedMod != null)
                objXmlParentNode = objSelectedMod.MyXmlNode;
            if (objXmlParentNode == null)
                objXmlParentNode = objSelectedArmor.MyXmlNode;
            frmSelectGear frmPickGear = new frmSelectGear(_objCharacter, blnFakeCareerMode, 0, 1, objXmlParentNode);
            frmPickGear.ShowArmorCapacityOnly = blnShowArmorCapacityOnly;
            if (objSelectedMod != null)
                frmPickGear.CapacityDisplayStyle = CapacityStyle.Standard;
            else
                frmPickGear.CapacityDisplayStyle = objSelectedArmor.CapacityDisplayStyle;
            if (treArmor.SelectedNode != null)
            {
                if (objXmlParentNode?.InnerXml.Contains("<addoncategory>") == true)
                {
                    string strCategories = string.Empty;
                    foreach (XmlNode objXmlCategory in objXmlParentNode.SelectNodes("addoncategory"))
                        strCategories += objXmlCategory.InnerText + ",";
                    // Remove the trailing comma.
                    if (strCategories.Length > 0)
                        strCategories = strCategories.Substring(0, strCategories.Length - 1);
                    frmPickGear.AllowedCategories = strCategories;
                }

                // If the Gear has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                if (objSelectedGear?.Capacity.Contains('[') == false)
                    frmPickGear.MaximumCapacity = objSelectedGear.CapacityRemaining;
                else if (objSelectedMod != null)
                    frmPickGear.MaximumCapacity = objSelectedMod.GearCapacityRemaining;
            }
            frmPickGear.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return false;

            TreeNode objNode = new TreeNode();

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Gear objNewGear = null;

            if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
            {
                Commlink objCommlink = new Commlink(_objCharacter);
                objCommlink.Create(objXmlGear, objNode, frmPickGear.SelectedRating);
                objCommlink.Quantity = frmPickGear.SelectedQty;

                objNewGear = objCommlink;
            }
            else
            {
                objNewGear = new Gear(_objCharacter);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, false, false, true, true, frmPickGear.Aerodynamic);
                objNewGear.Quantity = frmPickGear.SelectedQty;
            }
            objNewGear.DiscountCost = frmPickGear.BlackMarketDiscount;

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return false;

            if (objSelectedGear != null)
                objNewGear.Parent = objSelectedGear;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objNewGear.Cost = (Convert.ToDouble(objNewGear.Cost, GlobalOptions.InvariantCultureInfo) * 0.5).ToString(GlobalOptions.InvariantCultureInfo);
            // If the item was marked as free, change its cost.
            if (frmPickGear.FreeCost)
            {
                objNewGear.Cost = "0";
            }

            // Create any Weapons that came with this Gear.
            foreach (Weapon objWeapon in objWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            bool blnMatchFound = false;
            // If this is Ammunition, see if the character already has it on them.
            if (objNewGear.Category == "Ammunition")
            {
                foreach (Gear objCharacterGear in _objCharacter.Gear)
                {
                    if (objNewGear.IsIdenticalToOtherGear(objCharacterGear))
                    {
                        // A match was found, so increase the quantity instead.
                        objCharacterGear.Quantity += objNewGear.Quantity;
                        blnMatchFound = true;

                        foreach (TreeNode objGearNode in treGear.Nodes[0].Nodes)
                        {
                            if (objCharacterGear.InternalId == objGearNode.Tag.ToString())
                            {
                                objGearNode.Text = objCharacterGear.DisplayName;
                                treGear.SelectedNode = objGearNode;
                                break;
                            }
                        }

                        break;
                    }
                }
            }

            // Add the Gear.
            if (!blnMatchFound)
            {
                objNode.ContextMenuStrip = cmsArmorGear;
                treArmor.SelectedNode.Nodes.Add(objNode);
                treArmor.SelectedNode.Expand();
                if (!string.IsNullOrEmpty(objSelectedGear?.Name))
                {
                    objSelectedGear.Children.Add(objNewGear);
                    Commlink objCommlink = objSelectedGear as Commlink;
                    if (objCommlink?.CanSwapAttributes == true)
                    {
                        objCommlink.RefreshCyberdeckArray();
                    }
                }
                else if (!string.IsNullOrEmpty(objSelectedMod?.Name))
                {
                    objSelectedMod.Gear.Add(objNewGear);
                }
                else
                {
                    objSelectedArmor.Gear.Add(objNewGear);
                }

                // Select the node that was just added.
                treGear.SelectedNode = objNode;
            }

            ScheduleCharacterUpdate();
            RefreshSelectedArmor();

            _blnIsDirty = true;
            UpdateWindowTitle();

            return frmPickGear.AddAgain;
        }

        /// <summary>
        /// Refresh the currently-selected Lifestyle.
        /// </summary>
        private void RefreshSelectedLifestyle()
        {
            _blnSkipRefresh = true;
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level <= 0)
            {
                lblLifestyleCost.Text = string.Empty;
                lblLifestyleTotalCost.Text = string.Empty;
                lblLifestyleSource.Text = string.Empty;
                tipTooltip.SetToolTip(lblLifestyleSource, null);
                lblLifestyleQualities.Text = string.Empty;
                nudLifestyleMonths.Enabled = false;
                _blnSkipRefresh = false;
                return;
            }

            nudLifestyleMonths.Enabled = true;

            // Locate the selected Lifestyle.
            Lifestyle objLifestyle = CommonFunctions.FindByIdWithNameCheck(treLifestyles.SelectedNode.Tag.ToString(), _objCharacter.Lifestyles);
            if (objLifestyle == null)
            {
                _blnSkipRefresh = false;
                return;
            }

            lblLifestyleCost.Text = objLifestyle.TotalMonthlyCost.ToString(_objCharacter.Options.NuyenFormat) + '¥';
            nudLifestyleMonths.Value = Convert.ToDecimal(objLifestyle.Months, GlobalOptions.InvariantCultureInfo);
            lblLifestyleStartingNuyen.Text = objLifestyle.Dice.ToString() + "D6 x " + objLifestyle.Multiplier.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
            string strBook = _objOptions.LanguageBookShort(objLifestyle.Source);
            string strPage = objLifestyle.Page;
            lblLifestyleSource.Text = strBook + " " + strPage;
            tipTooltip.SetToolTip(lblLifestyleSource, _objOptions.LanguageBookLong(objLifestyle.Source) + " " + LanguageManager.GetString("String_Page") + " " + objLifestyle.Page);
            lblLifestyleTotalCost.Text = objLifestyle.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

            // Change the Cost/Month label.
            if (objLifestyle.StyleType == LifestyleType.Safehouse)
                lblLifestyleCostLabel.Text = LanguageManager.GetString("Label_SelectLifestyle_CostPerWeek");
            else
                lblLifestyleCostLabel.Text = LanguageManager.GetString("Label_SelectLifestyle_CostPerMonth");

            if (!string.IsNullOrEmpty(objLifestyle.BaseLifestyle))
            {
                string strQualities = string.Join(", ", objLifestyle.LifestyleQualities.Select(r => r.FormattedDisplayName));

                lblLifestyleQualities.Text = string.Empty;

                foreach (Improvement objImprovement in _objCharacter.Improvements.Where(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.LifestyleCost))
                {
                    if (strQualities.Length > 0)
                        strQualities += ", ";

                    strQualities += objImprovement.Value > 0
                        ? objImprovement.ImproveSource + " [+" + objImprovement.Value.ToString() + "%]"
                        : objImprovement.ImproveSource + " [" + objImprovement.Value.ToString() + "%]";
                }

                if (strQualities.Length > 0)
                    strQualities += ", ";

                strQualities += string.Join(", ", objLifestyle.FreeGrids.Select(r => r.DisplayName));

                if (strQualities.EndsWith(", "))
                {
                    strQualities = strQualities.Substring(0, strQualities.Length - 2);
                }

                lblBaseLifestyle.Text = objLifestyle.BaseLifestyle;
                lblLifestyleQualities.Text += strQualities;

                nudLifestyleMonths.Enabled = true;
            }
            else
            {
                lblBaseLifestyle.Text = string.Empty;
                lblLifestyleQualities.Text = string.Empty;
            }

            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Switches the visibility of Weapon attributes on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleWeaponStats(bool blnDisplay)
        {
            lblVehicleWeaponName.Visible = blnDisplay;
            lblVehicleWeaponCategory.Visible = blnDisplay;
            lblVehicleWeaponAP.Visible = blnDisplay;
            lblVehicleWeaponDamage.Visible = blnDisplay;
            lblVehicleWeaponMode.Visible = blnDisplay;
            lblVehicleWeaponAmmo.Visible = blnDisplay;

            lblVehicleWeaponRangeShort.Visible = blnDisplay;
            lblVehicleWeaponRangeMedium.Visible = blnDisplay;
            lblVehicleWeaponRangeLong.Visible = blnDisplay;
            lblVehicleWeaponRangeExtreme.Visible = blnDisplay;

            lblVehicleWeaponNameLabel.Visible = blnDisplay;
            lblVehicleWeaponCategoryLabel.Visible = blnDisplay;
            lblVehicleWeaponAPLabel.Visible = blnDisplay;
            lblVehicleWeaponDamageLabel.Visible = blnDisplay;
            lblVehicleWeaponModeLabel.Visible = blnDisplay;
            lblVehicleWeaponAmmoLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeLabel.Visible = blnDisplay;

            lblVehicleWeaponRangeMain.Visible = blnDisplay;
            lblVehicleWeaponRangeAlternate.Visible = blnDisplay;
            lblVehicleWeaponRangeShortLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeMediumLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeLongLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeExtremeLabel.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeShort.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeMedium.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeLong.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeExtreme.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Commlink attributes on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleCommlinkStats(bool blnDisplay)
        {
            cboVehicleGearAttack.Visible = blnDisplay;
            cboVehicleGearSleaze.Visible = blnDisplay;
            cboVehicleGearDataProcessing.Visible = blnDisplay;
            cboVehicleGearFirewall.Visible = blnDisplay;
            lblVehicleAttackLabel.Visible = blnDisplay;
            lblVehicleSleazeLabel.Visible = blnDisplay;
            lblVehicleDataProcessingLabel.Visible = blnDisplay;
            lblVehicleFirewallLabel.Visible = blnDisplay;
            lblVehicleDevice.Visible = blnDisplay;
            lblVehicleDeviceLabel.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Commlink attributes on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleStats(bool blnDisplay)
        {
            lblVehicleHandling.Visible = blnDisplay;
            lblVehicleAccel.Visible = blnDisplay;
            lblVehicleSpeed.Visible = blnDisplay;
            lblVehicleDevice.Visible = blnDisplay;
            lblVehiclePilot.Visible = blnDisplay;
            lblVehicleBody.Visible = blnDisplay;
            lblVehicleArmor.Visible = blnDisplay;
            lblVehicleSensor.Visible = blnDisplay;
            lblVehicleHandlingLabel.Visible = blnDisplay;
            lblVehicleAccelLabel.Visible = blnDisplay;
            lblVehicleSpeedLabel.Visible = blnDisplay;
            lblVehicleDeviceLabel.Visible = blnDisplay;
            lblVehiclePilotLabel.Visible = blnDisplay;
            lblVehicleBodyLabel.Visible = blnDisplay;
            lblVehicleArmorLabel.Visible = blnDisplay;
            lblVehicleSensorLabel.Visible = blnDisplay;
            lblVehiclePowertrainLabel.Visible = blnDisplay;
            lblVehiclePowertrain.Visible = blnDisplay;
            lblVehicleCosmeticLabel.Visible = blnDisplay;
            lblVehicleCosmetic.Visible = blnDisplay;
            lblVehicleElectromagneticLabel.Visible = blnDisplay;
            lblVehicleElectromagnetic.Visible = blnDisplay;
            lblVehicleBodymodLabel.Visible = blnDisplay;
            lblVehicleBodymod.Visible = blnDisplay;
            lblVehicleWeaponsmodLabel.Visible = blnDisplay;
            lblVehicleWeaponsmod.Visible = blnDisplay;
            lblVehicleProtectionLabel.Visible = blnDisplay;
            lblVehicleProtection.Visible = blnDisplay;
            lblVehicleDroneModSlotsLabel.Visible = blnDisplay;
            lblVehicleDroneModSlots.Visible = blnDisplay;
            lblVehicleSeatsLabel.Visible = blnDisplay;
            lblVehicleSeats.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Vehicle (non-drone) Mods on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleMods(bool blnDisplay)
        {
            lblVehiclePowertrainLabel.Visible = blnDisplay;
            lblVehiclePowertrain.Visible = blnDisplay;
            lblVehicleCosmeticLabel.Visible = blnDisplay;
            lblVehicleCosmetic.Visible = blnDisplay;
            lblVehicleElectromagneticLabel.Visible = blnDisplay;
            lblVehicleElectromagnetic.Visible = blnDisplay;
            lblVehicleBodymodLabel.Visible = blnDisplay;
            lblVehicleBodymod.Visible = blnDisplay;
            lblVehicleWeaponsmodLabel.Visible = blnDisplay;
            lblVehicleWeaponsmod.Visible = blnDisplay;
            lblVehicleProtectionLabel.Visible = blnDisplay;
            lblVehicleProtection.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Drone Mods on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleDroneMods(bool blnDisplay)
        {
            lblVehicleDroneModSlotsLabel.Visible = blnDisplay;
            lblVehicleDroneModSlots.Visible = blnDisplay;
        }

        /// <summary>
        /// Refresh the currently-selected Vehicle.
        /// </summary>
        private void RefreshSelectedVehicle()
        {
            _blnSkipRefresh = true;
            cmdDeleteVehicle.Enabled = treVehicles.SelectedNode != null;
            cmdVehicleCyberwareChangeMount.Visible = false;
            nudVehicleGearQty.Enabled = false;
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level <= 0 || treVehicles.SelectedNode.Tag.ToString() == "String_WeaponMounts")
            {
                nudVehicleRating.Enabled = false;

                DisplayVehicleWeaponStats(false);
                DisplayVehicleCommlinkStats(false);
                DisplayVehicleStats(false);
                lblVehicleCategory.Text = string.Empty;
                lblVehicleName.Text = string.Empty;
                lblVehicleAvail.Text = string.Empty;
                lblVehicleCost.Text = string.Empty;
                lblVehicleSource.Text = string.Empty;

                chkVehicleWeaponAccessoryInstalled.Enabled = false;
                _blnSkipRefresh = false;
                return;
            }
            chkVehicleHomeNode.Visible = false;

            // Locate the selected Vehicle.
            
            if (treVehicles.SelectedNode.Level == 1)
            {
                Vehicle objVehicle = CommonFunctions.FindByIdWithNameCheck(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objVehicle == null)
                {
                    _blnSkipRefresh = false;
                    return;
                }
                if (!string.IsNullOrEmpty(objVehicle.ParentID))
                    cmdDeleteVehicle.Enabled = false;
                lblVehicleRatingLabel.Visible = false;
                nudVehicleRating.Minimum = 0;
                nudVehicleRating.Maximum = 0;
                nudVehicleRating.Enabled = false;
                nudVehicleRating.Visible = false;

                lblVehicleName.Text = objVehicle.DisplayNameShort;
                lblVehicleNameLabel.Visible = true;
                lblVehicleCategory.Text = objVehicle.DisplayCategory;
                lblVehicleCategoryLabel.Visible = true;
                lblVehicleAvailLabel.Visible = true;
                lblVehicleAvail.Text = objVehicle.CalculatedAvail;
                lblVehicleCostLabel.Visible = true;
                lblVehicleCost.Text = objVehicle.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblVehicleHandling.Text = objVehicle.TotalHandling.ToString();
                lblVehicleAccel.Text = objVehicle.TotalAccel.ToString();
                lblVehicleSpeed.Text = objVehicle.TotalSpeed.ToString();
                lblVehicleDevice.Text = objVehicle.DeviceRating.ToString();
                lblVehiclePilot.Text = objVehicle.Pilot.ToString();
                lblVehicleBody.Text = objVehicle.TotalBody.ToString();
                lblVehicleArmor.Text = objVehicle.TotalArmor.ToString();
                lblVehicleSeats.Text = objVehicle.TotalSeats.ToString();

                // Update the vehicle mod slots
                if (objVehicle.IsDrone && GlobalOptions.Dronemods)
                {
                    lblVehicleDroneModSlots.Text = objVehicle.DroneModSlotsUsed + "/" + objVehicle.DroneModSlots;
                }
                else
                {
                    lblVehiclePowertrain.Text = objVehicle.PowertrainModSlotsUsed();
                    lblVehicleCosmetic.Text = objVehicle.CosmeticModSlotsUsed();
                    lblVehicleElectromagnetic.Text = objVehicle.ElectromagneticModSlotsUsed();
                    lblVehicleBodymod.Text = objVehicle.BodyModSlotsUsed();
                    lblVehicleWeaponsmod.Text = objVehicle.WeaponModSlotsUsed();
                    lblVehicleProtection.Text = objVehicle.ProtectionModSlotsUsed();

                    tipTooltip.SetToolTip(lblVehiclePowertrainLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity"));
                    tipTooltip.SetToolTip(lblVehicleCosmeticLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity"));
                    tipTooltip.SetToolTip(lblVehicleElectromagneticLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity"));
                    tipTooltip.SetToolTip(lblVehicleBodymodLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity"));
                    tipTooltip.SetToolTip(lblVehicleWeaponsmodLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity"));
                    tipTooltip.SetToolTip(lblVehicleProtectionLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity"));
                }

                nudVehicleGearQty.Visible = true;
                lblVehicleGearQtyLabel.Visible = true;

                lblVehicleSensor.Text = objVehicle.CalculatedSensor.ToString();
                UpdateSensor(objVehicle);

                lblVehicleSlots.Text = objVehicle.Slots.ToString() + " (" + (objVehicle.Slots - objVehicle.SlotsUsed).ToString() + " " + LanguageManager.GetString("String_Remaining") + ")";
                string strBook = _objOptions.LanguageBookShort(objVehicle.Source);
                string strPage = objVehicle.Page;
                lblVehicleSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objVehicle.Source) + " " + LanguageManager.GetString("String_Page") + " " + objVehicle.Page);
                chkVehicleWeaponAccessoryInstalled.Enabled = false;
                chkVehicleIncludedInWeapon.Checked = false;

                if (_objCharacter.Metatype.Contains("A.I.") || _objCharacter.MetatypeCategory == "Protosapients")
                {
                    chkVehicleHomeNode.Visible = true;
                    chkVehicleHomeNode.Checked = objVehicle.HomeNode;
                }

                DisplayVehicleWeaponStats(false);
                DisplayVehicleCommlinkStats(false);
                DisplayVehicleStats(true);
                if (_objOptions.BookEnabled("R5"))
                {
                    lblVehicleSlotsLabel.Visible = false;
                    lblVehicleSlots.Visible = false;

                    DisplayVehicleDroneMods(objVehicle.IsDrone && GlobalOptions.Dronemods);
                    DisplayVehicleMods(!(objVehicle.IsDrone && GlobalOptions.Dronemods));
                }
                else
                {
                    DisplayVehicleMods(false);
                    DisplayVehicleDroneMods(false);
                    lblVehicleSlotsLabel.Visible = true;
                    lblVehicleSlots.Visible = true;
                }
            }
            else if (treVehicles.SelectedNode.Level == 2)
            {
                bool hide = false;
                // If this is a Vehicle Location or Weapon Mount group, don't do anything.
                foreach (Vehicle objVehicle in _objCharacter.Vehicles.Where(v => v.InternalId == treVehicles.SelectedNode.Parent.Tag.ToString()))
                {
                    hide = objVehicle.Locations.Any(location => location == treVehicles.SelectedNode.Tag.ToString());
                    break;
                }
                if (hide)
                {
                    DisplayVehicleWeaponStats(false);
                    DisplayVehicleCommlinkStats(false);
                    DisplayVehicleStats(false);

                    nudVehicleGearQty.Visible = false;
                    lblVehicleGearQtyLabel.Visible = false;
                    chkVehicleIncludedInWeapon.Visible = false;
                    chkVehicleWeaponAccessoryInstalled.Visible = false;
                    _blnSkipRefresh = false;
                    return;
                }                

                bool blnVehicleMod = false;

                // Locate the selected VehicleMod.
                Vehicle objSelectedVehicle = null;
                VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objSelectedVehicle);
                if (objMod != null)
                {
                    blnVehicleMod = true;
                    if (objMod.IncludedInVehicle)
                        cmdDeleteVehicle.Enabled = false;
                    if (objMod.MaxRating != "qty")
                    {
                        if (objMod.MaxRating == "Seats")
                        {
                            objMod.MaxRating = objSelectedVehicle.Seats.ToString();
                        }
                        if (objMod.MaxRating == "body")
                        {
                            objMod.MaxRating = objSelectedVehicle.Body.ToString();
                        }
                        if (Convert.ToInt32(objMod.MaxRating) > 0)
                        {
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                            lblVehicleRatingLabel.Visible = true;
                            // If the Mod is Armor, use the lower of the Mod's maximum Rating and MaxArmor value for the Vehicle instead.
                            if (objMod.Name.StartsWith("Armor,"))
                                nudVehicleRating.Maximum = Math.Min(Convert.ToInt32(objMod.MaxRating), objSelectedVehicle.MaxArmor);
                            else
                                nudVehicleRating.Maximum = Convert.ToInt32(objMod.MaxRating);
                            nudVehicleRating.Minimum = 1;
                            nudVehicleRating.Visible = true;
                            nudVehicleRating.Value = objMod.Rating;
                            nudVehicleRating.Increment = 1;
                            nudVehicleRating.Enabled = !objMod.IncludedInVehicle;
                        }
                        else
                        {
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                            lblVehicleRatingLabel.Visible = false;
                            nudVehicleRating.Minimum = 0;
                            nudVehicleRating.Increment = 1;
                            nudVehicleRating.Maximum = 0;
                            nudVehicleRating.Enabled = false;
                            nudVehicleRating.Visible = false;
                        }
                    }
                    else
                    {
                        lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Qty");
                        lblVehicleRatingLabel.Visible = false;
                        nudVehicleRating.Visible = true;
                        nudVehicleRating.Minimum = 1;
                        nudVehicleRating.Maximum = 20;
                        nudVehicleRating.Value = objMod.Rating;
                        nudVehicleRating.Increment = 1;
                        nudVehicleRating.Enabled = !objMod.IncludedInVehicle;
                    }
                    DisplayVehicleStats(false);
                    DisplayVehicleWeaponStats(false);
                    DisplayVehicleCommlinkStats(false);

                    lblVehicleName.Text = objMod.DisplayNameShort;
                    lblVehicleNameLabel.Visible = true;
                    lblVehicleCategoryLabel.Visible = true;
                    lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleModification");
                    lblVehicleAvailLabel.Visible = true;
                    lblVehicleAvail.Text = objMod.TotalAvail;
                    lblVehicleCostLabel.Visible = true;
                    lblVehicleCost.Text = objMod.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

                    nudVehicleGearQty.Visible = true;
                    lblVehicleGearQtyLabel.Visible = true;

                    lblVehicleSlots.Text = objMod.CalculatedSlots.ToString();
                    string strBook = _objOptions.LanguageBookShort(objMod.Source);
                    string strPage = objMod.Page;
                    lblVehicleSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objMod.Source) + " " + LanguageManager.GetString("String_Page") + " " + objMod.Page);
                }
                else
                {
                    // If it's not a Vehicle Mod then it must be a Sensor.
                    Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                    if (objGear != null)
                    {
                        if (objGear.IncludedInParent)
                            cmdDeleteVehicle.Enabled = false;
                        nudVehicleRating.Enabled = false;
                        nudVehicleGearQty.Enabled = !objGear.DisableQuantity;
                        if (objGear.Category == "Currency")
                        {
                            nudVehicleGearQty.DecimalPlaces = 2;
                            nudVehicleGearQty.Minimum = 0.01m;
                        }
                        else
                        {
                            nudVehicleGearQty.DecimalPlaces = 0;
                            nudVehicleGearQty.Minimum = 1.0m;
                        }
                        nudVehicleGearQty.Value = objGear.Quantity;
                        nudVehicleGearQty.Increment = objGear.CostFor;
                        nudVehicleGearQty.Visible = true;
                        lblVehicleGearQtyLabel.Visible = true;

                        if (objGear.MaxRating > 0)
                        {
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                            lblVehicleRatingLabel.Visible = true;
                            nudVehicleRating.Visible = true;
                            nudVehicleRating.Enabled = true;
                            nudVehicleRating.Maximum = objGear.MaxRating;
                            nudVehicleRating.Value = objGear.Rating;
                        }

                        lblVehicleName.Text = objGear.DisplayNameShort;
                        lblVehicleCategory.Text = objGear.DisplayCategory;
                        lblVehicleAvail.Text = objGear.TotalAvail(true);
                        lblVehicleCost.Text = objGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        DisplayVehicleStats(false);
                        DisplayVehicleWeaponStats(false);
                        DisplayVehicleCommlinkStats(false);

                        lblVehicleSlots.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                        string strBook = _objOptions.LanguageBookShort(objGear.Source);
                        string strPage = objGear.Page;
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objGear.Page);

                        if (objGear.GetType() == typeof(Commlink))
                        {
                            Commlink objCommlink = (Commlink)objGear;

                            objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                            DisplayVehicleWeaponStats(false);
                            DisplayVehicleCommlinkStats(true);

                            if (_objCharacter.Metatype == "A.I.")
                            {
                                chkVehicleHomeNode.Visible = true;
                                chkVehicleHomeNode.Checked = objCommlink.HomeNode;
                            }
                        }
                    }
                    else
                    {
                        // Look for the selected Vehicle Weapon.
                        Weapon objWeapon = null;
                        Vehicle objCurrentVehicle = null;

                        foreach (Vehicle objVehicle in _objCharacter.Vehicles)
                        {
                            objWeapon = CommonFunctions.DeepFindById(treVehicles.SelectedNode.Tag.ToString(), objVehicle.Weapons);
                            if (objWeapon != null)
                            {
                                objCurrentVehicle = objVehicle;
                                break;
                            }
                        }

                        nudVehicleRating.Enabled = false;

                        DisplayVehicleWeaponStats(true);
                        DisplayVehicleCommlinkStats(false);
                        DisplayVehicleStats(false);

                        if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                            cmdDeleteVehicle.Enabled = false;
                        lblVehicleWeaponName.Text = objWeapon.DisplayNameShort;
                        lblVehicleWeaponCategory.Text = objWeapon.DisplayCategory;
                        lblVehicleWeaponDamage.Text = objWeapon.CalculatedDamage();
                        lblVehicleWeaponAP.Text = objWeapon.TotalAP;
                        lblVehicleWeaponAmmo.Text = objWeapon.CalculatedAmmo();
                        lblVehicleWeaponMode.Text = objWeapon.CalculatedMode;

                        lblVehicleWeaponRangeMain.Text = objWeapon.Range;
                        lblVehicleWeaponRangeAlternate.Text = objWeapon.AlternateRange;
                        Dictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblVehicleWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblVehicleWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblVehicleWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblVehicleWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblVehicleWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblVehicleWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblVehicleWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblVehicleWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                        lblVehicleName.Text = objWeapon.DisplayNameShort;
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeapon");
                        lblVehicleAvail.Text = objWeapon.TotalAvail;
                        lblVehicleCost.Text = objWeapon.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleSlots.Text = string.Empty;
                        string strBook = _objOptions.LanguageBookShort(objWeapon.Source);
                        string strPage = objWeapon.Page;
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objWeapon.Source) + " " + LanguageManager.GetString("String_Page") + " " + objWeapon.Page);

                        // Determine the Dice Pool size.
                        int intPilot = objCurrentVehicle.Pilot;
                        int intAutosoft = 0;
                        foreach (Gear objAutosoft in objCurrentVehicle.Gear)
                        {
                            if (objAutosoft.Extra == objWeapon.DisplayCategory && (objAutosoft.Name == "[Weapon] Targeting Autosoft" || objAutosoft.Name == "[Weapon] Melee Autosoft"))
                            {
                                if (objAutosoft.Rating > intAutosoft)
                                {
                                    intAutosoft = objAutosoft.Rating;
                                }
                            }
                        }
                        if (intAutosoft == 0)
                            intPilot -= 1;
                        lblVehicleWeaponDicePool.Text = (intPilot + intAutosoft).ToString();
                    }
                }
                if (blnVehicleMod)
                {
                    chkVehicleWeaponAccessoryInstalled.Enabled = true;
                    chkVehicleWeaponAccessoryInstalled.Checked = objMod.Installed;
                }
                else
                    chkVehicleWeaponAccessoryInstalled.Enabled = false;
                chkVehicleIncludedInWeapon.Checked = false;
            }
            else if (treVehicles.SelectedNode.Level == 3)
            {
                Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objGear != null)
                {
                    if (objGear.IncludedInParent)
                        cmdDeleteVehicle.Enabled = false;
                    if (objGear.MaxRating > 0)
                    {
                        lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                        nudVehicleRating.Minimum = 1;
                        nudVehicleRating.Maximum = objGear.MaxRating;
                        nudVehicleRating.Value = objGear.Rating;
                        nudVehicleRating.Enabled = true;
                    }
                    else
                    {
                        lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                        nudVehicleRating.Minimum = 0;
                        nudVehicleRating.Maximum = 0;
                        nudVehicleRating.Enabled = false;
                    }

                    lblVehicleName.Text = objGear.DisplayNameShort;
                    lblVehicleCategory.Text = objGear.DisplayCategory;
                    lblVehicleAvail.Text = objGear.TotalAvail(true);
                    lblVehicleCost.Text = objGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblVehicleDevice.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    lblVehicleDeviceLabel.Visible = true;
                    DisplayVehicleWeaponStats(false);
                    DisplayVehicleCommlinkStats(false);
                    DisplayVehicleStats(false);
                    lblVehicleSlots.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                    string strBook = _objOptions.LanguageBookShort(objGear.Source);
                    string strPage = objGear.Page;
                    lblVehicleSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objGear.Page);

                    if (objGear.GetType() == typeof(Commlink))
                    {
                        Commlink objCommlink = (Commlink)objGear;

                        objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                        if (_objCharacter.Metatype == "A.I.")
                        {
                            chkVehicleHomeNode.Visible = true;
                            chkVehicleHomeNode.Checked = objCommlink.HomeNode;
                        }
                    }
                }
                else
                {
                    // Look for the selected Vehicle Weapon.
                    Vehicle objSelectedVehicle = null;
                    Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objSelectedVehicle);
                    if (objWeapon != null)
                    {
                        if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                            cmdDeleteVehicle.Enabled = false;
                        DisplayVehicleWeaponStats(true);
                        lblVehicleWeaponName.Text = objWeapon.DisplayNameShort;
                        lblVehicleWeaponCategory.Text = objWeapon.DisplayCategory;
                        lblVehicleWeaponDamage.Text = objWeapon.CalculatedDamage();
                        lblVehicleWeaponAP.Text = objWeapon.TotalAP;
                        lblVehicleWeaponAmmo.Text = objWeapon.CalculatedAmmo();
                        lblVehicleWeaponMode.Text = objWeapon.CalculatedMode;

                        lblVehicleWeaponRangeMain.Text = objWeapon.Range;
                        lblVehicleWeaponRangeAlternate.Text = objWeapon.AlternateRange;
                        Dictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblVehicleWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblVehicleWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblVehicleWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblVehicleWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblVehicleWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblVehicleWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblVehicleWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblVehicleWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                        lblVehicleName.Text = objWeapon.DisplayNameShort;
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeapon");
                        lblVehicleAvail.Text = objWeapon.TotalAvail;
                        lblVehicleCost.Text = objWeapon.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehicleHandlingLabel.Visible = false;
                        lblVehicleAccelLabel.Visible = false;
                        lblVehicleSpeedLabel.Visible = false;
                        lblVehicleDeviceLabel.Visible = false;
                        lblVehiclePilotLabel.Visible = false;
                        lblVehicleBodyLabel.Visible = false;
                        lblVehicleArmorLabel.Visible = false;
                        lblVehicleSensorLabel.Visible = false;
                        lblVehiclePowertrainLabel.Visible = false;
                        lblVehiclePowertrain.Text = string.Empty;
                        lblVehicleCosmeticLabel.Visible = false;
                        lblVehicleCosmetic.Text = string.Empty;
                        lblVehicleElectromagneticLabel.Visible = false;
                        lblVehicleElectromagnetic.Text = string.Empty;
                        lblVehicleBodymodLabel.Visible = false;
                        lblVehicleBodymod.Text = string.Empty;
                        lblVehicleWeaponsmodLabel.Visible = false;
                        lblVehicleWeaponsmod.Text = string.Empty;
                        lblVehicleProtectionLabel.Visible = false;
                        lblVehicleProtection.Text = string.Empty;
                        lblVehicleDroneModSlotsLabel.Visible = false;
                        lblVehicleDroneModSlots.Text = string.Empty;
                        lblVehicleSlots.Text = string.Empty;
                        string strBook = _objOptions.LanguageBookShort(objWeapon.Source);
                        string strPage = objWeapon.Page;
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objWeapon.Source) + " " + LanguageManager.GetString("String_Page") + " " + objWeapon.Page);

                        // Determine the Dice Pool size.
                        int intPilot = objSelectedVehicle.Pilot;
                        int intAutosoft = 0;
                        foreach (Gear objAutosoft in objSelectedVehicle.Gear)
                        {
                            if (objAutosoft.Extra == objWeapon.DisplayCategory && (objAutosoft.Name == "[Weapon] Targeting Autosoft" || objAutosoft.Name == "[Weapon] Melee Autosoft"))
                            {
                                if (objAutosoft.Rating > intAutosoft)
                                {
                                    intAutosoft = objAutosoft.Rating;
                                }
                            }
                        }
                        if (intAutosoft == 0)
                            intPilot -= 1;
                        lblVehicleWeaponDicePool.Text = (intPilot + intAutosoft).ToString();
                    }
                    else
                    {
                        // See if this is a piece of Cyberware.
                        Cyberware objCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                        if (objCyberware != null)
                        {
                            if (!string.IsNullOrEmpty(objCyberware.ParentID))
                                cmdDeleteCyberware.Enabled = false;
                            lblVehicleName.Text = objCyberware.DisplayNameShort;
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                            nudVehicleRating.Minimum = objCyberware.MinRating;
                            nudVehicleRating.Maximum = objCyberware.MaxRating;
                            nudVehicleRating.Value = objCyberware.Rating;
                            cmdVehicleCyberwareChangeMount.Visible = !string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount);

                            lblVehicleName.Text = objCyberware.DisplayNameShort;
                            lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleModification");
                            lblVehicleAvail.Text = objCyberware.TotalAvail;
                            lblVehicleCost.Text = objCyberware.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                            lblVehicleHandling.Text = string.Empty;
                            lblVehicleAccel.Text = string.Empty;
                            lblVehicleSpeed.Text = string.Empty;
                            lblVehicleDevice.Text = string.Empty;
                            lblVehiclePilot.Text = string.Empty;
                            lblVehicleBody.Text = string.Empty;
                            lblVehicleArmor.Text = string.Empty;
                            lblVehicleSensor.Text = string.Empty;
                            lblVehicleSlots.Text = string.Empty;
                            lblVehicleHandlingLabel.Visible = false;
                            lblVehicleAccelLabel.Visible = false;
                            lblVehicleSpeedLabel.Visible = false;
                            lblVehicleDeviceLabel.Visible = false;
                            lblVehiclePilotLabel.Visible = false;
                            lblVehicleBodyLabel.Visible = false;
                            lblVehicleArmorLabel.Visible = false;
                            lblVehicleSensorLabel.Visible = false;
                            lblVehicleSlotsLabel.Visible = false;
                            lblVehiclePowertrainLabel.Visible = false;
                            lblVehiclePowertrain.Text = string.Empty;
                            lblVehicleCosmeticLabel.Visible = false;
                            lblVehicleCosmetic.Text = string.Empty;
                            lblVehicleElectromagneticLabel.Visible = false;
                            lblVehicleElectromagnetic.Text = string.Empty;
                            lblVehicleBodymodLabel.Visible = false;
                            lblVehicleBodymod.Text = string.Empty;
                            lblVehicleWeaponsmodLabel.Visible = false;
                            lblVehicleWeaponsmod.Text = string.Empty;
                            lblVehicleProtectionLabel.Visible = false;
                            lblVehicleProtection.Text = string.Empty;
                            lblVehicleDroneModSlotsLabel.Visible = false;
                            lblVehicleDroneModSlots.Text = string.Empty;

                            string strBook = _objOptions.LanguageBookShort(objCyberware.Source);
                            string strPage = objCyberware.Page;
                            lblVehicleSource.Text = strBook + " " + strPage;
                            tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objCyberware.Source) + " " + LanguageManager.GetString("String_Page") + " " + objCyberware.Page);
                        }
                    }
                }
                chkVehicleWeaponAccessoryInstalled.Enabled = false;
                chkVehicleIncludedInWeapon.Checked = false;
            }
            else if (treVehicles.SelectedNode.Level == 4)
            {
                Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objGear != null)
                {
                    if (objGear.IncludedInParent)
                        cmdDeleteVehicle.Enabled = false;
                    if (objGear.MaxRating > 0)
                    {
                        lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                        nudVehicleRating.Minimum = 1;
                        nudVehicleRating.Maximum = objGear.MaxRating;
                        nudVehicleRating.Value = objGear.Rating;
                        nudVehicleRating.Enabled = true;
                    }
                    else
                    {
                        lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                        nudVehicleRating.Minimum = 0;
                        nudVehicleRating.Maximum = 0;
                        nudVehicleRating.Enabled = false;
                    }

                    lblVehicleName.Text = objGear.DisplayNameShort;
                    lblVehicleCategory.Text = objGear.DisplayCategory;
                    lblVehicleAvail.Text = objGear.TotalAvail(true);
                    lblVehicleCost.Text = objGear.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblVehicleHandling.Text = string.Empty;
                    lblVehicleAccel.Text = string.Empty;
                    lblVehicleSpeed.Text = string.Empty;
                    lblVehicleDevice.Text = string.Empty;
                    lblVehiclePilot.Text = string.Empty;
                    lblVehicleBody.Text = string.Empty;
                    lblVehicleArmor.Text = string.Empty;
                    lblVehicleSensor.Text = string.Empty;
                    lblVehiclePowertrainLabel.Visible = false;
                    lblVehiclePowertrain.Text = string.Empty;
                    lblVehicleCosmeticLabel.Visible = false;
                    lblVehicleCosmetic.Text = string.Empty;
                    lblVehicleElectromagneticLabel.Visible = false;
                    lblVehicleElectromagnetic.Text = string.Empty;
                    lblVehicleBodymodLabel.Visible = false;
                    lblVehicleBodymod.Text = string.Empty;
                    lblVehicleWeaponsmodLabel.Visible = false;
                    lblVehicleWeaponsmod.Text = string.Empty;
                    lblVehicleProtectionLabel.Visible = false;
                    lblVehicleProtection.Text = string.Empty;
                    lblVehicleDroneModSlotsLabel.Visible = false;
                    lblVehicleDroneModSlots.Text = string.Empty;
                    lblVehicleSlots.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                    string strBook = _objOptions.LanguageBookShort(objGear.Source);
                    string strPage = objGear.Page;
                    lblVehicleSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objGear.Page);

                    if (objGear.GetType() == typeof(Commlink))
                    {
                        Commlink objCommlink = (Commlink)objGear;

                        objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);


                        if (_objCharacter.Metatype == "A.I.")
                        {
                            chkVehicleHomeNode.Visible = true;
                            chkVehicleHomeNode.Checked = objCommlink.HomeNode;
                        }
                    }
                }
                else
                {
                    // Locate the the Selected Vehicle Weapon Accessory of Modification.
                    Weapon objWeapon = null;
                    WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                    if (objAccessory != null)
                    {
                        objWeapon = objAccessory.Parent;
                        if (objAccessory.IncludedInWeapon)
                            cmdDeleteVehicle.Enabled = false;
                        lblVehicleName.Text = objAccessory.DisplayNameShort;
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeaponAccessory");
                        lblVehicleAvail.Text = objAccessory.TotalAvail;
                        lblVehicleCost.Text = objAccessory.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehiclePowertrainLabel.Visible = false;
                        lblVehiclePowertrain.Text = string.Empty;
                        lblVehicleCosmeticLabel.Visible = false;
                        lblVehicleCosmetic.Text = string.Empty;
                        lblVehicleElectromagneticLabel.Visible = false;
                        lblVehicleElectromagnetic.Text = string.Empty;
                        lblVehicleBodymodLabel.Visible = false;
                        lblVehicleBodymod.Text = string.Empty;
                        lblVehicleWeaponsmodLabel.Visible = false;
                        lblVehicleWeaponsmod.Text = string.Empty;
                        lblVehicleProtectionLabel.Visible = false;
                        lblVehicleProtection.Text = string.Empty;
                        lblVehicleDroneModSlotsLabel.Visible = false;
                        lblVehicleDroneModSlots.Text = string.Empty;

                        string[] strMounts = objAccessory.Mount.Split('/');
                        string strMount = string.Empty;
                        foreach (string strCurrentMount in strMounts)
                        {
                            if (!string.IsNullOrEmpty(strCurrentMount))
                                strMount += LanguageManager.GetString("String_Mount" + strCurrentMount) + "/";
                        }
                        // Remove the trailing /
                        if (!string.IsNullOrEmpty(strMount) && strMount.Contains('/'))
                            strMount = strMount.Substring(0, strMount.Length - 1);
                        if (!string.IsNullOrEmpty(objAccessory.ExtraMount) && (objAccessory.ExtraMount != "None"))
                        {
                            bool boolHaveAddedItem = false;
                            string[] strExtraMounts = objAccessory.ExtraMount.Split('/');
                            foreach (string strCurrentExtraMount in strExtraMounts)
                            {
                                if (!string.IsNullOrEmpty(strCurrentExtraMount))
                                {
                                    if (!boolHaveAddedItem)
                                    {
                                        strMount += " + ";
                                        boolHaveAddedItem = true;
                                    }
                                    strMount += LanguageManager.GetString("String_Mount" + strCurrentExtraMount) + "/";
                                }
                            }
                            // Remove the trailing /
                            if (boolHaveAddedItem)
                                strMount = strMount.Substring(0, strMount.Length - 1);
                        }

                        lblVehicleSlots.Text = strMount;
                        string strBook = _objOptions.LanguageBookShort(objAccessory.Source);
                        string strPage = objAccessory.Page;
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objAccessory.Source) + " " + LanguageManager.GetString("String_Page") + " " + objAccessory.Page);
                        chkVehicleWeaponAccessoryInstalled.Enabled = true;
                        chkVehicleWeaponAccessoryInstalled.Checked = objAccessory.Installed;
                        chkVehicleIncludedInWeapon.Checked = objAccessory.IncludedInWeapon;
                    }
                    else
                    {
                        // If it's none of these, it must be an Underbarrel Weapon.
                        Vehicle objFoundVehicle = null;
                        objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objFoundVehicle);

                        if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                            cmdDeleteVehicle.Enabled = false;
                        DisplayVehicleWeaponStats(true);
                        lblVehicleWeaponName.Text = objWeapon.DisplayNameShort;
                        lblVehicleWeaponCategory.Text = objWeapon.DisplayCategory;
                        lblVehicleWeaponDamage.Text = objWeapon.CalculatedDamage();
                        lblVehicleWeaponAP.Text = objWeapon.TotalAP;
                        lblVehicleWeaponAmmo.Text = objWeapon.CalculatedAmmo();
                        lblVehicleWeaponMode.Text = objWeapon.CalculatedMode;

                        lblVehicleWeaponRangeMain.Text = objWeapon.Range;
                        lblVehicleWeaponRangeAlternate.Text = objWeapon.AlternateRange;
                        Dictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblVehicleWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblVehicleWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblVehicleWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblVehicleWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblVehicleWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblVehicleWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblVehicleWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblVehicleWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                        lblVehicleName.Text = objWeapon.DisplayNameShort;
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeapon");
                        lblVehicleAvail.Text = objWeapon.TotalAvail;
                        lblVehicleCost.Text = objWeapon.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehicleHandlingLabel.Visible = false;
                        lblVehicleAccelLabel.Visible = false;
                        lblVehicleSpeedLabel.Visible = false;
                        lblVehicleDeviceLabel.Visible = false;
                        lblVehiclePilotLabel.Visible = false;
                        lblVehicleBodyLabel.Visible = false;
                        lblVehicleArmorLabel.Visible = false;
                        lblVehicleSensorLabel.Visible = false;
                        lblVehiclePowertrainLabel.Visible = false;
                        lblVehiclePowertrain.Text = string.Empty;
                        lblVehicleCosmeticLabel.Visible = false;
                        lblVehicleCosmetic.Text = string.Empty;
                        lblVehicleElectromagneticLabel.Visible = false;
                        lblVehicleElectromagnetic.Text = string.Empty;
                        lblVehicleBodymodLabel.Visible = false;
                        lblVehicleBodymod.Text = string.Empty;
                        lblVehicleWeaponsmodLabel.Visible = false;
                        lblVehicleWeaponsmod.Text = string.Empty;
                        lblVehicleProtectionLabel.Visible = false;
                        lblVehicleProtection.Text = string.Empty;
                        lblVehicleDroneModSlotsLabel.Visible = false;
                        lblVehicleDroneModSlots.Text = string.Empty;
                        lblVehicleSlots.Text = string.Empty;
                        string strBook = _objOptions.LanguageBookShort(objWeapon.Source);
                        string strPage = objWeapon.Page;
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objWeapon.Source) + " " + LanguageManager.GetString("String_Page") + " " + objWeapon.Page);

                        // Determine the Dice Pool size.
                        int intPilot = objFoundVehicle.Pilot;
                        int intAutosoft = 0;
                        foreach (Gear objAutosoft in objFoundVehicle.Gear)
                        {
                            if (objAutosoft.Extra == objWeapon.DisplayCategory && (objAutosoft.Name == "[Weapon] Targeting Autosoft" || objAutosoft.Name == "[Weapon] Melee Autosoft"))
                            {
                                if (objAutosoft.Rating > intAutosoft)
                                {
                                    intAutosoft = objAutosoft.Rating;
                                }
                            }
                        }
                        if (intAutosoft == 0)
                            intPilot -= 1;
                        lblVehicleWeaponDicePool.Text = (intPilot + intAutosoft).ToString();
                    }
                }
            }
            else
            {
                // Locate the the Selected Vehicle Underbarrel Weapon Accessory or Modification.
                Weapon objWeapon = null;
                WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                if (objAccessory != null)
                {
                    objWeapon = objAccessory.Parent;
                    if (objAccessory.IncludedInWeapon)
                        cmdDeleteVehicle.Enabled = false;
                    lblVehicleName.Text = objAccessory.DisplayNameShort;
                    lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeaponAccessory");
                    lblVehicleAvail.Text = objAccessory.TotalAvail;
                    lblVehicleCost.Text = objAccessory.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblVehicleHandling.Text = string.Empty;
                    lblVehicleAccel.Text = string.Empty;
                    lblVehicleSpeed.Text = string.Empty;
                    lblVehicleDevice.Text = string.Empty;
                    lblVehiclePilot.Text = string.Empty;
                    lblVehicleBody.Text = string.Empty;
                    lblVehicleArmor.Text = string.Empty;
                    lblVehicleSensor.Text = string.Empty;
                    lblVehiclePowertrainLabel.Visible = false;
                    lblVehiclePowertrain.Text = string.Empty;
                    lblVehicleCosmeticLabel.Visible = false;
                    lblVehicleCosmetic.Text = string.Empty;
                    lblVehicleElectromagneticLabel.Visible = false;
                    lblVehicleElectromagnetic.Text = string.Empty;
                    lblVehicleBodymodLabel.Visible = false;
                    lblVehicleBodymod.Text = string.Empty;
                    lblVehicleWeaponsmodLabel.Visible = false;
                    lblVehicleWeaponsmod.Text = string.Empty;
                    lblVehicleProtectionLabel.Visible = false;
                    lblVehicleProtection.Text = string.Empty;
                    lblVehicleDroneModSlotsLabel.Visible = false;
                    lblVehicleDroneModSlots.Text = string.Empty;

                    string[] strMounts = objAccessory.Mount.Split('/');
                    string strMount = string.Empty;
                    foreach (string strCurrentMount in strMounts)
                    {
                        if (!string.IsNullOrEmpty(strCurrentMount))
                            strMount += LanguageManager.GetString("String_Mount" + strCurrentMount) + "/";
                    }
                    // Remove the trailing /
                    if (!string.IsNullOrEmpty(strMount) && strMount.Contains('/'))
                        strMount = strMount.Substring(0, strMount.Length - 1);
                    if (!string.IsNullOrEmpty(objAccessory.ExtraMount) && (objAccessory.ExtraMount != "None"))
                    {
                        bool boolHaveAddedItem = false;
                        string[] strExtraMounts = objAccessory.ExtraMount.Split('/');
                        foreach (string strCurrentExtraMount in strExtraMounts)
                        {
                            if (!string.IsNullOrEmpty(strCurrentExtraMount))
                            {
                                if (!boolHaveAddedItem)
                                {
                                    strMount += " + ";
                                    boolHaveAddedItem = true;
                                }
                                strMount += LanguageManager.GetString("String_Mount" + strCurrentExtraMount) + "/";
                            }
                        }
                        // Remove the trailing /
                        if (boolHaveAddedItem)
                            strMount = strMount.Substring(0, strMount.Length - 1);
                    }

                    lblVehicleSlots.Text = strMount;
                    string strBook = _objOptions.LanguageBookShort(objAccessory.Source);
                    string strPage = objAccessory.Page;
                    lblVehicleSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objAccessory.Source) + " " + LanguageManager.GetString("String_Page") + " " + objAccessory.Page);
                    chkVehicleWeaponAccessoryInstalled.Enabled = true;
                    chkVehicleWeaponAccessoryInstalled.Checked = objAccessory.Installed;
                    chkVehicleIncludedInWeapon.Checked = objAccessory.IncludedInWeapon;
                }
                else
                {
                    Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                    if (objGear != null)
                    {
                        if (objGear.IncludedInParent)
                            cmdDeleteVehicle.Enabled = false;
                        if (objGear.MaxRating > 0)
                        {
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                            nudVehicleRating.Minimum = 1;
                            nudVehicleRating.Maximum = objGear.MaxRating;
                            nudVehicleRating.Value = objGear.Rating;
                            nudVehicleRating.Enabled = true;
                        }
                        else
                        {
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating");
                            nudVehicleRating.Minimum = 0;
                            nudVehicleRating.Maximum = 0;
                            nudVehicleRating.Enabled = false;
                        }

                        lblVehicleName.Text = objGear.DisplayNameShort;
                        lblVehicleCategory.Text = objGear.DisplayCategory;
                        lblVehicleAvail.Text = objGear.TotalAvail(true);
                        lblVehicleCost.Text = $"{objGear.TotalCost:###,###,##0.##¥}";
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehiclePowertrainLabel.Visible = false;
                        lblVehiclePowertrain.Text = string.Empty;
                        lblVehicleCosmeticLabel.Visible = false;
                        lblVehicleCosmetic.Text = string.Empty;
                        lblVehicleElectromagneticLabel.Visible = false;
                        lblVehicleElectromagnetic.Text = string.Empty;
                        lblVehicleBodymodLabel.Visible = false;
                        lblVehicleBodymod.Text = string.Empty;
                        lblVehicleWeaponsmodLabel.Visible = false;
                        lblVehicleWeaponsmod.Text = string.Empty;
                        lblVehicleProtectionLabel.Visible = false;
                        lblVehicleProtection.Text = string.Empty;
                        lblVehicleDroneModSlotsLabel.Visible = false;
                        lblVehicleDroneModSlots.Text = string.Empty;
                        lblVehicleSlots.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("N2", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining") + ")";
                        string strBook = _objOptions.LanguageBookShort(objGear.Source);
                        string strPage = objGear.Page;
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objGear.Source) + " " + LanguageManager.GetString("String_Page") + " " + objGear.Page);

                        if (objGear.GetType() == typeof(Commlink))
                        {
                            Commlink objCommlink = (Commlink)objGear;

                            objCommlink.RefreshCommlinkCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                            if (_objCharacter.Metatype == "A.I.")
                            {
                                chkVehicleHomeNode.Visible = true;
                                chkVehicleHomeNode.Checked = objCommlink.HomeNode;
                            }
                        }
                    }
                    else
                    {
                        // If it's none of these, it must be an Underbarrel Weapon.
                        Vehicle objFoundVehicle = null;
                        objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles, out objFoundVehicle);

                        if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                            cmdDeleteVehicle.Enabled = false;
                        lblVehicleName.Text = objWeapon.DisplayNameShort;
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeapon");
                        lblVehicleAvail.Text = objWeapon.TotalAvail;
                        lblVehicleCost.Text = $"{objWeapon.TotalCost:###,###,##0.##¥}";
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehicleSlots.Text = string.Empty;
                        lblVehiclePowertrainLabel.Visible = false;
                        lblVehiclePowertrain.Text = string.Empty;
                        lblVehicleCosmeticLabel.Visible = false;
                        lblVehicleCosmetic.Text = string.Empty;
                        lblVehicleElectromagneticLabel.Visible = false;
                        lblVehicleElectromagnetic.Text = string.Empty;
                        lblVehicleBodymodLabel.Visible = false;
                        lblVehicleBodymod.Text = string.Empty;
                        lblVehicleWeaponsmodLabel.Visible = false;
                        lblVehicleWeaponsmod.Text = string.Empty;
                        lblVehicleProtectionLabel.Visible = false;
                        lblVehicleProtection.Text = string.Empty;
                        lblVehicleDroneModSlotsLabel.Visible = false;
                        lblVehicleDroneModSlots.Text = string.Empty;
                        string strBook = _objOptions.LanguageBookShort(objWeapon.Source);
                        string strPage = objWeapon.Page;
                        lblVehicleSource.Text = strBook + " " + strPage;
                        chkVehicleWeaponAccessoryInstalled.Enabled = true;
                        chkVehicleWeaponAccessoryInstalled.Checked = objWeapon.Installed;
                        tipTooltip.SetToolTip(lblVehicleSource, _objOptions.LanguageBookLong(objWeapon.Source) + " " + LanguageManager.GetString("String_Page") + " " + objWeapon.Page);

                        // Determine the Dice Pool size.
                        int intPilot = objFoundVehicle.Pilot;
                        int intAutosoft = 0;
                        foreach (Gear objAutosoft in objFoundVehicle.Gear)
                        {
                            if (objAutosoft.Extra == objWeapon.DisplayCategory && (objAutosoft.Name == "[Weapon] Targeting Autosoft" || objAutosoft.Name == "[Weapon] Melee Autosoft"))
                            {
                                if (objAutosoft.Rating > intAutosoft)
                                {
                                    intAutosoft = objAutosoft.Rating;
                                }
                            }
                        }
                        if (intAutosoft == 0)
                            intPilot -= 1;
                        lblVehicleWeaponDicePool.Text = (intPilot + intAutosoft).ToString();
                    }
                }
            }
            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Add or remove the Adapsin Cyberware Grade categories.
        /// </summary>
        public void PopulateCyberwareGradeList(bool blnBioware = false, bool blnIgnoreSecondHand = false, string strForceGrade = "")
        {
            List<Grade> objGradeList = CommonFunctions.GetGradeList(blnBioware ? Improvement.ImprovementSource.Bioware : Improvement.ImprovementSource.Cyberware, _objCharacter.Options);
            List<ListItem> lstCyberwareGrades = new List<ListItem>();

            foreach (Grade objWareGrade in objGradeList)
            {
                bool blnAddItem = true;
                if (objWareGrade.Name == "None" && (string.IsNullOrEmpty(strForceGrade) || strForceGrade != "None"))
                    blnAddItem = false;
                else if (_objCharacter.Improvements.Any(x => ((blnBioware && x.ImproveType == Improvement.ImprovementType.DisableBiowareGrade) || (!blnBioware && x.ImproveType == Improvement.ImprovementType.DisableCyberwareGrade))
                        && objWareGrade.Name.Contains(x.ImprovedName) && x.Enabled))
                    blnAddItem = false;
                else if (blnAddItem && blnIgnoreSecondHand && objWareGrade.SecondHand)
                    blnAddItem = false;
                else if (blnAddItem && !_objCharacter.AdapsinEnabled && objWareGrade.Adapsin)
                    blnAddItem = false;

                if (blnAddItem)
                {
                    ListItem objItem = new ListItem();
                    objItem.Value = objWareGrade.Name;
                    objItem.Name = objWareGrade.DisplayName;
                    lstCyberwareGrades.Add(objItem);
                }
            }
            cboCyberwareGrade.BeginUpdate();
            //cboCyberwareGrade.DataSource = null;
            cboCyberwareGrade.ValueMember = "Value";
            cboCyberwareGrade.DisplayMember = "Name";
            cboCyberwareGrade.DataSource = lstCyberwareGrades;
            cboCyberwareGrade.EndUpdate();
        }

        /// <summary>
        /// Check the character and determine if it has broken any of the rules.
        /// </summary>
        /// <returns></returns>
        public bool CheckCharacterValidity(bool blnUseArgBuildPoints = false, int intBuildPoints = 0)
        {
            if (_objCharacter.IgnoreRules)
                return true;
            Cursor = Cursors.WaitCursor;
            bool blnValid = true;
            string strMessage = LanguageManager.GetString("Message_InvalidBeginning");

            // Number of items over the specified Availability the character is allowed to have (typically from the Restricted Gear Quality).
            int intRestrictedAllowed = ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.RestrictedItemCount);
            int intRestrictedCount = 0;
            string strAvailItems = string.Empty;
            string strExConItems = string.Empty;
            string strCyberwareGrade = string.Empty;

            // Check if the character has more than 1 Martial Art, not counting One Trick Pony. TODO: Make the OTP check an optional rule. Make the Martial Arts limit an optional rule.
            int intMartialArts = _objCharacter.MartialArts.Count(objArt => objArt.Name != "One Trick Pony");
            if (intMartialArts > 1)
                strMessage += "\n\t" +
                              LanguageManager.GetString("Message_InvalidPointExcess")
                                  .Replace("{0}",
                                      ((1 - intMartialArts) * -1).ToString() + " " +
                                      LanguageManager.GetString("String_MartialArtsCount"));

            // Check if the character has more than 5 Techniques in a Martial Art
            if (_objCharacter.MartialArts.Count > 0)
            {
                int intTechniques = 0;
                foreach (MartialArt objLoopArt in _objCharacter.MartialArts)
                    intTechniques += objLoopArt.Advantages.Count;
                if (intTechniques > 5)
                    strMessage += "\n\t" +
                                  LanguageManager.GetString("Message_InvalidPointExcess")
                                      .Replace("{0}",
                                          ((5 - intTechniques) * -1).ToString() + " " +
                                          LanguageManager.GetString("String_TechniquesCount"));
            }

            // Check if the character has gone over limits from optional rules
            int intContactPointsUsed = 0;
            int intGroupContacts = 0;
            int intHighPlaces = 0;
            foreach (ContactControl objContactControl in panContacts.Controls)
            {
                if (!objContactControl.Free)
                {
                    if (objContactControl.IsGroup)
                    {
                        intGroupContacts += objContactControl.ContactObject.ContactPoints;
                    }
                    else if (objContactControl.ConnectionRating >= 8 && _objCharacter.FriendsInHighPlaces)
                    {
                        intHighPlaces += (objContactControl.ConnectionRating +
                                          objContactControl.LoyaltyRating);
                    }
                    else
                    {
                        // The Contact's BP cost = their Connection + Loyalty Rating.
                        intContactPointsUsed += (objContactControl.ConnectionRating +
                                                 objContactControl.LoyaltyRating) * _objOptions.BPContact;
                    }

                }
            }

            // If the option for CHA * X free points of Contacts is enabled, deduct that amount of points (or as many points have been spent if not the full amount).
            int intFreePoints = (_objCharacter.CHA.TotalValue * _objOptions.FreeContactsMultiplier);

            if (intContactPointsUsed >= intFreePoints)
            {
                intContactPointsUsed -= intFreePoints;
            }
            else
            {
                intContactPointsUsed = 0;
            }

            intContactPointsUsed += Math.Max(0, intHighPlaces - (_objCharacter.CHA.TotalValue * 4));

            //if (intContactPointsUsed > _objCharacter.ContactPoints)
            //    strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidPointExcess").Replace("{0}", ((_objCharacter.ContactPoints - intContactPointsUsed) * -1).ToString() + " " + LanguageManager.GetString("String_Contacts"));

            // Calculate the BP used by Enemies. These are added to the BP since they are technically
            // a Negative Quality.
            int intPointsUsed = 0;
            int intNegativePoints = 0;
            foreach (ContactControl objContactControl in panEnemies.Controls)
            {
                if (!objContactControl.Free)
                {
                    intNegativePoints -= (objContactControl.ConnectionRating + objContactControl.LoyaltyRating) * _objOptions.KarmaEnemy;
                }
            }

            // Calculate the BP used by Positive Qualities.
            intPointsUsed = _objCharacter.Qualities.Where(objQuality => objQuality.Type == QualityType.Positive && objQuality.ContributeToBP && objQuality.ContributeToLimit).Sum(objQuality => objQuality.BP);
            // Group contacts are counted as positive qualities
            intPointsUsed += intGroupContacts;

            // Deduct the amount for free Qualities.
            intPointsUsed -= ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreePositiveQualities);
            int intPositivePointsUsed = intPointsUsed;

            // Calculate the BP used for Negative Qualities.
            intPointsUsed = 0;
            foreach (Quality objQuality in _objCharacter.Qualities.Where(objQuality => objQuality.Type == QualityType.Negative && objQuality.ContributeToBP && objQuality.ContributeToLimit))
            {
                intPointsUsed += objQuality.BP;
                intNegativePoints += objQuality.BP;
            }

            // Deduct the amount for free Qualities.
            intPointsUsed -= ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeNegativeQualities);
            intNegativePoints -= ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.FreeNegativeQualities);

            // If the character is only allowed to gain 25 Karma from Negative Qualities but allowed to take as many as they'd like, limit their refunded points.
            if (_objOptions.ExceedNegativeQualitiesLimit)
            {
                int intNegativeQualityLimit = -_objCharacter.GameplayOptionQualityLimit;
                if (intNegativePoints < intNegativeQualityLimit)
                {
                    intNegativePoints = intNegativeQualityLimit;
                }
            }

            // If the character is allowed to take as many Positive Qualities as they'd like but all costs in excess are doubled, add the excess to their point cost.
            if (_objOptions.ExceedPositiveQualitiesCostDoubled)
            {
                int intPositiveQualityExcess = intPointsUsed - _objCharacter.GameplayOptionQualityLimit;
                if (intPositiveQualityExcess > 0)
                {
                    intPointsUsed += intPositiveQualityExcess;
                }
            }

            // if positive points > 25
            if (intPositivePointsUsed > _objCharacter.GameplayOptionQualityLimit && !_objOptions.ExceedPositiveQualities)
            {
                strMessage += "\n\t" +
                              LanguageManager.GetString("Message_PositiveQualityLimit")
                                  .Replace("{0}", (_objCharacter.GameplayOptionQualityLimit).ToString());
                blnValid = false;
            }

            // if negative points > 25
            if (intNegativePoints < (_objCharacter.GameplayOptionQualityLimit * -1) && !_objOptions.ExceedNegativeQualities)
            {
                strMessage += "\n\t" +
                              LanguageManager.GetString("Message_NegativeQualityLimit")
                                  .Replace("{0}", (_objCharacter.GameplayOptionQualityLimit).ToString());
                blnValid = false;
            }

            if (_objCharacter.Contacts.Any(x => (Math.Max(0, x.Connection) + Math.Max(0, x.Loyalty)) > 7 && !x.Free))
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_HighContact");
            }

            // Check if the character has gone over the Build Point total.
            if (!blnUseArgBuildPoints)
                intBuildPoints = CalculateBP(false);
            if (intBuildPoints < 0 && !_blnFreestyle)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidPointExcess").Replace("{0}", (intBuildPoints * -1).ToString() + " " + LanguageManager.GetString("String_Karma"));
            }

            // if character has more than permitted Metagenetic qualities
            if (_objCharacter.MetageneticLimit > 0)
            {
                int metageneticPositiveQualities = 0;
                int metageneticNegativeQualities = 0;
                foreach (Quality objQuality in _objCharacter.Qualities.Where(objQuality => objQuality.Metagenetic == "yes" && objQuality.OriginSource.ToString() != QualitySource.Metatype.ToString()))
                {
                    if (objQuality.Type == QualityType.Positive)
                    {
                        metageneticPositiveQualities = metageneticPositiveQualities + objQuality.BP;
                    }
                    else if (objQuality.Type == QualityType.Negative)
                    {
                        metageneticNegativeQualities = metageneticNegativeQualities - objQuality.BP;
                    }
                }
                if (metageneticNegativeQualities > _objCharacter.MetageneticLimit)
                {
                    strMessage += "\n\t" + LanguageManager.GetString("Message_OverNegativeMetagenicQualities").Replace("{0}", metageneticNegativeQualities.ToString()).Replace("{1}", _objCharacter.MetageneticLimit.ToString());
                    blnValid = false;
                }
                if (metageneticPositiveQualities > _objCharacter.MetageneticLimit)
                {
                    strMessage += "\n\t" + LanguageManager.GetString("Message_OverPositiveMetagenicQualities").Replace("{0}", metageneticPositiveQualities.ToString()).Replace("{1}", _objCharacter.MetageneticLimit.ToString());
                    blnValid = false;
                }

                if (metageneticNegativeQualities != metageneticPositiveQualities && metageneticNegativeQualities != (metageneticPositiveQualities - 1))
                {
                    strMessage += "\n\t" + LanguageManager.GetString("Message_MetagenicQualitiesUnbalanced").Replace("{0}", metageneticNegativeQualities.ToString()).Replace("{1}", (metageneticPositiveQualities - 1).ToString()).Replace("{2}", metageneticPositiveQualities.ToString());
                    blnValid = false;
                }
                //Subtract 1 karma to balance Metagenic Qualities
                if (metageneticNegativeQualities == (metageneticPositiveQualities - 1))
                {
                    if (_objCharacter.Karma > 0)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_MetagenicQualitiesSubtractingKarma").Replace("{0}", intBuildPoints.ToString()), LanguageManager.GetString("MessageTitle_ExtraKarma"), MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                        {
                            _objCharacter.Karma -= 1;
                        }
                        else
                        {
                            blnValid = false;
                        }
                    }
                    else
                    {
                        strMessage += "\n\t" + LanguageManager.GetString("Message_MetagenicQualitiesInsufficientKarma").Replace("{0}", intBuildPoints.ToString());
                        blnValid = false;
                    }
                }

            }
            int i = _objCharacter.TotalAttributes - CalculateAttributePriorityPoints(_objCharacter.AttributeSection.AttributeList);
            // Check if the character has gone over on Primary Attributes
            if (i < 0)
            {
                //TODO: ATTACH TO ATTRIBUTE SECTION
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidAttributeExcess").Replace("{0}", (i * -1).ToString());
            }

            i = _objCharacter.TotalSpecial - CalculateAttributePriorityPoints(_objCharacter.AttributeSection.SpecialAttributeList);
            // Check if the character has gone over on Special Attributes
            if (i < 0)
            {
                //TODO: ATTACH TO ATTRIBUTE SECTION
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidSpecialExcess").Replace("{0}", (i * -1).ToString());
            }

            // Check if the character has gone over on Skill Groups
            if (_objCharacter.SkillsSection.SkillGroupPoints < 0)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidSkillGroupExcess").Replace("{0}", ((_objCharacter.SkillsSection.SkillGroupPoints) * -1).ToString());
            }

            // Check if the character has gone over on Active Skills
            if (_objCharacter.SkillsSection.SkillPoints < 0)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidActiveSkillExcess").Replace("{0}", ((_objCharacter.SkillsSection.SkillPoints) * -1).ToString());
            }

            // Check if the character has gone over on Knowledge Skills
            if (_objCharacter.SkillsSection.KnowledgeSkillPointsRemain < 0)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidKnowledgeSkillExcess").Replace("{0}", ((_objCharacter.SkillsSection.KnowledgeSkillPointsRemain) * -1).ToString());
            }

            // Check if the character has gone over the Nuyen limit.
            decimal decNuyen = CalculateNuyen(false);
            if (decNuyen < 0)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidNuyenExcess").Replace("{0}", (decNuyen * -1).ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥');
            }

            // Check if the character's Essence is above 0.
            double dblEss = decimal.ToDouble(_objCharacter.Essence);
            double dblMinEss = 0.0;
            if (!_objCharacter.Options.DontRoundEssenceInternally)
                dblMinEss = Math.Pow(10.0, -_objCharacter.Options.EssenceDecimals);
            if (dblEss < dblMinEss && _objCharacter.ESS.MetatypeMaximum > 0)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidEssenceExcess").Replace("{0}", (dblMinEss - dblEss).ToString(GlobalOptions.CultureInfo));
            }

            // If the character has Magician enabled, make sure a Tradition has been selected.
            if (_objCharacter.MagicianEnabled && (string.IsNullOrEmpty(_objCharacter.MagicTradition) || _objCharacter.MagicTradition == "None"))
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidNoTradition");
            }

            // If the character has RES enabled, make sure a Stream has been selected.
            if (_objCharacter.RESEnabled && (string.IsNullOrEmpty(_objCharacter.TechnomancerStream) || _objCharacter.TechnomancerStream == "None"))
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidNoStream");
            }

            // Check if the character has more than the permitted amount of native languages.
            int intLanguages = _objCharacter.SkillsSection.KnowledgeSkills.Count(objSkill => (objSkill.SkillCategory == "Language" && objSkill.Rating == 0));

            int intLanguageLimit = 1 + ImprovementManager.ValueOf(_objCharacter, Improvement.ImprovementType.NativeLanguageLimit);

            if (intLanguages > intLanguageLimit)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_OverLanguageLimit").Replace("{0}", intLanguages.ToString()).Replace("{1}", intLanguageLimit.ToString());
            }


            // Check the character's equipment and make sure nothing goes over their set Maximum Availability.
            bool blnRestrictedGearUsed = false;
            string strRestrictedItem = string.Empty;
            // Gear Availability.
            foreach (Gear objGear in _objCharacter.Gear)
            {
                CheckRestrictedGear(objGear, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
            }

            // Cyberware Availability.
            foreach (Cyberware objCyberware in _objCharacter.Cyberware.DeepWhere(x => x.Children, x => string.IsNullOrEmpty(x.ParentID)))
            {
                if (objCyberware.Grade.Name == "Deltaware" || objCyberware.Grade.Name == "Betaware")
                {
                    strCyberwareGrade += "\n\t\t" + objCyberware.DisplayNameShort;
                }

                string strTotalAvail = objCyberware.TotalAvail;
                if (!strTotalAvail.StartsWith('+'))
                {
                    int intAvailInt = GetAvailInt(strTotalAvail);
                    if (intAvailInt > _objCharacter.MaximumAvailability)
                    {
                        if (intAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                        {
                            blnRestrictedGearUsed = true;
                            strRestrictedItem = objCyberware.DisplayName;
                        }
                        else
                        {
                            intRestrictedCount++;
                            strAvailItems += "\n\t\t" + objCyberware.DisplayNameShort;
                        }
                    }
                }
                foreach (Gear objGear in objCyberware.Gear.Where(objGear => !objGear.IncludedInParent))
                {
                    CheckRestrictedGear(objGear, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
                }
            }

            // Cyberware: Prototype Transhuman
            decimal d = _objCharacter.PrototypeTranshuman;
            if (d > 0)
            {
                decimal total = 0;
                foreach (Cyberware c in _objCharacter.Cyberware.Where(c => c.PrototypeTranshuman))
                {
                    total += c.CalculatedESS(false);
                }
                if (d - total < 0)
                {
                    blnValid = false;
                    strMessage += "\n\t" + LanguageManager.GetString("Message_OverPrototypeLimit").Replace("{0}", (total).ToString()).Replace("{1}", d.ToString());
                }
            }

            // Armor Availability.
            foreach (Armor objArmor in _objCharacter.Armor)
            {
                int intAvailInt = GetAvailInt(objArmor.TotalAvail);
                if (intAvailInt > _objCharacter.MaximumAvailability)
                {
                    if (intAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                    {
                        blnRestrictedGearUsed = true;
                        strRestrictedItem = objArmor.DisplayName;
                    }
                    else
                    {
                        intRestrictedCount++;
                        strAvailItems += "\n\t\t" + objArmor.DisplayNameShort;
                    }
                }

                foreach (ArmorMod objMod in objArmor.ArmorMods.Where(objMod => !objMod.IncludedInArmor))
                {
                    string strTotalAvail = objMod.TotalAvail;
                    if (!strTotalAvail.StartsWith('+'))
                    {
                        int intModAvailInt = GetAvailInt(strTotalAvail);
                        if (intModAvailInt > _objCharacter.MaximumAvailability)
                        {
                            if (intModAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                            {
                                blnRestrictedGearUsed = true;
                                strRestrictedItem = objMod.DisplayName;
                            }
                            else
                            {
                                intRestrictedCount++;
                                strAvailItems += "\n\t\t" + objMod.DisplayNameShort;
                            }
                        }
                    }
                    foreach (Gear objGear in objMod.Gear.Where(objGear => !objGear.IncludedInParent))
                    {
                        CheckRestrictedGear(objGear, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
                    }
                }

                foreach (Gear objGear in objArmor.Gear.Where(objGear => !objGear.IncludedInParent))
                {
                    CheckRestrictedGear(objGear, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
                }
            }

            // Weapon Availability.
            foreach (Weapon objWeapon in _objCharacter.Weapons.GetAllDescendants(x => x.Children))
            {
                int intAvailInt = GetAvailInt(objWeapon.TotalAvail);
                if (intAvailInt > _objCharacter.MaximumAvailability)
                {
                    if (intAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                    {
                        blnRestrictedGearUsed = true;
                        strRestrictedItem = objWeapon.DisplayName;
                    }
                    else
                    {
                        intRestrictedCount++;
                        strAvailItems += "\n\t\t" + objWeapon.DisplayNameShort;
                    }
                }
                foreach (WeaponAccessory objAccessory in objWeapon.WeaponAccessories.Where(objAccessory => !objAccessory.IncludedInWeapon))
                {
                    string strAccessoryAvail = objAccessory.TotalAvail;
                    if (!strAccessoryAvail.StartsWith('+'))
                    {
                        int intAccessoryAvailInt = GetAvailInt(strAccessoryAvail);
                        if (intAccessoryAvailInt > _objCharacter.MaximumAvailability)
                        {
                            if (intAccessoryAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                            {
                                blnRestrictedGearUsed = true;
                                strRestrictedItem = objAccessory.DisplayName;
                            }
                            else
                            {
                                intRestrictedCount++;
                                strAvailItems += "\n\t\t" + objAccessory.DisplayNameShort;
                            }
                        }
                    }

                    foreach (Gear objGear in objAccessory.Gear.Where(objGear => !objGear.IncludedInParent))
                    {
                        CheckRestrictedGear(objGear, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
                    }
                }
            }

            // Vehicle Availability.
            foreach (Vehicle objVehicle in _objCharacter.Vehicles)
            {
                int intAvailInt = GetAvailInt(objVehicle.CalculatedAvail);
                if (intAvailInt > _objCharacter.MaximumAvailability)
                {
                    if (intAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                    {
                        blnRestrictedGearUsed = true;
                        strRestrictedItem = objVehicle.DisplayName;
                    }
                    else
                    {
                        intRestrictedCount++;
                        strAvailItems += "\n\t\t" + objVehicle.DisplayNameShort;
                    }
                }
                foreach (VehicleMod objVehicleMod in objVehicle.Mods.Where((objVehicleMod => !objVehicleMod.IncludedInVehicle)))
                {
                    string strModAvail = objVehicleMod.TotalAvail;
                    if (!strModAvail.StartsWith('+'))
                    {
                        int intModAvailInt = GetAvailInt(strModAvail);
                        if (intModAvailInt > _objCharacter.MaximumAvailability)
                        {
                            if (intModAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                            {
                                blnRestrictedGearUsed = true;
                                strRestrictedItem = objVehicleMod.DisplayName;
                            }
                            else
                            {
                                intRestrictedCount++;
                                strAvailItems += "\n\t\t" + objVehicleMod.DisplayNameShort;
                            }
                        }
                        foreach (Weapon objWeapon in objVehicleMod.Weapons.GetAllDescendants(x => x.Children))
                        {
                            int intWeaponAvailInt = GetAvailInt(objWeapon.TotalAvail);
                            if (intWeaponAvailInt > _objCharacter.MaximumAvailability)
                            {
                                if (intWeaponAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                                {
                                    blnRestrictedGearUsed = true;
                                    strRestrictedItem = objWeapon.DisplayName;
                                }
                                else
                                {
                                    intRestrictedCount++;
                                    strAvailItems += "\n\t\t" + objWeapon.DisplayNameShort;
                                }
                            }
                            foreach (WeaponAccessory objAccessory in objWeapon.WeaponAccessories.Where((objAccessory => !objAccessory.IncludedInWeapon)))
                            {
                                string strAccessoryAvail = objAccessory.TotalAvail;
                                if (!strAccessoryAvail.StartsWith('+'))
                                {
                                    int intAccessoryAvailInt = GetAvailInt(strAccessoryAvail);
                                    if (intAccessoryAvailInt > _objCharacter.MaximumAvailability)
                                    {
                                        if (intAccessoryAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                                        {
                                            blnRestrictedGearUsed = true;
                                            strRestrictedItem = objAccessory.DisplayName;
                                        }
                                        else
                                        {
                                            intRestrictedCount++;
                                            strAvailItems += "\n\t\t" + objAccessory.DisplayNameShort;
                                        }
                                    }
                                }

                                foreach (Gear objGear in objAccessory.Gear.Where(objGear => !objGear.IncludedInParent))
                                {
                                    CheckRestrictedGear(objGear, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
                                }
                            }
                        }
                    }
                    foreach (Gear objGear in objVehicle.Gear)
                    {
                        CheckRestrictedGear(objGear, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
                    }
                }
            }

            // Make sure the character is not carrying more items over the allowed Avail than they are allowed.
            if (intRestrictedCount > intRestrictedAllowed)
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidAvail").Replace("{0}", (intRestrictedCount - intRestrictedAllowed).ToString()).Replace("{1}", _objCharacter.MaximumAvailability.ToString());
                strMessage += strAvailItems;
                strMessage += "\n\t" + LanguageManager.GetString("Message_RestrictedGearUsed").Replace("{0}", strRestrictedItem);
            }

            if (!string.IsNullOrWhiteSpace(strExConItems))
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidExConWare");
                strMessage += strExConItems;
            }

            if (!string.IsNullOrWhiteSpace(strCyberwareGrade))
            {
                blnValid = false;
                strMessage += "\n\t" + LanguageManager.GetString("Message_InvalidCyberwareGrades");
                strMessage += strCyberwareGrade;
            }

            // Check item Capacities if the option is enabled.
            List<string> lstOverCapacity = new List<string>();

            if (_objOptions.EnforceCapacity)
            {
                bool blnOverCapacity = false;
                int intCapacityOver = 0;
                // Armor Capacity.
                foreach (Armor objArmor in _objCharacter.Armor.Where(objArmor => objArmor.CapacityRemaining < 0))
                {
                    blnOverCapacity = true;
                    lstOverCapacity.Add(objArmor.Name);
                    intCapacityOver++;
                }

                // Gear Capacity.
                foreach (Gear objGear in _objCharacter.Gear)
                {
                    if (objGear.CapacityRemaining < 0)
                    {
                        blnOverCapacity = true;
                        lstOverCapacity.Add(objGear.Name);
                        intCapacityOver++;
                    }
                    // Child Gear.
                    foreach (Gear objChild in objGear.Children.Where(objChild => objChild.CapacityRemaining < 0))
                    {
                        blnOverCapacity = true;
                        lstOverCapacity.Add(objChild.Name);
                        intCapacityOver++;
                    }
                }

                // Cyberware Capacity.
                foreach (Cyberware objCyberware in _objCharacter.Cyberware)
                {
                    if (objCyberware.CapacityRemaining < 0)
                    {
                        blnOverCapacity = true;
                        lstOverCapacity.Add(objCyberware.Name);
                        intCapacityOver++;
                    }
                    // Check plugins.
                    foreach (Cyberware objChild in objCyberware.Children.Where(objChild => objChild.CapacityRemaining < 0))
                    {
                        blnOverCapacity = true;
                        lstOverCapacity.Add(objChild.Name);
                        intCapacityOver++;
                    }
                }

                // Vehicle Capacity.
                foreach (Vehicle objVehicle in _objCharacter.Vehicles)
                {
                    if (_objOptions.BookEnabled("R5"))
                    {
                        if (objVehicle.IsDrone && GlobalOptions.Dronemods)
                        {
                            if (objVehicle.DroneModSlotsUsed > objVehicle.DroneModSlots)
                            {
                                blnOverCapacity = true;
                                lstOverCapacity.Add(objVehicle.Name);
                                intCapacityOver++;
                            }
                        }
                        else
                        {
                            if (objVehicle.OverR5Capacity())
                            {
                                blnOverCapacity = true;
                                lstOverCapacity.Add(objVehicle.Name);
                                intCapacityOver++;
                            }
                        }
                    }
                    else if (objVehicle.Slots < objVehicle.SlotsUsed)
                    {
                        blnOverCapacity = true;
                        lstOverCapacity.Add(objVehicle.Name);
                        intCapacityOver++;
                    }
                    // Check Vehicle Gear.
                    foreach (Gear objGear in objVehicle.Gear)
                    {
                        if (objGear.CapacityRemaining < 0)
                        {
                            blnOverCapacity = true;
                            lstOverCapacity.Add(objGear.Name);
                            intCapacityOver++;
                        }
                        // Check Child Gear.
                        foreach (Gear objChild in objGear.Children.Where(objChild => objChild.CapacityRemaining < 0))
                        {
                            blnOverCapacity = true;
                            lstOverCapacity.Add(objChild.Name);
                            intCapacityOver++;
                        }
                    }
                }

                if (blnOverCapacity)
                {
                    blnValid = false;
                    strMessage += "\n\t" + LanguageManager.GetString("Message_CapacityReachedValidate").Replace("{0}", intCapacityOver.ToString());
                    foreach (string strItem in lstOverCapacity)
                    {
                        strMessage += "\n\t- " + strItem;
                    }
                }
            }

            //Check Drone mods for illegalities
            if (_objOptions.BookEnabled("R5"))
            {
                List<string> lstDronesIllegalDowngrades = new List<string>();
                bool blnIllegalDowngrades = false;
                int intIllegalDowngrades = 0;
                foreach (Vehicle objVehicle in _objCharacter.Vehicles)
                {
                    if (objVehicle.IsDrone && GlobalOptions.Dronemods)
                    {
                        List<string> lstInstalledDowngrades = new List<string>();
                        foreach (VehicleMod objMod in objVehicle.Mods.Where(objMod => !objMod.IncludedInVehicle && objMod.Installed && objMod.Downgrade))
                        {
                            //Downgrades can't reduce a attribute to less than 1 (except Speed which can go to 0)
                            if ((objMod.Category == "Handling" && Convert.ToInt32(objVehicle.TotalHandling) < 1) ||
                                (objMod.Category == "Speed" && Convert.ToInt32(objVehicle.TotalSpeed) < 0) ||
                                (objMod.Category == "Acceleration" && Convert.ToInt32(objVehicle.TotalAccel) < 1) ||
                                (objMod.Category == "Body" && Convert.ToInt32(objVehicle.TotalBody) < 1) ||
                                (objMod.Category == "Armor" && Convert.ToInt32(objVehicle.TotalArmor) < 1) ||
                                (objMod.Category == "Sensor" && Convert.ToInt32(objVehicle.CalculatedSensor) < 1))
                            {
                                blnIllegalDowngrades = true;
                                intIllegalDowngrades++;
                                lstDronesIllegalDowngrades.Add(objVehicle.Name);
                                break;
                            }
                        }
                    }
                }
                if (blnIllegalDowngrades)
                {
                    blnValid = false;
                    strMessage += "\n\t" + LanguageManager.GetString("Message_DroneIllegalDowngrade").Replace("{0}", intIllegalDowngrades.ToString());
                    foreach (string strItem in lstDronesIllegalDowngrades)
                    {
                        strMessage += "\n\t- " + strItem;
                    }
                }
            }


            i = _objCharacter.Attributes - CalculateAttributePriorityPoints(_objCharacter.AttributeSection.AttributeList);
            // Check if the character has gone over on Primary Attributes
            if (blnValid && i > 0)
            {
                if (MessageBox.Show(
                    LanguageManager.GetString("Message_ExtraPoints")
                        .Replace("{0}", i.ToString())
                        .Replace("{1}", LanguageManager.GetString("Label_SummaryPrimaryAttributes")),
                    LanguageManager.GetString("MessageTitle_ExtraPoints"), MessageBoxButtons.YesNo,
                    MessageBoxIcon.Warning) == DialogResult.No)
                {
                    blnValid = false;
                }
            }

            i = _objCharacter.Special - CalculateAttributePriorityPoints(_objCharacter.AttributeSection.SpecialAttributeList);
            // Check if the character has gone over on Special Attributes
            if (blnValid && i > 0)
            {
                if (
                    MessageBox.Show(
                        LanguageManager.GetString("Message_ExtraPoints")
                            .Replace("{0}", i.ToString())
                            .Replace("{1}", LanguageManager.GetString("Label_SummarySpecialAttributes")),
                        LanguageManager.GetString("MessageTitle_ExtraPoints"), MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning) == DialogResult.No)
                    blnValid = false;
            }

            // Check if the character has gone over on Skill Groups
            if (blnValid && _objCharacter.SkillsSection.SkillGroupPoints > 0)
            {
                if (
                    MessageBox.Show(
                        LanguageManager.GetString("Message_ExtraPoints")
                            .Replace("{0}", _objCharacter.SkillsSection.SkillGroupPoints.ToString())
                            .Replace("{1}", LanguageManager.GetString("Label_SummarySpecialAttributes")),
                        LanguageManager.GetString("MessageTitle_ExtraPoints"), MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning) == DialogResult.No)
                    blnValid = false;
            }

            // Check if the character has gone over on Active Skills
            if (blnValid && _objCharacter.SkillsSection.SkillPoints > 0)
            {
                if (
                    MessageBox.Show(
                        LanguageManager.GetString("Message_ExtraPoints")
                            .Replace("{0}", _objCharacter.SkillsSection.SkillPoints.ToString())
                            .Replace("{1}", LanguageManager.GetString("Label_SummaryActiveSkills")),
                        LanguageManager.GetString("MessageTitle_ExtraPoints"), MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning) == DialogResult.No)
                    blnValid = false;
            }

            // Check if the character has gone over on Knowledge Skills
            if (blnValid && _objCharacter.SkillsSection.KnowledgeSkillPointsRemain > 0)
            {
                if (
                    MessageBox.Show(
                        LanguageManager.GetString("Message_ExtraPoints")
                            .Replace("{0}", _objCharacter.SkillsSection.KnowledgeSkillPointsRemain.ToString())
                            .Replace("{1}", LanguageManager.GetString("Label_SummaryKnowledgeSkills")),
                        LanguageManager.GetString("MessageTitle_ExtraPoints"), MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning) == DialogResult.No)
                    blnValid = false;
            }
            Cursor = Cursors.Default;
            if (!blnValid && strMessage.Length > LanguageManager.GetString("Message_InvalidBeginning").Length)
                MessageBox.Show(strMessage, LanguageManager.GetString("MessageTitle_Invalid"), MessageBoxButtons.OK, MessageBoxIcon.Error);
            return blnValid;
        }

        /// <summary>
        /// Checks a nominated piece of gear for Availability requirements.
        /// </summary>
        /// <param name="objGear"></param>
        /// <param name="blnRestrictedGearUsed"></param>
        /// <param name="intRestrictedCount"></param>
        /// <param name="strAvailItems"></param>
        /// <param name="blnOutRestrictedGearUsed"></param>
        /// <param name="intOutRestrictedCount"></param>
        /// <param name="strOutAvailItems"></param>
        private void CheckRestrictedGear(Gear objGear, bool blnRestrictedGearUsed, int intRestrictedCount, string strAvailItems, string strRestrictedItem, out bool blnOutRestrictedGearUsed, out int intoutRestrictedCount, out string strOutAvailItems, out string strOutRestrictedItem)
        {
            string strTotalAvail = objGear.TotalAvail(true);
            if (!strTotalAvail.StartsWith('+'))
            {
                int intAvailInt = GetAvailInt(objGear.TotalAvail(true));
                //TODO: Make this dynamically update without having to validate the character.
                if (intAvailInt > _objCharacter.MaximumAvailability)
                {
                    if (intAvailInt <= 24 && _objCharacter.RestrictedGear && !blnRestrictedGearUsed)
                    {
                        blnRestrictedGearUsed = true;
                        strRestrictedItem = objGear.Parent == null ? objGear.DisplayName : $"{objGear.DisplayName} ({objGear.Parent})";
                    }
                    else
                    {
                        intRestrictedCount++;
                        strAvailItems += "\n\t\t" + objGear.DisplayNameShort;
                    }
                }
            }
            foreach (Gear objChild in objGear.Children.Where(objChild => !objChild.IncludedInParent))
            {
                CheckRestrictedGear(objChild, blnRestrictedGearUsed, intRestrictedCount, strAvailItems, strRestrictedItem, out blnRestrictedGearUsed, out intRestrictedCount, out strAvailItems, out strRestrictedItem);
            }
            strOutAvailItems = strAvailItems;
            intoutRestrictedCount = intRestrictedCount;
            blnOutRestrictedGearUsed = blnRestrictedGearUsed;
            strOutRestrictedItem = strRestrictedItem;
        }

        /// <summary>
        /// Confirm that the character can move to career mode and perform final actions for karma carryover and such.
        /// </summary>
        public bool ValidateCharacter()
        {
            int intBuildPoints = CalculateBP(false);

            if (CheckCharacterValidity(true, intBuildPoints))
            {
                // See if the character has any Karma remaining.
                if (intBuildPoints > _objOptions.KarmaCarryover)
                {
                    if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NoExtraKarma").Replace("{0}", intBuildPoints.ToString()), LanguageManager.GetString("MessageTitle_ExtraKarma"), MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
                            return false;
                    }
                    else
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_ExtraKarma").Replace("{0}", intBuildPoints.ToString()).Replace("{1}", _objOptions.KarmaCarryover.ToString()), LanguageManager.GetString("MessageTitle_ExtraKarma"), MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
                            return false;
                    }
                }
                if (_objCharacter.Nuyen > 5000)
                {
                    if (MessageBox.Show(LanguageManager.GetString("Message_ExtraNuyen").Replace("{0}", _objCharacter.Nuyen.ToString()).Replace("{1}", (5000).ToString()), LanguageManager.GetString("MessageTitle_ExtraNuyen"), MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
                        return false;
                }
                if (_objOptions.CreateBackupOnCareer && chkCharacterCreated.Checked)
                {
                    // Create a pre-Career Mode backup of the character.
                    // Make sure the backup directory exists.
                    if (!Directory.Exists(Path.Combine(Application.StartupPath, "saves", "backup")))
                    {
                        try
                        {
                            Directory.CreateDirectory(Path.Combine(Application.StartupPath, "saves", "backup"));
                        }
                        catch (UnauthorizedAccessException)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_Insufficient_Permissions_Warning"));
                            return false;
                        }
                    }

                    string strFileName = _objCharacter.FileName;
                    string[] strParts = strFileName.Split(Path.DirectorySeparatorChar);
                    string strNewName = strParts[strParts.Length - 1].Replace(".chum5", " (" + LanguageManager.GetString("Title_CreateMode") + ").chum5");
                    if (string.IsNullOrEmpty(strNewName))
                    {
                        strNewName = _objCharacter.Alias;
                        if (string.IsNullOrEmpty(strNewName))
                            strNewName = _objCharacter.Name;
                        if (string.IsNullOrEmpty(strNewName))
                            strNewName = Guid.NewGuid().ToString().Substring(0, 13).FastEscape('-');
                        strNewName += " (" + LanguageManager.GetString("Title_CreateMode") + ").chum5";
                    }

                    strNewName = Path.Combine(Application.StartupPath, "saves", "backup", strNewName);

                    Cursor = Cursors.WaitCursor;
                    if (!_objCharacter.Save(strNewName))
                    {
                        Cursor = Cursors.Default;
                        return false;
                    }
                    Cursor = Cursors.Default;
                }

                // See if the character has any Karma remaining.
                if (intBuildPoints > _objOptions.KarmaCarryover)
                {
                    if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                    {
                        _objCharacter.Karma = 0;
                    }
                    else
                    {
                        _objCharacter.Karma = _objOptions.KarmaCarryover;
                    }
                }
                else
                {
                    _objCharacter.Karma = intBuildPoints;
                }
                // Determine the highest Lifestyle the character has.
                Lifestyle objLifestyle = _objCharacter.Lifestyles.FirstOrDefault();
                foreach (Lifestyle objCharacterLifestyle in _objCharacter.Lifestyles)
                {
                    if (objCharacterLifestyle.Multiplier > objLifestyle.Multiplier)
                        objLifestyle = objCharacterLifestyle;
                }

                // If the character does not have any Lifestyles, give them the Street Lifestyle.
                if (_objCharacter.Lifestyles.Count == 0)
                {
                    objLifestyle = new Lifestyle(_objCharacter);
                    XmlDocument objXmlDocument = XmlManager.Load("lifestyles.xml");
                    XmlNode objXmlLifestyle = objXmlDocument.SelectSingleNode("/chummer/lifestyles/lifestyle[name = \"Street\"]");
                    TreeNode objNode = new TreeNode();

                    objLifestyle.Create(objXmlLifestyle, objNode);
                    treLifestyles.Nodes[0].Nodes.Add(objNode);
                    treLifestyles.Nodes[0].Expand();

                    _objCharacter.Lifestyles.Add(objLifestyle);
                }

                // Characters get a +1 bonus to the roll for every 100 Nueyn they have left over, up to a maximum of 3X the number of dice rolled for the Lifestyle.
                frmLifestyleNuyen frmStartingNuyen = new frmLifestyleNuyen(_objCharacter);
                frmStartingNuyen.Dice = objLifestyle.Dice;
                frmStartingNuyen.Multiplier = objLifestyle.Multiplier;

                if (_objCharacter.Nuyen > 5000)
                {
                    _objCharacter.Nuyen = 5000;
                }

                frmStartingNuyen.ShowDialog(this);

                // Assign the starting Nuyen amount.
                decimal decStartingNuyen = frmStartingNuyen.StartingNuyen;
                if (decStartingNuyen < 0)
                    decStartingNuyen = 0;

                _objCharacter.Nuyen += decStartingNuyen;

                return true;
            }

            return false;
        }

        /// <summary>
        /// Verify that the user wants to save this character as Created.
        /// </summary>
        public bool ConfirmSaveCreatedCharacter()
        {
            if (MessageBox.Show(LanguageManager.GetString("Message_ConfirmCreate"), LanguageManager.GetString("MessageTitle_ConfirmCreate"), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return false;

            if (!ValidateCharacter())
                return false;

            // The user has confirmed that the character should be Create.
            _objCharacter.Created = true;

            return true;
        }

        /// <summary>
        /// Create Cyberware from a Cyberware Suite.
        /// </summary>
        /// <param name="objXmlNode">XmlNode for the Cyberware to add.</param>
        /// <param name="objGrade">CyberwareGrade to add the item as.</param>
        /// <param name="intRating">Rating of the Cyberware.</param>
        /// <param name="blnAddToCharacter">Whether or not the Cyberware should be added directly to the character.</param>
        /// <param name="objParent">Parent Cyberware if the item is not being added directly to the character.</param>
        private TreeNode CreateSuiteCyberware(XmlNode objXmlItem, XmlNode objXmlNode, Grade objGrade, int intRating, bool blnAddToCharacter, Improvement.ImprovementSource objSource, string strType, Cyberware objParent = null)
        {
            // Create the Cyberware object.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            List<Vehicle> objVehicles = new List<Vehicle>();
            List<TreeNode> objVehicleNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Cyberware objCyberware = new Cyberware(_objCharacter);
            string strForced = string.Empty;

            if (objXmlItem["name"].Attributes["select"] != null)
                strForced = objXmlItem["name"].Attributes["select"].InnerText;

            objCyberware.Create(objXmlNode, _objCharacter, objGrade, objSource, intRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, true, true, strForced);
            objCyberware.Suite = true;

            foreach (Weapon objWeapon in objWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            foreach (Vehicle objVehicle in objVehicles)
                _objCharacter.Vehicles.Add(objVehicle);

            foreach (TreeNode objVehicleNode in objVehicleNodes)
            {
                treVehicles.Nodes[0].Nodes.Add(objVehicleNode);
                treVehicles.Nodes[0].Expand();
            }

            if (blnAddToCharacter)
                _objCharacter.Cyberware.Add(objCyberware);
            else
                objParent.Children.Add(objCyberware);

            foreach (XmlNode objXmlChild in objXmlItem.SelectNodes(strType + "s/" + strType))
            {
                XmlDocument objXmlDocument = XmlManager.Load(strType + ".xml");
                XmlNode objXmlChildCyberware = objXmlDocument.SelectSingleNode("/chummer/" + strType + "s/" + strType + "[name = \"" + objXmlChild["name"].InnerText + "\"]");
                TreeNode objChildNode = new TreeNode();
                int intChildRating = 0;

                if (objXmlChild["rating"] != null)
                    intChildRating = Convert.ToInt32(objXmlChild["rating"].InnerText);

                objChildNode = CreateSuiteCyberware(objXmlChild, objXmlChildCyberware, objGrade, intChildRating, false, objSource, strType, objCyberware);
                objNode.Nodes.Add(objChildNode);
                objNode.Expand();
            }

            return objNode;
        }

        /// <summary>
        /// Add a PACKS Kit to the character.
        /// </summary>
        public void AddPACKSKit()
        {
            frmSelectPACKSKit frmPickPACKSKit = new frmSelectPACKSKit(_objCharacter);
            frmPickPACKSKit.ShowDialog(this);

            bool blnCreateChildren = true;

            // If the form was canceled, don't do anything.
            if (frmPickPACKSKit.DialogResult == DialogResult.Cancel)
                return;

            XmlDocument objXmlDocument = XmlManager.Load("packs.xml");

            // Do not create child items for Gear if the chosen Kit is in the Custom category since these items will contain the exact plugins desired.
            //if (frmPickPACKSKit.SelectedCategory == "Custom")
            //blnCreateChildren = false;

            TreeNode objWeaponTreeNodes = treWeapons.Nodes[0];
            TreeNode objVehicleTreeNodes = treVehicles.Nodes[0];

            XmlNode objXmlKit = objXmlDocument.SelectSingleNode("/chummer/packs/pack[name = \"" + frmPickPACKSKit.SelectedKit + "\" and category = \"" + frmPickPACKSKit.SelectedCategory + "\"]");
            bool blnDoQualityTreeUpdate = false;
            // Update Qualities.
            if (objXmlKit["qualities"] != null)
            {
                XmlDocument objXmlQualityDocument = XmlManager.Load("qualities.xml");

                // Positive Qualities.
                foreach (XmlNode objXmlQuality in objXmlKit.SelectNodes("qualities/positive/quality"))
                {
                    XmlNode objXmlQualityNode = objXmlQualityDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objXmlQuality.InnerText + "\"]");

                    TreeNode objNode = new TreeNode();
                    List<Weapon> objWeapons = new List<Weapon>();
                    List<TreeNode> objWeaponNodes = new List<TreeNode>();
                    Quality objQuality = new Quality(_objCharacter);
                    string strForceValue = string.Empty;

                    if (objXmlQuality.Attributes["select"] != null)
                        strForceValue = objXmlQuality.Attributes["select"].InnerText;

                    objQuality.Create(objXmlQualityNode, _objCharacter, QualitySource.Selected, objNode, objWeapons, objWeaponNodes, strForceValue);
                    if (!_objCharacter.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objQuality.QualityId && objExistingQuality.Extra == objQuality.Extra))
                    {
                        treQualities.Nodes[0].Nodes.Add(objNode);
                        treQualities.Nodes[0].Expand();
                    }
                    else
                        blnDoQualityTreeUpdate = true;

                    _objCharacter.Qualities.Add(objQuality);

                    // Add any created Weapons to the character.
                    foreach (Weapon objWeapon in objWeapons)
                        _objCharacter.Weapons.Add(objWeapon);

                    // Create the Weapon Node if one exists.
                    foreach (TreeNode objWeaponNode in objWeaponNodes)
                    {
                        objWeaponNode.ContextMenuStrip = cmsWeapon;
                        objWeaponTreeNodes.Nodes.Add(objWeaponNode);
                        objWeaponTreeNodes.Expand();
                    }
                }

                // Negative Qualities.
                foreach (XmlNode objXmlQuality in objXmlKit.SelectNodes("qualities/negative/quality"))
                {
                    XmlNode objXmlQualityNode = objXmlQualityDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objXmlQuality.InnerText + "\"]");

                    TreeNode objNode = new TreeNode();
                    List<Weapon> objWeapons = new List<Weapon>();
                    List<TreeNode> objWeaponNodes = new List<TreeNode>();
                    Quality objQuality = new Quality(_objCharacter);
                    string strForceValue = string.Empty;

                    if (objXmlQuality.Attributes["select"] != null)
                        strForceValue = objXmlQuality.Attributes["select"].InnerText;

                    objQuality.Create(objXmlQualityNode, _objCharacter, QualitySource.Selected, objNode, objWeapons, objWeaponNodes, strForceValue);
                    _objCharacter.Qualities.Add(objQuality);

                    if (!_objCharacter.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objQuality.QualityId && objExistingQuality.Extra == objQuality.Extra))
                    {
                        treQualities.Nodes[1].Nodes.Add(objNode);
                        treQualities.Nodes[1].Expand();
                    }
                    else
                        blnDoQualityTreeUpdate = true;

                    // Add any created Weapons to the character.
                    foreach (Weapon objWeapon in objWeapons)
                        _objCharacter.Weapons.Add(objWeapon);

                    // Create the Weapon Node if one exists.
                    foreach (TreeNode objWeaponNode in objWeaponNodes)
                    {
                        objWeaponNode.ContextMenuStrip = cmsWeapon;
                        objWeaponTreeNodes.Nodes.Add(objWeaponNode);
                        objWeaponTreeNodes.Expand();
                    }
                }
            }

           //TODO: PACKS SKILLS?

            // Select a Martial Art.
            if (objXmlKit["selectmartialart"] != null)
            {
                string strForcedValue = string.Empty;
                int intRating = 1;
                if (objXmlKit["selectmartialart"].Attributes["select"] != null)
                    strForcedValue = objXmlKit["selectmartialart"].Attributes["select"].InnerText;
                if (objXmlKit["selectmartialart"].Attributes["rating"] != null)
                    intRating = Convert.ToInt32(objXmlKit["selectmartialart"].Attributes["rating"].InnerText);

                frmSelectMartialArt frmPickMartialArt = new frmSelectMartialArt(_objCharacter);
                frmPickMartialArt.ForcedValue = strForcedValue;
                frmPickMartialArt.ShowDialog(this);

                if (frmPickMartialArt.DialogResult != DialogResult.Cancel)
                {
                    // Open the Martial Arts XML file and locate the selected piece.
                    XmlDocument objXmlMartialArtDocument = XmlManager.Load("martialarts.xml");

                    XmlNode objXmlArt = objXmlMartialArtDocument.SelectSingleNode("/chummer/martialarts/martialart[name = \"" + frmPickMartialArt.SelectedMartialArt + "\"]");

                    TreeNode objNode = new TreeNode();
                    MartialArt objMartialArt = new MartialArt(_objCharacter);
                    objMartialArt.Create(objXmlArt, objNode);
                    objMartialArt.Rating = intRating;
                    _objCharacter.MartialArts.Add(objMartialArt);

                    objNode.ContextMenuStrip = cmsMartialArts;

                    treMartialArts.Nodes[0].Nodes.Add(objNode);
                    treMartialArts.Nodes[0].Expand();

                    treMartialArts.SelectedNode = objNode;
                }
            }

            // Update Martial Arts.
            if (objXmlKit["martialarts"] != null)
            {
                // Open the Martial Arts XML file and locate the selected art.
                XmlDocument objXmlMartialArtDocument = XmlManager.Load("martialarts.xml");

                foreach (XmlNode objXmlArt in objXmlKit.SelectNodes("martialarts/martialart"))
                {
                    TreeNode objNode = new TreeNode();
                    MartialArt objArt = new MartialArt(_objCharacter);
                    XmlNode objXmlArtNode = objXmlMartialArtDocument.SelectSingleNode("/chummer/martialarts/martialart[name = \"" + objXmlArt["name"].InnerText + "\"]");
                    objArt.Create(objXmlArtNode, objNode);
                    objArt.Rating = Convert.ToInt32(objXmlArt["rating"].InnerText);
                    _objCharacter.MartialArts.Add(objArt);

                    // Check for Advantages.
                    foreach (XmlNode objXmlAdvantage in objXmlArt.SelectNodes("techniques/technique"))
                    {
                        TreeNode objChildNode = new TreeNode();
                        MartialArtAdvantage objAdvantage = new MartialArtAdvantage(_objCharacter);
                        XmlNode objXmlAdvantageNode = objXmlMartialArtDocument.SelectSingleNode("/chummer/techniques/technique[name = \"" + objXmlAdvantage["name"].InnerText + "\"]");
                        objAdvantage.Create(objXmlAdvantageNode, objChildNode);
                        objArt.Advantages.Add(objAdvantage);

                        objNode.Nodes.Add(objChildNode);
                        objNode.Expand();
                    }

                    treMartialArts.Nodes[0].Nodes.Add(objNode);
                    treMartialArts.Nodes[0].Expand();
                }
            }

            // Update Adept Powers.
            if (objXmlKit["powers"] != null)
            {
                // Open the Powers XML file and locate the selected power.
                XmlDocument objXmlPowerDocument = XmlManager.Load("powers.xml");

                foreach (XmlNode objXmlPower in objXmlKit.SelectNodes("powers/power"))
                {
                    //TODO: Fix
                }
            }

            // Update Complex Forms.
            if (objXmlKit["complexforms"] != null)
            {
                // Open the Programs XML file and locate the selected program.
                XmlDocument objXmlProgramDocument = XmlManager.Load("complexforms.xml");

                foreach (XmlNode objXmlProgram in objXmlKit.SelectNodes("complexforms/complexform"))
                {
                    XmlNode objXmlProgramNode = objXmlProgramDocument.SelectSingleNode("/chummer/complexforms/complexform[name = \"" + objXmlProgram["name"].InnerText + "\"]");

                    string strForceValue = string.Empty;
                    if (objXmlProgram.Attributes["select"] != null)
                        strForceValue = objXmlProgram.Attributes["select"].InnerText;

                    TreeNode objNode = new TreeNode();
                    ComplexForm objProgram = new ComplexForm(_objCharacter);
                    objProgram.Create(objXmlProgramNode, objNode, strForceValue);

                    treComplexForms.Nodes[0].Nodes.Add(objNode);
                    treComplexForms.Nodes[0].Expand();

                    _objCharacter.ComplexForms.Add(objProgram);

                    treComplexForms.SortCustom();
                }
            }

            // Update AI Programs.
            if (objXmlKit["programs"] != null)
            {
                // Open the Programs XML file and locate the selected program.
                XmlDocument objXmlProgramDocument = XmlManager.Load("programs.xml");

                foreach (XmlNode objXmlProgram in objXmlKit.SelectNodes("programs/program"))
                {
                    XmlNode objXmlProgramNode = objXmlProgramDocument.SelectSingleNode("/chummer/programs/program[name = \"" + objXmlProgram["name"].InnerText + "\"]");

                    bool boolIsAdvancedProgram = false;
                    if (objXmlProgram["category"]?.InnerText == "Advanced Programs")
                        boolIsAdvancedProgram = true;

                    TreeNode objNode = new TreeNode();
                    AIProgram objProgram = new AIProgram(_objCharacter);
                    objProgram.Create(objXmlProgramNode, objNode, boolIsAdvancedProgram);
                    objNode.Text = objProgram.DisplayName;
                    objNode.Tag = objProgram.InternalId;
                    if (!string.IsNullOrEmpty(objProgram.Notes))
                        objNode.ForeColor = Color.SaddleBrown;
                    else if (!objProgram.CanDelete)
                        objNode.ForeColor = SystemColors.GrayText;
                    else
                        objNode.ForeColor = SystemColors.WindowText;
                    objNode.ToolTipText = CommonFunctions.WordWrap(objProgram.Notes, 100);
                    objNode.ContextMenuStrip = cmsAdvancedProgram;

                    treAIPrograms.Nodes[0].Nodes.Add(objNode);
                    treAIPrograms.Nodes[0].Expand();

                    _objCharacter.AIPrograms.Add(objProgram);

                    treAIPrograms.SortCustom();
                }
            }

            // Update Spells.
            if (objXmlKit["spells"] != null)
            {
                XmlDocument objXmlSpellDocument = XmlManager.Load("spells.xml");

                foreach (XmlNode objXmlSpell in objXmlKit.SelectNodes("spells/spell"))
                {
                    TreeNode objCategoryNode = null;
                    switch (objXmlSpell["category"]?.InnerText)
                    {
                        case "Combat":
                            objCategoryNode = treSpells.Nodes[0];
                            break;
                        case "Detection":
                            objCategoryNode = treSpells.Nodes[1];
                            break;
                        case "Health":
                            objCategoryNode = treSpells.Nodes[2];
                            break;
                        case "Illusion":
                            objCategoryNode = treSpells.Nodes[3];
                            break;
                        case "Manipulation":
                            objCategoryNode = treSpells.Nodes[4];
                            break;
                        case "Rituals":
                            objCategoryNode = treSpells.Nodes[5];
                            break;
                        case "Enchantments":
                            objCategoryNode = treSpells.Nodes[6];
                            break;
                    }
                    // Make sure the Spell has not already been added to the character.
                    bool blnFound = false;
                    if (objCategoryNode == null)
                        blnFound = true;
                    else
                    {
                        foreach (TreeNode nodSpell in objCategoryNode.Nodes)
                        {
                            if (nodSpell.Text == objXmlSpell.InnerText)
                            {
                                blnFound = true;
                                break;
                            }
                        }
                    }

                    // The Spell is not in the list, so add it.
                    if (!blnFound)
                    {
                        string strForceValue = string.Empty;
                        if (objXmlSpell.Attributes["select"] != null)
                            strForceValue = objXmlSpell.Attributes["select"].InnerText;

                        XmlNode objXmlSpellNode = objXmlSpellDocument.SelectSingleNode("/chummer/spells/spell[name = \"" + objXmlSpell.InnerText + "\"]");

                        Spell objSpell = new Spell(_objCharacter);
                        TreeNode objNode = new TreeNode();
                        objSpell.Create(objXmlSpellNode, objNode, strForceValue);
                        objNode.ContextMenuStrip = cmsSpell;
                        _objCharacter.Spells.Add(objSpell);
                        objCategoryNode.Nodes.Add(objNode);
                        objCategoryNode.Expand();
                    }
                }
                treSpells.SortCustom();
            }

            // Update Spirits.
            if (objXmlKit["spirits"] != null)
            {
                foreach (XmlNode objXmlSpirit in objXmlKit.SelectNodes("spirits/spirit"))
                {
                    int i = panSpirits.Controls.Count;

                    Spirit objSpirit = new Spirit(_objCharacter);
                    _objCharacter.Spirits.Add(objSpirit);

                    SpiritControl objSpiritControl = new SpiritControl();
                    objSpiritControl.SpiritObject = objSpirit;
                    objSpiritControl.EntityType = SpiritType.Spirit;

                    // Attach an EventHandler for the ServicesOwedChanged Event.
                    objSpiritControl.ServicesOwedChanged += objSpirit_ServicesOwedChanged;
                    objSpiritControl.ForceChanged += objSpirit_ForceChanged;
                    objSpiritControl.BoundChanged += objSpirit_BoundChanged;
                    objSpiritControl.DeleteSpirit += objSpirit_DeleteSpirit;

                    objSpiritControl.Name = objXmlSpirit["name"].InnerText;
                    objSpiritControl.Force = Convert.ToInt32(objXmlSpirit["force"].InnerText);
                    objSpiritControl.ServicesOwed = Convert.ToInt32(objXmlSpirit["services"].InnerText);

                    objSpiritControl.Top = i * objSpiritControl.Height;
                    panSpirits.Controls.Add(objSpiritControl);
                }
            }

            // Update Lifestyles.
            if (objXmlKit["lifestyles"] != null)
            {
                XmlDocument objXmlLifestyleDocument = XmlManager.Load("lifestyles.xml");

                foreach (XmlNode objXmlLifestyle in objXmlKit.SelectNodes("lifestyles/lifestyle"))
                {
                    string strName = objXmlLifestyle["name"].InnerText;
                    int intMonths = Convert.ToInt32(objXmlLifestyle["months"].InnerText);

                    // Create the Lifestyle.
                    TreeNode objNode = new TreeNode();
                    Lifestyle objLifestyle = new Lifestyle(_objCharacter);

                    XmlNode objXmlLifestyleNode = objXmlLifestyleDocument.SelectSingleNode("/chummer/lifestyles/lifestyle[name = \"" + strName + "\"]");
                    if (objXmlLifestyleNode != null)
                    {
                        // This is a standard Lifestyle, so just use the Create method.
                        objLifestyle.Create(objXmlLifestyleNode, objNode);
                        objLifestyle.Months = intMonths;
                    }
                    else
                    {
                        // This is an Advanced Lifestyle, so build it manually.
                        objLifestyle.Name = strName;
                        objLifestyle.Months = intMonths;
                        objLifestyle.Cost = Convert.ToInt32(objXmlLifestyle["cost"].InnerText);
                        objLifestyle.Dice = Convert.ToInt32(objXmlLifestyle["dice"].InnerText);
                        objLifestyle.Multiplier = Convert.ToInt32(objXmlLifestyle["multiplier"].InnerText);
                        objLifestyle.BaseLifestyle = objXmlLifestyle["baselifestyle"].InnerText;
                        objLifestyle.Source = "SR5";
                        objLifestyle.Page = "373";
                        objLifestyle.Comforts = Convert.ToInt32(objXmlLifestyle["comforts"].InnerText);
                        objLifestyle.ComfortsEntertainment = Convert.ToInt32(objXmlLifestyle["comfortsentertainment"].InnerText);
                        objLifestyle.Security = Convert.ToInt32(objXmlLifestyle["security"].InnerText);
                        objLifestyle.SecurityEntertainment = Convert.ToInt32(objXmlLifestyle["securityentertainment"].InnerText);
                        objLifestyle.Area = Convert.ToInt32(objXmlLifestyle["area"].InnerText);
                        objLifestyle.AreaEntertainment = Convert.ToInt32(objXmlLifestyle["areaentertainment"].InnerText);

                        foreach (LifestyleQuality objXmlQuality in objXmlLifestyle.SelectNodes("lifestylequalities/lifestylequality"))
                            objLifestyle.LifestyleQualities.Add(objXmlQuality);

                        objNode.Text = strName;
                    }

                    // Add the Lifestyle to the character and Lifestyle Tree.
                    if (!string.IsNullOrEmpty(objLifestyle.BaseLifestyle))
                        objNode.ContextMenuStrip = cmsAdvancedLifestyle;
                    else
                        objNode.ContextMenuStrip = cmsLifestyleNotes;
                    _objCharacter.Lifestyles.Add(objLifestyle);
                    treLifestyles.Nodes[0].Nodes.Add(objNode);
                    treLifestyles.Nodes[0].Expand();
                }
            }

            // Update NuyenBP.
            if (objXmlKit["nuyenbp"] != null)
            {
                int intAmount = Convert.ToInt32(objXmlKit["nuyenbp"].InnerText);
                //if (_objCharacter.BuildMethod == CharacterBuildMethod.Karma)
                //intAmount *= 2;

                // Make sure we don't go over the field's maximum which would throw an Exception.
                if (nudNuyen.Value + intAmount > nudNuyen.Maximum)
                    nudNuyen.Value = nudNuyen.Maximum;
                else
                    nudNuyen.Value += intAmount;
            }

            // Update Armor.
            if (objXmlKit["armors"] != null)
            {
                XmlDocument objXmlArmorDocument = XmlManager.Load("armor.xml");

                foreach (XmlNode objXmlArmor in objXmlKit.SelectNodes("armors/armor"))
                {
                    XmlNode objXmlArmorNode = objXmlArmorDocument.SelectSingleNode("/chummer/armors/armor[name = \"" + objXmlArmor["name"].InnerText + "\"]");

                    Armor objArmor = new Armor(_objCharacter);
                    TreeNode objNode = new TreeNode();
                    List<Weapon> objWeapons = new List<Weapon>();

                    int intArmorRating = 0;
                    if (objXmlArmor["rating"] != null)
                    {
                        intArmorRating = Convert.ToInt32(objXmlArmor["rating"].InnerText);
                    }
                    objArmor.Create(objXmlArmorNode, objNode, cmsArmorMod, cmsArmorGear, intArmorRating, objWeapons, false, blnCreateChildren);
                    _objCharacter.Armor.Add(objArmor);

                    // Look for Armor Mods.
                    if (objXmlArmor["mods"] != null)
                    {
                        foreach (XmlNode objXmlMod in objXmlArmor.SelectNodes("mods/mod"))
                        {
                            List<Weapon> lstWeapons = new List<Weapon>();
                            List<TreeNode> lstWeaponNodes = new List<TreeNode>();
                            XmlNode objXmlModNode = objXmlArmorDocument.SelectSingleNode("/chummer/mods/mod[name = \"" + objXmlMod["name"].InnerText + "\"]");
                            ArmorMod objMod = new ArmorMod(_objCharacter);
                            TreeNode objModNode = new TreeNode();
                            int intRating = 0;
                            if (objXmlMod["rating"] != null)
                                intRating = Convert.ToInt32(objXmlMod["rating"].InnerText);
                            objMod.Create(objXmlModNode, objModNode, cmsArmorGear, intRating, lstWeapons, lstWeaponNodes);
                            objModNode.ContextMenuStrip = cmsArmorGear;
                            objMod.Parent = objArmor;

                            objArmor.ArmorMods.Add(objMod);

                            objNode.Nodes.Add(objModNode);
                            objNode.Expand();

                            // Add any Weapons created by the Mod.
                            foreach (Weapon objWeapon in lstWeapons)
                                _objCharacter.Weapons.Add(objWeapon);

                            foreach (TreeNode objWeaponNode in lstWeaponNodes)
                            {
                                objWeaponNode.ContextMenuStrip = cmsWeapon;
                                objWeaponTreeNodes.Nodes.Add(objWeaponNode);
                                objWeaponTreeNodes.Expand();
                            }
                        }
                    }

                    foreach (Weapon objWeapon in objWeapons)
                    {
                        CommonFunctions.CreateWeaponTreeNode(objWeapon, objWeaponTreeNodes, cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
                    }

                    XmlDocument objXmlGearDocument = XmlManager.Load("gear.xml");
                    foreach (XmlNode objXmlGear in objXmlArmor.SelectNodes("gears/gear"))
                        AddPACKSGear(objXmlGearDocument, objXmlGear, objNode, objArmor, cmsArmorGear, blnCreateChildren);

                    objNode.ContextMenuStrip = cmsArmor;
                    treArmor.Nodes[0].Nodes.Add(objNode);
                    treArmor.Nodes[0].Expand();
                }
            }

            // Update Weapons.
            if (objXmlKit["weapons"] != null)
            {
                XmlDocument objXmlWeaponDocument = XmlManager.Load("weapons.xml");

                pgbProgress.Visible = true;
                pgbProgress.Value = 0;
                pgbProgress.Maximum = objXmlKit.SelectNodes("weapons/weapon").Count;
                int i = 0;
                foreach (XmlNode objXmlWeapon in objXmlKit.SelectNodes("weapons/weapon"))
                {
                    i++;
                    pgbProgress.Value = i;
                    Application.DoEvents();

                    XmlNode objXmlWeaponNode = objXmlWeaponDocument.SelectSingleNode("/chummer/weapons/weapon[name = \"" + objXmlWeapon["name"].InnerText + "\"]");

                    Weapon objWeapon = new Weapon(_objCharacter);
                    List<TreeNode> lstNodes = new List<TreeNode>();
                    objWeapon.Create(objXmlWeaponNode, lstNodes, cmsWeapon, cmsWeaponAccessory, _objCharacter.Weapons, cmsWeaponAccessoryGear, blnCreateChildren);
                    _objCharacter.Weapons.Add(objWeapon);

                    // Look for Weapon Accessories.
                    if (objXmlWeapon["accessories"] != null)
                    {
                        foreach (XmlNode objXmlAccessory in objXmlWeapon.SelectNodes("accessories/accessory"))
                        {
                            XmlNode objXmlAccessoryNode = objXmlWeaponDocument.SelectSingleNode("/chummer/accessories/accessory[name = \"" + objXmlAccessory["name"].InnerText + "\"]");
                            WeaponAccessory objMod = new WeaponAccessory(_objCharacter);
                            TreeNode objModNode = new TreeNode();
                            string strMount = "Internal";
                            int intRating = 0;
                            if (objXmlAccessory["mount"] != null)
                                strMount = objXmlAccessory["mount"].InnerText;
                            string strExtraMount = "None";
                            if (objXmlAccessory.InnerXml.Contains("<extramount>"))
                                strMount = objXmlAccessory["extramount"].InnerText;
                            objMod.Create(objXmlAccessoryNode, objModNode, new Tuple<string,string> (strMount, strExtraMount), intRating, cmsWeaponAccessoryGear, false, blnCreateChildren);
                            objModNode.ContextMenuStrip = cmsWeaponAccessory;
                            objMod.Parent = objWeapon;

                            objWeapon.WeaponAccessories.Add(objMod);

                            XmlDocument objXmlGearDocument = XmlManager.Load("gear.xml");
                            foreach (XmlNode objXmlGear in objXmlAccessory.SelectNodes("gears/gear"))
                                AddPACKSGear(objXmlGearDocument, objXmlGear, objModNode, objMod, cmsWeaponAccessoryGear, blnCreateChildren);

                            lstNodes[0].Nodes.Add(objModNode);
                            lstNodes[0].Expand();
                        }
                    }

                    // Look for an Underbarrel Weapon.
                    if (objXmlWeapon["underbarrel"] != null)
                    {
                        XmlNode objXmlUnderbarrelNode = objXmlWeaponDocument.SelectSingleNode("/chummer/weapons/weapon[name = \"" + objXmlWeapon["underbarrel"].InnerText + "\"]");

                        Weapon objUnderbarrelWeapon = new Weapon(_objCharacter);
                        List<TreeNode> lstUnderbarrelNodes = new List<TreeNode>();
                        objUnderbarrelWeapon.Create(objXmlUnderbarrelNode, lstUnderbarrelNodes, cmsWeapon, cmsWeaponAccessory, objWeapon.UnderbarrelWeapons, cmsWeaponAccessoryGear, blnCreateChildren);
                        objWeapon.UnderbarrelWeapons.Add(objUnderbarrelWeapon);
                        if (objWeapon.AllowAccessory == false)
                            objUnderbarrelWeapon.AllowAccessory = false;
                        lstNodes[0].Nodes.AddRange(lstUnderbarrelNodes.ToArray());
                        lstNodes[0].Expand();
                    }

                    foreach (TreeNode objLoopNode in lstNodes)
                    {
                        objLoopNode.ContextMenuStrip = cmsWeapon;
                        objWeaponTreeNodes.Nodes.Add(objLoopNode);
                    }
                    objWeaponTreeNodes.Expand();

                    Application.DoEvents();
                }
            }

            // Update Cyberware.
            if (objXmlKit["cyberwares"] != null)
            {
                XmlDocument objXmlCyberwareDocument = XmlManager.Load("cyberware.xml");
                XmlDocument objXmlGearDocument = XmlManager.Load("gear.xml");

                pgbProgress.Visible = true;
                pgbProgress.Value = 0;
                pgbProgress.Maximum = objXmlKit.SelectNodes("cyberwares/cyberware").Count;
                int i = 0;
                foreach (XmlNode objXmlCyberware in objXmlKit.SelectNodes("cyberwares/cyberware"))
                {
                    i++;
                    pgbProgress.Value = i;
                    Application.DoEvents();

                    List<Weapon> objWeapons = new List<Weapon>();
                    List<TreeNode> objWeaponNodes = new List<TreeNode>();
                    List<Vehicle> objVehicles = new List<Vehicle>();
                    List<TreeNode> objVehicleNodes = new List<TreeNode>();
                    TreeNode objNode = new TreeNode();
                    objNode.ContextMenuStrip = cmsCyberware;
                    Grade objGrade = Cyberware.ConvertToCyberwareGrade(objXmlCyberware["grade"].InnerText, Improvement.ImprovementSource.Cyberware, _objCharacter.Options);

                    int intRating = 0;
                    if (objXmlCyberware["rating"] != null)
                        intRating = Convert.ToInt32(objXmlCyberware["rating"].InnerText);

                    XmlNode objXmlCyberwareNode = objXmlCyberwareDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + objXmlCyberware["name"].InnerText + "\"]");
                    Cyberware objCyberware = new Cyberware(_objCharacter);
                    objCyberware.Create(objXmlCyberwareNode, _objCharacter, objGrade, Improvement.ImprovementSource.Cyberware, intRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, true, blnCreateChildren);
                    _objCharacter.Cyberware.Add(objCyberware);

                    // Add any children.
                    if (objXmlCyberware["cyberwares"] != null)
                    {
                        foreach (XmlNode objXmlChild in objXmlCyberware.SelectNodes("cyberwares/cyberware"))
                        {
                            TreeNode objChildNode = new TreeNode();
                            objChildNode.ContextMenuStrip = cmsCyberware;
                            Cyberware objChildCyberware = new Cyberware(_objCharacter);

                            int intChildRating = 0;
                            if (objXmlChild["rating"] != null)
                                intChildRating = Convert.ToInt32(objXmlChild["rating"].InnerText);

                            XmlNode objXmlChildNode = objXmlCyberwareDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + objXmlChild["name"].InnerText + "\"]");
                            objChildCyberware.Create(objXmlChildNode, _objCharacter, objGrade, Improvement.ImprovementSource.Cyberware, intChildRating, objChildNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, true, blnCreateChildren);
                            objCyberware.Children.Add(objChildCyberware);

                            foreach (XmlNode objXmlGear in objXmlChild.SelectNodes("gears/gear"))
                                AddPACKSGear(objXmlGearDocument, objXmlGear, objChildNode, objChildCyberware, cmsCyberwareGear, blnCreateChildren);

                            objNode.Nodes.Add(objChildNode);
                            objNode.Expand();
                        }
                    }

                    foreach (XmlNode objXmlGear in objXmlCyberware.SelectNodes("gears/gear"))
                        AddPACKSGear(objXmlGearDocument, objXmlGear, objNode, objCyberware, cmsCyberwareGear, blnCreateChildren);

                    treCyberware.Nodes[0].Nodes.Add(objNode);
                    treCyberware.Nodes[0].Expand();

                    // Add any Weapons created by the Gear.
                    foreach (Weapon objWeapon in objWeapons)
                        _objCharacter.Weapons.Add(objWeapon);

                    foreach (TreeNode objWeaponNode in objWeaponNodes)
                    {
                        objWeaponNode.ContextMenuStrip = cmsWeapon;
                        objWeaponTreeNodes.Nodes.Add(objWeaponNode);
                        objWeaponTreeNodes.Expand();
                    }

                    foreach (Vehicle objVehicle in objVehicles)
                        _objCharacter.Vehicles.Add(objVehicle);

                    foreach (TreeNode objVehicleNode in objVehicleNodes)
                    {
                        objVehicleNode.ContextMenuStrip = cmsVehicle;
                        objVehicleTreeNodes.Nodes.Add(objVehicleNode);
                        objVehicleTreeNodes.Expand();
                    }

                    Application.DoEvents();
                }

                treCyberware.SortCustom();
            }

            // Update Bioware.
            if (objXmlKit["biowares"] != null)
            {
                XmlDocument objXmlBiowareDocument = XmlManager.Load("bioware.xml");

                pgbProgress.Visible = true;
                pgbProgress.Value = 0;
                pgbProgress.Maximum = objXmlKit.SelectNodes("biowares/bioware").Count;
                int i = 0;

                foreach (XmlNode objXmlBioware in objXmlKit.SelectNodes("biowares/bioware"))
                {
                    i++;
                    pgbProgress.Value = i;
                    Application.DoEvents();

                    List<Weapon> objWeapons = new List<Weapon>();
                    List<TreeNode> objWeaponNodes = new List<TreeNode>();
                    List<Vehicle> objVehicles = new List<Vehicle>();
                    List<TreeNode> objVehicleNodes = new List<TreeNode>();
                    TreeNode objNode = new TreeNode();
                    objNode.ContextMenuStrip = cmsCyberware;
                    Grade objGrade = Cyberware.ConvertToCyberwareGrade(objXmlBioware["grade"].InnerText, Improvement.ImprovementSource.Bioware, _objCharacter.Options);

                    int intRating = 0;
                    if (objXmlBioware["rating"] != null)
                        intRating = Convert.ToInt32(objXmlBioware["rating"].InnerText);

                    XmlNode objXmlBiowareNode = objXmlBiowareDocument.SelectSingleNode("/chummer/biowares/bioware[name = \"" + objXmlBioware["name"].InnerText + "\"]");
                    Cyberware objCyberware = new Cyberware(_objCharacter);
                    objCyberware.Create(objXmlBiowareNode, _objCharacter, objGrade, Improvement.ImprovementSource.Bioware, intRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, true, blnCreateChildren);
                    _objCharacter.Cyberware.Add(objCyberware);

                    treCyberware.Nodes[1].Nodes.Add(objNode);
                    treCyberware.Nodes[1].Expand();

                    // Add any Weapons created by the Gear.
                    foreach (Weapon objWeapon in objWeapons)
                        _objCharacter.Weapons.Add(objWeapon);

                    foreach (TreeNode objWeaponNode in objWeaponNodes)
                    {
                        objWeaponNode.ContextMenuStrip = cmsWeapon;
                        objWeaponTreeNodes.Nodes.Add(objWeaponNode);
                        objWeaponTreeNodes.Expand();
                    }

                    foreach (Vehicle objVehicle in objVehicles)
                        _objCharacter.Vehicles.Add(objVehicle);

                    foreach (TreeNode objVehicleNode in objVehicleNodes)
                    {
                        objVehicleNode.ContextMenuStrip = cmsVehicle;
                        objVehicleTreeNodes.Nodes.Add(objVehicleNode);
                        objVehicleTreeNodes.Expand();
                    }

                    Application.DoEvents();
                }

                treCyberware.SortCustom();
            }

            // Update Gear.
            if (objXmlKit["gears"] != null)
            {
                XmlDocument objXmlGearDocument = XmlManager.Load("gear.xml");

                pgbProgress.Visible = true;
                pgbProgress.Value = 0;
                pgbProgress.Maximum = objXmlKit.SelectNodes("gears/gear").Count;
                int i = 0;

                foreach (XmlNode objXmlGear in objXmlKit.SelectNodes("gears/gear"))
                {
                    i++;
                    pgbProgress.Value = i;
                    Application.DoEvents();

                    AddPACKSGear(objXmlGearDocument, objXmlGear, treGear.Nodes[0], _objCharacter, cmsGear, blnCreateChildren);

                    Application.DoEvents();
                }
            }

            // Update Vehicles.
            if (objXmlKit["vehicles"] != null)
            {
                XmlDocument objXmlVehicleDocument = XmlManager.Load("vehicles.xml");

                pgbProgress.Visible = true;
                pgbProgress.Value = 0;
                pgbProgress.Maximum = objXmlKit.SelectNodes("vehicles/vehicle").Count;
                int i = 0;

                foreach (XmlNode objXmlVehicle in objXmlKit.SelectNodes("vehicles/vehicle"))
                {
                    i++;
                    pgbProgress.Value = i;
                    Application.DoEvents();

                    Gear objDefaultSensor = null;

                    TreeNode objNode = new TreeNode();
                    Vehicle objVehicle = null;

                    XmlNode objXmlVehicleNode = objXmlVehicleDocument.SelectSingleNode("/chummer/vehicles/vehicle[name = \"" + objXmlVehicle["name"].InnerText + "\"]");
                    objVehicle.Create(objXmlVehicleNode, objNode, cmsVehicle, cmsVehicleGear, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsWeaponMount, blnCreateChildren);
                    _objCharacter.Vehicles.Add(objVehicle);

                    // Grab the default Sensor that comes with the Vehicle.
                    foreach (Gear objSensorGear in objVehicle.Gear)
                    {
                        if (objSensorGear.Category == "Sensors" && objSensorGear.Cost == "0" && objSensorGear.Rating == 0)
                        {
                            objDefaultSensor = objSensorGear;
                            break;
                        }
                    }

                    // Add any Vehicle Mods.
                    if (objXmlVehicle["mods"] != null)
                    {
                        foreach (XmlNode objXmlMod in objXmlVehicle.SelectNodes("mods/mod"))
                        {
                            TreeNode objModNode = new TreeNode();
                            VehicleMod objMod = new VehicleMod(_objCharacter);

                            int intRating = 0;
                            objXmlMod.TryGetInt32FieldQuickly("rating", ref intRating);
                            int intMarkup = 0;
                            objXmlMod.TryGetInt32FieldQuickly("markup", ref intMarkup);

                            XmlNode objXmlModNode = objXmlVehicleDocument.SelectSingleNode("/chummer/mods/mod[name = \"" + objXmlMod["name"].InnerText + "\"]");
                            objMod.Create(objXmlModNode, objModNode, intRating, objVehicle, intMarkup);
                            objVehicle.Mods.Add(objMod);

                            objNode.Nodes.Add(objModNode);
                            objNode.Expand();
                        }
                    }

                    // Add any Vehicle Gear.
                    if (objXmlVehicle["gears"] != null)
                    {
                        XmlDocument objXmlGearDocument = XmlManager.Load("gear.xml");

                        foreach (XmlNode objXmlGear in objXmlVehicle.SelectNodes("gears/gear"))
                        {
                            List<Weapon> objWeapons = new List<Weapon>();
                            List<TreeNode> objWeaponNodes = new List<TreeNode>();
                            TreeNode objGearNode = new TreeNode();
                            Gear objGear = new Gear(_objCharacter);
                            decimal decQty = 1;

                            int intRating = 0;
                            if (objXmlGear["rating"] != null)
                                intRating = Convert.ToInt32(objXmlGear["rating"].InnerText);
                            string strForceValue = string.Empty;
                            if (objXmlGear["name"].Attributes["select"] != null)
                                strForceValue = objXmlGear["name"].Attributes["select"].InnerText;
                            if (objXmlGear["qty"] != null)
                                decQty = Convert.ToDecimal(objXmlGear["qty"].InnerText, GlobalOptions.InvariantCultureInfo);

                            XmlNode objXmlGearNode = objXmlGearDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + objXmlGear["name"].InnerText + "\"]");
                            objGear.Create(objXmlGearNode, objGearNode, intRating, objWeapons, objWeaponNodes, strForceValue, false, false, false, blnCreateChildren, false);
                            objGear.Quantity = decQty;
                            objGearNode.Text = objGear.DisplayName;
                            objVehicle.Gear.Add(objGear);

                            // Look for child components.
                            if (objXmlGear["gears"] != null)
                            {
                                foreach (XmlNode objXmlChild in objXmlGear.SelectNodes("gears/gear"))
                                {
                                    AddPACKSGear(objXmlGearDocument, objXmlChild, objGearNode, objGear, cmsVehicleGear, blnCreateChildren);
                                }
                            }

                            objGearNode.Expand();
                            objGearNode.ContextMenuStrip = cmsVehicleGear;
                            objNode.Nodes.Add(objGearNode);
                            objNode.Expand();

                            // If this is a Sensor, it will replace the Vehicle's base sensor, so remove it.
                            if (objGear.Category == "Sensors" && objGear.Cost == "0" && objGear.Rating == 0)
                            {
                                objVehicle.Gear.Remove(objDefaultSensor);
                                foreach (TreeNode objSensorNode in objNode.Nodes)
                                {
                                    if (objSensorNode.Tag.ToString() == objDefaultSensor.InternalId)
                                    {
                                        objSensorNode.Remove();
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    // Add any Vehicle Weapons.
                    if (objXmlVehicle["weapons"] != null)
                    {
                        XmlDocument objXmlWeaponDocument = XmlManager.Load("weapons.xml");

                        foreach (XmlNode objXmlWeapon in objXmlVehicle.SelectNodes("weapons/weapon"))
                        {
                            List<TreeNode> lstWeaponNodes = new List<TreeNode>();
                            Weapon objWeapon = new Weapon(_objCharacter);

                            List<Weapon> objSubWeapons = new List<Weapon>();
                            XmlNode objXmlWeaponNode = objXmlWeaponDocument.SelectSingleNode("/chummer/weapons/weapon[name = \"" + objXmlWeapon["name"].InnerText + "\"]");
                            objWeapon.Create(objXmlWeaponNode, lstWeaponNodes, cmsVehicleWeapon, cmsVehicleWeaponAccessory, objSubWeapons, cmsVehicleWeaponAccessoryGear, blnCreateChildren);
                            objWeapon.VehicleMounted = true;

                            // Find the first Weapon Mount in the Vehicle.
                            foreach (VehicleMod objMod in objVehicle.Mods)
                            {
                                if (objMod.Name.Contains("Weapon Mount") || (!string.IsNullOrEmpty(objMod.WeaponMountCategories) && objMod.WeaponMountCategories.Contains(objWeapon.Category)))
                                {
                                    objMod.Weapons.Add(objWeapon);
                                    objMod.Weapons.AddRange(objSubWeapons);
                                    foreach (TreeNode objModNode in objNode.Nodes)
                                    {
                                        if (objModNode.Tag.ToString() == objMod.InternalId)
                                        {
                                            foreach (TreeNode objLoopNode in lstWeaponNodes)
                                            {
                                                objLoopNode.ContextMenuStrip = cmsWeapon;
                                                objModNode.Nodes.Add(objLoopNode);
                                            }
                                            objModNode.Expand();
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }

                            // Look for Weapon Accessories.
                            if (objXmlWeapon["accessories"] != null)
                            {
                                foreach (XmlNode objXmlAccessory in objXmlWeapon.SelectNodes("accessories/accessory"))
                                {
                                    XmlNode objXmlAccessoryNode = objXmlWeaponDocument.SelectSingleNode("/chummer/accessories/accessory[name = \"" + objXmlAccessory["name"].InnerText + "\"]");
                                    WeaponAccessory objMod = new WeaponAccessory(_objCharacter);
                                    TreeNode objModNode = new TreeNode();
                                    string strMount = "Internal";
                                    int intRating = 0;
                                    if (objXmlAccessory["mount"] != null)
                                        strMount = objXmlAccessory["mount"].InnerText;
                                    string strExtraMount = "None";
                                    if (objXmlAccessory.InnerXml.Contains("<extramount>"))
                                        strMount = objXmlAccessory["extramount"].InnerText;
                                    objMod.Create(objXmlAccessoryNode, objModNode, new Tuple<string, string>(strMount, strExtraMount), intRating, cmsWeaponAccessoryGear, false, blnCreateChildren);
                                    objModNode.ContextMenuStrip = cmsWeaponAccessory;
                                    objMod.Parent = objWeapon;

                                    objWeapon.WeaponAccessories.Add(objMod);

                                    lstWeaponNodes[0].Nodes.Add(objModNode);
                                    lstWeaponNodes[0].Expand();
                                }
                            }
                        }
                    }

                    objNode.ContextMenuStrip = cmsVehicle;
                    objVehicleTreeNodes.Nodes.Add(objNode);
                    objVehicleTreeNodes.Expand();

                    Application.DoEvents();
                }
            }

            pgbProgress.Visible = false;

            if (frmPickPACKSKit.AddAgain)
                AddPACKSKit();

            PopulateGearList();
            ScheduleCharacterUpdate();
            if (blnDoQualityTreeUpdate)
                RefreshQualityNames(treQualities);
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        /// <summary>
        /// Create a PACKS Kit from the character.
        /// </summary>
        public void CreatePACKSKit()
        {
            frmCreatePACKSKit frmBuildPACKSKit = new frmCreatePACKSKit(_objCharacter);
            frmBuildPACKSKit.ShowDialog(this);
        }

        /// <summary>
        /// Dummy method to trap the Options MRUChanged Event.
        /// </summary>
        public void PopulateMRU()
        {
        }

        /// <summary>
        /// Update the contents of the Initiation Grade list.
        /// </summary>
        public void UpdateInitiationGradeTree()
        {
            treMetamagic.Nodes.Clear();
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                TreeNode nodGrade = treMetamagic.Nodes.Add(objGrade.Grade.ToString(), objGrade.Text);
                nodGrade.Tag = objGrade.InternalId;
                nodGrade.ContextMenuStrip = cmsMetamagic;
                if (!string.IsNullOrEmpty(objGrade.Notes))
                    nodGrade.ForeColor = Color.SaddleBrown;
                nodGrade.ToolTipText = objGrade.Notes;

                foreach (Art objArt in _objCharacter.Arts)
                {
                    if (objArt.Grade == objGrade.Grade)
                    {
                        TreeNode nodArt = nodGrade.Nodes.Add(objArt.InternalId, LanguageManager.GetString("Label_Art") + " " + objArt.DisplayName);
                        nodArt.Tag = objArt.InternalId;
                        nodArt.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objArt.Notes))
                            nodArt.ForeColor = Color.SaddleBrown;
                        nodArt.ToolTipText = CommonFunctions.WordWrap(objArt.Notes, 100);
                    }
                }
                foreach (Metamagic objMetamagic in _objCharacter.Metamagics)
                {
                    if (objMetamagic.Grade == objGrade.Grade)
                    {
                        string strName = string.Empty;
                        if (_objCharacter.MAGEnabled)
                            strName = LanguageManager.GetString("Label_Metamagic") + " " + objMetamagic.DisplayName;
                        else
                            strName = LanguageManager.GetString("Label_Echo") + " " + objMetamagic.DisplayName;
                        TreeNode nodMetamagic = nodGrade.Nodes.Add(objMetamagic.InternalId, strName);
                        nodMetamagic.Tag = objMetamagic.InternalId;
                        nodMetamagic.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objMetamagic.Notes))
                            nodMetamagic.ForeColor = Color.SaddleBrown;
                        nodMetamagic.ToolTipText = CommonFunctions.WordWrap(objMetamagic.Notes, 100);
                    }
                }
                foreach (Spell objSpell in _objCharacter.Spells)
                {
                    if (objSpell.Grade == objGrade.Grade)
                    {
                        string strCategory = string.Empty;
                        if (objSpell.Category == "Rituals")
                            strCategory = LanguageManager.GetString("Label_Ritual") + " ";
                        if (objSpell.Category == "Enchantments")
                            strCategory = LanguageManager.GetString("Label_Enchantment") + " ";
                        TreeNode nodSpell = nodGrade.Nodes.Add(objSpell.InternalId, strCategory + " " + objSpell.DisplayName);
                        nodSpell.Tag = objSpell.InternalId;
                        nodSpell.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objSpell.Notes))
                            nodSpell.ForeColor = Color.SaddleBrown;
                        nodSpell.ToolTipText = CommonFunctions.WordWrap(objSpell.Notes, 100);
                    }
                }
                foreach (Enhancement objEnhancement in _objCharacter.Enhancements)
                {
                    if (objEnhancement.Grade == objGrade.Grade)
                    {
                        TreeNode nodEnhancement = nodGrade.Nodes.Add(objEnhancement.InternalId, LanguageManager.GetString("Label_Enhancement") + " " + objEnhancement.DisplayName);
                        nodEnhancement.Tag = objEnhancement.InternalId;
                        nodEnhancement.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objEnhancement.Notes))
                            nodEnhancement.ForeColor = Color.SaddleBrown;
                        nodEnhancement.ToolTipText = CommonFunctions.WordWrap(objEnhancement.Notes, 100);
                    }
                }
                foreach (Power objPower in _objCharacter.Powers)
                {
                    foreach (Enhancement objEnhancement in objPower.Enhancements)
                    {
                        if (objEnhancement.Grade == objGrade.Grade)
                        {
                            TreeNode nodEnhancement = nodGrade.Nodes.Add(objEnhancement.InternalId, LanguageManager.GetString("Label_Enhancement") + " " + objEnhancement.DisplayName);
                            nodEnhancement.Tag = objEnhancement.InternalId;
                            nodEnhancement.ContextMenuStrip = cmsInitiationNotes;
                            if (!string.IsNullOrEmpty(objEnhancement.Notes))
                                nodEnhancement.ForeColor = Color.SaddleBrown;
                            nodEnhancement.ToolTipText = CommonFunctions.WordWrap(objEnhancement.Notes, 100);
                        }
                    }
                }
            }
            foreach (Metamagic objMetamagic in _objCharacter.Metamagics.Where(x => x.Grade < 0))
            {
                string strName = string.Empty;
                if (_objCharacter.MAGEnabled)
                    strName = LanguageManager.GetString("Label_Metamagic") + " " + objMetamagic.DisplayName;
                else
                    strName = LanguageManager.GetString("Label_Echo") + " " + objMetamagic.DisplayName;
                TreeNode nodMetamagic = treMetamagic.Nodes.Add(objMetamagic.InternalId, strName);
                nodMetamagic.Tag = objMetamagic.InternalId;
                nodMetamagic.ContextMenuStrip = cmsInitiationNotes;
                if (!string.IsNullOrEmpty(objMetamagic.Notes))
                    nodMetamagic.ForeColor = Color.SaddleBrown;
                else
                    nodMetamagic.ForeColor = SystemColors.GrayText;
                nodMetamagic.ToolTipText = CommonFunctions.WordWrap(objMetamagic.Notes, 100);
            }
            treMetamagic.ExpandAll();
        }

        /// <summary>
        /// Update the karma cost tooltip for Initiation/Submersion.
        /// </summary>
        private void UpdateInitiationCost()
        {
            decimal decMultiplier = 1.0m;
            int intAmount = 0;
            string strInitTip = string.Empty;

            if (_objCharacter.MAGEnabled)
            {
                if (chkInitiationGroup.Checked)
                    decMultiplier -= 0.1m;
                if (chkInitiationOrdeal.Checked)
                    decMultiplier -= 0.1m;
                if (chkInitiationSchooling.Checked)
                    decMultiplier -= 0.1m;
                intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(_objOptions.KarmaInititationFlat + (_objCharacter.InitiateGrade + 1) * _objOptions.KarmaInitiation, GlobalOptions.CultureInfo) * decMultiplier));

                strInitTip = LanguageManager.GetString("Tip_ImproveInitiateGrade").Replace("{0}", (_objCharacter.InitiateGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
            }
            else
            {
                if (chkInitiationGroup.Checked)
                    decMultiplier -= 0.2m;
                if (chkInitiationOrdeal.Checked)
                    decMultiplier -= 0.2m;
                if (chkInitiationSchooling.Checked)
                    decMultiplier -= 0.1m;
                intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(_objOptions.KarmaInititationFlat + (_objCharacter.SubmersionGrade + 1) * _objOptions.KarmaInitiation, GlobalOptions.CultureInfo) * decMultiplier));

                strInitTip = LanguageManager.GetString("Tip_ImproveSubmersionGrade").Replace("{0}", (_objCharacter.SubmersionGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
            }

            tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
        }

        /// <summary>
        /// Change the character's Metatype or priority selection.
        /// </summary>
        public void ChangeMetatype()
        {
            // Determine if the character has any chosen Qualities that depend on their current Metatype. If so, don't let the change happen.
            XmlDocument objXmlDocument = XmlManager.Load("qualities.xml");
            string strQualities = string.Empty;
            foreach (Quality objQuality in _objCharacter.Qualities)
            {
                if (objQuality.OriginSource != QualitySource.Metatype && objQuality.OriginSource != QualitySource.MetatypeRemovable)
                {
                    XmlNode objXmlQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objQuality.Name + "\"]");
                    if (objXmlQuality.SelectNodes("required/oneof/metatype[. = \"" + _objCharacter.Metatype + "\"]").Count > 0 || objXmlQuality.SelectNodes("required/oneof/metavariant[. = \"" + _objCharacter.Metavariant + "\"]").Count > 0)
                        strQualities += "\n\t" + objQuality.DisplayNameShort;
                    if (objXmlQuality.SelectNodes("required/allof/metatype[. = \"" + _objCharacter.Metatype + "\"]").Count > 0 || objXmlQuality.SelectNodes("required/allof/metavariant[. = \"" + _objCharacter.Metavariant + "\"]").Count > 0)
                        strQualities += "\n\t" + objQuality.DisplayNameShort;
                }
            }
            if (!string.IsNullOrEmpty(strQualities))
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotChangeMetatype") + strQualities, LanguageManager.GetString("MessageTitle_CannotChangeMetatype"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            List<Quality> lstRemoveQualities = new List<Quality>();
            //TODO: This shouldn't be required as of 17/10/16. Revert in case something weird shows up.
            /*Revert all Special Qualities
            foreach (Quality objQuality in _objCharacter.Qualities)
            {
                switch (objQuality.Name)
                {
                    case "Magician":
                        _objCharacter.MAGEnabled = false;
                        _objCharacter.MagicianEnabled = false;
                        lstRemoveQualities.Add(objQuality);
                        break;
                    case "Aspected Magician":
                        _objCharacter.MAGEnabled = false;
                        _objCharacter.MagicianEnabled = false;
                        lstRemoveQualities.Add(objQuality);
                        break;
                    case "Adept":
                        _objCharacter.MAGEnabled = false;
                        _objCharacter.AdeptEnabled = false;
                        lstRemoveQualities.Add(objQuality);
                        break;
                    case "Mystic Adept":
                        _objCharacter.MAGEnabled = false;
                        _objCharacter.MagicianEnabled = false;
                        _objCharacter.AdeptEnabled = false;
                        lstRemoveQualities.Add(objQuality);
                        break;
                    case "Technomancer":
                        _objCharacter.RESEnabled = false;
                        _objCharacter.TechnomancerEnabled = false;
                        lstRemoveQualities.Add(objQuality);
                        break;
                    default:
                        break;
                }
            }

            // Remove any Qualities the character received from their Metatype, then remove the Quality.
            foreach (Quality objQuality in lstRemoveQualities)
            {
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                _objCharacter.Qualities.Remove(objQuality);
            }
            lstRemoveQualities.Clear();

            int intEssenceLoss = 0;
            if (!_objOptions.ESSLossReducesMaximumOnly)
                intEssenceLoss = _objCharacter.EssencePenalty;

            // Determine the number of points that have been put into Attributes.
            int intBOD = _objCharacter.BOD.Base - _objCharacter.BOD.MetatypeMinimum;
            int intAGI = _objCharacter.AGI.Base - _objCharacter.AGI.MetatypeMinimum;
            int intREA = _objCharacter.REA.Base - _objCharacter.REA.MetatypeMinimum;
            int intSTR = _objCharacter.STR.Base - _objCharacter.STR.MetatypeMinimum;
            int intCHA = _objCharacter.CHA.Base - _objCharacter.CHA.MetatypeMinimum;
            int intINT = _objCharacter.INT.Base - _objCharacter.INT.MetatypeMinimum;
            int intLOG = _objCharacter.LOG.Base - _objCharacter.LOG.MetatypeMinimum;
            int intWIL = _objCharacter.WIL.Base - _objCharacter.WIL.MetatypeMinimum;
            int intEDG = _objCharacter.EDG.Base - _objCharacter.EDG.MetatypeMinimum;
            int intDEP = _objCharacter.DEP.Base - _objCharacter.DEP.MetatypeMinimum;
            int intMAG = Math.Max(_objCharacter.MAG.Base - _objCharacter.MAG.MetatypeMinimum, 0);
            int intRES = Math.Max(_objCharacter.RES.Base - _objCharacter.RES.MetatypeMinimum, 0);
            */

            // Build a list of the current Metatype's Improvements to remove if the Metatype changes.
            List<Improvement> lstImprovement = _objCharacter.Improvements.Where(objImprovement => objImprovement.ImproveSource == Improvement.ImprovementSource.Metatype || objImprovement.ImproveSource == Improvement.ImprovementSource.Metavariant || objImprovement.ImproveSource == Improvement.ImprovementSource.Heritage).ToList();

            // Build a list of the current Metatype's Qualities to remove if the Metatype changes.
            lstRemoveQualities.AddRange(_objCharacter.Qualities.Where(objQuality => objQuality.OriginSource == QualitySource.Metatype || objQuality.OriginSource == QualitySource.MetatypeRemovable));

            if (_objCharacter.BuildMethod == CharacterBuildMethod.Priority || _objCharacter.BuildMethod == CharacterBuildMethod.SumtoTen)
            {
                frmPriorityMetatype frmSelectMetatype = new frmPriorityMetatype(_objCharacter)
                {
                    Attributes = _objCharacter.AttributesPriority[0].ToString(),
                    Skills = _objCharacter.SkillsPriority[0].ToString(),
                    Resources = _objCharacter.ResourcesPriority[0].ToString(),
                    Special = _objCharacter.SpecialPriority[0].ToString(),
                    Metatype = _objCharacter.MetatypePriority[0].ToString(),
                    SelectedMetatype = _objCharacter.Metatype,
                    SelectedMetavariant = _objCharacter.Metavariant,
                    SelectedMetatypeCategory = _objCharacter.MetatypeCategory,
                    SelectedTalent = _objCharacter.TalentPriority,
                    PriorityBonusSkillList = _objCharacter.PriorityBonusSkillList
                };
                frmSelectMetatype.ShowDialog(this);
                if (frmSelectMetatype.DialogResult == DialogResult.Cancel)
                    return;
            }
            else
            {
                frmKarmaMetatype frmSelectMetatype = new frmKarmaMetatype(_objCharacter);
                frmSelectMetatype.ShowDialog(this);

                if (frmSelectMetatype.DialogResult == DialogResult.Cancel)
                    return;
            }

            // Remove any Improvements the character received from their Metatype.
            ImprovementManager.RemoveImprovements(_objCharacter, lstImprovement);

            // Remove any Qualities the character received from their Metatype, then remove the Quality.
            foreach (Quality objQuality in lstRemoveQualities)
            {
                ImprovementManager.RemoveImprovements(_objCharacter, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                _objCharacter.Qualities.Remove(objQuality);
            }

            // Populate the Qualities list.
            RefreshQualities(treQualities,cmsQuality,true);
            treQualities.SortCustom();

            XmlDocument objMetatypeDoc = XmlManager.Load("metatypes.xml");
            XmlNode objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + _objCharacter.Metatype + "\"]");
            if (objMetatypeNode == null)
            {
                objMetatypeDoc = XmlManager.Load("critters.xml");
                objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + _objCharacter.Metatype + "\"]");
            }

            string strMetatype = objMetatypeNode["translate"]?.InnerText ?? _objCharacter.Metatype;
            string strBook = _objOptions.LanguageBookShort(objMetatypeNode["source"].InnerText);
            string strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;

            if (!string.IsNullOrEmpty(_objCharacter.Metavariant))
            {
                objMetatypeNode = objMetatypeNode.SelectSingleNode("metavariants/metavariant[name = \"" + _objCharacter.Metavariant + "\"]");

                strMetatype += objMetatypeNode["translate"] != null
                    ? " (" + objMetatypeNode["translate"].InnerText + ")"
                    : " (" + _objCharacter.Metavariant + ")";

                strBook = _objOptions.LanguageBookShort(objMetatypeNode["source"].InnerText);
                strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;
            }
            lblMetatype.Text = strMetatype;
            lblMetatypeSource.Text = strBook + " " + strPage;
            tipTooltip.SetToolTip(lblMetatypeSource, _objOptions.LanguageBookLong(objMetatypeNode["source"].InnerText) + " " + LanguageManager.GetString("String_Page") + " " + strPage);

            // If we're working with Karma, the Metatype doesn't cost anything.
            if (_objOptions.MetatypeCostsKarma)
            {
                lblKarmaMetatypeBP.Text = (_objCharacter.MetatypeBP * _objOptions.MetatypeCostsKarmaMultiplier).ToString() + " " +
                                          LanguageManager.GetString("String_Karma");
            }
            else
            {
                lblKarmaMetatypeBP.Text = "0 " + LanguageManager.GetString("String_Karma");
            }

            string strToolTip = _objCharacter.Metatype;
            if (!string.IsNullOrEmpty(_objCharacter.Metavariant))
                strToolTip += " (" + _objCharacter.Metavariant + ")";
            strToolTip += " (" + _objCharacter.MetatypeBP.ToString() + ")";
            tipTooltip.SetToolTip(lblKarmaMetatypeBP, strToolTip);

            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        /// <summary>
        /// Update the character's Mentor Spirit/Paragon information.
        /// </summary>
        private void UpdateMentorSpirits()
        {
            MentorSpirit objMentor = _objCharacter.MentorSpirits.FirstOrDefault();

            if (objMentor == null)
            {
                lblMentorSpiritLabel.Visible = false;
                lblMentorSpirit.Visible = false;
                lblMentorSpiritInformation.Visible = false;
            }
            else
            {
                lblMentorSpiritLabel.Visible = true;
                lblMentorSpirit.Visible = true;
                lblMentorSpiritInformation.Visible = true;
                lblMentorSpirit.Text = objMentor.DisplayName;
                lblMentorSpiritInformation.Text = LanguageManager.GetString("Label_SelectMentorSpirit_Advantage") + " " +
                                   objMentor.DisplayAdvantage + "\n\n" +
                                   LanguageManager.GetString("Label_SelectMetamagic_Disadvantage") + " " +
                                   objMentor.Disadvantage;
            }
        }

        /// <summary>
        /// Determine the integer portion of an item's Availability.
        /// </summary>
        /// <param name="strAvail">Availability string to parse.</param>
        private int GetAvailInt(string strAvail)
        {
            string strReturn = strAvail.TrimStart('+');
            if (strReturn.EndsWith(LanguageManager.GetString("String_AvailRestricted")))
                strReturn = strReturn.TrimEnd(LanguageManager.GetString("String_AvailRestricted"), true);
            if (strReturn.EndsWith(LanguageManager.GetString("String_AvailForbidden")))
                strReturn = strReturn.TrimEnd(LanguageManager.GetString("String_AvailForbidden"), true);

            return Convert.ToInt32(strReturn);
        }

        /// <summary>
        /// Create a Cyberware Suite from the Cyberware the character currently has.
        /// </summary>
        private void CreateCyberwareSuite(Improvement.ImprovementSource objSource)
        {
            // Make sure all of the Cyberware the character has is of the same grade.
            string strGrade = string.Empty;
            bool blnOK = true;
            foreach (Cyberware objCyberware in _objCharacter.Cyberware)
            {
                if (objCyberware.SourceType == objSource)
                {
                    if (string.IsNullOrEmpty(strGrade))
                        strGrade = objCyberware.Grade.ToString();
                    else if (strGrade != objCyberware.Grade.ToString())
                    {
                        blnOK = false;
                        break;
                    }
                }
            }
            if (!blnOK)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CyberwareGradeMismatch"), LanguageManager.GetString("MessageTitle_CyberwareGradeMismatch"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            // The character has no Cyberware!
            if (string.IsNullOrEmpty(strGrade))
            {
                MessageBox.Show(LanguageManager.GetString("Message_NoCyberware"), LanguageManager.GetString("MessageTitle_NoCyberware"), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            frmCreateCyberwareSuite frmBuildCyberwareSuite = new frmCreateCyberwareSuite(_objCharacter, objSource);
            frmBuildCyberwareSuite.ShowDialog(this);
        }

        /// <summary>
        /// Set the ToolTips from the Language file.
        /// </summary>
        private void SetTooltips()
        {
            // Common Tab.
            tipTooltip.SetToolTip(lblAttributes, LanguageManager.GetString("Tip_CommonAttributes"));
            tipTooltip.SetToolTip(lblAttributesBase, LanguageManager.GetString("Tip_CommonAttributesBase"));
            tipTooltip.SetToolTip(lblAttributesAug, LanguageManager.GetString("Tip_CommonAttributesAug"));
            tipTooltip.SetToolTip(lblAttributesMetatype, LanguageManager.GetString("Tip_CommonAttributesMetatypeLimits"));
            tipTooltip.SetToolTip(lblNuyen, string.Format(LanguageManager.GetString("Tip_CommonNuyen"), _objCharacter.Options.KarmaNuyenPer));
            // Spells Tab.
            tipTooltip.SetToolTip(lblSelectedSpells, LanguageManager.GetString("Tip_SpellsSelectedSpells"));
            tipTooltip.SetToolTip(lblSpirits, LanguageManager.GetString("Tip_SpellsSpirits"));
            // Complex Forms Tab.
            tipTooltip.SetToolTip(lblComplexForms, LanguageManager.GetString("Tip_TechnomancerComplexForms"));
            tipTooltip.SetToolTip(lblSprites, LanguageManager.GetString("Tip_TechnomancerSprites"));
            // Armor Tab.
            tipTooltip.SetToolTip(chkArmorEquipped, LanguageManager.GetString("Tip_ArmorEquipped"));
            // Weapon Tab.
            tipTooltip.SetToolTip(chkWeaponAccessoryInstalled, LanguageManager.GetString("Tip_WeaponInstalled"));
            // Gear Tab.
            tipTooltip.SetToolTip(chkActiveCommlink, LanguageManager.GetString("Tip_ActiveCommlink"));
            // Vehicles Tab.
            tipTooltip.SetToolTip(chkVehicleWeaponAccessoryInstalled, LanguageManager.GetString("Tip_WeaponInstalled"));
            // Character Info Tab.
            tipTooltip.SetToolTip(chkCharacterCreated, LanguageManager.GetString("Tip_CharacterCreated"));
            // Build Point Summary Tab.
            tipTooltip.SetToolTip(lblBuildPrimaryAttributes, LanguageManager.GetString("Tip_CommonAttributes"));
            tipTooltip.SetToolTip(lblBuildPositiveQualities, LanguageManager.GetString("Tip_BuildPositiveQualities"));
            tipTooltip.SetToolTip(lblBuildNegativeQualities, LanguageManager.GetString("Tip_BuildNegativeQualities"));
            tipTooltip.SetToolTip(lblBuildContacts, LanguageManager.GetString("Tip_CommonContacts").Replace("{0}", _objOptions.BPContact.ToString()));
            tipTooltip.SetToolTip(lblBuildEnemies, LanguageManager.GetString("Tip_CommonEnemies"));
            tipTooltip.SetToolTip(lblBuildNuyen, LanguageManager.GetString("Tip_CommonNuyen").Replace("{0}", _objOptions.NuyenPerBP.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥'));
            tipTooltip.SetToolTip(lblBuildSkillGroups, LanguageManager.GetString("Tip_SkillsSkillGroups").Replace("{0}", _objOptions.BPSkillGroup.ToString()));
            tipTooltip.SetToolTip(lblBuildActiveSkills, LanguageManager.GetString("Tip_SkillsActiveSkills").Replace("{0}", _objOptions.KarmaSpecialization.ToString()).Replace("{1}", _objOptions.BPActiveSkillSpecialization.ToString()));
            tipTooltip.SetToolTip(lblBuildKnowledgeSkills, LanguageManager.GetString("Tip_SkillsKnowledgeSkills").Replace("{0}", _objOptions.FreeKnowledgeMultiplier.ToString()).Replace("{1}", _objOptions.BPKnowledgeSkill.ToString()));
            tipTooltip.SetToolTip(lblBuildSpells, LanguageManager.GetString("Tip_SpellsSelectedSpells").Replace("{0}", _objOptions.BPSpell.ToString()));
            tipTooltip.SetToolTip(lblBuildFoci, LanguageManager.GetString("Tip_BuildFoci").Replace("{0}", _objOptions.BPFocus.ToString()));
            tipTooltip.SetToolTip(lblBuildSpirits, LanguageManager.GetString("Tip_SpellsSpirits").Replace("{0}", _objOptions.BPSpirit.ToString()));
            tipTooltip.SetToolTip(lblBuildSprites, LanguageManager.GetString("Tip_TechnomancerSprites").Replace("{0}", _objOptions.BPSpirit.ToString()));
            tipTooltip.SetToolTip(lblBuildComplexForms, LanguageManager.GetString("Tip_TechnomancerComplexForms").Replace("{0}", _objOptions.BPComplexForm.ToString()));
            tipTooltip.SetToolTip(lblBuildManeuvers, LanguageManager.GetString("Tip_BuildManeuvers").Replace("{0}", _objOptions.BPMartialArtManeuver.ToString()));
            // Other Info Tab.
            tipTooltip.SetToolTip(lblCMPhysicalLabel, LanguageManager.GetString("Tip_OtherCMPhysical"));
            tipTooltip.SetToolTip(lblCMStunLabel, LanguageManager.GetString("Tip_OtherCMStun"));
            tipTooltip.SetToolTip(lblINILabel, LanguageManager.GetString("Tip_OtherInitiative"));
            tipTooltip.SetToolTip(lblMatrixINILabel, LanguageManager.GetString("Tip_OtherMatrixInitiative"));
            tipTooltip.SetToolTip(lblAstralINILabel, LanguageManager.GetString("Tip_OtherAstralInitiative"));
            tipTooltip.SetToolTip(lblArmorLabel, LanguageManager.GetString("Tip_OtherArmor"));
            tipTooltip.SetToolTip(lblESS, LanguageManager.GetString("Tip_OtherEssence"));
            tipTooltip.SetToolTip(lblRemainingNuyenLabel, LanguageManager.GetString("Tip_OtherNuyen"));
            tipTooltip.SetToolTip(lblMovementLabel, LanguageManager.GetString("Tip_OtherMovement"));
            tipTooltip.SetToolTip(lblSwimLabel, LanguageManager.GetString("Tip_OtherSwim"));
            tipTooltip.SetToolTip(lblFlyLabel, LanguageManager.GetString("Tip_OtherFly"));
            tipTooltip.SetToolTip(lblComposureLabel, LanguageManager.GetString("Tip_OtherComposure"));
            tipTooltip.SetToolTip(lblJudgeIntentionsLabel, LanguageManager.GetString("Tip_OtherJudgeIntentions"));
            tipTooltip.SetToolTip(lblLiftCarryLabel, LanguageManager.GetString("Tip_OtherLiftAndCarry"));
            tipTooltip.SetToolTip(lblMemoryLabel, LanguageManager.GetString("Tip_OtherMemory"));

            // Reposition controls based on their new sizes.
            // Common Tab.
            txtAlias.Left = lblAlias.Left + lblAlias.Width + 6;
            txtAlias.Width = lblMetatypeLabel.Left - 6 - txtAlias.Left;
            cmdDeleteQuality.Left = cmdAddQuality.Left + cmdAddQuality.Width + 6;
            // Martial Arts Tab.
            cmdDeleteMartialArt.Left = cmdAddMartialArt.Left + cmdAddMartialArt.Width + 6;
            // Magician Tab.
            cmdDeleteSpell.Left = cmdAddSpell.Left + cmdAddSpell.Width + 6;
            // Technomancer Tab.
            cmdDeleteComplexForm.Left = cmdAddComplexForm.Left + cmdAddComplexForm.Width + 6;
            // Advanced Programs Tab.
            cmdDeleteAIProgram.Left = cmdAddAIProgram.Left + cmdAddAIProgram.Width + 6;
            // Critter Powers Tab.
            cmdDeleteCritterPower.Left = cmdAddCritterPower.Left + cmdAddCritterPower.Width + 6;
            // Cyberware Tab.
            cmdAddBioware.Left = cmdAddCyberware.Left + cmdAddCyberware.Width + 6;
            cmdDeleteCyberware.Left = cmdAddBioware.Left + cmdAddBioware.Width + 6;
            // Lifestyle Tab.
            cmdDeleteLifestyle.Left = cmdAddLifestyle.Left + cmdAddLifestyle.Width + 6;
            // Armor Tab.
            cmdDeleteArmor.Left = cmdAddArmor.Left + cmdAddArmor.Width + 6;
            cmdAddArmorBundle.Left = cmdDeleteArmor.Left + cmdDeleteArmor.Width + 6;
            cmdArmorEquipAll.Left = chkArmorEquipped.Left + chkArmorEquipped.Width + 6;
            cmdArmorUnEquipAll.Left = cmdArmorEquipAll.Left + cmdArmorEquipAll.Width + 6;
            // Weapons Tab.
            cmdDeleteWeapon.Left = cmdAddWeapon.Left + cmdAddWeapon.Width + 6;
            cmdAddWeaponLocation.Left = cmdDeleteWeapon.Left + cmdDeleteWeapon.Width + 6;
            // Gear Tab.
            cmdDeleteGear.Left = cmdAddGear.Left + cmdAddGear.Width + 6;
            cmdAddLocation.Left = cmdDeleteGear.Left + cmdDeleteGear.Width + 6;
            // Vehicle Tab.
            cmdDeleteVehicle.Left = cmdAddVehicle.Left + cmdAddVehicle.Width + 6;
            cmdAddVehicleLocation.Left = cmdDeleteVehicle.Left + cmdDeleteVehicle.Width + 6;
        }

        /// <summary>
        /// Refresh the list of Improvements.
        /// </summary>
        private void RefreshImprovements()
        {
        }

        private void MoveControls()
        {
            int intWidth = 0;

            // Common tab.
            lblAlias.Left = Math.Max(288, cmdDeleteQuality.Left + cmdDeleteQuality.Width + 6);
            txtAlias.Left = lblAlias.Left + lblAlias.Width + 6;
            txtAlias.Width = lblMetatypeLabel.Left - txtAlias.Left - 6;
            nudNuyen.Left = lblNuyen.Left + lblNuyen.Width + 6;
            lblNuyenTotal.Left = nudNuyen.Left + nudNuyen.Width + 6;
            lblQualityLevelLabel.Left = nudQualityLevel.Left - lblQualityLevelLabel.Width - 6;

            // Martial Arts tab.
            lblMartialArtSource.Left = lblMartialArtSourceLabel.Right + 6;

            // Spells and Spirits tab.
            intWidth = Math.Max(lblSpellDescriptorsLabel.Width, lblSpellCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellRangeLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellDurationLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellSourceLabel.Width);

            lblSpellDescriptors.Left = lblSpellDescriptorsLabel.Left + intWidth + 6;
            lblSpellCategory.Left = lblSpellCategoryLabel.Left + intWidth + 6;
            lblSpellRange.Left = lblSpellRangeLabel.Left + intWidth + 6;
            lblSpellDuration.Left = lblSpellDurationLabel.Left + intWidth + 6;
            lblSpellSource.Left = lblSpellSourceLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblSpellTypeLabel.Width, lblSpellDamageLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellDVLabel.Width);
            lblSpellTypeLabel.Left = lblSpellCategoryLabel.Left + 179;
            lblSpellType.Left = lblSpellTypeLabel.Left + intWidth + 6;
            lblSpellDamageLabel.Left = lblSpellRangeLabel.Left + 179;
            lblSpellDamage.Left = lblSpellDamageLabel.Left + intWidth + 6;
            lblSpellDVLabel.Left = lblSpellDurationLabel.Left + 179;
            lblSpellDV.Left = lblSpellDVLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblTraditionLabel.Width, lblDrainAttributesLabel.Width);
            intWidth = Math.Max(intWidth, lblMentorSpiritLabel.Width);
            cboTradition.Left = lblTraditionLabel.Left + intWidth + 6;
            cboDrain.Left = lblTraditionLabel.Left + intWidth + 6;
            lblDrainAttributes.Left = lblDrainAttributesLabel.Left + intWidth + 6;
            lblTraditionSource.Left = lblTraditionSourceLabel.Left + intWidth + 6;
            lblDrainAttributesValue.Left = lblDrainAttributes.Left + 91;
            lblMentorSpirit.Left = lblMentorSpiritLabel.Left + intWidth + 6;

            lblTraditionName.Left = cboTradition.Left + cboTradition.Width + 10;
            lblSpiritCombat.Left = cboTradition.Left + cboTradition.Width + 10;
            lblSpiritDetection.Left = cboTradition.Left + cboTradition.Width + 10;
            lblSpiritHealth.Left = cboTradition.Left + cboTradition.Width + 10;
            lblSpiritIllusion.Left = cboTradition.Left + cboTradition.Width + 10;
            lblSpiritManipulation.Left = cboTradition.Left + cboTradition.Width + 10;
            intWidth = Math.Max(lblTraditionName.Width, lblSpiritCombat.Width);
            intWidth = Math.Max(intWidth, lblSpiritDetection.Width);
            intWidth = Math.Max(intWidth, lblSpiritHealth.Width);
            intWidth = Math.Max(intWidth, lblSpiritIllusion.Width);
            intWidth = Math.Max(intWidth, lblSpiritManipulation.Width);
            txtTraditionName.Left = lblTraditionName.Left + intWidth + 6;
            cboSpiritCombat.Left = lblTraditionName.Left + intWidth + 6;
            cboSpiritDetection.Left = lblTraditionName.Left + intWidth + 6;
            cboSpiritHealth.Left = lblTraditionName.Left + intWidth + 6;
            cboSpiritIllusion.Left = lblTraditionName.Left + intWidth + 6;
            cboSpiritManipulation.Left = lblTraditionName.Left + intWidth + 6;

            // Sprites and Complex Forms tab.
            int intLeft = lblDurationLabel.Width;
            intLeft = Math.Max(intLeft, lblTargetLabel.Width);
            intLeft = Math.Max(intLeft, lblFV.Width);
            intLeft = Math.Max(intLeft, lblComplexFormSource.Width);

            lblTarget.Left = lblTargetLabel.Left + intLeft + 6;
            lblDuration.Left = lblDurationLabel.Left + intLeft + 6;
            lblFV.Left = lblFVLabel.Left + intLeft + 6;
            lblComplexFormSource.Left = lblComplexFormSourceLabel.Left + intLeft + 6;

            intWidth = lblFadingAttributesLabel.Width;
            lblFadingAttributes.Left = lblFadingAttributesLabel.Left + intWidth + 6;
            lblFadingAttributesValue.Left = lblFadingAttributes.Left + 91;

            // Advanced Programs tab.
            intLeft = lblAIProgramsRequiresLabel.Width;
            intLeft = Math.Max(intLeft, lblAIProgramsSourceLabel.Width);

            lblAIProgramsRequires.Left = lblAIProgramsRequiresLabel.Left + intLeft + 6;
            lblAIProgramsSource.Left = lblAIProgramsSourceLabel.Left + intLeft + 6;

            // Critter Powers tab.
            lblCritterPowerPointsLabel.Left = cmdDeleteCritterPower.Left + cmdDeleteCritterPower.Width + 16;
            lblCritterPowerPoints.Left = lblCritterPowerPointsLabel.Left + lblCritterPowerPointsLabel.Width + 6;

            intWidth = Math.Max(lblCritterPowerNameLabel.Width, lblCritterPowerCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerTypeLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerActionLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerRangeLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerDurationLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerSourceLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerPointCostLabel.Width);

            lblCritterPowerName.Left = lblCritterPowerNameLabel.Left + intWidth + 6;
            lblCritterPowerCategory.Left = lblCritterPowerCategoryLabel.Left + intWidth + 6;
            lblCritterPowerType.Left = lblCritterPowerTypeLabel.Left + intWidth + 6;
            lblCritterPowerAction.Left = lblCritterPowerActionLabel.Left + intWidth + 6;
            lblCritterPowerRange.Left = lblCritterPowerRangeLabel.Left + intWidth + 6;
            lblCritterPowerDuration.Left = lblCritterPowerDurationLabel.Left + intWidth + 6;
            lblCritterPowerSource.Left = lblCritterPowerSourceLabel.Left + intWidth + 6;
            lblCritterPowerPointCost.Left = lblCritterPowerPointCostLabel.Left + intWidth + 6;

            // Initiation and Submersion tab.

            // Cyberware and Bioware tab.
            intWidth = Math.Max(lblCyberwareNameLabel.Width, lblCyberwareCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareGradeLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareEssenceLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareAvailLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareSourceLabel.Width);

            lblCyberwareName.Left = lblCyberwareNameLabel.Left + intWidth + 6;
            lblCyberwareCategory.Left = lblCyberwareCategoryLabel.Left + intWidth + 6;
            cboCyberwareGrade.Left = lblCyberwareGradeLabel.Left + intWidth + 6;
            lblCyberwareEssence.Left = lblCyberwareEssenceLabel.Left + intWidth + 6;
            lblCyberwareAvail.Left = lblCyberwareAvailLabel.Left + intWidth + 6;
            lblCyberwareSource.Left = lblCyberwareSourceLabel.Left + intWidth + 6;

            intWidth = lblEssenceHoleESSLabel.Width;
            lblCyberwareESS.Left = lblEssenceHoleESSLabel.Left + intWidth + 6;
            lblBiowareESS.Left = lblEssenceHoleESSLabel.Left + intWidth + 6;
            lblEssenceHoleESS.Left = lblEssenceHoleESSLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblCyberwareRatingLabel.Width, lblCyberwareCapacityLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareCostLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberlimbSTRLabel.Width);

            lblCyberAttackLabel.Left = lblCyberDeviceRating.Left + lblCyberDeviceRating.Width + 20;
            lblCyberAttack.Left = lblCyberAttackLabel.Left + lblCyberAttackLabel.Width + 6;
            lblCyberSleazeLabel.Left = lblCyberAttack.Left + lblCyberAttack.Width + 20;
            lblCyberSleaze.Left = lblCyberSleazeLabel.Left + lblCyberSleazeLabel.Width + 6;
            lblCyberDataProcessingLabel.Left = lblCyberSleaze.Left + lblCyberSleaze.Width + 20;
            lblCyberDataProcessing.Left = lblCyberDataProcessingLabel.Left + lblCyberDataProcessingLabel.Width + 6;
            lblCyberFirewallLabel.Left = lblCyberDataProcessing.Left + lblCyberDataProcessing.Width + 20;
            lblCyberFirewall.Left = lblCyberFirewallLabel.Left + lblCyberFirewallLabel.Width + 6;

            lblCyberwareRatingLabel.Left = cboCyberwareGrade.Left + cboCyberwareGrade.Width + 16;
            nudCyberwareRating.Left = lblCyberwareRatingLabel.Left + intWidth + 6;
            lblCyberlimbAGILabel.Left = lblCyberwareRatingLabel.Left;
            lblCyberlimbSTRLabel.Left = lblCyberwareRatingLabel.Left;
            lblCyberlimbAGI.Left = lblCyberlimbAGILabel.Left + intWidth + 6;
            lblCyberlimbSTR.Left = lblCyberlimbSTRLabel.Left + intWidth + 6;
            lblCyberwareCapacityLabel.Left = cboCyberwareGrade.Left + cboCyberwareGrade.Width + 16;
            lblCyberwareCapacity.Left = lblCyberwareCapacityLabel.Left + intWidth + 6;
            lblCyberwareCostLabel.Left = cboCyberwareGrade.Left + cboCyberwareGrade.Width + 16;
            lblCyberwareCost.Left = lblCyberwareCostLabel.Left + intWidth + 6;

            // Street Gear tab.
            // Lifestyles tab.
            lblLifestyleCost.Left = lblLifestyleCostLabel.Left + lblLifestyleCostLabel.Width + 6;
            lblLifestyleSource.Left = lblLifestyleSourceLabel.Left + lblLifestyleSourceLabel.Width + 6;
            lblLifestyleTotalCost.Left = lblLifestyleMonthsLabel.Left + lblLifestyleMonthsLabel.Width + 6;
            lblLifestyleStartingNuyen.Left = lblLifestyleStartingNuyenLabel.Left + lblLifestyleStartingNuyenLabel.Width + 6;

            lblBaseLifestyle.Left = lblLifestyleComfortsLabel.Left + intWidth + 6;

            lblLifestyleQualitiesLabel.Left = lblBaseLifestyle.Left + 132;
            lblLifestyleQualities.Left = lblLifestyleQualitiesLabel.Left + 14;
            lblLifestyleQualities.Width = tabLifestyle.Width - lblLifestyleQualities.Left - 10;

            // Armor tab.
            intWidth = lblArmorLabel.Width;
            intWidth = Math.Max(intWidth, lblArmorRatingLabel.Width);
            intWidth = Math.Max(intWidth, lblArmorCapacityLabel.Width);
            intWidth = Math.Max(intWidth, lblArmorSourceLabel.Width);

            lblArmor.Left = lblArmorLabel.Left + intWidth + 6;
            nudArmorRating.Left = lblArmorRatingLabel.Left + intWidth + 6;
            lblArmorCapacity.Left = lblArmorCapacityLabel.Left + intWidth + 6;
            lblArmorSource.Left = lblArmorSourceLabel.Left + intWidth + 6;

            lblArmorAvailLabel.Left = nudArmorRating.Left + nudArmorRating.Width + 6;
            lblArmorAvail.Left = lblArmorAvailLabel.Left + lblArmorAvailLabel.Width + 6;

            lblArmorCostLabel.Left = lblArmorAvail.Left + lblArmorAvail.Width + 6;
            lblArmorCost.Left = lblArmorCostLabel.Left + lblArmorCostLabel.Width + 6;

            lblArmorAttackLabel.Left = lblArmorDeviceRating.Left + lblArmorDeviceRating.Width + 20;
            lblArmorAttack.Left = lblArmorAttackLabel.Left + lblArmorAttackLabel.Width + 6;
            lblArmorSleazeLabel.Left = lblArmorAttack.Left + lblArmorAttack.Width + 20;
            lblArmorSleaze.Left = lblArmorSleazeLabel.Left + lblArmorSleazeLabel.Width + 6;
            lblArmorDataProcessingLabel.Left = lblArmorSleaze.Left + lblArmorSleaze.Width + 20;
            lblArmorDataProcessing.Left = lblArmorDataProcessingLabel.Left + lblArmorDataProcessingLabel.Width + 6;
            lblArmorFirewallLabel.Left = lblArmorDataProcessing.Left + lblArmorDataProcessing.Width + 20;
            lblArmorFirewall.Left = lblArmorFirewallLabel.Left + lblArmorFirewallLabel.Width + 6;

            // Weapons tab.
            lblWeaponName.Left = lblWeaponNameLabel.Left + lblWeaponNameLabel.Width + 6;
            lblWeaponCategory.Left = lblWeaponCategoryLabel.Left + lblWeaponCategoryLabel.Width + 6;

            intWidth = Math.Max(lblWeaponNameLabel.Width, lblWeaponCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponDamageLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponReachLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponAvailLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponSlotsLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponSourceLabel.Width);

            lblWeaponName.Left = lblWeaponNameLabel.Left + intWidth + 6;
            lblWeaponCategory.Left = lblWeaponCategoryLabel.Left + intWidth + 6;
            lblWeaponDamage.Left = lblWeaponDamageLabel.Left + intWidth + 6;
            lblWeaponReach.Left = lblWeaponReachLabel.Left + intWidth + 6;
            lblWeaponAvail.Left = lblWeaponAvailLabel.Left + intWidth + 6;
            lblWeaponSlots.Left = lblWeaponSlotsLabel.Left + intWidth + 6;
            lblWeaponSource.Left = lblWeaponSourceLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblWeaponRCLabel.Width, lblWeaponModeLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponCostLabel.Width);

            lblWeaponRCLabel.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponRC.Left = lblWeaponRCLabel.Left + intWidth + 6;
            lblWeaponModeLabel.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponMode.Left = lblWeaponModeLabel.Left + intWidth + 6;
            lblWeaponCostLabel.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponCost.Left = lblWeaponCostLabel.Left + intWidth + 6;
            chkIncludedInWeapon.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponAccuracy.Left = lblWeaponAccuracyLabel.Left + lblWeaponAccuracyLabel.Width + 6;

            intWidth = Math.Max(lblWeaponAPLabel.Width, lblWeaponAmmoLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponConcealLabel.Width);

            lblWeaponAttackLabel.Left = lblWeaponDeviceRating.Left + lblWeaponDeviceRating.Width + 20;
            lblWeaponAttack.Left = lblWeaponAttackLabel.Left + lblWeaponAttackLabel.Width + 6;
            lblWeaponSleazeLabel.Left = lblWeaponAttack.Left + lblWeaponAttack.Width + 20;
            lblWeaponSleaze.Left = lblWeaponSleazeLabel.Left + lblWeaponSleazeLabel.Width + 6;
            lblWeaponDataProcessingLabel.Left = lblWeaponSleaze.Left + lblWeaponSleaze.Width + 20;
            lblWeaponDataProcessing.Left = lblWeaponDataProcessingLabel.Left + lblWeaponDataProcessingLabel.Width + 6;
            lblWeaponFirewallLabel.Left = lblWeaponDataProcessing.Left + lblWeaponDataProcessing.Width + 20;
            lblWeaponFirewall.Left = lblWeaponFirewallLabel.Left + lblWeaponFirewallLabel.Width + 6;

            lblWeaponAPLabel.Left = lblWeaponRC.Left + 95;
            lblWeaponAP.Left = lblWeaponAPLabel.Left + intWidth + 6;
            lblWeaponAmmoLabel.Left = lblWeaponRC.Left + 95;
            lblWeaponAmmo.Left = lblWeaponAmmoLabel.Left + intWidth + 6;
            lblWeaponConcealLabel.Left = lblWeaponRC.Left + 95;
            lblWeaponConceal.Left = lblWeaponConcealLabel.Left + intWidth + 6;
            chkWeaponAccessoryInstalled.Left = lblWeaponRC.Left + 95;

            lblWeaponDicePool.Left = lblWeaponDicePoolLabel.Left + intWidth + 6;

            // Gear tab.
            intWidth = Math.Max(lblGearNameLabel.Width, lblGearCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblGearRatingLabel.Width);
            intWidth = Math.Max(intWidth, lblGearCapacityLabel.Width);
            intWidth = Math.Max(intWidth, lblGearQtyLabel.Width);

            chkCommlinks.Left = cmdAddLocation.Left + cmdAddLocation.Width + 16;

            lblGearName.Left = lblGearNameLabel.Left + intWidth + 6;
            lblGearCategory.Left = lblGearCategoryLabel.Left + intWidth + 6;
            nudGearRating.Left = lblGearRatingLabel.Left + intWidth + 6;
            lblGearCapacity.Left = lblGearCapacityLabel.Left + intWidth + 6;
            nudGearQty.Left = lblGearQtyLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblGearDeviceRatingLabel.Width, lblGearDamageLabel.Width);
            lblGearDeviceRating.Left = lblGearDeviceRatingLabel.Left + intWidth + 6;
            lblGearDamage.Left = lblGearDamageLabel.Left + intWidth + 6;

            lblGearSource.Left = lblGearSourceLabel.Left + lblGearSourceLabel.Width + 6;
            chkGearHomeNode.Left = chkGearEquipped.Left + chkGearEquipped.Width + 16;

            // Vehicles and Drones tab.
            intWidth = Math.Max(lblVehicleNameLabel.Width, lblVehicleCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleHandlingLabel.Width);
            intWidth = Math.Max(intWidth, lblVehiclePilotLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleAvailLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleWeaponsmodLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleBodymodLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleRatingLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleGearQtyLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSourceLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleAttackLabel.Width);

            lblVehicleName.Left = lblVehicleNameLabel.Left + intWidth + 6;
            lblVehicleCategory.Left = lblVehicleCategoryLabel.Left + intWidth + 6;
            lblVehicleHandling.Left = lblVehicleHandlingLabel.Left + intWidth + 6;
            cboVehicleGearAttack.Left = lblVehicleAttackLabel.Left + intWidth + 6;
            lblVehiclePilot.Left = lblVehiclePilotLabel.Left + intWidth + 6;
            lblVehicleAvail.Left = lblVehicleAvailLabel.Left + intWidth + 6;
            lblVehicleWeaponsmod.Left = lblVehicleWeaponsmodLabel.Left + intWidth + 6;
            lblVehicleBodymod.Left = lblVehicleBodymodLabel.Left + intWidth + 6;
            nudVehicleRating.Left = lblVehicleRatingLabel.Left + intWidth + 6;
            nudVehicleGearQty.Left = lblVehicleGearQtyLabel.Left + intWidth + 6;
            lblVehicleSource.Left = lblVehicleSourceLabel.Left + intWidth + 6;
            lblVehicleWeaponName.Left = lblVehicleWeaponNameLabel.Left + intWidth + 6;
            lblVehicleWeaponCategory.Left = lblVehicleWeaponCategoryLabel.Left + intWidth + 6;
            lblVehicleWeaponDamage.Left = lblVehicleWeaponDamageLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblVehicleAccelLabel.Width, lblVehicleBodyLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleCostLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleProtectionLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleElectromagneticLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSleazeLabel.Width);

            lblVehicleAccelLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleAccel.Left = lblVehicleAccelLabel.Left + intWidth + 6;
            lblVehicleBodyLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleBody.Left = lblVehicleBodyLabel.Left + intWidth + 6;
            lblVehicleCostLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleCost.Left = lblVehicleCostLabel.Left + intWidth + 6;
            lblVehicleProtectionLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleProtection.Left = lblVehicleProtectionLabel.Left + intWidth + 6;
            lblVehicleElectromagneticLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleElectromagnetic.Left = lblVehicleElectromagneticLabel.Left + intWidth + 6;
            lblVehicleSleazeLabel.Left = lblVehicleHandling.Left + 60;
            cboVehicleGearSleaze.Left = lblVehicleSleazeLabel.Left + intWidth + 6;

            chkVehicleIncludedInWeapon.Left = lblVehicleAccel.Left;

            intWidth = Math.Max(lblVehicleSpeedLabel.Width, lblVehicleArmorLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleDataProcessingLabel.Width);
            intWidth = Math.Max(intWidth, lblVehiclePowertrainLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleCosmeticLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleDeviceLabel.Width);

            lblVehicleSpeedLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleSpeed.Left = lblVehicleSpeedLabel.Left + intWidth + 6;
            lblVehicleArmorLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleArmor.Left = lblVehicleArmorLabel.Left + intWidth + 6;
            lblVehiclePowertrainLabel.Left = lblVehicleAccel.Left + 60;
            lblVehiclePowertrain.Left = lblVehiclePowertrainLabel.Left + intWidth + 6;
            lblVehicleCosmeticLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleCosmetic.Left = lblVehicleCosmeticLabel.Left + intWidth + 6;
            lblVehicleDataProcessingLabel.Left = lblVehicleAccel.Left + 60;
            cboVehicleGearDataProcessing.Left = lblVehicleDataProcessingLabel.Left + intWidth + 6;
            lblVehicleDeviceLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleDevice.Left = lblVehicleDeviceLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblVehicleFirewallLabel.Width, lblVehicleSensorLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSeatsLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleDroneModSlotsLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSlotsLabel.Width);

            lblVehicleSensorLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleSensor.Left = lblVehicleSensorLabel.Left + intWidth + 6;
            lblVehicleSeatsLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleSeats.Left = lblVehicleSeatsLabel.Left + intWidth + 6;
            lblVehicleFirewallLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleDroneModSlotsLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleDroneModSlots.Left = lblVehicleDroneModSlotsLabel.Left + intWidth + 6;

            cboVehicleGearFirewall.Left = lblVehicleFirewallLabel.Left + intWidth + 6;

            lblVehicleSlotsLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleSlots.Left = lblVehicleSlotsLabel.Left + intWidth + 6;

            chkVehicleHomeNode.Left = lblVehicleSlotsLabel.Left;
            chkVehicleWeaponAccessoryInstalled.Left = lblVehicleSlotsLabel.Left;

            // Character Info.
            intWidth = Math.Max(lblSex.Width, lblHeight.Width);
            txtSex.Left = lblSex.Left + intWidth + 6;
            txtSex.Width = lblAge.Left - txtSex.Left - 16;
            txtHeight.Left = lblHeight.Left + intWidth + 6;
            txtHeight.Width = lblWeight.Left - txtHeight.Left - 16;

            intWidth = Math.Max(lblAge.Width, lblWeight.Width);
            txtAge.Left = lblAge.Left + intWidth + 6;
            txtAge.Width = lblEyes.Left - txtAge.Left - 16;
            txtWeight.Left = lblWeight.Left + intWidth + 6;
            txtWeight.Width = lblSkin.Left - txtWeight.Left - 16;

            intWidth = Math.Max(lblEyes.Width, lblSkin.Width);
            txtEyes.Left = lblEyes.Left + intWidth + 6;
            txtEyes.Width = lblHair.Left - txtEyes.Left - 16;
            txtSkin.Left = lblSkin.Left + intWidth + 6;
            txtSkin.Width = lblCharacterName.Left - txtSkin.Left - 16;

            intWidth = Math.Max(lblHair.Width, lblCharacterName.Width);
            txtHair.Left = lblHair.Left + intWidth + 6;
            txtHair.Width = lblPlayerName.Left - txtHair.Left - 16;
            txtCharacterName.Left = lblCharacterName.Left + intWidth + 6;
            txtCharacterName.Width = lblPlayerName.Left - txtCharacterName.Left - 16;

            txtPlayerName.Left = lblPlayerName.Left + lblPlayerName.Width + 6;
            txtPlayerName.Width = tabCharacterInfo.Width - txtPlayerName.Left - 16;

            intWidth = Math.Max(lblStreetCred.Width, lblNotoriety.Width);
            intWidth = Math.Max(intWidth, lblPublicAware.Width);
            lblStreetCredTotal.Left = lblStreetCred.Left + intWidth + 6;
            lblNotorietyTotal.Left = lblNotoriety.Left + intWidth + 6;
            lblPublicAwareTotal.Left = lblPublicAware.Left + intWidth + 6;

            // Improvements tab.

            // Other Info tab.
            intWidth = Math.Max(lblCMPhysicalLabel.Width, lblCMStunLabel.Width);
            intWidth = Math.Max(intWidth, lblINILabel.Width);
            intWidth = Math.Max(intWidth, lblMatrixINILabel.Width);
            intWidth = Math.Max(intWidth, lblAstralINILabel.Width);
            intWidth = Math.Max(intWidth, lblArmorLabel.Width);
            intWidth = Math.Max(intWidth, lblESS.Width);
            intWidth = Math.Max(intWidth, lblRemainingNuyenLabel.Width);
            intWidth = Math.Max(intWidth, lblComposureLabel.Width);
            intWidth = Math.Max(intWidth, lblJudgeIntentionsLabel.Width);
            intWidth = Math.Max(intWidth, lblLiftCarryLabel.Width);
            intWidth = Math.Max(intWidth, lblMemoryLabel.Width);
            intWidth = Math.Max(intWidth, lblMovementLabel.Width);
            intWidth = Math.Max(intWidth, lblSwimLabel.Width);
            intWidth = Math.Max(intWidth, lblFlyLabel.Width);

            lblCMPhysical.Left = lblCMPhysicalLabel.Left + intWidth + 6;
            lblCMStun.Left = lblCMPhysical.Left;
            lblINI.Left = lblCMPhysical.Left;
            lblMatrixINI.Left = lblCMPhysical.Left;
            lblAstralINI.Left = lblCMPhysical.Left;
            lblArmor.Left = lblCMPhysical.Left;
            lblESSMax.Left = lblCMPhysical.Left;
            lblRemainingNuyen.Left = lblCMPhysical.Left;
            lblComposure.Left = lblCMPhysical.Left;
            lblJudgeIntentions.Left = lblCMPhysical.Left;
            lblLiftCarry.Left = lblCMPhysical.Left;
            lblMemory.Left = lblCMPhysical.Left;
            lblMovement.Left = lblCMPhysical.Left;
            lblSwim.Left = lblCMPhysical.Left;
            lblFly.Left = lblCMPhysical.Left;
        }


        /// <summary>
        /// Recheck all mods to see if Sensor has changed.
        /// </summary>
        /// <param name="objVehicle">Vehicle to modify.</param>
        private void UpdateSensor(Vehicle objVehicle)
        {
            foreach (Gear objGear in objVehicle.Gear)
            {
                if (objGear.Category == "Sensors" && objGear.Name == "Sensor Array" && objGear.IncludedInParent)
                {
                    // Update the name of the item in the TreeView.
                    TreeNode objNode = CommonFunctions.FindNode(objGear.InternalId, treVehicles);
                    objNode.Text = objGear.DisplayName;
                }
            }
        }



        /// <summary>
        /// Change the size of a Vehicle's Sensor -- This appears to be obsolete code
        /// </summary>
        /// <param name="objVehicle">Vehicle to modify.</param>
        /// <param name="blnIncrease">True if the Sensor should increase in size, False if it should decrease.</param>
        private void ChangeVehicleSensor(Vehicle objVehicle, bool blnIncrease)
        {
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objNewNode;
            bool blnFound = false;

            Gear objSensor = null;
            Gear objNewSensor = new Gear(_objCharacter);

            TreeNode objTreeNode = new TreeNode();
            List<Weapon> lstWeapons = new List<Weapon>();
            List<TreeNode> lstWeaponNodes = new List<TreeNode>();
            foreach (Gear objCurrentGear in objVehicle.Gear)
            {
                if (objCurrentGear.Name == "Microdrone Sensor")
                {
                    if (blnIncrease)
                    {
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Minidrone Sensor\" and category = \"Sensors\"]");
                        objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                        objSensor = objCurrentGear;
                        blnFound = true;
                    }
                    break;
                }
                else if (objCurrentGear.Name == "Minidrone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Small Drone Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Microdrone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    blnFound = true;
                    break;
                }
                else if (objCurrentGear.Name == "Small Drone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Medium Drone Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Minidrone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    blnFound = true;
                    break;
                }
                else if (objCurrentGear.Name == "Medium Drone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Large Drone Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Small Drone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    blnFound = true;
                    break;
                }
                else if (objCurrentGear.Name == "Large Drone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Vehicle Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Medium Drone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    blnFound = true;
                    break;
                }
                else if (objCurrentGear.Name == "Vehicle Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Extra-Large Vehicle Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Large Drone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    blnFound = true;
                    break;
                }
                else if (objCurrentGear.Name == "Extra-Large Vehicle Sensor")
                {
                    if (!blnIncrease)
                    {
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Vehicle Sensor\" and category = \"Sensors\"]");
                        objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                        objSensor = objCurrentGear;
                        blnFound = true;
                    }
                    break;
                }
            }

            // If the item was found, update the Vehicle Sensor information.
            if (blnFound)
            {
                objSensor.Name = objNewSensor.Name;
                objSensor.Rating = objNewSensor.Rating;
                objSensor.Capacity = objNewSensor.Capacity;
                objSensor.DeviceRating = objNewSensor.DeviceRating;
                objSensor.Avail = objNewSensor.Avail;
                objSensor.Cost = objNewSensor.Cost;
                objSensor.Source = objNewSensor.Source;
                objSensor.Page = objNewSensor.Page;

                // Update the name of the item in the TreeView.
                TreeNode objNode = CommonFunctions.FindNode(objSensor.InternalId, treVehicles);
                objNode.Text = objSensor.DisplayNameShort;
            }
        }

        /// <summary>
        /// Update the Reputation fields.
        /// </summary>
        private void UpdateReputation()
        {
            lblStreetCredTotal.Text = _objCharacter.CalculatedStreetCred.ToString();
            lblNotorietyTotal.Text = _objCharacter.CalculatedNotoriety.ToString();
            lblPublicAwareTotal.Text = _objCharacter.CalculatedPublicAwareness.ToString();

            tipTooltip.SetToolTip(lblStreetCredTotal, _objCharacter.StreetCredTooltip);
            tipTooltip.SetToolTip(lblNotorietyTotal, _objCharacter.NotorietyTooltip);
            if (_objOptions.UseCalculatedPublicAwareness)
            {
                tipTooltip.SetToolTip(lblPublicAwareTotal, _objCharacter.PublicAwarenessTooltip);
            }
        }

        /// <summary>
        /// Enable/Disable the Paste Menu and ToolStrip items as appropriate.
        /// </summary>
        private void RefreshPasteStatus()
        {
            bool blnPasteEnabled = false;
            bool blnCopyEnabled = false;

            if (tabCharacterTabs.SelectedTab == tabStreetGear)
            {
                // Lifestyle Tab.
                if (tabStreetGearTabs.SelectedTab == tabLifestyle && treLifestyles.SelectedNode != null)
                {
                    if (GlobalOptions.ClipboardContentType == ClipboardContentType.Lifestyle)
                        blnPasteEnabled = true;

                    foreach (Lifestyle objLifestyle in _objCharacter.Lifestyles)
                    {
                        if (objLifestyle.InternalId == treLifestyles.SelectedNode.Tag.ToString())
                        {
                            blnCopyEnabled = true;
                            break;
                        }
                    }
                }

                // Armor Tab.
                if (tabStreetGearTabs.SelectedTab == tabArmor && treArmor.SelectedNode != null)
                {
                    if (GlobalOptions.ClipboardContentType == ClipboardContentType.Armor)
                        blnPasteEnabled = true;
                    if (GlobalOptions.ClipboardContentType == ClipboardContentType.Gear || GlobalOptions.ClipboardContentType == ClipboardContentType.Commlink || GlobalOptions.ClipboardContentType == ClipboardContentType.OperatingSystem)
                    {
                        // Gear can only be pasted into Armor, not Armor Mods.
                        foreach (Armor objArmor in _objCharacter.Armor)
                        {
                            if (objArmor.InternalId == treArmor.SelectedNode.Tag.ToString())
                            {
                                blnPasteEnabled = true;
                                break;
                            }
                        }
                    }

                    foreach (Armor objLoopArmor in _objCharacter.Armor)
                    {
                        if (objLoopArmor.InternalId == treArmor.SelectedNode.Tag.ToString())
                        {
                            blnCopyEnabled = true;
                            break;
                        }
                    }
                    if (!blnCopyEnabled)
                    {
                        Gear objGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), _objCharacter.Armor);
                        if (objGear != null)
                            blnCopyEnabled = true;
                    }
                }

                // Weapons Tab.
                if (tabStreetGearTabs.SelectedTab == tabWeapons && treWeapons.SelectedNode != null)
                {
                    if (GlobalOptions.ClipboardContentType == ClipboardContentType.Weapon)
                        blnPasteEnabled = true;
                    if (GlobalOptions.ClipboardContentType == ClipboardContentType.Gear || GlobalOptions.ClipboardContentType == ClipboardContentType.Commlink || GlobalOptions.ClipboardContentType == ClipboardContentType.OperatingSystem)
                    {
                        // Check if the copied Gear can be pasted into the selected Weapon Accessory.
                        Gear objGear = null;
                        XmlNode objXmlNode = GlobalOptions.Clipboard.SelectSingleNode("/character/gear");
                        if (objXmlNode != null)
                        {
                            if (objXmlNode["iscommlink"]?.InnerText == System.Boolean.TrueString || (objXmlNode["category"].InnerText == "Commlinks" ||
                        objXmlNode["category"].InnerText == "Commlink Accessories" || objXmlNode["category"].InnerText == "Cyberdecks" || objXmlNode["category"].InnerText == "Rigger Command Consoles"))
                            {
                                Gear objCommlink = new Commlink(_objCharacter);
                                objCommlink.Load(objXmlNode, true);
                                objGear = objCommlink;
                            }
                            else
                            {
                                Gear objNewGear = new Gear(_objCharacter);
                                objNewGear.Load(objXmlNode, true);
                                objGear = objNewGear;
                            }

                            objGear.Parent = null;

                            // Make sure that a Weapon Accessory is selected and that it allows Gear of the item's Category.
                            WeaponAccessory objAccessory = null;
                            foreach (Weapon objCharacterWeapon in _objCharacter.Weapons)
                            {
                                foreach (WeaponAccessory objWeaponAccessory in objCharacterWeapon.WeaponAccessories)
                                {
                                    if (objWeaponAccessory.InternalId == treWeapons.SelectedNode.Tag.ToString())
                                    {
                                        objAccessory = objWeaponAccessory;
                                        break;
                                    }
                                }
                            }
                            if (objAccessory.AllowGear != null)
                            {
                                foreach (XmlNode objAllowed in objAccessory.AllowGear.SelectNodes("gearcategory"))
                                {
                                    if (objAllowed.InnerText == objGear.Category)
                                    {
                                        blnPasteEnabled = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    foreach (Weapon objWeapon in _objCharacter.Weapons)
                    {
                        if (objWeapon.InternalId == treWeapons.SelectedNode.Tag.ToString())
                        {
                            blnCopyEnabled = true;
                            break;
                        }
                    }
                    if (!blnCopyEnabled)
                    {
                        Gear objGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), _objCharacter.Weapons);
                        if (objGear != null)
                            blnCopyEnabled = true;
                    }
                }

                // Gear Tab.
                if (tabStreetGearTabs.SelectedTab == tabGear && treGear.SelectedNode != null)
                {
                    if (GlobalOptions.ClipboardContentType == ClipboardContentType.Gear || GlobalOptions.ClipboardContentType == ClipboardContentType.Commlink || GlobalOptions.ClipboardContentType == ClipboardContentType.OperatingSystem)
                        blnPasteEnabled = true;

                    Gear objGear = CommonFunctions.DeepFindById(treGear.SelectedNode.Tag.ToString(), _objCharacter.Gear);
                    if (objGear != null)
                        blnCopyEnabled = true;
                }
            }

            // Vehicles Tab.
            if (tabCharacterTabs.SelectedTab == tabVehicles && treVehicles.SelectedNode != null)
            {
                if (GlobalOptions.ClipboardContentType == ClipboardContentType.Vehicle)
                    blnPasteEnabled = true;
                if (GlobalOptions.ClipboardContentType == ClipboardContentType.Gear || GlobalOptions.ClipboardContentType == ClipboardContentType.Commlink || GlobalOptions.ClipboardContentType == ClipboardContentType.OperatingSystem)
                {
                    // Gear can only be pasted into Vehicles and Vehicle Gear.
                    foreach (Vehicle objVehicle in _objCharacter.Vehicles)
                    {
                        if (objVehicle.InternalId == treVehicles.SelectedNode.Tag.ToString())
                        {
                            blnPasteEnabled = true;
                            break;
                        }
                    }
                    if (!blnPasteEnabled)
                    {
                        Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                        if (objGear != null)
                            blnPasteEnabled = true;
                    }
                }
                if (GlobalOptions.ClipboardContentType == ClipboardContentType.Weapon)
                {
                    // Weapons can only be pasted into Vehicle Mods that allow them (Weapon Mounts and Mechanical Arms).
                    foreach (Vehicle objVehicle in _objCharacter.Vehicles)
                    {
                        foreach (VehicleMod objVehicleMod in objVehicle.Mods)
                        {
                            if (objVehicleMod.InternalId == treVehicles.SelectedNode.Tag.ToString())
                            {
                                if (objVehicleMod.Name.Contains("Weapon Mount") || objVehicleMod.Name.StartsWith("Mechanical Arm") || !string.IsNullOrEmpty(objVehicleMod.WeaponMountCategories))
                                {
                                    blnPasteEnabled = true;
                                    break;
                                }
                            }
                        }
                    }
                }

                foreach (Vehicle objVehicle in _objCharacter.Vehicles)
                {
                    if (objVehicle.InternalId == treVehicles.SelectedNode.Tag.ToString())
                    {
                        blnCopyEnabled = true;
                        break;
                    }
                }
                if (!blnCopyEnabled)
                {
                    Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                    if (objGear != null)
                        blnCopyEnabled = true;
                    else
                    {
                        Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
                        if (objWeapon != null)
                            blnCopyEnabled = true;
                    }
                }
            }

            mnuEditPaste.Enabled = blnPasteEnabled;
            tsbPaste.Enabled = blnPasteEnabled;
            mnuEditCopy.Enabled = blnCopyEnabled;
            tsbCopy.Enabled = blnCopyEnabled;
        }

        private void AddCyberwareSuite(Improvement.ImprovementSource objSource)
        {
            frmSelectCyberwareSuite frmPickCyberwareSuite = new frmSelectCyberwareSuite(objSource, _objCharacter);
            frmPickCyberwareSuite.ShowDialog(this);

            if (frmPickCyberwareSuite.DialogResult == DialogResult.Cancel)
                return;

            string strType = string.Empty;
            int intParentNode = 0;
            if (objSource == Improvement.ImprovementSource.Cyberware)
            {
                strType = "cyberware";
                intParentNode = 0;
            }
            else
            {
                strType = "bioware";
                intParentNode = 1;
            }
            XmlDocument objXmlDocument = XmlManager.Load(strType + ".xml", true);

            XmlNode objXmlSuite = objXmlDocument.SelectSingleNode("/chummer/suites/suite[name = \"" + frmPickCyberwareSuite.SelectedSuite + "\"]");
            Grade objGrade = Cyberware.ConvertToCyberwareGrade(objXmlSuite["grade"].InnerText, objSource, _objCharacter.Options);

            // Run through each of the items in the Suite and add them to the character.
            foreach (XmlNode objXmlItem in objXmlSuite.SelectNodes(strType + "s/" + strType))
            {
                XmlNode objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/" + strType + "s/" + strType + "[name = \"" + objXmlItem["name"].InnerText + "\"]");
                TreeNode objNode = new TreeNode();
                int intRating = 0;

                if (objXmlItem["rating"] != null)
                    intRating = Convert.ToInt32(objXmlItem["rating"].InnerText);

                objNode = CreateSuiteCyberware(objXmlItem, objXmlCyberware, objGrade, intRating, true, objSource, strType, null);

                objNode.Expand();
                treCyberware.Nodes[intParentNode].Nodes.Add(objNode);
                treCyberware.Nodes[intParentNode].Expand();
            }

            _blnIsDirty = true;
            UpdateWindowTitle();
            ScheduleCharacterUpdate();
        }

        /// <summary>
        /// Add a piece of Gear that was found in a PACKS Kit.
        /// </summary>
        /// <param name="objXmlGearDocument">XmlDocument that contains the Gear.</param>
        /// <param name="objXmlGear">XmlNode of the Gear to add.</param>
        /// <param name="objParent">TreeNode to attach the created items to.</param>
        /// <param name="objParentObject">Object to associate the newly-created items with.</param>
        /// <param name="cmsContextMenu">ContextMenuStrip to assign to the TreeNodes created.</param>
        /// <param name="blnCreateChildren">Whether or not the default plugins for the Gear should be created.</param>
        private void AddPACKSGear(XmlDocument objXmlGearDocument, XmlNode objXmlGear, TreeNode objParent, Object objParentObject, ContextMenuStrip cmsContextMenu, bool blnCreateChildren)
        {
            int intRating = 0;
            if (objXmlGear["rating"] != null)
                intRating = Convert.ToInt32(objXmlGear["rating"].InnerText);
            decimal decQty = 1;
            if (objXmlGear["qty"] != null)
                decQty = Convert.ToDecimal(objXmlGear["qty"].InnerText, GlobalOptions.InvariantCultureInfo);

            XmlNode objXmlGearNode;
            if (objXmlGear["category"] != null)
                objXmlGearNode = objXmlGearDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + objXmlGear["name"].InnerText + "\" and category = \"" + objXmlGear["category"].InnerText + "\"]");
            else
                objXmlGearNode = objXmlGearDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + objXmlGear["name"].InnerText + "\"]");

            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            string strForceValue = string.Empty;
            if (objXmlGear["name"].Attributes["select"] != null)
                strForceValue = objXmlGear["name"].Attributes["select"].InnerText;

            Gear objNewGear = null;
            if (objXmlGearNode != null)
            {
                if (!string.IsNullOrEmpty(objXmlGear["devicerating"]?.InnerText))
                {
                    Commlink objCommlink = new Commlink(_objCharacter);
                    objCommlink.Create(objXmlGearNode, objNode, intRating, true, blnCreateChildren);
                    objCommlink.Quantity = decQty;
                    objNewGear = objCommlink;
                }
                else
                {
                    Gear objGear = new Gear(_objCharacter);
                    objGear.Create(objXmlGearNode, objNode, intRating, objWeapons, objWeaponNodes, strForceValue, false, false, true, blnCreateChildren);
                    objGear.Quantity = decQty;
                    objNode.Text = objGear.DisplayName;
                    objNewGear = objGear;
                }
            }

            if (objParentObject.GetType() == typeof(Character))
                ((Character)objParentObject).Gear.Add(objNewGear);
            if (objParentObject.GetType() == typeof(Gear) || objParentObject.GetType() == typeof(Commlink) || objParentObject.GetType() == typeof(OperatingSystem))
            {
                ((Gear)objParentObject).Children.Add(objNewGear);
                objNewGear.Parent = (Gear)objParentObject;
                if ((objParentObject as Commlink)?.CanSwapAttributes == true)
                {
                    (objParentObject as Commlink).RefreshCyberdeckArray();
                }
            }
            if (objParentObject.GetType() == typeof(Armor))
                ((Armor)objParentObject).Gear.Add(objNewGear);
            if (objParentObject.GetType() == typeof(WeaponAccessory))
                ((WeaponAccessory)objParentObject).Gear.Add(objNewGear);
            if (objParentObject.GetType() == typeof(Cyberware))
                ((Cyberware)objParentObject).Gear.Add(objNewGear);

            // Look for child components.
            if (objXmlGear["gears"] != null)
            {
                foreach (XmlNode objXmlChild in objXmlGear.SelectNodes("gears/gear"))
                {
                    AddPACKSGear(objXmlGearDocument, objXmlChild, objNode, objNewGear, cmsContextMenu, blnCreateChildren);
                }
            }

            objParent.Nodes.Add(objNode);
            objParent.Expand();

            objNode.ContextMenuStrip = cmsContextMenu;
            objNode.Text = objNewGear.DisplayName;

            // Add any Weapons created by the Gear.
            foreach (Weapon objWeapon in objWeapons)
                _objCharacter.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

        }

        /// <summary>
        /// Populate the TreeView that contains all of the character's Gear.
        /// </summary>
        private void PopulateGearList()
        {
            // Populate Gear.
            // Create the root node.
            treGear.Nodes.Clear();
            TreeNode objRoot = new TreeNode();
            objRoot.Tag = "Node_SelectedGear";
            objRoot.Text = LanguageManager.GetString("Node_SelectedGear");
            treGear.Nodes.Add(objRoot);

            // Start by populating Locations.
            foreach (string strLocation in _objCharacter.Locations)
            {
                TreeNode objLocation = new TreeNode();
                objLocation.Tag = strLocation;
                objLocation.Text = strLocation;
                objLocation.ContextMenuStrip = cmsGearLocation;
                treGear.Nodes.Add(objLocation);
            }

            // Add Locations for the character's bits that can hold Commlinks.
            /* Populate the list of Commlink Locations.
            foreach (Cyberware objCyberware in _objCharacter.Cyberware)
            {
                if (objCyberware.AllowGear != null)
                {
                    if (objCyberware.AllowGear["gearcategory"] != null)
                    {
                        if (objCyberware.AllowGear["gearcategory"].InnerText == "Commlinks" || objCyberware.AllowGear["gearcategory"].InnerText == "Cyberdecks")
                        {
                            TreeNode objNode = new TreeNode();
                            objNode.Tag = objCyberware.InternalId.ToString();
                            objNode.Text = objCyberware.DisplayCategory + ": " + objCyberware.DisplayName;
                            bool blnFound = false;
                            foreach (string objLocation in _objCharacter.Locations)
                            {
                                if (objLocation == objNode.Text)
                                {
                                    blnFound = true;
                                }
                            }
                            if (!blnFound)
                            {
                                treGear.Nodes.Add(objNode);
                                _objCharacter.Locations.Add(objNode.Text);
                            }
                        }
                    }
                }
                foreach (Cyberware objPlugin in objCyberware.Children)
                {
                    if (objPlugin.AllowGear != null)
                    {
                        if (objPlugin.AllowGear["gearcategory"] != null)
                        {
                            TreeNode objNode = new TreeNode();
                            objNode.Tag = objPlugin.InternalId.ToString();
                            objNode.Text = objPlugin.DisplayCategory + ": " + objPlugin.DisplayName;
                            bool blnFound = false;
                            foreach (string objLocation in _objCharacter.Locations)
                            {
                                if (objLocation == objNode.Text)
                                {
                                    blnFound = true;
                                }
                            }
                            if (!blnFound)
                            {
                                treGear.Nodes.Add(objNode);
                                _objCharacter.Locations.Add(objNode.Text);
                            }
                        }
                    }
                }
            }
            foreach (Weapon objWeapon in _objCharacter.Weapons)
            {
                foreach (WeaponAccessory objAccessory in objWeapon.WeaponAccessories)
                {
                    if (objAccessory.AllowGear != null)
                    {
                        if (objAccessory.AllowGear["gearcategory"] != null)
                        {
                            if (objAccessory.AllowGear["gearcategory"].InnerText == "Commlinks" || objAccessory.AllowGear["gearcategory"].InnerText == "Cyberdecks")
                            {
                                TreeNode objNode = new TreeNode();
                                objNode.Tag = objAccessory.InternalId.ToString();
                                objNode.Text = objWeapon.DisplayName + ": " + objAccessory.DisplayName;
                                bool blnFound = false;
                                foreach (string objLocation in _objCharacter.Locations)
                                {
                                    if (objLocation == objNode.Text)
                                    {
                                        blnFound = true;
                                    }
                                }
                                if (!blnFound)
                                {
                                    _objCharacter.Locations.Add(objNode.Text);
                                    treGear.Nodes.Add(objNode);
                                }
                            }
                        }
                    }
                }
                foreach (Weapon objUnderbarrel in objWeapon.Children)
                {
                    foreach (WeaponAccessory objUnderbarrelAccessory in objUnderbarrel.WeaponAccessories)
                    {
                        if (objUnderbarrelAccessory.AllowGear != null)
                        {
                            if (objUnderbarrelAccessory.AllowGear["gearcategory"] != null)
                            {
                                if (objUnderbarrelAccessory.AllowGear["gearcategory"].InnerText == "Commlinks" || objUnderbarrelAccessory.AllowGear["gearcategory"].InnerText == "Cyberdecks")
                                {
                                    TreeNode objNode = new TreeNode();
                                    objNode.Tag = objUnderbarrelAccessory.InternalId.ToString();
                                    objNode.Text = objUnderbarrel.DisplayName + ": " + objUnderbarrelAccessory.DisplayName;
                                    bool blnFound = false;
                                    foreach (string objLocation in _objCharacter.Locations)
                                    {
                                        if (objLocation == objNode.Text)
                                        {
                                            blnFound = true;
                                        }
                                    }
                                    if (!blnFound)
                                    {
                                        _objCharacter.Locations.Add(objNode.Text);
                                        treGear.Nodes.Add(objNode);
                                    }
                                }
                            }
                        }
                    }
                }
            }*/

            foreach (Gear objGear in _objCharacter.Gear)
            {
                bool blnAdd = true;
                if (chkCommlinks.Checked && (objGear.Category != "Commlinks" && objGear.Category != "Cyberdecks"))
                    blnAdd = false;

                if (blnAdd)
                {
                    TreeNode objNode = new TreeNode();
                    objNode.Text = objGear.DisplayName;
                    objNode.Tag = objGear.InternalId;
                    if (!string.IsNullOrEmpty(objGear.Notes))
                        objNode.ForeColor = Color.SaddleBrown;
                    else if (objGear.IncludedInParent)
                        objNode.ForeColor = SystemColors.GrayText;
                    objNode.ToolTipText = CommonFunctions.WordWrap(objGear.Notes, 100);

                    CommonFunctions.BuildGearTree(objGear, objNode, cmsGear);

                    objNode.ContextMenuStrip = cmsGear;

                    TreeNode objParent = new TreeNode();
                    if (string.IsNullOrEmpty(objGear.Location))
                        objParent = treGear.Nodes[0];
                    else
                    {
                        foreach (TreeNode objFind in treGear.Nodes)
                        {
                            if (objFind.Text == objGear.Location)
                            {
                                objParent = objFind;
                                break;
                            }
                        }
                    }
                    objParent.Nodes.Add(objNode);
                    objParent.Expand();
                }
            }
        }

        /// <summary>
        /// Populate the TreeView that contains all of the character's Cyberware and Bioware.
        /// </summary>
        private void PopulateCyberwareList()
        {
            foreach (Cyberware objCyberware in _objCharacter.Cyberware)
            {
                // Populate Cyberware.
                if (objCyberware.SourceType == Improvement.ImprovementSource.Cyberware)
                {
                    CommonFunctions.BuildCyberwareTree(objCyberware, treCyberware.Nodes[0], cmsCyberware, cmsCyberwareGear);
                }
                // Populate Bioware.
                else if (objCyberware.SourceType == Improvement.ImprovementSource.Bioware)
                {
                    CommonFunctions.BuildCyberwareTree(objCyberware, treCyberware.Nodes[1], cmsCyberware, cmsCyberwareGear);
                }
            }
        }
        #endregion

        private void tabVehicles_Click(object sender, EventArgs e)
        {

        }

        private void tsMetamagicAddMetamagic_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            frmSelectMetamagic frmPickMetamagic = new frmSelectMetamagic(_objCharacter, _objCharacter.RESEnabled ? frmSelectMetamagic.Mode.Echo : frmSelectMetamagic.Mode.Metamagic);
            frmPickMetamagic.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickMetamagic.DialogResult == DialogResult.Cancel)
                return;

            string strMetamagic = frmPickMetamagic.SelectedMetamagic;

            XmlDocument objXmlDocument = null;
            XmlNode objXmlMetamagic = null;

            TreeNode objNode = new TreeNode();
            Metamagic objNewMetamagic = new Metamagic(_objCharacter);
            Improvement.ImprovementSource objSource = 0;

            if (_objCharacter.MAGEnabled)
            {
                objXmlDocument = XmlManager.Load("metamagic.xml");
                objXmlMetamagic = objXmlDocument.SelectSingleNode("/chummer/metamagics/metamagic[name = \"" + strMetamagic + "\"]");
                objSource = Improvement.ImprovementSource.Metamagic;
            }
            else
            {
                objXmlDocument = XmlManager.Load("echoes.xml");
                objXmlMetamagic = objXmlDocument.SelectSingleNode("/chummer/echoes/echo[name = \"" + strMetamagic + "\"]");
                objSource = Improvement.ImprovementSource.Echo;
            }

            objNewMetamagic.Create(objXmlMetamagic, objNode, objSource);
            objNewMetamagic.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objNewMetamagic.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.Metamagics.Add(objNewMetamagic);

            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();

            if (frmPickMetamagic.AddAgain)
                cmdAddMetamagic_Click(sender, e);
        }

        private void tsMetamagicAddArt_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            frmSelectArt frmPickArt = new frmSelectArt(_objCharacter, frmSelectArt.Mode.Art);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strArt = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("metamagic.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/arts/art[name = \"" + strArt + "\"]");
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Metamagic;

            TreeNode objNode = new TreeNode();
            Art objArt = new Art(_objCharacter);

            objArt.Create(objXmlArt, objNode, objSource);
            objArt.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objArt.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.Arts.Add(objArt);

            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsMetamagicAddEnchantment_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            frmSelectArt frmPickArt = new frmSelectArt(_objCharacter, frmSelectArt.Mode.Enchantment);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strEnchantment = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("spells.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/spells/spell[name = \"" + strEnchantment + "\"]");
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Initiation;

            TreeNode objNode = new TreeNode();
            Spell objNewSpell = new Spell(_objCharacter);

            objNewSpell.Create(objXmlArt, objNode, string.Empty, false, false, false, objSource);
            objNewSpell.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objNewSpell.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.Spells.Add(objNewSpell);

            TreeNode objSpellNode = new TreeNode();
            objSpellNode.Text = objNode.Text;
            objSpellNode.Tag = objNode.Tag;

            string strCategory = string.Empty;
            if (objNewSpell.Category == "Rituals")
                strCategory = LanguageManager.GetString("Label_Ritual") + " ";
            if (objNewSpell.Category == "Enchantments")
                strCategory = LanguageManager.GetString("Label_Enchantment") + " ";
            objNode.Text = strCategory + objNode.Text;
            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            treSpells.Nodes[6].Nodes.Add(objSpellNode);
            treSpells.Nodes[6].Expand();

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsMetamagicAddRitual_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            frmSelectArt frmPickArt = new frmSelectArt(_objCharacter, frmSelectArt.Mode.Ritual);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strEnchantment = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("spells.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/spells/spell[name = \"" + strEnchantment + "\"]");
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Initiation;

            TreeNode objNode = new TreeNode();
            Spell objNewSpell = new Spell(_objCharacter);

            objNewSpell.Create(objXmlArt, objNode, string.Empty, false, false, false, objSource);
            objNewSpell.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objNewSpell.InternalId == Guid.Empty.ToString())
                return;

            _objCharacter.Spells.Add(objNewSpell);

            TreeNode objSpellNode = new TreeNode();
            objSpellNode.Text = objNode.Text;
            objSpellNode.Tag = objNode.Tag;

            string strCategory = string.Empty;
            if (objNewSpell.Category == "Rituals")
                strCategory = LanguageManager.GetString("Label_Ritual") + " ";
            if (objNewSpell.Category == "Enchantments")
                strCategory = LanguageManager.GetString("Label_Enchantment") + " ";
            objNode.Text = strCategory + objNode.Text;
            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            treSpells.Nodes[5].Nodes.Add(objSpellNode);
            treSpells.Nodes[5].Expand();

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tsInitiationNotes_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode == null)
                return;
            // Locate the selected Metamagic.
            Metamagic objMetamagic = CommonFunctions.FindByIdWithNameCheck(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.Metamagics);
            if (objMetamagic != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objMetamagic.Notes;
                string strOldValue = objMetamagic.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objMetamagic.Notes = frmItemNotes.Notes;
                    if (objMetamagic.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objMetamagic.Notes))
                    treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objMetamagic.Grade < 0)
                    treMetamagic.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                treMetamagic.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objMetamagic.Notes, 100);
                return;
            }

            // Locate the selected Art.
            Art objArt = CommonFunctions.FindByIdWithNameCheck(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.Arts);
            if (objArt != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objArt.Notes;
                string strOldValue = objArt.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objArt.Notes = frmItemNotes.Notes;
                    if (objArt.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objArt.Notes))
                    treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                treMetamagic.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objArt.Notes, 100);
                return;
            }

            // Locate the selected Spell.
            Spell objSpell = CommonFunctions.FindByIdWithNameCheck(treMetamagic.SelectedNode.Tag.ToString(), _objCharacter.Spells);
            if (objSpell != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objSpell.Notes;
                string strOldValue = objSpell.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objSpell.Notes = frmItemNotes.Notes;
                    if (objSpell.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objSpell.Notes))
                    treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                treMetamagic.SelectedNode.ToolTipText = objSpell.Notes;

                foreach (TreeNode nodSchool in treSpells.Nodes)
                {
                    foreach (TreeNode nodSpell in nodSchool.Nodes)
                    {
                        if (nodSpell.Tag.ToString() == treMetamagic.SelectedNode.Tag.ToString())
                        {
                            if (!string.IsNullOrEmpty(objSpell.Notes))
                                nodSpell.ForeColor = Color.SaddleBrown;
                            else
                                nodSpell.ForeColor = SystemColors.WindowText;
                            nodSpell.ToolTipText = CommonFunctions.WordWrap(objSpell.Notes, 100);

                            break;
                        }
                    }
                }
            }
        }

        private void tsMetamagicAddEnhancement_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in _objCharacter.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }
            frmSelectArt frmPickArt = new frmSelectArt(_objCharacter, frmSelectArt.Mode.Enhancement);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strEnhancement = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("powers.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/enhancements/enhancement[name = \"" + strEnhancement + "\"]");
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Initiation;

            TreeNode objNode = new TreeNode();
            Enhancement objEnhancement = new Enhancement(_objCharacter);

            // Find the associated Power
            string strPower = objXmlArt["power"].InnerText.ToString();

            objEnhancement.Create(objXmlArt, objNode, objSource);
            objEnhancement.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objEnhancement.InternalId == Guid.Empty.ToString())
                return;

            Power objPower = new Power(_objCharacter);
            bool blnPowerFound = false;
            foreach (Power objExistingPower in _objCharacter.Powers)
            {
                if (objExistingPower.Name == strPower)
                {
                    objPower = objExistingPower;
                    objPower.Enhancements.Add(objEnhancement);
                    blnPowerFound = true;
                    break;
                }
            }

            if (!blnPowerFound)
            {
                // Add it to the character instead
                _objCharacter.Enhancements.Add(objEnhancement);
            }

            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void panContacts_Click(object sender, EventArgs e)
        {
            panContacts.Focus();
        }

        private void panContacts_DragDrop(object sender, DragEventArgs e)
        {
            TransportWrapper wrapper = (TransportWrapper)e.Data.GetData(typeof(TransportWrapper));
            Control source = wrapper.Control;

            Point mousePosition = panContacts.PointToClient(new Point(e.X, e.Y));
            Control destination = panContacts.GetChildAtPoint(mousePosition);

            int indexDestination = panContacts.Controls.IndexOf(destination);
            if (panContacts.Controls.IndexOf(source) < indexDestination)
                indexDestination--;

            panContacts.Controls.SetChildIndex(source, indexDestination);

            foreach (ContactControl objControl in panContacts.Controls)
            {
                objControl.BackColor = SystemColors.Control;
            }
        }

        private void panContacts_DragOver(object sender, DragEventArgs e)
        {
            Point mousePosition = panContacts.PointToClient(new Point(e.X, e.Y));
            Control destination = panContacts.GetChildAtPoint(mousePosition);

            if (destination == null)
                return;

            destination.BackColor = SystemColors.ControlDark;
            foreach (ContactControl objControl in panContacts.Controls)
            {
                if (objControl != (destination as ContactControl))
                {
                    objControl.BackColor = SystemColors.Control;
                }
            }
            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
        }

        void panContacts_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void panContactControl_MouseDown(object sender, MouseEventArgs e)
        {
            Control source = (Control)sender;
            source.DoDragDrop(new TransportWrapper(source), DragDropEffects.Move);
        }

        private void panEnemies_Click(object sender, EventArgs e)
        {
            panEnemies.Focus();
        }

        private void tsAddTechniqueNotes_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode == null)
                return;
            MartialArtAdvantage objTechnique = CommonFunctions.FindMartialArtAdvantage(treMartialArts.SelectedNode.Tag.ToString(), _objCharacter.MartialArts);
            if (objTechnique != null)
            {
                frmNotes frmItemNotes = new frmNotes();
                frmItemNotes.Notes = objTechnique.Notes;
                string strOldValue = objTechnique.Notes;
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objTechnique.Notes = frmItemNotes.Notes;
                    if (objTechnique.Notes != strOldValue)
                    {
                        _blnIsDirty = true;
                        UpdateWindowTitle();
                    }
                }

                if (!string.IsNullOrEmpty(objTechnique.Notes))
                    treMartialArts.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMartialArts.SelectedNode.ForeColor = SystemColors.WindowText;
                treMartialArts.SelectedNode.ToolTipText = CommonFunctions.WordWrap(objTechnique.Notes, 100);
            }
        }

        private void treFoci_AfterSelect(object sender, TreeViewEventArgs e)
        {

        }

        private void txtBackground_KeyPress(object sender, KeyPressEventArgs e)
        {
            btnCreateBackstory.Enabled = false;
            if (_objStoryBuilder == null)
            {
                btnCreateBackstory.Enabled = true;
            }
        }

        private void btnCreateBackstory_Click(object sender, EventArgs e)
        {
            if (_objStoryBuilder == null) _objStoryBuilder = new StoryBuilder(_objCharacter);
            txtBackground.Text = _objStoryBuilder.GetStory();
        }

        private void nudCounterspellingDice_Changed(object sender, EventArgs e)
        {
            Dictionary<string, int> dicAttributeTotalValues = new Dictionary<string, int>(AttributeSection.AttributeStrings.Length);
            foreach (string strAttribute in AttributeSection.AttributeStrings)
            {
                dicAttributeTotalValues.Add(strAttribute, _objCharacter.GetAttribute(strAttribute).TotalValue);
            }
            UpdateSpellDefence(dicAttributeTotalValues);
        }

        private void chkInitiationSchooling_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            ScheduleCharacterUpdate();
            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void tssLimitModifierEdit_Click(object sender, EventArgs e)
        {
            if (treLimit.SelectedNode.Level > 0)
            {
                UpdateLimitModifier(treLimit, cmsLimitModifier);
                ScheduleCharacterUpdate();
                _blnIsDirty = true;
                UpdateWindowTitle();
            }
        }

        private void mnuSpecialConfirmValidity_Click(object sender, EventArgs e)
        {
            if (CheckCharacterValidity())
            {
                MessageBox.Show(LanguageManager.GetString("Message_ValidCharacter"), LanguageManager.GetString("MessageTitle_ValidCharacter"), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        #region Properties
        /// <summary>
        /// Character's name to use when loading them in a new tab.
        /// </summary>
        public string CharacterName
        {
            get
            {
                if (!string.IsNullOrWhiteSpace(_objCharacter.Alias))
                    return _objCharacter.Alias;
                if (!string.IsNullOrWhiteSpace(_objCharacter.Name))
                    return _objCharacter.Name;
                return LanguageManager.GetString("String_UnnamedCharacter");
            }
        }
        #endregion

        private void cboPrimaryArm_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnLoading || _objCharacter.Ambidextrous) return;
            _objCharacter.PrimaryArm = cboPrimaryArm.SelectedValue.ToString();
        }
        private void BuildAttributePanel()
        {
            pnlAttributes.Controls.Clear();
            lstPrimaryAttributes.Clear();
            lstSpecialAttributes.Clear();
            lstPrimaryAttributes.Add(_objCharacter.BOD);
            lstPrimaryAttributes.Add(_objCharacter.AGI);
            lstPrimaryAttributes.Add(_objCharacter.REA);
            lstPrimaryAttributes.Add(_objCharacter.STR);
            lstPrimaryAttributes.Add(_objCharacter.CHA);
            lstPrimaryAttributes.Add(_objCharacter.INT);
            lstPrimaryAttributes.Add(_objCharacter.LOG);
            lstPrimaryAttributes.Add(_objCharacter.WIL);

            lstSpecialAttributes.Add(_objCharacter.EDG);
            if (_objCharacter.MAGEnabled)
            {
                lstSpecialAttributes.Add(_objCharacter.MAG);
                if (_objOptions.MysAdeptSecondMAGAttribute && _objCharacter.IsMysticAdept)
                    lstSpecialAttributes.Add(_objCharacter.MAGAdept);
            }
            if (_objCharacter.RESEnabled)
            {
                lstSpecialAttributes.Add(_objCharacter.RES);
            }
            if (_objCharacter.DEPEnabled)
            {
                lstSpecialAttributes.Add(_objCharacter.DEP);
            }
        }
        private void AttributeCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs)
        {
            switch (notifyCollectionChangedEventArgs.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (CharacterAttrib objAttrib in notifyCollectionChangedEventArgs.NewItems)
                    {
                        AttributeControl objControl = new AttributeControl(objAttrib);
                        objControl.ValueChanged += objAttribute_ValueChanged;
                        pnlAttributes.Controls.Add(objControl);
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (CharacterAttrib objAttrib in notifyCollectionChangedEventArgs.OldItems)
                    {
                        foreach (AttributeControl objControl in pnlAttributes.Controls)
                        {
                            if (objControl.AttributeName == objAttrib.Abbrev)
                            {
                                objControl.ValueChanged -= objAttribute_ValueChanged;
                                pnlAttributes.Controls.Remove(objControl);
                                objControl.Dispose();
                            }
                        }
                        objAttrib.Base = 0;
                        objAttrib.Karma = 0;
                    }
                    break;
            }
        }
        private void objAttribute_ValueChanged(Object sender, EventArgs e)
        {
            // Handle the AttributeValueChanged Event for the AttributeControl object.
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void picMugshot_SizeChanged(object sender, EventArgs e)
        {
            if (picMugshot.Image != null && picMugshot.Height >= picMugshot.Image.Height && picMugshot.Width >= picMugshot.Image.Width)
                picMugshot.SizeMode = PictureBoxSizeMode.CenterImage;
            else
                picMugshot.SizeMode = PictureBoxSizeMode.Zoom;
        }

        public void mnuSpecialKarmaValue_Click(object sender, EventArgs e)
        {
            string strMessage = LanguageManager.GetString("Message_KarmaValue") + "\n";

            int intReturn = _objCharacter.BuildKarma;
            if (_objCharacter.BuildMethod != CharacterBuildMethod.Karma)
            {
                // Subtract extra karma cost of a metatype in priority
                intReturn -= _objCharacter.MetatypeBP;
            }
            strMessage += "\n" + LanguageManager.GetString("Label_Base") + ": " + intReturn.ToString() + " " + LanguageManager.GetString("String_Karma");

            if (_objCharacter.BuildMethod != CharacterBuildMethod.Karma)
            {
                // Zeroed to -10 because that's Human's value at default settings
                int intMetatypeQualitiesValue = -2 * _objCharacter.Options.KarmaAttribute;
                // Karma value of all qualities (we're ignoring metatype cost because Point Buy karma costs don't line up with other methods' values)
                foreach (Quality objQuality in _objCharacter.Qualities.Where(x => x.OriginSource == QualitySource.Metatype || x.OriginSource == QualitySource.MetatypeRemovable))
                {
                    if (objQuality.MyXmlNode?["onlyprioritygiven"] == null)
                    {
                        intMetatypeQualitiesValue += Convert.ToInt32(objQuality.MyXmlNode?["karma"]?.InnerText);
                    }
                }
                intReturn += intMetatypeQualitiesValue;

                int intTemp = 0;
                int intTemp2 = 0;
                // Value from attribute points and raised attribute minimums
                foreach (string strAttributeName in AttributeSection.AttributeStrings)
                {
                    if (strAttributeName != "ESS")
                    {
                        CharacterAttrib objLoopAttrib = _objCharacter.GetAttribute(strAttributeName);
                        int intLoopAttribValue = objLoopAttrib.Base + objLoopAttrib.FreeBase + objLoopAttrib.TotalMinimum + objLoopAttrib.AttributeValueModifiers;
                        if (intLoopAttribValue > 1)
                        {
                            intTemp += ((intLoopAttribValue + 1) * intLoopAttribValue / 2 - 1) * _objCharacter.Options.KarmaAttribute;
                            if (strAttributeName != "MAG" && strAttributeName != "MAGAdept" && strAttributeName != "RES" && strAttributeName != "DEP")
                            {
                                int intVanillaAttribValue = objLoopAttrib.Base + objLoopAttrib.FreeBase + objLoopAttrib.AttributeValueModifiers + 1;
                                intTemp2 += ((intVanillaAttribValue + 1) * intVanillaAttribValue / 2 - 1) * _objCharacter.Options.KarmaAttribute;
                            }
                            else
                                intTemp2 += ((intLoopAttribValue + 1) * intLoopAttribValue / 2 - 1) * _objCharacter.Options.KarmaAttribute;
                        }
                    }
                }
                if (intTemp - intTemp2 + intMetatypeQualitiesValue != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("Label_SumtoTenHeritage") + " " + (intTemp - intTemp2 + intMetatypeQualitiesValue).ToString() + " " + LanguageManager.GetString("String_Karma");
                }
                if (intTemp2 != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("Label_SumtoTenAttributes") + " " + intTemp2.ToString() + " " + LanguageManager.GetString("String_Karma");
                }
                intReturn += intTemp;

                intTemp = 0;
                // This is where we add in "Talent" qualities like Adept and Technomancer
                foreach (Quality objQuality in _objCharacter.Qualities.Where(x => x.OriginSource == QualitySource.Metatype || x.OriginSource == QualitySource.MetatypeRemovable))
                {
                    if (objQuality.MyXmlNode?["onlyprioritygiven"] != null)
                    {
                        intTemp += Convert.ToInt32(objQuality.MyXmlNode?["karma"]?.InnerText);
                    }
                }
                if (intTemp != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("String_Qualities") + ": " + intTemp.ToString() + " " + LanguageManager.GetString("String_Karma");
                    intReturn += intTemp;
                }

                // Value from free spells
                intTemp = _objCharacter.SpellLimit * _objCharacter.SpellKarmaCost;
                if (intTemp != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("String_FreeSpells") + ": " + intTemp.ToString() + " " + LanguageManager.GetString("String_Karma");
                    intReturn += intTemp;
                }

                // Value from free complex forms
                intTemp = _objCharacter.CFPLimit * _objCharacter.ComplexFormKarmaCost;
                if (intTemp != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("String_FreeCFs") + ": " + intTemp.ToString() + " " + LanguageManager.GetString("String_Karma");
                    intReturn += intTemp;
                }

                intTemp = 0;
                // Value from skill points
                foreach (Skill objLoopActiveSkill in _objCharacter.SkillsSection.Skills)
                {
                    if (!(objLoopActiveSkill.SkillGroupObject?.Base > 0))
                    {
                        int intLoopRating = objLoopActiveSkill.Base;
                        if (intLoopRating > 0)
                        {
                            intTemp += _objCharacter.Options.KarmaNewActiveSkill;
                            intTemp += ((intLoopRating + 1) * intLoopRating / 2 - 1) * _objCharacter.Options.KarmaImproveActiveSkill;
                            if (_objCharacter.BuildMethod == CharacterBuildMethod.LifeModule)
                                intTemp += objLoopActiveSkill.Specializations.Count(x => x.Free) * _objCharacter.Options.KarmaSpecialization;
                            else if (!objLoopActiveSkill.BuyWithKarma)
                                intTemp += objLoopActiveSkill.Specializations.Count * _objCharacter.Options.KarmaSpecialization;
                        }
                    }
                }
                if (intTemp != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("String_SkillPoints") + ": " + intTemp.ToString() + " " + LanguageManager.GetString("String_Karma");
                    intReturn += intTemp;
                }

                intTemp = 0;
                // Value from skill group points
                foreach (SkillGroup objLoopSkillGroup in _objCharacter.SkillsSection.SkillGroups)
                {
                    int intLoopRating = objLoopSkillGroup.Base;
                    if (intLoopRating > 0)
                    {
                        intTemp += _objCharacter.Options.KarmaNewSkillGroup;
                        intTemp += ((intLoopRating + 1) * intLoopRating / 2 - 1) * _objCharacter.Options.KarmaImproveSkillGroup;
                    }
                }
                if (intTemp != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("String_SkillGroupPoints") + ": " + intTemp.ToString() + " " + LanguageManager.GetString("String_Karma");
                    intReturn += intTemp;
                }

                // Starting Nuyen karma value
                intTemp = decimal.ToInt32(decimal.Ceiling(_objCharacter.StartingNuyen / _objOptions.NuyenPerBP));
                if (intTemp != 0)
                {
                    strMessage += "\n" + LanguageManager.GetString("Checkbox_CreatePACKSKit_StartingNuyen") + ": " + intTemp.ToString() + " " + LanguageManager.GetString("String_Karma");
                    intReturn += intTemp;
                }
            }

            int intContactPointsValue = _objCharacter.ContactPoints * _objOptions.KarmaContact;
            if (intContactPointsValue != 0)
            {
                strMessage += "\n" + LanguageManager.GetString("String_Contacts") + ": " + intContactPointsValue.ToString() + " " + LanguageManager.GetString("String_Karma");
                intReturn += intContactPointsValue;
            }

            int intKnowledgePointsValue = 0;
            foreach (KnowledgeSkill objLoopKnowledgeSkill in _objCharacter.SkillsSection.KnowledgeSkills)
            {
                int intLoopRating = objLoopKnowledgeSkill.Base;
                if (intLoopRating > 0)
                {
                    intKnowledgePointsValue += _objCharacter.Options.KarmaNewKnowledgeSkill;
                    intKnowledgePointsValue += ((intLoopRating + 1) * intLoopRating / 2 - 1) * _objCharacter.Options.KarmaImproveKnowledgeSkill;
                    if (_objCharacter.BuildMethod == CharacterBuildMethod.LifeModule)
                        intKnowledgePointsValue += objLoopKnowledgeSkill.Specializations.Count(x => x.Free) * _objCharacter.Options.KarmaKnowledgeSpecialization;
                    else if (!objLoopKnowledgeSkill.BuyWithKarma)
                        intKnowledgePointsValue += objLoopKnowledgeSkill.Specializations.Count * _objCharacter.Options.KarmaKnowledgeSpecialization;
                }
            }
            if (intKnowledgePointsValue != 0)
            {
                strMessage += "\n" + LanguageManager.GetString("Label_KnowledgeSkills") + ": " + intKnowledgePointsValue.ToString() + " " + LanguageManager.GetString("String_Karma");
                intReturn += intKnowledgePointsValue;
            }

            strMessage += "\n\n" + LanguageManager.GetString("String_Total") + ": " + intReturn.ToString() + " " + LanguageManager.GetString("String_Karma");
            MessageBox.Show(strMessage, LanguageManager.GetString("MessageTitle_KarmaValue"), MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void cmdCyberwareChangeMount_Click(object sender, EventArgs e)
        {
            if (treCyberware.SelectedNode == null)
                return;
            Cyberware objModularCyberware = CommonFunctions.DeepFindById(treCyberware.SelectedNode.Tag.ToString(), _objCharacter.Cyberware);
            if (objModularCyberware == null)
                return;
            Cyberware objOldParent = objModularCyberware.Parent;
            frmSelectItem frmPickMount = new frmSelectItem();
            frmPickMount.GeneralItems = CommonFunctions.ConstructModularCyberlimbList(_objCharacter, objModularCyberware);
            frmPickMount.Description = LanguageManager.GetString("MessageTitle_SelectCyberware");
            frmPickMount.ShowDialog();

            // Make sure the dialogue window was not canceled.
            if (frmPickMount.DialogResult == DialogResult.Cancel)
            {
                return;
            }

            if (objModularCyberware.Parent != null)
                objModularCyberware.ChangeModularEquip(false);
            string strSelectedParentID = frmPickMount.SelectedItem;
            if (strSelectedParentID == "None")
            {
                CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, _objCharacter.Cyberware, treCyberware.Nodes[0], treCyberware);
                objModularCyberware.Parent = null;
            }
            else
            {
                Cyberware objNewParent = CommonFunctions.DeepFindById(strSelectedParentID, _objCharacter.Cyberware);
                TreeNode objNewNode = CommonFunctions.FindNode(strSelectedParentID, treCyberware);
                if (objNewParent != null && objNewNode != null)
                {
                    CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, objNewParent.Children, objNewNode, treCyberware);
                    objModularCyberware.Parent = objNewParent;
                    objModularCyberware.ChangeModularEquip(true);
                }
                else
                {
                    VehicleMod objNewVehicleModParent = CommonFunctions.FindVehicleMod(strSelectedParentID, _objCharacter.Vehicles);
                    if (objNewVehicleModParent == null)
                        objNewParent = CommonFunctions.FindVehicleCyberware(strSelectedParentID, _objCharacter.Vehicles, out objNewVehicleModParent);
                    else
                        objNewParent = null;
                    objNewNode = CommonFunctions.FindNode(strSelectedParentID, treVehicles);
                    if ((objNewVehicleModParent != null || objNewParent != null) && objNewNode != null)
                    {
                        CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, objNewParent == null ? objNewVehicleModParent.Cyberware : objNewParent.Children, objNewNode, treCyberware);
                        objModularCyberware.Parent = objNewParent;
                        RefreshSelectedVehicle();
                    }
                    else
                    {
                        CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, _objCharacter.Cyberware, treCyberware.Nodes[0], treCyberware);
                        objModularCyberware.Parent = null;
                    }
                }
            }

            RefreshSelectedCyberware();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }

        private void cmdVehicleCyberwareChangeMount_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null)
                return;
            Cyberware objModularCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), _objCharacter.Vehicles);
            if (objModularCyberware == null)
                return;
            frmSelectItem frmPickMount = new frmSelectItem();
            frmPickMount.GeneralItems = CommonFunctions.ConstructModularCyberlimbList(_objCharacter, objModularCyberware);
            frmPickMount.Description = LanguageManager.GetString("MessageTitle_SelectCyberware");
            frmPickMount.ShowDialog();

            // Make sure the dialogue window was not canceled.
            if (frmPickMount.DialogResult == DialogResult.Cancel)
            {
                return;
            }

            if (objModularCyberware.Parent != null)
                objModularCyberware.ChangeModularEquip(false);
            string strSelectedParentID = frmPickMount.SelectedItem;
            if (strSelectedParentID == "None")
            {
                CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, _objCharacter.Cyberware, treCyberware.Nodes[0], treVehicles);
                objModularCyberware.Parent = null;
                RefreshSelectedCyberware();
            }
            else
            {
                Cyberware objNewParent = CommonFunctions.DeepFindById(strSelectedParentID, _objCharacter.Cyberware);
                TreeNode objNewNode = CommonFunctions.FindNode(strSelectedParentID, treCyberware);
                if (objNewParent != null && objNewNode != null)
                {
                    CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, objNewParent.Children, objNewNode, treVehicles);
                    objModularCyberware.Parent = objNewParent;
                    objModularCyberware.ChangeModularEquip(true);
                    RefreshSelectedCyberware();
                }
                else
                {
                    VehicleMod objNewVehicleModParent = CommonFunctions.FindVehicleMod(strSelectedParentID, _objCharacter.Vehicles);
                    if (objNewVehicleModParent == null)
                        objNewParent = CommonFunctions.FindVehicleCyberware(strSelectedParentID, _objCharacter.Vehicles, out objNewVehicleModParent);
                    else
                        objNewParent = null;
                    objNewNode = CommonFunctions.FindNode(strSelectedParentID, treVehicles);
                    if ((objNewVehicleModParent != null || objNewParent != null) && objNewNode != null)
                    {
                        CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, objNewParent == null ? objNewVehicleModParent.Cyberware : objNewParent.Children, objNewNode, treVehicles);
                        objModularCyberware.Parent = objNewParent;
                    }
                    else
                    {
                        CommonFunctions.MoveCyberwareNode(_objCharacter, int.MaxValue, _objCharacter.Cyberware, treCyberware.Nodes[0], treVehicles);
                        objModularCyberware.Parent = null;
                        RefreshSelectedCyberware();
                    }
                }
            }

            RefreshSelectedVehicle();
            ScheduleCharacterUpdate();

            _blnIsDirty = true;
            UpdateWindowTitle();
        }
    }
}
