<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ output extension=".cs" #>/*  This file is part of Chummer5a.
 *
 *  Chummer5a is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Chummer5a is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Chummer5a.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  You can obtain the full source code for Chummer5a at
 *  https://github.com/chummer5a/chummer5a
 */
using System;
using System.Collections.ObjectModel;

namespace Chummer.Properties
{
    public static class Contributors
    {
        public static ReadOnlyCollection<string> Usernames => Array.AsReadOnly(_lstUsernames);

        private static readonly string[] _lstUsernames = {
<#
    // Code originally written by joha4270
    try
    {
        string strOAuthToken = Environment.GetEnvironmentVariable("CHUMMER_OAUTH_TOKEN") ?? string.Empty;
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        JavaScriptSerializer jss = new JavaScriptSerializer();

        // TODO: Add support for proper pagination if we get more than 100 total contributors
        string strPerPageString = string.IsNullOrEmpty(strOAuthToken) ? "per_page=100" : "&per_page=100";
        HttpWebRequest webRequest = System.Net.WebRequest.Create($"https://api.github.com/repos/chummer5a/chummer5a/contributors?{strOAuthToken}{strPerPageString}") as HttpWebRequest;
        webRequest.UserAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)";
        webRequest.Accept = "application/json";
        webRequest.Timeout = 5000;

        string strRequestReturn = string.Empty;
        using (System.IO.StreamReader responseReader = new System.IO.StreamReader(webRequest.GetResponse().GetResponseStream()))
            strRequestReturn = responseReader.ReadToEnd();

        var json = jss.DeserializeObject(strRequestReturn);
            
        object[] parts = (object[]) json;
        foreach (object part in parts)
        {
            Dictionary<string, object> contributer = (Dictionary<string, object>) part;
            string username = contributer["login"].ToString();

            webRequest = System.Net.WebRequest.Create($"https://api.github.com/users/{username}?{strOAuthToken}") as HttpWebRequest;
            webRequest.UserAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)";
            webRequest.Accept = "application/json";
            webRequest.Timeout = 5000;

            strRequestReturn = string.Empty;
            using (System.IO.StreamReader responseReader = new System.IO.StreamReader(webRequest.GetResponse().GetResponseStream()))
                strRequestReturn = responseReader.ReadToEnd();

            var userjson = jss.DeserializeObject(strRequestReturn);
                    
            Dictionary<string, object> userdict = (Dictionary<string, object>) userjson;
            string name = userdict["name"]?.ToString();
            
            string fin;
            if(name == null)
            {
                fin = username;
            }
            else
            {
                fin = $"{name}<{username}>";
            }
#>
            "<#= fin #>",
<#
        }
    }
    catch(Exception ex)
    {
                #>
            @"<#= ex.ToString() #>", 
                <#
    }
#>
        };
    }
}
