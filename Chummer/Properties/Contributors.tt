<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Web.Script.Serialization" #>
<#@ output extension=".cs" #>/*  This file is part of Chummer5a.
 *
 *  Chummer5a is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Chummer5a is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Chummer5a.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  You can obtain the full source code for Chummer5a at
 *  https://github.com/chummer5a/chummer5a
 */
using System;
using System.Collections.ObjectModel;

namespace Chummer.Properties
{
    public static class Contributors
    {
        public static ReadOnlyCollection<string> Usernames => Array.AsReadOnly(s_LstUsernames);

        private static readonly string[] s_LstUsernames = {
<#
    // Code originally written by joha4270

    string strOAuthToken = Environment.GetEnvironmentVariable("CHUMMER_OAUTH_TOKEN") ?? string.Empty;
    if (string.IsNullOrEmpty(strOAuthToken))
    {
#>
#warning No OAuth token specified, so for everyone past the 59th place in the list, only usernames will be fetched
<#
    }
    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
    JavaScriptSerializer jss = new JavaScriptSerializer();

    // TODO: Add support for proper pagination if we get more than 200 total contributors
    string strPerPageString = "per_page=200";
    HttpWebRequest webRequest = System.Net.WebRequest.Create($"https://api.github.com/repos/chummer5a/chummer5a/contributors?{strPerPageString}") as HttpWebRequest;
    if (!string.IsNullOrEmpty(strOAuthToken))
    {
        webRequest.Headers.Add("Authorization", "token " + strOAuthToken);
        webRequest.PreAuthenticate = true;
    }
    webRequest.UserAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)";
    webRequest.Accept = "application/json";
    webRequest.Timeout = 5000;

    bool blnGenerateList = true;
    string strRequestReturn = string.Empty;
    try
    {
        using (System.IO.StreamReader responseReader = new System.IO.StreamReader(webRequest.GetResponse().GetResponseStream()))
            strRequestReturn = responseReader.ReadToEnd();
    }
    catch(Exception ex)
    {
        if (!string.IsNullOrEmpty(strOAuthToken))
        {
            // Try again, but this time without the OAuthToken
            webRequest = System.Net.WebRequest.Create($"https://api.github.com/repos/chummer5a/chummer5a/contributors?{strPerPageString}") as HttpWebRequest;
            webRequest.UserAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)";
            webRequest.Accept = "application/json";
            webRequest.Timeout = 5000;
            try
            {
                using (System.IO.StreamReader responseReader = new System.IO.StreamReader(webRequest.GetResponse().GetResponseStream()))
                    strRequestReturn = responseReader.ReadToEnd();

#>
#warning An OAuth token was specified, but it failed authentication, so for everyone past the 59th place in the list, only usernames will be fetched
<#
            }
            catch(Exception ex2)
            {
#>
#error Contributors.tt encountered an error that prevented it from fetching data from GitHub (printed in full in comments below): <#= ex.Message #>
        /* "<#= ex2.ToString() #>"
<#
                if (ex2.ToString().Contains("(403)"))
                {
#>
        *
        * Note: if you are getting a 403 error despite having CHUMMER_OAUTH_TOKEN defined as an environment variable, it may
        * be because it is no longer a valid GitHub OAuth token. GitHub puts limits on anonymous data queries to prevent abuse,
        * so OAuth tokens are needed if you are making a bunch of requests in a short time interval like how Contributors.tt
        * works (creates a separate query request for every single contributor)
<#
                }
#>
        */
<#
                blnGenerateList = false;
            }
        }
        else
        {
#>
#error Contributors.tt encountered an error that prevented it from fetching data from GitHub (printed in full in comments below): <#= ex.Message #>
        /* "<#= ex.ToString() #>"
<#
            if (ex.ToString().Contains("(403)"))
            {
#>
        *
        * Note: if you are getting a 403 error, make sure you have the CHUMMER_OAUTH_TOKEN environment variable set to
        * a GitHub OAuth token for your GitHub account. GitHub puts limits on anonymous data queries to prevent abuse,
        * so OAuth tokens are needed if you are making a bunch of requests in a short time interval like how Contributors.tt
        * works (creates a separate query request for every single contributor)
<#
            }
#>
        */
<#
            blnGenerateList = false;
        }
    }

    if (blnGenerateList)
    {
        var json = jss.DeserializeObject(strRequestReturn);
        object[] parts = (object[]) json;
        foreach (object part in parts)
        {
            Dictionary<string, object> contributer = (Dictionary<string, object>) part;
            string username = contributer["login"].ToString();
            string name = string.Empty;

            webRequest = System.Net.WebRequest.Create(contributer["url"].ToString()) as HttpWebRequest;
            if (!string.IsNullOrEmpty(strOAuthToken))
            {
                webRequest.Headers.Add("Authorization", "token " + strOAuthToken);
                webRequest.PreAuthenticate = true;
            }
            webRequest.UserAgent = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)";
            webRequest.Accept = "application/json";
            webRequest.Timeout = 5000;

            try
            {
                strRequestReturn = string.Empty;
                using (System.IO.StreamReader responseReader = new System.IO.StreamReader(webRequest.GetResponse().GetResponseStream()))
                    strRequestReturn = responseReader.ReadToEnd();

                var userjson = jss.DeserializeObject(strRequestReturn);
                    
                Dictionary<string, object> userdict = (Dictionary<string, object>) userjson;
                name = userdict["name"]?.ToString();
            }
            catch
            {
            }
            
            string fin = username;
            if(!string.IsNullOrEmpty(name))
                fin = $"{name.Replace("\"", "\\\"")}<{username}>";
#>
            "<#= fin #>",
<#
        }
    }
#>
        };
    }
}
