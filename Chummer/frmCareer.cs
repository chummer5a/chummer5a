/*  This file is part of Chummer5a.
 *
 *  Chummer5a is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Chummer5a is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Chummer5a.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  You can obtain the full source code for Chummer5a at
 *  https://github.com/chummer5a/chummer5a
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms.DataVisualization.Charting;
using System.Windows.Forms;
using System.Xml;
using System.Xml.XPath;
using Chummer.Backend;
using Chummer.Backend.Equipment;
using Chummer.Backend.Skills;
using System.Drawing.Imaging;
using Chummer.UI.Attributes;
using System.Collections.ObjectModel;
using Chummer.Backend.Attributes;
using System.Collections.Specialized;
using System.Threading.Tasks;

namespace Chummer
{
    [DesignerCategory("Form")]
    public partial class frmCareer : CharacterShared
    {
        // Set the default culture to en-US so we work with decimals correctly.
        private bool _blnSkipRefresh = false;
        private bool _blnSkipUpdate = false;
        private bool _blnLoading = true;
        private readonly bool _blnSkipToolStripRevert = false;
        private bool _blnReapplyImprovements = false;
        private int _intDragLevel = 0;
        private MouseButtons _objDragButton = new MouseButtons();
        private bool _blnDraggingGear = false;
        private readonly ObservableCollection<CharacterAttrib> lstPrimaryAttributes = new ObservableCollection<CharacterAttrib>();
        private readonly ObservableCollection<CharacterAttrib> lstSpecialAttributes = new ObservableCollection<CharacterAttrib>();

        private readonly ListViewColumnSorter _lvwKarmaColumnSorter;
        private readonly ListViewColumnSorter _lvwNuyenColumnSorter;

        public Action<object> DiceRollerOpened { get; set; }
        public Action<Character, int> DiceRollerOpenedInt { get; set; }

        #region Form Events
        [Obsolete("This constructor is for use by form designers only.", true)]
        public frmCareer() : base()
        {
            InitializeComponent();
        }
        public frmCareer(Character objCharacter) : base(objCharacter)
        {
            InitializeComponent();

            // Add EventHandlers for the MAG and RES enabled events and tab enabled events.
            CharacterObject.MAGEnabledChanged += objCharacter_MAGEnabledChanged;
            CharacterObject.RESEnabledChanged += objCharacter_RESEnabledChanged;
            CharacterObject.DEPEnabledChanged += objCharacter_DEPEnabledChanged;
            CharacterObject.AmbidextrousChanged += objCharacter_AmbidextrousChanged;
            CharacterObject.AdeptTabEnabledChanged += objCharacter_AdeptTabEnabledChanged;
            CharacterObject.MagicianTabEnabledChanged += objCharacter_MagicianTabEnabledChanged;
            CharacterObject.AdeptTabEnabledChanged += objCharacter_MagicianTabEnabledChanged;
            CharacterObject.TechnomancerTabEnabledChanged += objCharacter_TechnomancerTabEnabledChanged;
            CharacterObject.AdvancedProgramsTabEnabledChanged += objCharacter_AdvancedProgramsTabEnabledChanged;
            CharacterObject.CyberwareTabDisabledChanged += objCharacter_CyberwareTabDisabledChanged;
            CharacterObject.CritterTabEnabledChanged += objCharacter_CritterTabEnabledChanged;
            CharacterObject.ExConChanged += objCharacter_ExConChanged;

            tabPowerUc.ChildPropertyChanged += PowerPropertyChanged;
            tabSkillsUc.ChildPropertyChanged += SkillPropertyChanged;

            GlobalOptions.MRUChanged += DoNothing;
            Program.MainForm.OpenCharacterForms.Add(this);
            LanguageManager.TranslateWinForm(GlobalOptions.Language, this);

            ContextMenuStrip[] lstCMSToTranslate = new ContextMenuStrip[]
            {
                cmsAdvancedLifestyle,
                cmsAdvancedProgram,
                cmsAmmoExpense,
                cmsArmor,
                cmsArmorGear,
                cmsArmorLocation,
                cmsArmorMod,
                cmsBioware,
                cmsComplexForm,
                cmsComplexFormPlugin,
                cmsCritterPowers,
                cmsCyberware,
                cmsCyberwareGear,
                cmsDeleteArmor,
                cmsDeleteCyberware,
                cmsDeleteGear,
                cmsDeleteVehicle,
                cmsDeleteWeapon,
                cmsGear,
                cmsGearButton,
                cmsGearLocation,
                cmsGearPlugin,
                cmsImprovement,
                cmsImprovementLocation,
                cmsInitiationNotes,
                cmsLifestyle,
                cmsLifestyleNotes,
                cmsLimitModifier,
                cmsMartialArtManeuver,
                cmsMartialArts,
                cmsMetamagic,
                cmsQuality,
                cmsSpell,
                cmsSpellButton,
                cmsTechnique,
                cmsUndoKarmaExpense,
                cmsUndoNuyenExpense,
                cmsVehicle,
                cmsVehicleGear,
                cmsVehicleLocation,
                cmsVehicleWeapon,
                cmsVehicleWeaponAccessory,
                cmsVehicleWeaponAccessoryGear,
                cmsVehicleWeaponMod,
                cmsWeapon,
                cmsWeaponAccessory,
                cmsWeaponAccessoryGear,
                cmsWeaponLocation,
                cmsWeaponMod,
                cmsWeaponMount,
            };
            // Update the text in the Menus so they can be merged with frmMain properly.
            foreach (ToolStripMenuItem objItem in mnuCreateMenu.Items.OfType<ToolStripMenuItem>())
            {
                LanguageManager.TranslateToolStripItemsRecursively(objItem, GlobalOptions.Language);
            }
            foreach (ContextMenuStrip objCMS in lstCMSToTranslate)
            {
                if (objCMS != null)
                {
                    foreach (ToolStripMenuItem objItem in objCMS.Items.OfType<ToolStripMenuItem>())
                    {
                        LanguageManager.TranslateToolStripItemsRecursively(objItem, GlobalOptions.Language);
                    }
                }
            }

            _lvwKarmaColumnSorter = new ListViewColumnSorter
            {
                SortColumn = 0,
                Order = SortOrder.Descending
            };
            lstKarma.ListViewItemSorter = _lvwKarmaColumnSorter;
            _lvwNuyenColumnSorter = new ListViewColumnSorter
            {
                SortColumn = 0,
                Order = SortOrder.Descending
            };
            lstNuyen.ListViewItemSorter = _lvwNuyenColumnSorter;

            SetTooltips();
            MoveControls();
        }

        private void TreeView_MouseDown(object sender, MouseEventArgs e)
        {
            // Generic event for all TreeViews to allow right-clicking to select a TreeNode so the proper ContextMenu is shown.
            //if (e.Button == System.Windows.Forms.MouseButtons.Right)
            //{
                TreeView objTree = (TreeView)sender;
                objTree.SelectedNode = objTree.HitTest(e.X, e.Y).Node;
            //}
            if (ModifierKeys == Keys.Control)
            {
                if (!objTree.SelectedNode.IsExpanded)
                {
                    foreach (TreeNode objNode in objTree.SelectedNode.Nodes)
                    {
                        objNode.ExpandAll();
        }
                }
                else
                {
                    foreach (TreeNode objNode in objTree.SelectedNode.Nodes)
                    {
                        objNode.Collapse();
                    }
                }
            }
        }

        private void frmCareer_Load(object sender, EventArgs e)
        {
            Timekeeper.Finish("load_free");

            Timekeeper.Start("load_frm_career");

            CharacterObject.PropertyChanged += _objCharacter_PropertyChanged;

            _objCharacter_PropertyChanged(null, null);

            tabPowerUc.ObjCharacter = CharacterObject;
            // Remove the Magician, Adept, and Technomancer tabs since they are not in use until the appropriate Quality is selected.
            if (!CharacterObject.MagicianEnabled && !CharacterObject.AdeptEnabled)
                tabCharacterTabs.TabPages.Remove(tabMagician);
            if (!CharacterObject.AdeptEnabled)
                tabCharacterTabs.TabPages.Remove(tabAdept);
            if (!CharacterObject.TechnomancerEnabled)
                tabCharacterTabs.TabPages.Remove(tabTechnomancer);
            if (!CharacterObject.AdvancedProgramsEnabled)
                tabCharacterTabs.TabPages.Remove(tabAdvancedPrograms);
            if (CharacterObject.CyberwareDisabled)
                tabCharacterTabs.TabPages.Remove(tabCyberware);
            if (!CharacterObject.CritterEnabled)
                tabCharacterTabs.TabPages.Remove(tabCritter);

            mnuSpecialAddBiowareSuite.Visible = CharacterObject.Options.AllowBiowareSuites;

            // Remove the Improvements Tab.
            //tabCharacterTabs.TabPages.Remove(tabImprovements);

            // Remove the Initiation tab if the character does not have access to MAG or RES.
            if (!CharacterObject.MAGEnabled && !CharacterObject.RESEnabled)
                tabCharacterTabs.TabPages.Remove(tabInitiation);
            else
            {
                if (CharacterObject.MAGEnabled)
                {
                    tabInitiation.Text = LanguageManager.GetString("Tab_Initiation", GlobalOptions.Language);
                    tsMetamagicAddMetamagic.Text = LanguageManager.GetString("Button_AddMetamagic", GlobalOptions.Language);
                    cmdAddMetamagic.Text = LanguageManager.GetString("Button_AddInitiateGrade", GlobalOptions.Language);
                    chkJoinGroup.Text = LanguageManager.GetString("Checkbox_JoinedGroup", GlobalOptions.Language);
                    chkJoinGroup.Checked = CharacterObject.GroupMember;
                    txtGroupName.Text = CharacterObject.GroupName;
                    txtGroupNotes.Text = CharacterObject.GroupNotes;
                    string strInitTip = LanguageManager.GetString("Tip_ImproveInitiateGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.InitiateGrade + 1).ToString()).Replace("{1}", (CharacterObjectOptions.KarmaInititationFlat + ((CharacterObject.InitiateGrade + 1) * CharacterObjectOptions.KarmaInitiation)).ToString());
                    tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
                }
                else
                {
                    tabInitiation.Text = LanguageManager.GetString("Tab_Submersion", GlobalOptions.Language);
                    tsMetamagicAddMetamagic.Text = LanguageManager.GetString("Button_AddEcho", GlobalOptions.Language);
                    cmdAddMetamagic.Text = LanguageManager.GetString("Button_AddSubmersionGrade", GlobalOptions.Language);
                    chkInitiationOrdeal.Text = LanguageManager.GetString("Checkbox_SubmersionTask", GlobalOptions.Language);
                    chkInitiationGroup.Visible = false;
                    chkInitiationSchooling.Visible = false;
                    tsMetamagicAddArt.Visible = false;
                    tsMetamagicAddEnchantment.Visible = false;
                    tsMetamagicAddEnhancement.Visible = false;
                    tsMetamagicAddRitual.Visible = false;
                    treMetamagic.Top = cmdAddMetamagic.Top + cmdAddMetamagic.Height + 6;
                    cmdAddMetamagic.Left = treMetamagic.Left + treMetamagic.Width - cmdAddMetamagic.Width;
                    txtGroupName.Text = CharacterObject.GroupName;
                    txtGroupNotes.Text = CharacterObject.GroupNotes;
                    string strInitTip = LanguageManager.GetString("Tip_ImproveSubmersionGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.SubmersionGrade + 1).ToString()).Replace("{1}", (CharacterObjectOptions.KarmaInititationFlat + ((CharacterObject.SubmersionGrade + 1) * CharacterObjectOptions.KarmaInitiation)).ToString());
                    tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
                }
            }

            // If the character has a mugshot, decode it and put it in the PictureBox.
            if (CharacterObject.Mugshots.Count > 0)
            {
                nudMugshotIndex.Minimum = 1;
                nudMugshotIndex.Maximum = CharacterObject.Mugshots.Count;
                nudMugshotIndex.Value = Math.Max(CharacterObject.MainMugshotIndex, 0) + 1;
            }
            else
            {
                nudMugshotIndex.Minimum = 0;
                nudMugshotIndex.Maximum = 0;
                nudMugshotIndex.Value = 0;
            }
            lblNumMugshots.Text = "/ " + CharacterObject.Mugshots.Count.ToString();

            // Populate character information fields.
            XmlDocument objMetatypeDoc = XmlManager.Load("metatypes.xml");
            XmlNode objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + CharacterObject.Metatype + "\"]");
            if (objMetatypeNode == null)
            {
                objMetatypeDoc = XmlManager.Load("critters.xml");
                objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + CharacterObject.Metatype + "\"]");
            }
            string strMetatype = objMetatypeNode["translate"]?.InnerText ?? CharacterObject.Metatype;
            string strBook = CommonFunctions.LanguageBookShort(objMetatypeNode["source"].InnerText, GlobalOptions.Language);
            string strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;

            if (!string.IsNullOrEmpty(CharacterObject.Metavariant))
            {
                objMetatypeNode = objMetatypeNode.SelectSingleNode("metavariants/metavariant[name = \"" + CharacterObject.Metavariant + "\"]");
                strMetatype += $" ({objMetatypeNode?["translate"]?.InnerText ?? CharacterObject.Metavariant})";

                strBook = CommonFunctions.LanguageBookShort(objMetatypeNode["source"].InnerText, GlobalOptions.Language);
                strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;
            }
            lblMetatype.Text = strMetatype;
            lblMetatypeSource.Text = strBook + " " + strPage;
            if (CharacterObject.Possessed)
                lblPossessed.Text = LanguageManager.GetString("String_Possessed", GlobalOptions.Language);
            else
                lblPossessed.Visible = false;
            tipTooltip.SetToolTip(lblMetatypeSource, CommonFunctions.LanguageBookLong(objMetatypeNode["source"].InnerText, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);

            txtCharacterName.Text = CharacterObject.Name;
            txtSex.Text = CharacterObject.Sex;
            txtAge.Text = CharacterObject.Age;
            txtEyes.Text = CharacterObject.Eyes;
            txtHeight.Text = CharacterObject.Height;
            txtWeight.Text = CharacterObject.Weight;
            txtSkin.Text = CharacterObject.Skin;
            txtHair.Text = CharacterObject.Hair;
            txtDescription.Text = CharacterObject.Description;
            txtBackground.Text = CharacterObject.Background;
            txtConcept.Text = CharacterObject.Concept;
            txtNotes.Text = CharacterObject.Notes;
            txtAlias.Text = CharacterObject.Alias;
            txtPlayerName.Text = CharacterObject.PlayerName;
            txtGameNotes.Text = CharacterObject.GameNotes;
            nudStreetCred.Value = CharacterObject.StreetCred;
            nudNotoriety.Value = CharacterObject.Notoriety;
            nudPublicAware.Value = CharacterObject.PublicAwareness;

            // Check for Special Attributes.
            lblFoci.Visible = CharacterObject.MAGEnabled;
            treFoci.Visible = CharacterObject.MAGEnabled;
            cmdCreateStackedFocus.Visible = CharacterObject.MAGEnabled;

            if (CharacterObject.BuildMethod == CharacterBuildMethod.LifeModule)
            {
                treQualities.Nodes.Add(new TreeNode("Life Modules"));
            }

            RefreshQualities(treQualities,cmsQuality, true);

            objCharacter_AmbidextrousChanged();

            // Populate the Magician Traditions list.
            XmlDocument objXmlDocument = XmlManager.Load("traditions.xml");
            List<ListItem> lstTraditions = new List<ListItem>();
            foreach (XmlNode objXmlTradition in objXmlDocument.SelectNodes("/chummer/traditions/tradition[" + CharacterObjectOptions.BookXPath() + "]"))
            {
                string strName = objXmlTradition["name"].InnerText;
                lstTraditions.Add(new ListItem(strName, objXmlTradition["translate"]?.InnerText ?? strName));
            }
            lstTraditions.Sort(CompareListItems.CompareNames);
            lstTraditions.Insert(0, new ListItem("None", LanguageManager.GetString("String_None", GlobalOptions.Language)));
            cboTradition.BeginUpdate();
            cboTradition.ValueMember = "Value";
            cboTradition.DisplayMember = "Name";
            cboTradition.DataSource = lstTraditions;
            cboTradition.EndUpdate();

            // Populate the Magician Custom Drain Options list.
            objXmlDocument = XmlManager.Load("traditions.xml");
            List<ListItem> lstDrainAttributes = new List<ListItem>
            {
                ListItem.Blank
            };
            foreach (XmlNode objXmlDrain in objXmlDocument.SelectNodes("/chummer/drainattributes/drainattribute"))
            {
                string strName = objXmlDrain["name"].InnerText;
                lstDrainAttributes.Add(new ListItem(strName, objXmlDrain["translate"]?.InnerText ?? strName));
            }
            lstDrainAttributes.Sort(CompareListItems.CompareNames);
            cboDrain.BeginUpdate();
            cboDrain.ValueMember = "Value";
            cboDrain.DisplayMember = "Name";
            cboDrain.DataSource = lstDrainAttributes;
            cboDrain.EndUpdate();

            HashSet<string> limit = new HashSet<string>();
            foreach (Improvement improvement in CharacterObject.Improvements.Where(improvement => improvement.ImproveType == Improvement.ImprovementType.LimitSpiritCategory))
            {
                limit.Add(improvement.ImprovedName);
            }

            // Populate the Magician Custom Spirits lists - Combat.
            objXmlDocument = XmlManager.Load("traditions.xml");
            List<ListItem> lstSpirit = new List<ListItem>
            {
                ListItem.Blank
            };
            foreach (XmlNode objXmlSpirit in objXmlDocument.SelectNodes("/chummer/spirits/spirit"))
            {
                string strSpiritName = objXmlSpirit["name"].InnerText;
                if (limit.Count == 0 || limit.Contains(strSpiritName))
                {
                    lstSpirit.Add(new ListItem(strSpiritName, objXmlSpirit["translate"]?.InnerText ?? strSpiritName));
                }
            }
            lstSpirit.Sort(CompareListItems.CompareNames);

            List<ListItem> lstCombat = new List<ListItem>(lstSpirit);
            cboSpiritCombat.BeginUpdate();
            cboSpiritCombat.ValueMember = "Value";
            cboSpiritCombat.DisplayMember = "Name";
            cboSpiritCombat.DataSource = lstCombat;
            cboSpiritCombat.EndUpdate();

            List<ListItem> lstDetection = new List<ListItem>(lstSpirit);
            cboSpiritDetection.BeginUpdate();
            cboSpiritDetection.ValueMember = "Value";
            cboSpiritDetection.DisplayMember = "Name";
            cboSpiritDetection.DataSource = lstDetection;
            cboSpiritDetection.EndUpdate();

            List<ListItem> lstHealth = new List<ListItem>(lstSpirit);
            cboSpiritHealth.BeginUpdate();
            cboSpiritHealth.ValueMember = "Value";
            cboSpiritHealth.DisplayMember = "Name";
            cboSpiritHealth.DataSource = lstHealth;
            cboSpiritHealth.EndUpdate();

            List<ListItem> lstIllusion = new List<ListItem>(lstSpirit);
            cboSpiritIllusion.BeginUpdate();
            cboSpiritIllusion.ValueMember = "Value";
            cboSpiritIllusion.DisplayMember = "Name";
            cboSpiritIllusion.DataSource = lstIllusion;
            cboSpiritIllusion.EndUpdate();

            List<ListItem> lstManip = new List<ListItem>(lstSpirit);
            cboSpiritManipulation.BeginUpdate();
            cboSpiritManipulation.ValueMember = "Value";
            cboSpiritManipulation.DisplayMember = "Name";
            cboSpiritManipulation.DataSource = lstManip;
            cboSpiritManipulation.EndUpdate();

            // Populate the Technomancer Streams list.
            objXmlDocument = XmlManager.Load("streams.xml");
            List<ListItem> lstStreams = new List<ListItem>
            {
                ListItem.Blank
            };
            foreach (XmlNode objXmlTradition in objXmlDocument.SelectNodes("/chummer/traditions/tradition[" + CharacterObjectOptions.BookXPath() + "]"))
            {
                string strName = objXmlTradition["name"].InnerText;
                lstStreams.Add(new ListItem(strName, objXmlTradition["translate"]?.InnerText ?? strName));
            }
            lstStreams.Sort(CompareListItems.CompareNames);
            cboStream.BeginUpdate();
            cboStream.ValueMember = "Value";
            cboStream.DisplayMember = "Name";
            cboStream.DataSource = lstStreams;
            cboStream.EndUpdate();

			cboAttributeCategory.Visible = CharacterObject.MetatypeCategory == "Shapeshifter";
			if (CharacterObject.MetatypeCategory == "Shapeshifter")
			{
				XmlDocument objDoc = XmlManager.Load("metatypes.xml");
				XmlNode node = objDoc.SelectSingleNode($"/chummer/metatypes/metatype[name = \"{CharacterObject.Metatype}\"]");
                List<ListItem> lstAttributeCategories = new List<ListItem>
                {
                    new ListItem("Shapeshifter", node["name"].Attributes["translate"]?.InnerText ?? node["name"].InnerText)
                };

                node = node?.SelectSingleNode($"metavariants/metavariant[name = \"{CharacterObject.Metavariant}\"]");

                lstAttributeCategories.Add(new ListItem("Standard", node["name"].Attributes["translate"]?.InnerText ?? node["name"].InnerText));

				lstAttributeCategories.Sort(CompareListItems.CompareNames);
				cboAttributeCategory.BeginUpdate();
				cboAttributeCategory.ValueMember = "Value";
				cboAttributeCategory.DisplayMember = "Name";
				cboAttributeCategory.DataSource = lstAttributeCategories;
				cboAttributeCategory.EndUpdate();
				cboAttributeCategory.SelectedValue = "Standard";
			}

            // If the character is a Mystic Adept, set the values for the Mystic Adept NUD.
            if (CharacterObject.IsMysticAdept && !CharacterObjectOptions.MysAdeptSecondMAGAttribute)
            {
                lblMysticAdeptMAGAdept.Text = CharacterObject.MysticAdeptPowerPoints.ToString();

                lblMysticAdeptAssignment.Visible = true;
                lblMysticAdeptMAGAdept.Visible = true;
                cmdIncreasePowerPoints.Visible = CharacterObjectOptions.MysaddPPCareer;
            }
            else
                cmdIncreasePowerPoints.Visible = false;
            cmdIncreasePowerPoints.DataBindings.Add("Enabled", CharacterObject, nameof(Character.CanAffordCareerPP), false, DataSourceUpdateMode.OnPropertyChanged);
            
            // Populate Contacts and Enemies.
            int intContact = -1;
            int intEnemy = -1;
            foreach (Contact objContact in CharacterObject.Contacts)
            {
                if (objContact.EntityType == ContactType.Contact)
                {
                    intContact++;
                    ContactControl objContactControl = new ContactControl(objContact);
                    // Attach an EventHandler for the ConnectionRatingChanged, LoyaltyRatingChanged, DeleteContact, and FileNameChanged Events.
                    objContactControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
                    objContactControl.DeleteContact += DeleteContact;
                    objContactControl.MouseDown += panContactControl_MouseDown;

                    objContactControl.Top = intContact * objContactControl.Height;
                    panContacts.Controls.Add(objContactControl);
                }
                if (objContact.EntityType == ContactType.Enemy)
                {
                    intEnemy++;
                    ContactControl objContactControl = new ContactControl(objContact);
                    // Attach an EventHandler for the ConnectioNRatingChanged, LoyaltyRatingChanged, DeleteContact, and FileNameChanged Events.
                    objContactControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
                    objContactControl.DeleteContact += DeleteEnemy;

                    objContactControl.Top = intEnemy * objContactControl.Height;
                    panEnemies.Controls.Add(objContactControl);
                }
                if (objContact.EntityType == ContactType.Pet)
                {
                    PetControl objPetControl = new PetControl(objContact);
                    // Attach an EventHandler for the DeleteContact and FileNameChanged Events.
                    objPetControl.DeleteContact += DeletePet;
                    objPetControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;

                    panPets.Controls.Add(objPetControl);
                }
            }

            // Populate Armor.
            // Start by populating Locations.
            foreach (string strLocation in CharacterObject.ArmorLocations)
            {
                TreeNode objLocation = new TreeNode
                {
                    Tag = strLocation,
                    Text = strLocation,
                    ContextMenuStrip = cmsArmorLocation
                };
                treArmor.Nodes.Add(objLocation);
            }
            foreach (Armor objArmor in CharacterObject.Armor)
            {
                CommonFunctions.CreateArmorTreeNode(objArmor, treArmor, cmsArmor, cmsArmorMod, cmsArmorGear);
            }

            // Populate Weapons.
            // Start by populating Locations.
            foreach (string strLocation in CharacterObject.WeaponLocations)
            {
                TreeNode objLocation = new TreeNode
                {
                    Tag = strLocation,
                    Text = strLocation,
                    ContextMenuStrip = cmsWeaponLocation
                };
                treWeapons.Nodes.Add(objLocation);
            }
            foreach (Weapon objWeapon in CharacterObject.Weapons)
            {
                TreeNode objLocationNode = treWeapons.Nodes[0];
                if (!string.IsNullOrEmpty(objWeapon.Location))
                {
                    objLocationNode = treWeapons.Nodes.Cast<TreeNode>().FirstOrDefault(x => x.Text == objWeapon.Location) ?? treWeapons.Nodes[0];
                }
                CommonFunctions.CreateWeaponTreeNode(objWeapon, objLocationNode, cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
            }

            PopulateCyberware();

            // Populate Spell list.
            foreach (Spell objSpell in CharacterObject.Spells)
            {
                TreeNode objNode = new TreeNode
                {
                    Text = objSpell.DisplayName(GlobalOptions.Language),
                    Tag = objSpell.InternalId,
                    ContextMenuStrip = cmsSpell,
                    ToolTipText = objSpell.Notes.WordWrap(100)
                };
                if (!string.IsNullOrEmpty(objSpell.Notes))
                    objNode.ForeColor = Color.SaddleBrown;

                switch (objSpell.Category)
                {
                    case "Combat":
                        treSpells.Nodes[0].Nodes.Add(objNode);
                        treSpells.Nodes[0].Expand();
                        break;
                    case "Detection":
                        treSpells.Nodes[1].Nodes.Add(objNode);
                        treSpells.Nodes[1].Expand();
                        break;
                    case "Health":
                        treSpells.Nodes[2].Nodes.Add(objNode);
                        treSpells.Nodes[2].Expand();
                        break;
                    case "Illusion":
                        treSpells.Nodes[3].Nodes.Add(objNode);
                        treSpells.Nodes[3].Expand();
                        break;
                    case "Manipulation":
                        treSpells.Nodes[4].Nodes.Add(objNode);
                        treSpells.Nodes[4].Expand();
                        break;
                    case "Rituals":
                        /*
                        int intNode = 5;
                        if (_objCharacter.AdeptEnabled && !_objCharacter.MagicianEnabled)
                            intNode = 0;
                        treSpells.Nodes[intNode].Nodes.Add(objNode);
                        treSpells.Nodes[intNode].Expand();
                        */
                        treSpells.Nodes[5].Nodes.Add(objNode);
                        treSpells.Nodes[5].Expand();
                        break;
                    case "Enchantments":
                        treSpells.Nodes[6].Nodes.Add(objNode);
                        treSpells.Nodes[6].Expand();
                        break;
                }
            }

            // Populate Magician Spirits and Technomancer Sprites.
            for (int i = 0; i < CharacterObject.Spirits.Count; ++i)
            {
                Spirit objSpirit = CharacterObject.Spirits[i];
                bool blnIsSpirit = objSpirit.EntityType == SpiritType.Spirit;
                SpiritControl objSpiritControl = new SpiritControl(objSpirit);

                // Attach an EventHandler for the ServicesOwedChanged Event.
                objSpiritControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
                objSpiritControl.DeleteSpirit += DeleteSpirit;

                objSpiritControl.RebuildSpiritList(blnIsSpirit ? CharacterObject.MagicTradition : CharacterObject.TechnomancerStream);

                objSpiritControl.Top = i * objSpiritControl.Height;
                if (blnIsSpirit)
                    panSpirits.Controls.Add(objSpiritControl);
                else
                    panSprites.Controls.Add(objSpiritControl);
            }

            // Populate Technomancer Complex Forms/Programs.
            foreach (ComplexForm objProgram in CharacterObject.ComplexForms)
            {
                TreeNode objNode = new TreeNode
                {
                    Text = objProgram.DisplayName,
                    Tag = objProgram.InternalId,
                    ToolTipText = objProgram.Notes.WordWrap(100),
                    ContextMenuStrip = cmsComplexForm
                };
                if (!string.IsNullOrEmpty(objProgram.Notes))
                    objNode.ForeColor = Color.SaddleBrown;
                treComplexForms.Nodes[0].Nodes.Add(objNode);
                treComplexForms.Nodes[0].Expand();
            }

            // Populate AI Programs and Advanced Programs.
            foreach (AIProgram objProgram in CharacterObject.AIPrograms)
            {
                TreeNode objNode = new TreeNode
                {
                    Text = objProgram.DisplayName,
                    Tag = objProgram.InternalId,
                    ToolTipText = objProgram.Notes.WordWrap(100),
                    ContextMenuStrip = cmsAdvancedProgram
                };
                if (!string.IsNullOrEmpty(objProgram.Notes))
                    objNode.ForeColor = Color.SaddleBrown;
                else if (!objProgram.CanDelete)
                    objNode.ForeColor = SystemColors.GrayText;
                else
                    objNode.ForeColor = SystemColors.WindowText;
                treAIPrograms.Nodes[0].Nodes.Add(objNode);
                treAIPrograms.Nodes[0].Expand();
            }

            // Populate Martial Arts.
            foreach (MartialArt objMartialArt in CharacterObject.MartialArts)
            {
                TreeNode objMartialArtNode = new TreeNode
                {
                    Text = objMartialArt.DisplayName(GlobalOptions.Language),
                    Tag = objMartialArt.InternalId,
                    ContextMenuStrip = cmsMartialArts,
                    ToolTipText = objMartialArt.Notes.WordWrap(100)
                };
                if (!string.IsNullOrEmpty(objMartialArt.Notes))
                    objMartialArtNode.ForeColor = Color.SaddleBrown;

                foreach (MartialArtAdvantage objAdvantage in objMartialArt.Advantages)
                {
                    TreeNode objAdvantageNode = new TreeNode
                    {
                        Text = objAdvantage.DisplayName(GlobalOptions.Language),
                        Tag = objAdvantage.InternalId,
                        ContextMenuStrip = cmsTechnique,
                        ToolTipText = objAdvantage.Notes.WordWrap(100)
                    };
                    if (!string.IsNullOrEmpty(objAdvantage.Notes))
                        objAdvantageNode.ForeColor = Color.SaddleBrown;
                    else
                        objAdvantageNode.ForeColor = SystemColors.WindowText;
                    objMartialArtNode.Nodes.Add(objAdvantageNode);
                    objMartialArtNode.Expand();
                }

                treMartialArts.Nodes[0].Nodes.Add(objMartialArtNode);
                treMartialArts.Nodes[0].Expand();
            }

            // Populate Martial Art Maneuvers.
            foreach (MartialArtManeuver objManeuver in CharacterObject.MartialArtManeuvers)
            {
                TreeNode objManeuverNode = new TreeNode
                {
                    Text = objManeuver.DisplayName(GlobalOptions.Language),
                    Tag = objManeuver.InternalId,
                    ContextMenuStrip = cmsMartialArtManeuver,
                    ToolTipText = objManeuver.Notes.WordWrap(100)
                };
                if (!string.IsNullOrEmpty(objManeuver.Notes))
                    objManeuverNode.ForeColor = Color.SaddleBrown;

                treMartialArts.Nodes[1].Nodes.Add(objManeuverNode);
                treMartialArts.Nodes[1].Expand();
            }

            // Populate Limit Modifiers.
            foreach (LimitModifier objLimitModifier in CharacterObject.LimitModifiers)
            {
                TreeNode objLimitModifierNode = new TreeNode
                {
                    Text = objLimitModifier.DisplayName,
                    Tag = objLimitModifier.Name,
                    ContextMenuStrip = cmsMartialArts,
                    ToolTipText = objLimitModifier.Notes.WordWrap(100)
                };
                objLimitModifierNode.ContextMenuStrip = cmsLimitModifier;
                if (!string.IsNullOrEmpty(objLimitModifier.Notes))
                    objLimitModifierNode.ForeColor = Color.SaddleBrown;

                switch (objLimitModifier.Limit)
                {
                    case "Physical":
                        treLimit.Nodes[0].Nodes.Add(objLimitModifierNode);
                        treLimit.Nodes[0].Expand();
                        break;
                    case "Mental":
                        treLimit.Nodes[1].Nodes.Add(objLimitModifierNode);
                        treLimit.Nodes[1].Expand();
                        break;
                    case "Social":
                        treLimit.Nodes[2].Nodes.Add(objLimitModifierNode);
                        treLimit.Nodes[2].Expand();
                        break;
                }
            }

            // Populate Lifestyles.
            foreach (Lifestyle objLifestyle in CharacterObject.Lifestyles)
            {
                TreeNode objLifestyleNode = new TreeNode
                {
                    Text = objLifestyle.DisplayName(GlobalOptions.Language),
                    Tag = objLifestyle.InternalId,
                    ToolTipText = objLifestyle.Notes.WordWrap(100)
                };
                if (objLifestyle.StyleType.ToString() != "Standard")
                    objLifestyleNode.ContextMenuStrip = cmsAdvancedLifestyle;
                else
                    objLifestyleNode.ContextMenuStrip = cmsLifestyleNotes;
                if (!string.IsNullOrEmpty(objLifestyle.Notes))
                    objLifestyleNode.ForeColor = Color.SaddleBrown;
                treLifestyles.Nodes[0].Nodes.Add(objLifestyleNode);
            }
            treLifestyles.Nodes[0].Expand();

            PopulateGearList();

            // Populate Foci.
            CharacterObject.PopulateFocusList(treFoci);

            // Populate Vehicles.
            foreach (Vehicle objVehicle in CharacterObject.Vehicles)
            {
                CommonFunctions.CreateVehicleTreeNode(objVehicle, treVehicles, cmsVehicle, cmsVehicleLocation, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsVehicleGear, cmsWeaponMount);
            }

            // Populate vehicle weapon fire mode list.
            List<ListItem> lstFireModes = new List<ListItem>{};
            foreach (Weapon.FiringMode mode in Enum.GetValues(typeof(Weapon.FiringMode)))
            {
                string strName = mode.ToString();
                lstFireModes.Add(new ListItem(mode.ToString(), LanguageManager.GetString($"Enum_{mode}",GlobalOptions.Language)));
            }
            lstStreams.Sort(CompareListItems.CompareNames);
            cboVehicleWeaponFiringMode.BeginUpdate();
            cboVehicleWeaponFiringMode.ValueMember = "Value";
            cboVehicleWeaponFiringMode.DisplayMember = "Name";
            cboVehicleWeaponFiringMode.DataSource = lstFireModes;
            cboVehicleWeaponFiringMode.EndUpdate();

            UpdateInitiationGradeTree();

            //TODO: Do we really need this?
            if (!string.IsNullOrEmpty(CharacterObject.MagicTradition) && CharacterObject.MagicTradition != "None")
            {
                objXmlDocument = XmlManager.Load("traditions.xml");
                XmlNode objXmlTradition = objXmlDocument.SelectSingleNode("/chummer/traditions/tradition[name = \"" + CharacterObject.MagicTradition + "\"]");
                lblDrainAttributes.Text = objXmlTradition["drain"].InnerText;
                string strDrainAtt = CharacterObject.TraditionDrain;
                
                StringBuilder objDrain = new StringBuilder(strDrainAtt);
                foreach (string strAttribute in AttributeSection.AttributeStrings)
                {
                    CharacterAttrib objAttrib = CharacterObject.GetAttribute(strAttribute);
                    objDrain.CheapReplace(strDrainAtt, objAttrib.Abbrev, () => objAttrib.TotalValue.ToString());
                }
                string strDrain = objDrain.ToString();
                if (string.IsNullOrEmpty(strDrain))
                {
                    strDrain = "0";
                }

                // Add any Improvements for Drain Resistance.
                int intDrain = Convert.ToInt32(CommonFunctions.EvaluateInvariantXPath(strDrain)) + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DrainResistance);
                lblDrainAttributesValue.Text = intDrain.ToString();
            }

            if (!string.IsNullOrEmpty(CharacterObject.TechnomancerStream))
            {
                objXmlDocument = XmlManager.Load("streams.xml");
                XmlNode objXmlTradition = objXmlDocument.SelectSingleNode("/chummer/traditions/tradition[name = \"" + CharacterObject.TechnomancerStream + "\"]");
                lblFadingAttributes.Text = objXmlTradition["drain"].InnerText;

                // Update the Fading CharacterAttribute Value.
                string strDrainAtt = CharacterObject.TechnomancerFading;
                
                StringBuilder objDrain = new StringBuilder(strDrainAtt);
                foreach (string strAttribute in AttributeSection.AttributeStrings)
                {
                    CharacterAttrib objAttrib = CharacterObject.GetAttribute(strAttribute);
                    objDrain.CheapReplace(strDrainAtt, objAttrib.Abbrev, () => objAttrib.TotalValue.ToString());
                }
                string strFading = objDrain.ToString();
                if (string.IsNullOrEmpty(strFading))
                {
                    strFading = "0";
                }
                int intFading = 0;
                try
                {
                    intFading = Convert.ToInt32(CommonFunctions.EvaluateInvariantXPath(strFading).ToString());
                }
                catch (XPathException) { }
                intFading += ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.FadingResistance);
                lblFadingAttributesValue.Text = intFading.ToString();
            }

            RefreshCritterPowers(treCritterPowers, cmsCritterPowers);

            _blnLoading = false;

            // Select the Magician's Tradition.
            if (!string.IsNullOrEmpty(CharacterObject.MagicTradition))
                cboTradition.SelectedValue = CharacterObject.MagicTradition;

            if (!string.IsNullOrEmpty(CharacterObject.TraditionName))
                txtTraditionName.Text = CharacterObject.TraditionName;

            if (!string.IsNullOrEmpty(CharacterObject.TraditionDrain))
                cboDrain.SelectedValue = CharacterObject.TraditionDrain;

            if (!string.IsNullOrEmpty(CharacterObject.SpiritCombat))
                cboSpiritCombat.SelectedValue = CharacterObject.SpiritCombat;

            if (!string.IsNullOrEmpty(CharacterObject.SpiritDetection))
                cboSpiritDetection.SelectedValue = CharacterObject.SpiritDetection;

            if (!string.IsNullOrEmpty(CharacterObject.SpiritHealth))
                cboSpiritHealth.SelectedValue = CharacterObject.SpiritHealth;

            if (!string.IsNullOrEmpty(CharacterObject.SpiritIllusion))
                cboSpiritIllusion.SelectedValue = CharacterObject.SpiritIllusion;

            if (!string.IsNullOrEmpty(CharacterObject.SpiritManipulation))
                cboSpiritManipulation.SelectedValue = CharacterObject.SpiritManipulation;

            // Update the Fading CharacterAttribute Value.
            if (CharacterObject.RESEnabled)
            {
                // Select the Technomancer's Stream.
                if (!string.IsNullOrEmpty(CharacterObject.TechnomancerStream))
                    cboStream.SelectedValue = CharacterObject.TechnomancerStream;
            }

            treGear.ItemDrag += treGear_ItemDrag;
            treGear.DragEnter += treGear_DragEnter;
            treGear.DragDrop += treGear_DragDrop;

            treLifestyles.ItemDrag += treLifestyles_ItemDrag;
            treLifestyles.DragEnter += treLifestyles_DragEnter;
            treLifestyles.DragDrop += treLifestyles_DragDrop;

            treArmor.ItemDrag += treArmor_ItemDrag;
            treArmor.DragEnter += treArmor_DragEnter;
            treArmor.DragDrop += treArmor_DragDrop;

            treWeapons.ItemDrag += treWeapons_ItemDrag;
            treWeapons.DragEnter += treWeapons_DragEnter;
            treWeapons.DragDrop += treWeapons_DragDrop;

            treVehicles.ItemDrag += treVehicles_ItemDrag;
            treVehicles.DragEnter += treVehicles_DragEnter;
            treVehicles.DragDrop += treVehicles_DragDrop;

            treImprovements.ItemDrag += treImprovements_ItemDrag;
            treImprovements.DragEnter += treImprovements_DragEnter;
            treImprovements.DragDrop += treImprovements_DragDrop;

            // Merge the ToolStrips.
            ToolStripManager.RevertMerge("toolStrip");
            ToolStripManager.Merge(toolStrip, "toolStrip");

            mnuSpecialConvertToFreeSprite.Visible = CharacterObject.IsSprite;

            if (CharacterObject.MetatypeCategory == "Cyberzombie")
                mnuSpecialCyberzombie.Visible = false;

            // Determine if the Critter should have access to the Possession menu item.
            bool blnAllowPossession = false;
            foreach (CritterPower objCritterPower in CharacterObject.CritterPowers)
            {
                if (objCritterPower.Name == "Inhabitation" || objCritterPower.Name == "Possession")
                {
                    blnAllowPossession = true;
                    break;
                }
            }
            mnuSpecialPossess.Visible = blnAllowPossession;

            tabSkillsUc.ObjCharacter = CharacterObject;

            // Set the visibility of the Armor Degradation buttons.
            cmdArmorDecrease.Visible = CharacterObjectOptions.ArmorDegradation;
            cmdArmorIncrease.Visible = CharacterObjectOptions.ArmorDegradation;

            treCyberware.SortCustom();
            treSpells.SortCustom();
            treComplexForms.SortCustom();
            treAIPrograms.SortCustom();
            treQualities.SortCustom();
            treCritterPowers.SortCustom();
            treMartialArts.SortCustom();
            UpdateMentorSpirits();
            UpdateInitiationGradeTree();
            PopulateCalendar();
            RefreshImprovements();

            IsCharacterUpdateRequested = true;
            // Directly calling here so that we can properly unset the dirty flag after the update
            UpdateCharacterInfo();

            lstPrimaryAttributes.CollectionChanged += AttributeCollectionChanged;
            lstSpecialAttributes.CollectionChanged += AttributeCollectionChanged;
            CharacterObject.Spells.CollectionChanged += SpellCollectionChanged;
            BuildAttributePanel();

            // Hacky, but necessary
            // UpdateCharacterInfo() needs to be run before BuildAttributesPanel() so that it can properly regenerate Essence Loss improvements based on options...
            // ...but BuildAttributePanel() ends up requesting a character update when it sets up the values of attribute NumericalUpDowns
            IsCharacterUpdateRequested = false;

            // Now we can start checking for character updates
            Application.Idle += UpdateCharacterInfo;
            if (GlobalOptions.LiveUpdateCleanCharacterFiles)
                Application.Idle += LiveUpdateFromCharacterFile;

            // Clear the Dirty flag which gets set when creating a new Character.
            IsDirty = false;
            RefreshPasteStatus();
            frmCareer_Resize(sender, e);
            picMugshot_SizeChanged(sender, e);
            // Stupid hack to get the MDI icon to show up properly.
            Icon = Icon.Clone() as Icon;
            Timekeeper.Finish("load_frm_career");
            Timekeeper.Finish("loading");

            if (CharacterObject.InternalIdsNeedingReapplyImprovements.Count > 0)
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_ImprovementLoadError", GlobalOptions.Language),
                    LanguageManager.GetString("MessageTitle_ImprovementLoadError", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                {
                    DoReapplyImprovements(CharacterObject.InternalIdsNeedingReapplyImprovements);
                    CharacterObject.InternalIdsNeedingReapplyImprovements.Clear();
                }
            }
        }

        private void _objCharacter_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            //Self implemented one way databinding workaround. Ugly and should probably be done in a better way. (One day...)
            switch (e?.PropertyName)
            {
                case null:
                case nameof(Character.Karma):
                    tssKarma.Text = CharacterObject.Karma.ToString();
                    break;
            }
        }

        private void SpellCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs)
        {
            RefreshSpells(treSpells, cmsSpell, CharacterObject, notifyCollectionChangedEventArgs);
        }

        private void AttributeCollectionChanged(object sender, NotifyCollectionChangedEventArgs notifyCollectionChangedEventArgs)
        {
            switch (notifyCollectionChangedEventArgs.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (CharacterAttrib objAttrib in notifyCollectionChangedEventArgs.NewItems)
                    {
                        AttributeControl objControl = new AttributeControl(objAttrib);
                        objControl.ValueChanged += MakeDirtyWithCharacterUpdate;
                        pnlAttributes.Controls.Add(objControl);
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    foreach (CharacterAttrib objAttrib in notifyCollectionChangedEventArgs.OldItems)
                    {
                        foreach (AttributeControl objControl in pnlAttributes.Controls)
                        {
                            if (objControl.AttributeName == objAttrib.Abbrev)
                            {
                                objControl.ValueChanged -= MakeDirtyWithCharacterUpdate;
                                pnlAttributes.Controls.Remove(objControl);
                                objControl.Dispose();
                            }
                        }
                    }
                    break;
            }
        }

        private void frmCareer_FormClosing(object sender, FormClosingEventArgs e)
        {
            // If there are unsaved changes to the character, as the user if they would like to save their changes.
            if (IsDirty)
            {
                string strCharacterName = CharacterObject.CharacterName;
                DialogResult objResult = MessageBox.Show(LanguageManager.GetString("Message_UnsavedChanges", GlobalOptions.Language).Replace("{0}", strCharacterName), LanguageManager.GetString("MessageTitle_UnsavedChanges", GlobalOptions.Language), MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                if (objResult == DialogResult.Yes)
                {
                    // Attempt to save the Character. If the user cancels the Save As dialogue that may open, cancel the closing event so that changes are not lost.
                    bool blnResult = SaveCharacter();
                    if (!blnResult)
                        e.Cancel = true;
                }
                else if (objResult == DialogResult.Cancel)
                {
                    e.Cancel = true;
                }
            }
            // Reset the ToolStrip so the Save button is removed for the currently closing window.
            if (!e.Cancel)
            {
                _blnLoading = true;
                Cursor = Cursors.WaitCursor;
                Application.Idle -= UpdateCharacterInfo;
                Application.Idle -= LiveUpdateFromCharacterFile;
                Program.MainForm.OpenCharacterForms.Remove(this);
                Program.MainForm.CharacterRoster.PopulateCharacterList(); // Regenerates character list
                if (!_blnSkipToolStripRevert)
                    ToolStripManager.RevertMerge("toolStrip");

                // Unsubscribe from events.
                CharacterObject.MAGEnabledChanged -= objCharacter_MAGEnabledChanged;
                CharacterObject.RESEnabledChanged -= objCharacter_RESEnabledChanged;
                CharacterObject.DEPEnabledChanged -= objCharacter_DEPEnabledChanged;
                CharacterObject.AdeptTabEnabledChanged -= objCharacter_AdeptTabEnabledChanged;
                CharacterObject.MagicianTabEnabledChanged -= objCharacter_MagicianTabEnabledChanged;
                CharacterObject.AdeptTabEnabledChanged -= objCharacter_MagicianTabEnabledChanged;
                CharacterObject.TechnomancerTabEnabledChanged -= objCharacter_TechnomancerTabEnabledChanged;
                CharacterObject.AdvancedProgramsTabEnabledChanged -= objCharacter_AdvancedProgramsTabEnabledChanged;
                CharacterObject.CyberwareTabDisabledChanged -= objCharacter_CyberwareTabDisabledChanged;
                CharacterObject.CritterTabEnabledChanged -= objCharacter_CritterTabEnabledChanged;
                CharacterObject.ExConChanged -= objCharacter_ExConChanged;
                GlobalOptions.MRUChanged -= DoNothing;

                treGear.ItemDrag -= treGear_ItemDrag;
                treGear.DragEnter -= treGear_DragEnter;
                treGear.DragDrop -= treGear_DragDrop;

                treLifestyles.ItemDrag -= treLifestyles_ItemDrag;
                treLifestyles.DragEnter -= treLifestyles_DragEnter;
                treLifestyles.DragDrop -= treLifestyles_DragDrop;

                treArmor.ItemDrag -= treArmor_ItemDrag;
                treArmor.DragEnter -= treArmor_DragEnter;
                treArmor.DragDrop -= treArmor_DragDrop;

                treWeapons.ItemDrag -= treWeapons_ItemDrag;
                treWeapons.DragEnter -= treWeapons_DragEnter;
                treWeapons.DragDrop -= treWeapons_DragDrop;

                treVehicles.ItemDrag -= treVehicles_ItemDrag;
                treVehicles.DragEnter -= treVehicles_DragEnter;
                treVehicles.DragDrop -= treVehicles_DragDrop;

                treImprovements.ItemDrag -= treImprovements_ItemDrag;
                treImprovements.DragEnter -= treImprovements_DragEnter;
                treImprovements.DragDrop -= treImprovements_DragDrop;

                foreach (ContactControl objContactControl in panContacts.Controls.OfType<ContactControl>())
                {
                    objContactControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                    objContactControl.DeleteContact -= DeleteContact;
                }

                foreach (ContactControl objContactControl in panEnemies.Controls.OfType<ContactControl>())
                {
                    objContactControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                    objContactControl.DeleteContact -= DeleteEnemy;
                }

                foreach (PetControl objContactControl in panPets.Controls.OfType<PetControl>())
                {
                    objContactControl.DeleteContact -= DeletePet;
                    objContactControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                }

                foreach (SpiritControl objSpiritControl in panSpirits.Controls.OfType<SpiritControl>())
                {
                    objSpiritControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                    objSpiritControl.DeleteSpirit -= DeleteSpirit;
                }

                foreach (SpiritControl objSpiritControl in panSprites.Controls.OfType<SpiritControl>())
                {
                    objSpiritControl.ContactDetailChanged -= MakeDirtyWithCharacterUpdate;
                    objSpiritControl.DeleteSpirit -= DeleteSpirit;
                }

                // Trash the global variables and dispose of the Form.
                if (!Program.MainForm.OpenCharacters.Any(x => x.LinkedCharacters.Contains(CharacterObject) && x != CharacterObject))
                {
                    Program.MainForm.OpenCharacters.Remove(CharacterObject);
                    CharacterObject.Dispose();
                }
                Dispose(true);
            }
        }

        private void frmCareer_Activated(object sender, EventArgs e)
        {
            // Merge the ToolStrips.
            ToolStripManager.RevertMerge("toolStrip");
            ToolStripManager.Merge(toolStrip, "toolStrip");
        }

        private void frmCareer_Shown(object sender, EventArgs e)
        {
            // Clear all of the placeholder Labels.
            foreach (Label objLabel in tabCommon.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabMartialArts.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabMagician.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabTechnomancer.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabAdvancedPrograms.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabCyberware.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabLifestyle.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabArmor.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabWeapons.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabGear.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabVehicles.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabInitiation.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabCritter.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            foreach (Label objLabel in tabImprovements.Controls.OfType<Label>())
            {
                if (objLabel.Text.StartsWith('['))
                    objLabel.Text = string.Empty;
            }

            frmCareer_Resize(sender, e);
        }

        private void frmCareer_Resize(object sender, EventArgs e)
        {
            TabPage objPage = tabCharacterTabs.SelectedTab;
            // Reseize the form elements with the form.
            // Character Info Tab.
            int intHeight = ((objPage.Height - lblDescription.Top) / 4 - 20);
            txtDescription.Height = intHeight;
            lblBackground.Top = txtDescription.Top + txtDescription.Height + 3;
            txtBackground.Top = lblBackground.Top + lblBackground.Height + 3;
            txtBackground.Height = intHeight;
            lblConcept.Top = txtBackground.Top + txtBackground.Height + 3;
            txtConcept.Top = lblConcept.Top + lblConcept.Height + 3;
            txtConcept.Height = intHeight;
            lblNotes.Top = txtConcept.Top + txtConcept.Height + 3;
            txtNotes.Top = lblNotes.Top + lblNotes.Height + 3;
            txtNotes.Height = intHeight;
        }
        #endregion

        #region Character Events
        private void objCharacter_MAGEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            lblFoci.Visible = CharacterObject.MAGEnabled;
            treFoci.Visible = CharacterObject.MAGEnabled;
            cmdCreateStackedFocus.Visible = CharacterObject.MAGEnabled;

            if (CharacterObject.MAGEnabled)
            {
                // Show the Initiation Tab.
                if (!tabCharacterTabs.TabPages.Contains(tabInitiation))
                {
                    tabCharacterTabs.TabPages.Insert(3, tabInitiation);
                    tabInitiation.Text = LanguageManager.GetString("Tab_Initiation", GlobalOptions.Language);
                    tsMetamagicAddMetamagic.Text = LanguageManager.GetString("Button_AddMetamagic", GlobalOptions.Language);
                    chkJoinGroup.Text = LanguageManager.GetString("Checkbox_JoinedGroup", GlobalOptions.Language);
                }

                if (!lstSpecialAttributes.Contains(CharacterObject.MAG))
                {
                    lstSpecialAttributes.Add(CharacterObject.MAG);
                }
                if (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept && !lstSpecialAttributes.Contains(CharacterObject.MAGAdept))
                {
                    lstSpecialAttributes.Add(CharacterObject.MAGAdept);
                }
            }
            else
            {
                ClearInitiationTab();
                tabCharacterTabs.TabPages.Remove(tabInitiation);
                if (lstSpecialAttributes.Contains(CharacterObject.MAG))
                {
                    lstSpecialAttributes.Remove(CharacterObject.MAG);
                }
                if (lstSpecialAttributes.Contains(CharacterObject.MAGAdept))
                {
                    lstSpecialAttributes.Remove(CharacterObject.MAGAdept);
                }
            }

        }

        private void objCharacter_RESEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            if (CharacterObject.RESEnabled)
            {
                // Show the Initiation Tab.
                if (!tabCharacterTabs.TabPages.Contains(tabInitiation))
                {
                    tabCharacterTabs.TabPages.Insert(3, tabInitiation);
                    tabInitiation.Text = LanguageManager.GetString("Tab_Submersion", GlobalOptions.Language);
                    tsMetamagicAddMetamagic.Text = LanguageManager.GetString("Button_AddEcho", GlobalOptions.Language);
                    chkJoinGroup.Text = LanguageManager.GetString("Checkbox_JoinedNetwork", GlobalOptions.Language);
                }
                if (!lstSpecialAttributes.Contains(CharacterObject.RES))
                {
                    lstSpecialAttributes.Add(CharacterObject.RES);
                }
            }
            else
            {
                ClearInitiationTab();
                tabCharacterTabs.TabPages.Remove(tabInitiation);
                if (lstSpecialAttributes.Contains(CharacterObject.RES))
                {
                    lstSpecialAttributes.Remove(CharacterObject.RES);
                }
            }
        }

        private void objCharacter_AmbidextrousChanged(object sender = null)
        {
            if (_blnReapplyImprovements)
                return;

            cboPrimaryArm.BeginUpdate();

            List<ListItem> lstPrimaryArm = null;
            if (CharacterObject.Ambidextrous)
            {
                lstPrimaryArm = new List<ListItem>
                {
                    new ListItem("Ambidextrous", LanguageManager.GetString("String_Ambidextrous", GlobalOptions.Language))
                };
                cboPrimaryArm.Enabled = false;
            }
            else
            {
                //Create the dropdown for the character's primary arm.
                lstPrimaryArm = new List<ListItem>
                {
                    new ListItem("Left", LanguageManager.GetString("String_Improvement_SideLeft", GlobalOptions.Language)),
                    new ListItem("Right", LanguageManager.GetString("String_Improvement_SideRight", GlobalOptions.Language))
                };
                lstPrimaryArm.Sort(CompareListItems.CompareNames);
                cboPrimaryArm.Enabled = true;
            }

            string strPrimaryArm = CharacterObject.PrimaryArm;

            cboPrimaryArm.ValueMember = "Value";
            cboPrimaryArm.DisplayMember = "Name";
            cboPrimaryArm.DataSource = lstPrimaryArm;
            cboPrimaryArm.SelectedValue = strPrimaryArm;
            if (cboPrimaryArm.SelectedIndex == -1)
                cboPrimaryArm.SelectedIndex = 0;

            cboPrimaryArm.EndUpdate();
        }

        private void objCharacter_DEPEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;
        }

        private void objCharacter_AdeptTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Adept being enabled.
            if (CharacterObject.AdeptEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabAdept))
                    tabCharacterTabs.TabPages.Insert(3, tabAdept);
                if (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept && !lstSpecialAttributes.Contains(CharacterObject.MAGAdept))
                {
                    lstSpecialAttributes.Add(CharacterObject.MAGAdept);
                }
            }
            else
            {
                CharacterObject.Powers.Clear();
                tabCharacterTabs.TabPages.Remove(tabAdept);
                if (lstSpecialAttributes.Contains(CharacterObject.MAGAdept))
                {
                    lstSpecialAttributes.Remove(CharacterObject.MAGAdept);
                }
            }

            // Show the Mystic Adept control if the character is a Mystic Adept, otherwise hide them.
            if (CharacterObject.IsMysticAdept && !CharacterObjectOptions.MysAdeptSecondMAGAttribute)
            {
                lblMysticAdeptAssignment.Visible = true;
                lblMysticAdeptMAGAdept.Visible = true;
                cmdIncreasePowerPoints.Visible = CharacterObjectOptions.MysaddPPCareer;
            }
            else
            {
                lblMysticAdeptAssignment.Visible = false;
                lblMysticAdeptMAGAdept.Visible = false;
                cmdIncreasePowerPoints.Visible = false;
            }
        }

        private void objCharacter_MagicianTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Magician being enabled.
            if (CharacterObject.MagicianEnabled || CharacterObject.AdeptEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabMagician))
                    tabCharacterTabs.TabPages.Insert(3, tabMagician);
                if (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept && !lstSpecialAttributes.Contains(CharacterObject.MAGAdept))
                {
                    lstSpecialAttributes.Add(CharacterObject.MAGAdept);
                }
            }
            else
            {
                ClearSpellTab();
                tabCharacterTabs.TabPages.Remove(tabMagician);
                if (lstSpecialAttributes.Contains(CharacterObject.MAGAdept))
                {
                    lstSpecialAttributes.Remove(CharacterObject.MAGAdept);
                }
            }

            // Show the Mystic Adept control if the character is a Mystic Adept, otherwise hide them.
            if (CharacterObject.IsMysticAdept && !CharacterObjectOptions.MysAdeptSecondMAGAttribute)
            {
                lblMysticAdeptAssignment.Visible = true;
                lblMysticAdeptMAGAdept.Visible = true;
                cmdIncreasePowerPoints.Visible = CharacterObjectOptions.MysaddPPCareer;
            }
            else
            {
                lblMysticAdeptAssignment.Visible = false;
                lblMysticAdeptMAGAdept.Visible = false;
                cmdIncreasePowerPoints.Visible = false;
            }
        }

        private void objCharacter_TechnomancerTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Technomancer being enabled.
            if (CharacterObject.TechnomancerEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabTechnomancer))
                    tabCharacterTabs.TabPages.Insert(3, tabTechnomancer);
            }
            else
            {
                ClearTechnomancerTab();
                tabCharacterTabs.TabPages.Remove(tabTechnomancer);
            }
        }

        private void objCharacter_AdvancedProgramsTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Technomancer being enabled.
            if (CharacterObject.AdvancedProgramsEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabAdvancedPrograms))
                    tabCharacterTabs.TabPages.Insert(3, tabAdvancedPrograms);
            }
            else
            {
                ClearAdvancedProgramsTab();
                tabCharacterTabs.TabPages.Remove(tabAdvancedPrograms);
            }
        }

        private void objCharacter_CyberwareTabDisabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change to the status of Advanced Programs being enabled.
            if (CharacterObject.CyberwareDisabled)
            {
                ClearCyberwareTab();
                tabCharacterTabs.TabPages.Remove(tabCyberware);
            }
            else
            {
                if (!tabCharacterTabs.TabPages.Contains(tabCyberware))
                    tabCharacterTabs.TabPages.Insert(6, tabCyberware);
            }
        }

        private void objCharacter_CritterTabEnabledChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            // Change the status of Critter being enabled.
            if (CharacterObject.CritterEnabled)
            {
                if (!tabCharacterTabs.TabPages.Contains(tabCritter))
                    tabCharacterTabs.TabPages.Insert(3, tabCritter);
            }
            else
            {
                // Remove all Critter Powers.
                ClearCritterTab();
                tabCharacterTabs.TabPages.Remove(tabCritter);
            }
        }

        private void objCharacter_ExConChanged(object sender)
        {
            if (_blnReapplyImprovements)
                return;

            if (CharacterObject.ExCon)
            {
                bool blnDoRefresh = false;
                string strSelectedCyberware = treCyberware.SelectedNode?.Tag.ToString();
                bool funcExConIneligibleWare(Cyberware x)
                {
                    if (x.Grade.Name == "None")
                        return false;
                    Cyberware objParent = x;
                    bool blnNoParentIsModular = string.IsNullOrEmpty(objParent.PlugsIntoModularMount);
                    while (objParent.Parent != null && blnNoParentIsModular)
                    {
                        objParent = objParent.Parent;
                        blnNoParentIsModular = string.IsNullOrEmpty(objParent.PlugsIntoModularMount);
                    }

                    return blnNoParentIsModular;
                }
                string strExConString = CharacterObject.Qualities.FirstOrDefault(x => x.Name == "Ex-Con")?.DisplayNameShort(GlobalOptions.Language);
                if (string.IsNullOrEmpty(strExConString))
                {
                    XmlNode xmlErasedQuality = XmlManager.Load("qualities.xml").SelectSingleNode("chummer/qualities/quality[name = \"Ex-Con\"]");
                    if (xmlErasedQuality != null)
                    {
                        strExConString = xmlErasedQuality["translate"]?.InnerText ?? xmlErasedQuality["name"]?.InnerText ?? string.Empty;
                    }
                }
                if (!string.IsNullOrEmpty(strExConString))
                    strExConString = " (" + strExConString + ")";
                foreach (Cyberware objCyberware in CharacterObject.Cyberware.DeepWhere(x => x.Children, funcExConIneligibleWare))
                {
                    string strAvail = objCyberware.Avail;
                    if (strAvail.StartsWith("FixedValues("))
                    {
                        string[] strValues = strAvail.TrimStart("FixedValues(", true).TrimEnd(')').Split(',');
                        strAvail = strValues[Math.Min(objCyberware.Rating, strValues.Length) - 1];
                    }
                    if (strAvail.EndsWith('R', 'F'))
                    {
                        objCyberware.DeleteCyberware(treWeapons, treVehicles);

                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        string strEntry = LanguageManager.GetString(objCyberware.SourceType == Improvement.ImprovementSource.Cyberware ? "String_ExpenseSoldCyberware" : "String_ExpenseSoldBioware", GlobalOptions.Language);
                        objExpense.Create(0, strEntry + strExConString + " " + objCyberware.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);

                        if (objCyberware.Parent != null)
                            objCyberware.Parent.Children.Remove(objCyberware);
                        else
                            CharacterObject.Cyberware.Remove(objCyberware);

                        IncreaseEssenceHole((int)(objCyberware.CalculatedESS() * 100));

                        treCyberware.FindNode(objCyberware.InternalId)?.Remove();
                        blnDoRefresh = true;
                        if (objCyberware.InternalId == strSelectedCyberware)
                            RefreshSelectedCyberware();
                    }
                }

                if (blnDoRefresh)
                {
                    IsCharacterUpdateRequested = true;
                    IsDirty = true;
                }
            }
        }

        //TODO: UpdatePowerRelatedInfo method? Powers hook into so much stuff that it may need to wait for outbound improvement events?
        private readonly Stopwatch PowerPropertyChanged_StopWatch = Stopwatch.StartNew();
        private void PowerPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            IsDirty = true;

            if (PowerPropertyChanged_StopWatch.ElapsedMilliseconds < 4) return;
            PowerPropertyChanged_StopWatch.Restart();
            tabPowerUc.CalculatePowerPoints();
            IsCharacterUpdateRequested = true;
        }

        private readonly Stopwatch SkillPropertyChanged_StopWatch = Stopwatch.StartNew();
        private void SkillPropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            //HACK PERFORMANCE
            //So, skills tell if anything maybe intresting have happened, but this don't have any way to see if it is relevant. Instead of redrawing EVYER FYCKING THING we do it only every 5 ms
            if (SkillPropertyChanged_StopWatch.ElapsedMilliseconds < 4) return;
            SkillPropertyChanged_StopWatch.Restart();

            lblCareerKarma.Text = CharacterObject.CareerKarma.ToString();
            //UpdateSkillInfo();
            PopulateCalendar();
            IsCharacterUpdateRequested = true;
            
            IsDirty = true;
        }
        #endregion

        #region Menu Events
        private void mnuFileSave_Click(object sender, EventArgs e)
        {
            SaveCharacter();
        }

        private void mnuFileSaveAs_Click(object sender, EventArgs e)
        {
            SaveCharacterAs();
        }

        private void tsbSave_Click(object sender, EventArgs e)
        {
            mnuFileSave_Click(sender, e);
        }

        private void tsbPrint_Click(object sender, EventArgs e)
        {
            CharacterObject.Print(false);
        }

        private void mnuFileClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void mnuFilePrint_Click(object sender, EventArgs e)
        {
            CharacterObject.Print(false);
        }

        private void mnuFileExport_Click(object sender, EventArgs e)
        {
            // Write the Character information to a MemoryStream so we don't need to create any files.
            MemoryStream objStream = new MemoryStream();
            XmlTextWriter objWriter = new XmlTextWriter(objStream, Encoding.UTF8);

            // Being the document.
            objWriter.WriteStartDocument();

            // </characters>
            objWriter.WriteStartElement("characters");

#if DEBUG
            CharacterObject.PrintToStream(objStream, objWriter, GlobalOptions.CultureInfo, GlobalOptions.Language);
#else
            CharacterObject.PrintToStream(objWriter, GlobalOptions.CultureInfo, GlobalOptions.Language);
#endif

            // </characters>
            objWriter.WriteEndElement();

            // Finish the document and flush the Writer and Stream.
            objWriter.WriteEndDocument();
            objWriter.Flush();

            // Read the stream.
            StreamReader objReader = new StreamReader(objStream);
            objStream.Position = 0;
            XmlDocument objCharacterXML = new XmlDocument();

            // Put the stream into an XmlDocument and send it off to the Viewer.
            string strXML = objReader.ReadToEnd();
            objCharacterXML.LoadXml(strXML);

            objWriter.Close();

            frmExport frmExportCharacter = new frmExport(objCharacterXML);
            frmExportCharacter.ShowDialog(this);
        }

        private void mnuSpecialCyberzombie_Click(object sender, EventArgs e)
        {
            bool blnEssence = true;
            bool blnCyberware = false;
            string strMessage = LanguageManager.GetString("Message_CyberzombieRequirements", GlobalOptions.Language);

            // Make sure the character has an Essence lower than 0.
            if (CharacterObject.Essence >= 0)
            {
                strMessage += "\n\t" + LanguageManager.GetString("Message_CyberzombieRequirementsEssence", GlobalOptions.Language);
                blnEssence = false;
            }

            // Make sure the character has an Invoked Memory Stimulator.
            foreach (Cyberware objCyberware in CharacterObject.Cyberware)
            {
                if (objCyberware.Name == "Invoked Memory Stimulator")
                    blnCyberware = true;
            }

            if (!blnCyberware)
                strMessage += "\n\t" + LanguageManager.GetString("Message_CyberzombieRequirementsStimulator", GlobalOptions.Language);

            if (!blnEssence || !blnCyberware)
            {
                MessageBox.Show(strMessage, LanguageManager.GetString("MessageTitle_CyberzombieRequirements", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (MessageBox.Show(LanguageManager.GetString("Message_CyberzombieConfirm", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CyberzombieConfirm", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            // Convert the character.
            // Characters lose access to Resonance.
            CharacterObject.RESEnabled = false;

            // Gain MAG that is permanently set to 1.
            CharacterObject.MAGEnabled = true;
            CharacterObject.MAG.MetatypeMinimum = 1;
            CharacterObject.MAG.MetatypeMaximum = 1;

            // Add the Cyberzombie Lifestyle if it is not already taken.
            bool blnHasLifestyle = false;
            foreach (Lifestyle objLifestyle in CharacterObject.Lifestyles)
            {
                if (objLifestyle.Name == "Cyberzombie Lifestyle Addition")
                    blnHasLifestyle = true;
            }
            if (!blnHasLifestyle)
            {
                XmlDocument objXmlLifestyleDocument = XmlManager.Load("lifestyles.xml");
                XmlNode objXmlLifestyle = objXmlLifestyleDocument.SelectSingleNode("/chummer/lifestyles/lifestyle[name = \"Cyberzombie Lifestyle Addition\"]");

                TreeNode objLifestyleNode = new TreeNode();
                Lifestyle objLifestyle = new Lifestyle(CharacterObject);
                objLifestyle.Create(objXmlLifestyle, objLifestyleNode);
                CharacterObject.Lifestyles.Add(objLifestyle);

                treLifestyles.Nodes[0].Nodes.Add(objLifestyleNode);
                treLifestyles.Nodes[0].Expand();
            }

            // Change the MetatypeCategory to Cyberzombie.
            CharacterObject.MetatypeCategory = "Cyberzombie";

            // Gain access to Critter Powers.
            CharacterObject.CritterEnabled = true;

            // Gain the Dual Natured Critter Power if it does not yet exist.
            bool blnHasPower = false;
            foreach (CritterPower objPower in CharacterObject.CritterPowers)
            {
                if (objPower.Name == "Dual Natured")
                    blnHasPower = true;
            }
            if (!blnHasPower)
            {
                XmlDocument objXmlPowerDocument = XmlManager.Load("critterpowers.xml");
                XmlNode objXmlPowerNode = objXmlPowerDocument.SelectSingleNode("/chummer/powers/power[name = \"Dual Natured\"]");

                TreeNode objNode = new TreeNode();
                CritterPower objCritterPower = new CritterPower(CharacterObject);
                objCritterPower.Create(objXmlPowerNode, objNode);
                CharacterObject.CritterPowers.Add(objCritterPower);

                treCritterPowers.Nodes[0].Nodes.Add(objNode);
                treCritterPowers.Nodes[0].Expand();
            }

            // Gain the Immunity (Normal Weapons) Critter Power if it does not yet exist.
            blnHasPower = false;
            foreach (CritterPower objPower in CharacterObject.CritterPowers)
            {
                if (objPower.Name == "Immunity" && objPower.Extra == "Normal Weapons")
                    blnHasPower = true;
            }
            if (!blnHasPower)
            {
                XmlDocument objXmlPowerDocument = XmlManager.Load("critterpowers.xml");
                XmlNode objXmlPowerNode = objXmlPowerDocument.SelectSingleNode("/chummer/powers/power[name = \"Immunity\"]");

                TreeNode objNode = new TreeNode();
                CritterPower objCritterPower = new CritterPower(CharacterObject);
                objCritterPower.Create(objXmlPowerNode, objNode, 0, "Normal Weapons");
                CharacterObject.CritterPowers.Add(objCritterPower);

                treCritterPowers.Nodes[0].Nodes.Add(objNode);
                treCritterPowers.Nodes[0].Expand();
            }

            mnuSpecialCyberzombie.Visible = false;

            IsDirty = true;

            IsCharacterUpdateRequested = true;
        }

        private void mnuSpecialReduceAttribute_Click(object sender, EventArgs e)
        {
            // Display the Select CharacterAttribute window and record which Skill was selected.
            frmSelectAttribute frmPickAttribute = new frmSelectAttribute
            {
                Description = LanguageManager.GetString("String_CyberzombieReduceAttribute", GlobalOptions.Language),
                ShowMetatypeMaximum = true
            };
            if (CharacterObject.MAGEnabled)
                frmPickAttribute.AddMAG();
            if (CharacterObject.RESEnabled)
                frmPickAttribute.AddRES();
            if (CharacterObject.DEPEnabled)
                frmPickAttribute.AddDEP();
            frmPickAttribute.ShowDialog(this);

            if (frmPickAttribute.DialogResult == DialogResult.Cancel)
                return;

            // Create an Improvement to reduce the CharacterAttribute's Metatype Maximum.
            if (!frmPickAttribute.DoNotAffectMetatypeMaximum)
                ImprovementManager.CreateImprovement(CharacterObject, frmPickAttribute.SelectedAttribute, Improvement.ImprovementSource.AttributeLoss, "CharacterAttribute Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, -1);
            // Permanently reduce the CharacterAttribute's value.
            CharacterObject.GetAttribute(frmPickAttribute.SelectedAttribute).Degrade(1);

            IsDirty = true;

            IsCharacterUpdateRequested = true;
        }

        private void mnuSpecialCloningMachine_Click(object sender, EventArgs e)
        {
            frmSelectNumber frmPickNumber = new frmSelectNumber(0)
            {
                Description = LanguageManager.GetString("String_CloningMachineNumber", GlobalOptions.Language),
                Minimum = 1
            };
            frmPickNumber.ShowDialog(this);

            if (frmPickNumber.DialogResult == DialogResult.Cancel)
                return;

            int intClones = decimal.ToInt32(frmPickNumber.SelectedValue);
            if (intClones <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CloningMachineNumberRequired", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CloningMachineNumberRequired", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            Cursor = Cursors.WaitCursor;
            Character[] lstClones = new Character[intClones];
            object lstClonesLock = new object();
            Parallel.For(0, intClones, (Action<int>)(i =>
            {
                Character objLoopCharacter = Program.MainForm.LoadCharacter((string)base.CharacterObject.FileName, (string)(base.CharacterObject.Alias + " " + i.ToString()), true);
                lock (lstClonesLock)
                {
                    lstClones[i] = objLoopCharacter;
                }
            }));
            Cursor = Cursors.Default;
            Program.MainForm.OpenCharacterList(lstClones, false);
        }

        private void mnuSpecialReapplyImprovements_Click(object sender, EventArgs e)
        {
            // This only re-applies the Improvements for everything the character has. If a match is not found in the data files, the current Improvement information is left as-is.
            // Verify that the user wants to go through with it.
            if (MessageBox.Show(LanguageManager.GetString("Message_ConfirmReapplyImprovements", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_ConfirmReapplyImprovements", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            DoReapplyImprovements();
        }

        private void DoReapplyImprovements(ICollection<string> lstInternalIdFilter = null)
        {
            Cursor = Cursors.WaitCursor;

            string strOutdatedItems = string.Empty;

            // Record the status of any flags that normally trigger character events.
            bool blnMAGEnabled = CharacterObject.MAGEnabled;
            bool blnRESEnabled = CharacterObject.RESEnabled;
            bool blnDEPEnabled = CharacterObject.DEPEnabled;

            _blnReapplyImprovements = true;

            // Wipe all improvements that we will reapply, this is mainly to eliminate orphaned improvements caused by certain bugs and also for a performance increase
            if (lstInternalIdFilter == null)
                ImprovementManager.RemoveImprovements(CharacterObject, CharacterObject.Improvements.Where(x =>
                                                                        x.ImproveSource == Improvement.ImprovementSource.AIProgram ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Armor ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ArmorMod ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Bioware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ComplexForm ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.CritterPower ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Cyberware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Echo ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Gear ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArt ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArtAdvantage ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Metamagic ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Power ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Quality ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Spell ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.StackedFocus).ToList(), _blnReapplyImprovements);
            else
                ImprovementManager.RemoveImprovements(CharacterObject, CharacterObject.Improvements.Where(x => lstInternalIdFilter.Contains(x.SourceName) &&
                                                                        (x.ImproveSource == Improvement.ImprovementSource.AIProgram ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Armor ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ArmorMod ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Bioware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.ComplexForm ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.CritterPower ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Cyberware ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Echo ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Gear ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArt ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.MartialArtAdvantage ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Metamagic ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Power ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Quality ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.Spell ||
                                                                        x.ImproveSource == Improvement.ImprovementSource.StackedFocus)).ToList(), _blnReapplyImprovements);

            // Refresh Qualities.
            // We cannot use foreach because qualities can add more qualities
            for (int j = 0; j < CharacterObject.Qualities.Count; j++)
            {
                Quality objQuality = CharacterObject.Qualities[j];
                if (objQuality.OriginSource == QualitySource.Improvement)
                    continue;
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objQuality.InternalId))
                    continue;
                string strSelected = objQuality.Extra;

                XmlNode objNode = objQuality.GetNode();
                if (objNode != null)
                {
                    objQuality.Bonus = objNode["bonus"];
                    if (objQuality.Bonus?.HasChildNodes == true)
                    {
                        ImprovementManager.ForcedValue = strSelected;
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId, objQuality.Bonus, false, 1, objQuality.DisplayNameShort(GlobalOptions.Language));
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                        {
                            objQuality.Extra = ImprovementManager.SelectedValue;
                            TreeNode objTreeNode = treQualities.FindNode(objQuality.InternalId);
                            if (objTreeNode != null)
                                objTreeNode.Text = objQuality.DisplayName(GlobalOptions.Language);
                        }
                    }
                    objQuality.FirstLevelBonus = objNode["firstlevelbonus"];
                    if (objQuality.FirstLevelBonus?.HasChildNodes == true)
                    {
                        bool blnDoFirstLevel = true;
                        for (int k = 0; k < CharacterObject.Qualities.Count; ++k)
                        {
                            Quality objCheckQuality = CharacterObject.Qualities[k];
                            if (j != k && objCheckQuality.QualityId == objQuality.QualityId && objCheckQuality.Extra == objQuality.Extra && objCheckQuality.SourceName == objQuality.SourceName)
                            {
                                if (k < j || objCheckQuality.OriginSource == QualitySource.Improvement || (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objCheckQuality.InternalId)))
                                {
                                    blnDoFirstLevel = false;
                                    break;
                                }
                            }
                        }
                        if (blnDoFirstLevel)
                        {
                            ImprovementManager.ForcedValue = strSelected;
                            ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId, objQuality.FirstLevelBonus, false, 1, objQuality.DisplayNameShort(GlobalOptions.Language));
                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            {
                                objQuality.Extra = ImprovementManager.SelectedValue;
                                TreeNode objTreeNode = treQualities.FindNode(objQuality.InternalId);
                                if (objTreeNode != null)
                                    objTreeNode.Text = objQuality.DisplayName(GlobalOptions.Language);
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objQuality.DisplayName(GlobalOptions.Language) + "\n";
                }
            }

            // Refresh Martial Art Advantages.
            foreach (MartialArt objMartialArt in CharacterObject.MartialArts)
            {
                XmlNode objMartialArtNode = objMartialArt.GetNode();
                if (objMartialArtNode != null)
                {
                    // We're only re-apply improvements a list of items, not all of them
                    if (lstInternalIdFilter == null || lstInternalIdFilter.Contains(objMartialArt.InternalId))
                    {
                        if (objMartialArtNode["bonus"] != null)
                        {
                            ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.MartialArt, objMartialArt.InternalId, objMartialArtNode["bonus"], false, 1, objMartialArt.DisplayNameShort(GlobalOptions.Language));
                        }
                    }
                    foreach (MartialArtAdvantage objAdvantage in objMartialArt.Advantages.Where(x => lstInternalIdFilter == null || !lstInternalIdFilter.Contains(x.InternalId)))
                    {
                        XmlNode objNode = objMartialArtNode.SelectSingleNode("techniques/technique[name = \"" + objAdvantage.Name + "\"]");
                        if (objNode != null)
                        {
                            if (objNode["bonus"] != null)
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.MartialArtAdvantage, objAdvantage.InternalId, objNode["bonus"], false, 1, objAdvantage.DisplayName(GlobalOptions.Language));
                        }
                        else
                        {
                            strOutdatedItems += objMartialArt.DisplayName(GlobalOptions.Language) + "\n";
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objMartialArt.DisplayName(GlobalOptions.Language) + "\n";
                }
            }

            // Refresh Spells.
            foreach (Spell objSpell in CharacterObject.Spells.Where(x => lstInternalIdFilter == null || !lstInternalIdFilter.Contains(x.InternalId)))
            {
                XmlNode objNode = objSpell.GetNode();
                if (objNode != null)
                {
                    if (objNode["bonus"] != null)
                    {
                        ImprovementManager.ForcedValue = objSpell.Extra;
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Spell, objSpell.InternalId, objNode["bonus"], false, 1, objSpell.DisplayNameShort(GlobalOptions.Language));
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objSpell.Extra = ImprovementManager.SelectedValue;

                        foreach (TreeNode objParentNode in treSpells.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objSpell.InternalId)
                                {
                                    objChildNode.Text = objSpell.DisplayName(GlobalOptions.Language);
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objSpell.DisplayName(GlobalOptions.Language) + "\n";
                }
            }

            // Refresh Adept Powers.
            foreach (Power objPower in CharacterObject.Powers.Where(x => lstInternalIdFilter == null || !lstInternalIdFilter.Contains(x.InternalId)))
            {
                XmlNode objNode = objPower.GetNode();
                if (objNode != null)
                {
                    objPower.Bonus = objNode["bonus"];
                    if (objPower.Bonus != null)
                    {
                        ImprovementManager.ForcedValue = objPower.Extra;
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Power, objPower.InternalId, objPower.Bonus, false, Convert.ToInt32(objPower.TotalRating), objPower.DisplayNameShort(GlobalOptions.Language));
                    }
                }
                else
                {
                    strOutdatedItems += objPower.DisplayName + "\n";
                }
            }

            // Refresh Complex Forms.
            foreach (ComplexForm objComplexForm in CharacterObject.ComplexForms.Where(x => lstInternalIdFilter == null || !lstInternalIdFilter.Contains(x.InternalId)))
            {
                XmlNode objNode = objComplexForm.GetNode();
                if (objNode != null)
                {
                    if (objNode["bonus"] != null)
                    {
                        ImprovementManager.ForcedValue = objComplexForm.Extra;
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ComplexForm, objComplexForm.InternalId, objNode["bonus"], false, 1, objComplexForm.DisplayNameShort(GlobalOptions.Language));
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objComplexForm.Extra = ImprovementManager.SelectedValue;
                        foreach (TreeNode objParentNode in treComplexForms.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objComplexForm.InternalId)
                                {
                                    objChildNode.Text = objComplexForm.DisplayName;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objComplexForm.DisplayName + "\n";
                }
            }

            // Refresh AI Programs and Advanced Programs
            foreach (AIProgram objProgram in CharacterObject.AIPrograms.Where(x => lstInternalIdFilter == null || !lstInternalIdFilter.Contains(x.InternalId)))
            {
                XmlNode objNode = objProgram.GetNode();
                if (objNode != null)
                {
                    if (objNode["bonus"] != null)
                    {
                        ImprovementManager.ForcedValue = objProgram.Extra;
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.AIProgram, objProgram.InternalId, objNode["bonus"], false, 1, objProgram.DisplayNameShort(GlobalOptions.Language));
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objProgram.Extra = ImprovementManager.SelectedValue;
                        foreach (TreeNode objParentNode in treAIPrograms.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objProgram.InternalId)
                                {
                                    objChildNode.Text = objProgram.DisplayName;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objProgram.DisplayName + "\n";
                }
            }

            // Refresh Critter Powers.
            foreach (CritterPower objPower in CharacterObject.CritterPowers.Where(x => lstInternalIdFilter == null || !lstInternalIdFilter.Contains(x.InternalId)))
            {
                XmlNode objNode = objPower.GetNode();
                if (objNode != null)
                {
                    objPower.Bonus = objNode["bonus"];
                    if (objPower.Bonus != null)
                    {
                        string strSelected = objPower.Extra;
                        if (!int.TryParse(strSelected, out int intRating))
                        {
                            intRating = 1;
                            ImprovementManager.ForcedValue = strSelected;
                        }
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.CritterPower, objPower.InternalId, objPower.Bonus, false, intRating, objPower.DisplayNameShort(GlobalOptions.Language));
                        if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                            objPower.Extra = ImprovementManager.SelectedValue;

                        foreach (TreeNode objParentNode in treCritterPowers.Nodes)
                        {
                            foreach (TreeNode objChildNode in objParentNode.Nodes)
                            {
                                if (objChildNode.Tag.ToString() == objPower.InternalId)
                                {
                                    objChildNode.Text = objPower.DisplayName(GlobalOptions.Language);
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    strOutdatedItems += objPower.DisplayName(GlobalOptions.Language) + "\n";
                }
            }

            // Refresh Metamagics and Echoes.
            // We cannot use foreach because metamagics/echoes can add more metamagics/echoes
            for (int j = 0; j < CharacterObject.Metamagics.Count; j++)
            {
                Metamagic objMetamagic = CharacterObject.Metamagics[j];
                if (objMetamagic.Grade < 0)
                    continue;
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter != null && !lstInternalIdFilter.Contains(objMetamagic.InternalId))
                    continue;
                XmlNode objNode = objMetamagic.GetNode();
                if (objNode != null)
                {
                    objMetamagic.Bonus = objNode["bonus"];
                    if (objMetamagic.Bonus != null)
                    {
                        ImprovementManager.CreateImprovements(CharacterObject, objMetamagic.SourceType, objMetamagic.InternalId, objMetamagic.Bonus, false, 1, objMetamagic.DisplayNameShort(GlobalOptions.Language));
                    }
                }
                else
                {
                    strOutdatedItems += objMetamagic.DisplayName(GlobalOptions.Language) + "\n";
                }
            }

            // Refresh Cyberware and Bioware.
            Dictionary<Cyberware, int> dicPairableCyberwares = new Dictionary<Cyberware, int>();
            foreach (Cyberware objCyberware in CharacterObject.Cyberware.GetAllDescendants(x => x.Children))
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter == null || lstInternalIdFilter.Contains(objCyberware.InternalId))
                {
                    XmlNode objNode = objCyberware.GetNode();
                    if (objNode != null)
                    {
                        objCyberware.Bonus = objNode["bonus"];
                        objCyberware.WirelessBonus = objNode["wirelessbonus"];
                        objCyberware.PairBonus = objNode["pairbonus"];
                        if (objCyberware.IsModularCurrentlyEquipped)
                        {
                            if (!string.IsNullOrEmpty(objCyberware.Forced) && objCyberware.Forced != "Right" && objCyberware.Forced != "Left")
                                ImprovementManager.ForcedValue = objCyberware.Forced;
                            if (objCyberware.Bonus != null)
                            {
                                ImprovementManager.CreateImprovements(CharacterObject, objCyberware.SourceType, objCyberware.InternalId, objCyberware.Bonus, false, objCyberware.Rating, objCyberware.DisplayNameShort(GlobalOptions.Language));
                                if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                    objCyberware.Extra = ImprovementManager.SelectedValue;
                            }
                            if (objCyberware.WirelessOn && objCyberware.WirelessBonus != null)
                            {
                                ImprovementManager.CreateImprovements(CharacterObject, objCyberware.SourceType, objCyberware.InternalId, objCyberware.WirelessBonus, false, objCyberware.Rating, objCyberware.DisplayNameShort(GlobalOptions.Language));
                                if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue) && string.IsNullOrEmpty(objCyberware.Extra))
                                    objCyberware.Extra = ImprovementManager.SelectedValue;
                            }
                            if (objCyberware.PairBonus != null)
                            {
                                Cyberware objMatchingCyberware = dicPairableCyberwares.Keys.FirstOrDefault(x => x.Name == objCyberware.Name && x.Extra == objCyberware.Extra);
                                if (objMatchingCyberware != null)
                                    dicPairableCyberwares[objMatchingCyberware] = dicPairableCyberwares[objMatchingCyberware] + 1;
                                else
                                    dicPairableCyberwares.Add(objCyberware, 1);
                            }
                        }
                    }
                    else
                    {
                        strOutdatedItems += objCyberware.DisplayName(GlobalOptions.Language) + "\n";
                    }
                    TreeNode objWareNode = treCyberware.FindNode(objCyberware.InternalId);
                    if (objWareNode != null)
                        objWareNode.Text = objCyberware.DisplayName(GlobalOptions.Language);
                }
                foreach (Gear objGear in objCyberware.Gear)
                {
                    CommonFunctions.ReaddGearImprovements(CharacterObject, objGear, treCyberware, ref strOutdatedItems, lstInternalIdFilter);
                }
            }
            // Separate Pass for PairBonuses
            foreach (KeyValuePair<Cyberware, int> objItem in dicPairableCyberwares)
            {
                Cyberware objCyberware = objItem.Key;
                int intCyberwaresCount = objItem.Value;
                if (!string.IsNullOrEmpty(objCyberware.Location))
                {
                    intCyberwaresCount = Math.Min(intCyberwaresCount, CharacterObject.Cyberware.DeepCount(x => x.Children, x => objCyberware.IncludePair.Contains(x.Name) && x.Extra == objCyberware.Extra && x.Location != objCyberware.Location && x.IsModularCurrentlyEquipped));
                }
                if (intCyberwaresCount > 0)
                {
                    foreach (Cyberware objLoopCyberware in CharacterObject.Cyberware.DeepWhere(x => x.Children, x => objCyberware.IncludePair.Contains(x.Name) && x.Extra == objCyberware.Extra && x.IsModularCurrentlyEquipped))
                    {
                        if (intCyberwaresCount % 2 == 0)
                        {
                            if (!string.IsNullOrEmpty(objCyberware.Forced) && objCyberware.Forced != "Right" && objCyberware.Forced != "Left")
                                ImprovementManager.ForcedValue = objCyberware.Forced;
                            ImprovementManager.CreateImprovements(CharacterObject, objLoopCyberware.SourceType, objLoopCyberware.InternalId, objLoopCyberware.PairBonus, false, objLoopCyberware.Rating, objLoopCyberware.DisplayNameShort(GlobalOptions.Language));
                            if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue) && string.IsNullOrEmpty(objCyberware.Extra))
                                objCyberware.Extra = ImprovementManager.SelectedValue;
                            TreeNode objNode = treCyberware.FindNode(objLoopCyberware.InternalId);
                            if (objNode != null)
                                objNode.Text = objCyberware.DisplayName(GlobalOptions.Language);
                        }
                        intCyberwaresCount -= 1;
                        if (intCyberwaresCount <= 0)
                            break;
                    }
                }
            }

            // Refresh Armors.
            foreach (Armor objArmor in CharacterObject.Armor)
            {
                // We're only re-apply improvements a list of items, not all of them
                if (lstInternalIdFilter == null || lstInternalIdFilter.Contains(objArmor.InternalId))
                {
                    XmlNode objNode = objArmor.GetNode();
                    if (objNode != null)
                    {
                        objArmor.Bonus = objNode["bonus"];
                        if (objArmor.Bonus != null)
                        {
                            if (objArmor.Equipped)
                            {
                                ImprovementManager.ForcedValue = objArmor.Extra;
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.Bonus, false, objArmor.Rating, objArmor.DisplayNameShort(GlobalOptions.Language));
                                if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                {
                                    objArmor.Extra = ImprovementManager.SelectedValue;

                                    TreeNode objArmorNode = treArmor.FindNode(objArmor.InternalId);
                                    if (objArmorNode != null)
                                        objArmorNode.Text = objArmor.DisplayName(GlobalOptions.Language);
                                }
                            }
                        }
                    }
                    else
                    {
                        strOutdatedItems += objArmor.DisplayName(GlobalOptions.Language) + "\n";
                    }
                }

                foreach (ArmorMod objMod in objArmor.ArmorMods)
                {
                    // We're only re-apply improvements a list of items, not all of them
                    if (lstInternalIdFilter == null || lstInternalIdFilter.Contains(objMod.InternalId))
                    {
                        XmlNode objChild = objMod.GetNode();

                        if (objChild != null)
                        {
                            objMod.Bonus = objChild["bonus"];
                            if (objMod.Bonus != null)
                            {
                                if (objMod.Equipped)
                                {
                                    ImprovementManager.ForcedValue = objMod.Extra;
                                    ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort(GlobalOptions.Language));
                                    if (!string.IsNullOrEmpty(ImprovementManager.SelectedValue))
                                    {
                                        objMod.Extra = ImprovementManager.SelectedValue;

                                        TreeNode objPluginNode = treArmor.FindNode(objMod.InternalId);
                                        if (objPluginNode != null)
                                            objPluginNode.Text = objMod.DisplayName(GlobalOptions.Language);
                                    }
                                }
                            }
                        }
                        else
                        {
                            strOutdatedItems += objMod.DisplayName(GlobalOptions.Language) + "\n";
                        }
                    }
                    foreach (Gear objGear in objMod.Gear)
                    {
                        CommonFunctions.ReaddGearImprovements(CharacterObject, objGear, treArmor, ref strOutdatedItems, lstInternalIdFilter);
                    }
                }

                foreach (Gear objGear in objArmor.Gear)
                {
                    CommonFunctions.ReaddGearImprovements(CharacterObject, objGear, treArmor, ref strOutdatedItems, lstInternalIdFilter);
                }
            }

            // Refresh Gear.
            foreach (Gear objGear in CharacterObject.Gear)
            {
                CommonFunctions.ReaddGearImprovements(CharacterObject, objGear, treGear, ref strOutdatedItems, lstInternalIdFilter);
            }

            // Refresh Weapons Gear
            for (int i = 0; i < CharacterObject.Weapons.Count; i++)
            {
                Weapon objWeapon = CharacterObject.Weapons[i];
                foreach (WeaponAccessory objAccessory in objWeapon.WeaponAccessories)
                {
                    foreach (Gear objGear in objAccessory.Gear)
                    {
                        CommonFunctions.ReaddGearImprovements(CharacterObject, objGear, treWeapons, ref strOutdatedItems, lstInternalIdFilter);
                    }
                }
            }

            _blnReapplyImprovements = false;

            // If the status of any Character Event flags has changed, manually trigger those events.
            if (blnMAGEnabled != CharacterObject.MAGEnabled)
                objCharacter_MAGEnabledChanged(this);
            if (blnRESEnabled != CharacterObject.RESEnabled)
                objCharacter_RESEnabledChanged(this);
            if (blnDEPEnabled != CharacterObject.DEPEnabled)
                objCharacter_DEPEnabledChanged(this);

            RefreshQualities(treQualities, cmsQuality, true);
            treQualities.SortCustom();
            nudQualityLevel_UpdateValue(null);
            UpdateMentorSpirits();
            RefreshMartialArts();
            RefreshAIPrograms();
            RefreshLimitModifiers();
            PopulateGearList();
            RefreshContacts();
            if (treCyberware.SelectedNode != null)
                RefreshSelectedCyberware();
            if (treArmor.SelectedNode != null)
                RefreshSelectedArmor();
            if (treGear.SelectedNode != null)
                RefreshSelectedGear();
            if (treLifestyles.SelectedNode != null)
                RefreshSelectedLifestyle();
            if (treVehicles.SelectedNode != null)
                RefreshSelectedVehicle();
            if (treWeapons.SelectedNode != null)
                RefreshSelectedWeapon();

            IsCharacterUpdateRequested = true;
            // Immediately call character update because it re-applies essence loss improvements
            UpdateCharacterInfo();

            Cursor = Cursors.Default;

            if (!string.IsNullOrEmpty(strOutdatedItems))
            {
                strOutdatedItems = LanguageManager.GetString("Message_ReapplyImprovementsFoundOutdatedItems_Top", GlobalOptions.Language) + strOutdatedItems + LanguageManager.GetString("Message_ReapplyImprovementsFoundOutdatedItems_Bottom", GlobalOptions.Language);
                MessageBox.Show(strOutdatedItems, LanguageManager.GetString("MessageTitle_ConfirmReapplyImprovements", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            IsDirty = true;
        }

        private void mnuSpecialPossess_Click(object sender, EventArgs e)
        {
            // Make sure the Spirit has been saved first.
            if (IsDirty)
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_PossessionSave", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_Possession", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return;
            }

            // Prompt the user to select a save file to possess.
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = "Chummer5 Files (*.chum5)|*.chum5|All Files (*.*)|*.*"
            };

            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor = Cursors.WaitCursor;
                Character objVessel = new Character
                {
                    FileName = openFileDialog.FileName
                };
                objVessel.Load();
                // Make sure the Vessel is in Career Mode.
                if (!objVessel.Created)
                {
                    Cursor = Cursors.Default;
                    MessageBox.Show(LanguageManager.GetString("Message_VesselInCareerMode", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_Possession", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Error);
                    objVessel.Dispose();
                    objVessel = null;
                    return;
                }

                // Load the Spirit's save file into a new Merge character.
                Character objMerge = new Character
                {
                    FileName = CharacterObject.FileName
                };
                objMerge.Load();
                objMerge.Possessed = true;
                objMerge.Alias = objVessel.CharacterName + " (" + LanguageManager.GetString("String_Possessed", GlobalOptions.Language) + ")";

                // Give the Critter the Immunity to Normal Weapons Power if they don't already have it.
                bool blnHasImmunity = false;
                foreach (CritterPower objCritterPower in objMerge.CritterPowers)
                {
                    if (objCritterPower.Name == "Immunity" && objCritterPower.Extra == "Normal Weapons")
                    {
                        blnHasImmunity = true;
                        break;
                    }
                }
                if (!blnHasImmunity)
                {
                    XmlDocument objPowerDoc = XmlManager.Load("critterpowers.xml");
                    XmlNode objPower = objPowerDoc.SelectSingleNode("/chummer/powers/power[name = \"Immunity\"]");

                    CritterPower objCritterPower = new CritterPower(objMerge);
                    TreeNode objDummy = new TreeNode();
                    objCritterPower.Create(objPower, objDummy, 0, "Normal Weapons");
                    objMerge.CritterPowers.Add(objCritterPower);
                }

                //TOD: Implement Possession attribute bonuses.
                /* Add the Vessel's Physical Attributes to the Spirit's Force.
                objMerge.BOD.MetatypeMaximum = objVessel.BOD.Value + objMerge.MAG.TotalValue;
                objMerge.BOD.Value = objVessel.BOD.Value + objMerge.MAG.TotalValue;
                objMerge.AGI.MetatypeMaximum = objVessel.AGI.Value + objMerge.MAG.TotalValue;
                objMerge.AGI.Value = objVessel.AGI.Value + objMerge.MAG.TotalValue;
                objMerge.REA.MetatypeMaximum = objVessel.REA.Value + objMerge.MAG.TotalValue;
                objMerge.REA.Value = objVessel.REA.Value + objMerge.MAG.TotalValue;
                objMerge.STR.MetatypeMaximum = objVessel.STR.Value + objMerge.MAG.TotalValue;
                objMerge.STR.Value = objVessel.STR.Value + objMerge.MAG.TotalValue;*/

                // Copy any Lifestyles the Vessel has.
                foreach (Lifestyle objLifestyle in objVessel.Lifestyles)
                    objMerge.Lifestyles.Add(objLifestyle);

                // Copy any Armor the Vessel has.
                foreach (Armor objArmor in objVessel.Armor)
                {
                    objMerge.Armor.Add(objArmor);
                    CopyArmorImprovements(objVessel, objMerge, objArmor);
                }

                // Copy any Gear the Vessel has.
                foreach (Gear objGear in objVessel.Gear)
                {
                    objMerge.Gear.Add(objGear);
                    CopyGearImprovements(objVessel, objMerge, objGear);
                }

                // Copy any Cyberware/Bioware the Vessel has.
                foreach (Cyberware objCyberware in objVessel.Cyberware)
                {
                    objMerge.Cyberware.Add(objCyberware);
                    CopyCyberwareImprovements(objVessel, objMerge, objCyberware);
                }

                // Copy any Weapons the Vessel has.
                foreach (Weapon objWeapon in objVessel.Weapons)
                    objMerge.Weapons.Add(objWeapon);

                // Copy and Vehicles the Vessel has.
                foreach (Vehicle objVehicle in objVessel.Vehicles)
                    objMerge.Vehicles.Add(objVehicle);

                // Copy the character info.
                objMerge.Sex = objVessel.Sex;
                objMerge.Age = objVessel.Age;
                objMerge.Eyes = objVessel.Eyes;
                objMerge.Hair = objVessel.Hair;
                objMerge.Height = objVessel.Height;
                objMerge.Weight = objVessel.Weight;
                objMerge.Skin = objVessel.Skin;
                objMerge.Name = objVessel.Name;
                objMerge.StreetCred = objVessel.StreetCred;
                objMerge.BurntStreetCred = objVessel.BurntStreetCred;
                objMerge.Notoriety = objVessel.Notoriety;
                objMerge.PublicAwareness = objVessel.PublicAwareness;
                foreach (Image objMugshot in objVessel.Mugshots)
                    objMerge.Mugshots.Add(objMugshot);

                string strShowFileName = Path.GetFileName(CharacterObject.FileName);

                if (string.IsNullOrEmpty(strShowFileName))
                    strShowFileName = CharacterObject.CharacterName;
                strShowFileName = strShowFileName.Replace(".chum5", string.Empty);

                strShowFileName += " (" + LanguageManager.GetString("String_Possessed", GlobalOptions.Language) + ")";

                // Now that everything is done, save the merged character and open them.
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "Chummer5 Files (*.chum5)|*.chum5|All Files (*.*)|*.*",
                    FileName = strShowFileName
                };

                Cursor = Cursors.Default;

                if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
                {
                    Cursor = Cursors.WaitCursor;
                    objMerge.FileName = saveFileDialog.FileName;
                    if (objMerge.Save())
                    {
                        // Get the name of the file and destroy the references to the Vessel and the merged character.
                        string strOpenFile = objMerge.FileName;
                        objMerge.Dispose();
                        objMerge = null;
                        objVessel.Dispose();
                        objVessel = null;

                        Character objOpenCharacter = Program.MainForm.LoadCharacter(strOpenFile);
                        Cursor = Cursors.Default;
                        Program.MainForm.OpenCharacter(objOpenCharacter);
                    }
                    else
                    {
                        // The save process was canceled, so drop everything.
                        objMerge.Dispose();
                        objMerge = null;
                        objVessel.Dispose();
                        objVessel = null;
                        Cursor = Cursors.Default;
                    }
                }
                else
                {
                    // The save process was canceled, so drop everything.
                    objMerge.Dispose();
                    objMerge = null;
                    objVessel.Dispose();
                    objVessel = null;
                }
            }
        }

        private void mnuSpecialPossessInanimate_Click(object sender, EventArgs e)
        {
            // Make sure the Spirit has been saved first.
            if (IsDirty)
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_PossessionSave", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_Possession", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return;
            }

            // Prompt the user to select an inanimate Vessel.
            XmlDocument objVesselDoc = XmlManager.Load("vessels.xml");
            XmlNodeList objXmlMetatypeList = objVesselDoc.SelectNodes("/chummer/metatypes/metatype");
            List<ListItem> lstMetatype = new List<ListItem>();
            foreach (XmlNode objXmlMetatype in objXmlMetatypeList)
            {
                string strName = objXmlMetatype["name"].InnerText;
                ListItem objItem = new ListItem(strName, objXmlMetatype["translate"]?.InnerText ?? strName);
                lstMetatype.Add(objItem);
            }

            frmSelectItem frmSelectVessel = new frmSelectItem
            {
                GeneralItems = lstMetatype
            };
            frmSelectVessel.ShowDialog(this);

            if (frmSelectVessel.DialogResult == DialogResult.Cancel)
                return;

            Cursor = Cursors.WaitCursor;

            // Load the Spirit's save file into a new Merge character.
            Character objMerge = new Character
            {
                FileName = CharacterObject.FileName
            };
            objMerge.Load();
            objMerge.Possessed = true;
            objMerge.Alias = frmSelectVessel.SelectedItem + " (" + LanguageManager.GetString("String_Possessed", GlobalOptions.Language) + ")";

            // Get the Node for the selected Vessel.
            XmlNode objSelected = objVesselDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + frmSelectVessel.SelectedItem + "\"]");

            // Get the CharacterAttribute Modifiers for the Vessel.
            int intBOD = Convert.ToInt32(objSelected["bodmin"].InnerText);
            int intAGI = Convert.ToInt32(objSelected["agimin"].InnerText);
            int intREA = Convert.ToInt32(objSelected["reamin"].InnerText);
            int intSTR = Convert.ToInt32(objSelected["strmin"].InnerText);

            //TODO: Update spirit attribute values.
            /* Add the CharacterAttribute modifiers, making sure that none of them go below 1.
            int intSetBOD = objMerge.MAG.TotalValue + intBOD;
            int intSetAGI = objMerge.MAG.TotalValue + intAGI;
            int intSetREA = objMerge.MAG.TotalValue + intREA;
            int intSetSTR = objMerge.MAG.TotalValue + intSTR;

            objMerge.BOD.MetatypeMinimum += intBOD;
            if (objMerge.BOD.MetatypeMinimum < 1)
                objMerge.BOD.MetatypeMinimum = 1;
            objMerge.BOD.MetatypeMaximum += intBOD;
            if (objMerge.BOD.MetatypeMaximum < 1)
                objMerge.BOD.MetatypeMaximum = 1;
            objMerge.BOD.Value = intSetBOD;
            if (objMerge.BOD.Value < 1)
                objMerge.BOD.Value = 1;

            objMerge.AGI.MetatypeMinimum += intAGI;
            if (objMerge.AGI.MetatypeMinimum < 1)
                objMerge.AGI.MetatypeMinimum = 1;
            objMerge.AGI.MetatypeMaximum += intAGI;
            if (objMerge.AGI.MetatypeMaximum < 1)
                objMerge.AGI.MetatypeMaximum = 1;
            objMerge.AGI.Value = intSetAGI;
            if (objMerge.AGI.Value < 1)
                objMerge.AGI.Value = 1;

            objMerge.REA.MetatypeMinimum += intREA;
            if (objMerge.REA.MetatypeMinimum < 1)
                objMerge.REA.MetatypeMinimum = 1;
            objMerge.REA.MetatypeMaximum += intREA;
            if (objMerge.REA.MetatypeMaximum < 1)
                objMerge.REA.MetatypeMaximum = 1;
            objMerge.REA.Value = intSetREA;
            if (objMerge.REA.Value < 1)
                objMerge.REA.Value = 1;

            objMerge.STR.MetatypeMinimum += intSTR;
            if (objMerge.STR.MetatypeMinimum < 1)
                objMerge.STR.MetatypeMinimum = 1;
            objMerge.STR.MetatypeMaximum += intSTR;
            if (objMerge.STR.MetatypeMaximum < 1)
                objMerge.STR.MetatypeMaximum = 1;
            objMerge.STR.Value = intSetSTR;
            if (objMerge.STR.Value < 1)
                objMerge.STR.Value = 1;
            */

            // Update the Movement if the Vessel has one.
            if (objSelected["movement"] != null)
                objMerge.Movement = objSelected["movement"].InnerText;

            // Add any additional Critter Powers the Vessel grants.
            if (objSelected["powers"] != null)
            {
                XmlDocument objXmlPowerDoc = XmlManager.Load("critterpowers.xml");
                foreach (XmlNode objXmlPower in objSelected.SelectNodes("powers/power"))
                {
                    XmlNode objXmlCritterPower = objXmlPowerDoc.SelectSingleNode("/chummer/powers/power[name = \"" + objXmlPower.InnerText + "\"]");
                    CritterPower objPower = new CritterPower(objMerge);
                    string strSelect = string.Empty;
                    int intRating = 0;
                    if (objXmlPower.Attributes["select"] != null)
                        strSelect = objXmlPower.Attributes["select"].InnerText;
                    if (objXmlPower.Attributes["rating"] != null)
                        intRating = Convert.ToInt32(objXmlPower.Attributes["rating"].InnerText);

                    TreeNode objDummy = new TreeNode();
                    objPower.Create(objXmlCritterPower, objDummy, intRating, strSelect);

                    objMerge.CritterPowers.Add(objPower);
                }
            }

            // Give the Critter the Immunity to Normal Weapons Power if they don't already have it.
            bool blnHasImmunity = false;
            foreach (CritterPower objCritterPower in objMerge.CritterPowers)
            {
                if (objCritterPower.Name == "Immunity" && objCritterPower.Extra == "Normal Weapons")
                {
                    blnHasImmunity = true;
                    break;
                }
            }
            if (!blnHasImmunity)
            {
                XmlDocument objPowerDoc = XmlManager.Load("critterpowers.xml");
                XmlNode objPower = objPowerDoc.SelectSingleNode("/chummer/powers/power[name = \"Immunity\"]");

                CritterPower objCritterPower = new CritterPower(objMerge);
                TreeNode objDummy = new TreeNode();
                objCritterPower.Create(objPower, objDummy, 0, "Normal Weapons");
                objMerge.CritterPowers.Add(objCritterPower);
            }

            // Add any Improvements the Vessel grants.
            if (objSelected["bonus"] != null)
            {
                ImprovementManager.CreateImprovements(objMerge, Improvement.ImprovementSource.Metatype, frmSelectVessel.SelectedItem, objSelected["bonus"], false, 1, frmSelectVessel.SelectedItem);
            }

            // Now that everything is done, save the merged character and open them.
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Chummer5 Files (*.chum5)|*.chum5|All Files (*.*)|*.*"
            };

            string strShowFileName = string.Empty;
            string[] strFile = CharacterObject.FileName.Split(Path.DirectorySeparatorChar);
            strShowFileName = strFile[strFile.Length - 1];

            if (string.IsNullOrEmpty(strShowFileName))
                strShowFileName = CharacterObject.CharacterName;
            strShowFileName = strShowFileName.Replace(".chum5", string.Empty);

            strShowFileName += " (" + LanguageManager.GetString("String_Possessed", GlobalOptions.Language) + ")";

            saveFileDialog.FileName = strShowFileName;

            Cursor = Cursors.Default;

            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor = Cursors.WaitCursor;
                objMerge.FileName = saveFileDialog.FileName;
                if (objMerge.Save())
                {
                    // Get the name of the file and destroy the references to the Vessel and the merged character.
                    string strOpenFile = objMerge.FileName;
                    objMerge.Dispose();
                    objMerge = null;

                    Character objOpenCharacter = Program.MainForm.LoadCharacter(strOpenFile);
                    Cursor = Cursors.Default;
                    Program.MainForm.OpenCharacter(objOpenCharacter);
                }
                else
                {
                    // The save process was canceled, so drop everything.
                    objMerge.Dispose();
                    objMerge = null;
                    Cursor = Cursors.Default;
                }
            }
            else
            {
                // The save process was canceled, so drop everything.
                objMerge.Dispose();
                objMerge = null;
            }
        }

        private void mnuEditCopy_Click(object sender, EventArgs e)
        {
            if (tabCharacterTabs.SelectedTab == tabStreetGear)
            {
                // Lifestyle Tab.
                if (tabStreetGearTabs.SelectedTab == tabLifestyle && treLifestyles.SelectedNode != null)
                {
                        // Copy the selected Lifestyle.
                    Lifestyle objCopyLifestyle = CharacterObject.Lifestyles.FindById(treLifestyles.SelectedNode.Tag.ToString());

                    if (objCopyLifestyle == null)
                        return;

                    MemoryStream objStream = new MemoryStream();
                    XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                    {
                        Formatting = Formatting.Indented,
                        Indentation = 1,
                        IndentChar = '\t'
                    };

                    objWriter.WriteStartDocument();

                    // </characters>
                    objWriter.WriteStartElement("character");

                    objCopyLifestyle.Save(objWriter);

                    // </characters>
                    objWriter.WriteEndElement();

                    // Finish the document and flush the Writer and Stream.
                    objWriter.WriteEndDocument();
                    objWriter.Flush();

                    // Read the stream.
                    StreamReader objReader = new StreamReader(objStream);
                    objStream.Position = 0;
                    XmlDocument objCharacterXML = new XmlDocument();

                    // Put the stream into an XmlDocument.
                    string strXML = objReader.ReadToEnd();
                    objCharacterXML.LoadXml(strXML);

                    objWriter.Close();

                    GlobalOptions.Clipboard = objCharacterXML;
                    GlobalOptions.ClipboardContentType = ClipboardContentType.Lifestyle;
                    //Clipboard.SetText(objCharacterXML.OuterXml);
                }

                // Armor Tab.
                else if (tabStreetGearTabs.SelectedTab == tabArmor && treArmor.SelectedNode != null)
                {
                    // Copy the selected Armor.
                    Armor objCopyArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());

                    if (objCopyArmor != null)
                    {
                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                        {
                            Formatting = Formatting.Indented,
                            Indentation = 1,
                            IndentChar = '\t'
                        };

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        objCopyArmor.Save(objWriter);

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Armor;

                        RefreshPasteStatus();
                        return;
                    }

                        // Attempt to copy Gear.
                    Gear objCopyGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);

                    if (objCopyGear != null)
                    {
                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                        {
                            Formatting = Formatting.Indented,
                            Indentation = 1,
                            IndentChar = '\t'
                        };

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        objCopyGear.Save(objWriter);
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;

                        if (objCopyGear.WeaponID != Guid.Empty.ToString())
                        {
                            // <weapons>
                            objWriter.WriteStartElement("weapons");
                            // Copy any Weapon that comes with the Gear.
                            foreach (Weapon objCopyWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                            {
                                objCopyWeapon.Save(objWriter);
                            }
                            objWriter.WriteEndElement();
                        }

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;

                        RefreshPasteStatus();
                        return;
                    }
                }

                // Weapons Tab.
                else if (tabStreetGearTabs.SelectedTab == tabWeapons && treWeapons.SelectedNode != null)
                {
                    // Copy the selected Weapon.
                    Weapon objCopyWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

                    if (objCopyWeapon != null)
                    {
                        // Do not let the user copy Gear or Cyberware Weapons.
                        if (objCopyWeapon.Category == "Gear" || objCopyWeapon.Cyberware)
                            return;

                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                        {
                            Formatting = Formatting.Indented,
                            Indentation = 1,
                            IndentChar = '\t'
                        };

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        objCopyWeapon.Save(objWriter);

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Weapon;

                        RefreshPasteStatus();
                        return;
                    }

                    Gear objCopyGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);

                    if (objCopyGear != null)
                    {
                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                        {
                            Formatting = Formatting.Indented,
                            Indentation = 1,
                            IndentChar = '\t'
                        };

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        objCopyGear.Save(objWriter);
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;

                        if (objCopyGear.WeaponID != Guid.Empty.ToString())
                        {
                            // <weapons>
                            objWriter.WriteStartElement("weapons");
                            // Copy any Weapon that comes with the Gear.
                            foreach (Weapon objCopyGearWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                            {
                                objCopyGearWeapon.Save(objWriter);
                            }
                            objWriter.WriteEndElement();
                        }

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;

                        RefreshPasteStatus();
                        return;
                    }
                }
                // Gear Tab.
                else if (tabStreetGearTabs.SelectedTab == tabGear && treGear.SelectedNode != null)
                {
                    // Copy the selected Gear.
                    Gear objCopyGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());

                    if (objCopyGear == null)
                        return;

                    MemoryStream objStream = new MemoryStream();
                    XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                    {
                        Formatting = Formatting.Indented,
                        Indentation = 1,
                        IndentChar = '\t'
                    };

                    objWriter.WriteStartDocument();

                    // </characters>
                    objWriter.WriteStartElement("character");

                    objCopyGear.Save(objWriter);
                    GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;

                    if (objCopyGear.WeaponID != Guid.Empty.ToString())
                    {
                        // <weapons>
                        objWriter.WriteStartElement("weapons");
                        // Copy any Weapon that comes with the Gear.
                        foreach (Weapon objCopyWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                        {
                            objCopyWeapon.Save(objWriter);
                        }
                        objWriter.WriteEndElement();
                    }

                    // </characters>
                    objWriter.WriteEndElement();

                    // Finish the document and flush the Writer and Stream.
                    objWriter.WriteEndDocument();
                    objWriter.Flush();

                    // Read the stream.
                    StreamReader objReader = new StreamReader(objStream);
                    objStream.Position = 0;
                    XmlDocument objCharacterXML = new XmlDocument();

                    // Put the stream into an XmlDocument.
                    string strXML = objReader.ReadToEnd();
                    objCharacterXML.LoadXml(strXML);

                    objWriter.Close();

                    GlobalOptions.Clipboard = objCharacterXML;
                    //Clipboard.SetText(objCharacterXML.OuterXml);
                }
            }

            // Vehicles Tab.
            else if (tabCharacterTabs.SelectedTab == tabVehicles && treVehicles.SelectedNode != null)
            {
                if (treVehicles.SelectedNode != null)
                {
                    if (treVehicles.SelectedNode.Level == 1)
                    {
                        // Copy the selected Vehicle.
                        Vehicle objCopyVehicle = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());

                        MemoryStream objStream = new MemoryStream();
                        XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                        {
                            Formatting = Formatting.Indented,
                            Indentation = 1,
                            IndentChar = '\t'
                        };

                        objWriter.WriteStartDocument();

                        // </characters>
                        objWriter.WriteStartElement("character");

                        objCopyVehicle.Save(objWriter);

                        // </characters>
                        objWriter.WriteEndElement();

                        // Finish the document and flush the Writer and Stream.
                        objWriter.WriteEndDocument();
                        objWriter.Flush();

                        // Read the stream.
                        StreamReader objReader = new StreamReader(objStream);
                        objStream.Position = 0;
                        XmlDocument objCharacterXML = new XmlDocument();

                        // Put the stream into an XmlDocument.
                        string strXML = objReader.ReadToEnd();
                        objCharacterXML.LoadXml(strXML);

                        objWriter.Close();

                        GlobalOptions.Clipboard = objCharacterXML;
                        GlobalOptions.ClipboardContentType = ClipboardContentType.Vehicle;
                        //Clipboard.SetText(objCharacterXML.OuterXml);
                    }
                    else
                    {
                        Gear objCopyGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

                        if (objCopyGear != null)
                        {
                            MemoryStream objStream = new MemoryStream();
                            XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                            {
                                Formatting = Formatting.Indented,
                                Indentation = 1,
                                IndentChar = '\t'
                            };

                            objWriter.WriteStartDocument();

                            // </characters>
                            objWriter.WriteStartElement("character");

                            objCopyGear.Save(objWriter);
                            GlobalOptions.ClipboardContentType = ClipboardContentType.Gear;

                            if (objCopyGear.WeaponID != Guid.Empty.ToString())
                            {
                                // <weapons>
                                objWriter.WriteStartElement("weapons");
                                // Copy any Weapon that comes with the Gear.
                                foreach (Weapon objCopyWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objCopyGear.InternalId))
                                {
                                    objCopyWeapon.Save(objWriter);
                                }
                                objWriter.WriteEndElement();
                            }

                            // </characters>
                            objWriter.WriteEndElement();

                            // Finish the document and flush the Writer and Stream.
                            objWriter.WriteEndDocument();
                            objWriter.Flush();

                            // Read the stream.
                            StreamReader objReader = new StreamReader(objStream);
                            objStream.Position = 0;
                            XmlDocument objCharacterXML = new XmlDocument();

                            // Put the stream into an XmlDocument.
                            string strXML = objReader.ReadToEnd();
                            objCharacterXML.LoadXml(strXML);

                            objWriter.Close();

                            GlobalOptions.Clipboard = objCharacterXML;

                            RefreshPasteStatus();
                            return;
                        }

                        foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
                        {
                            foreach (VehicleMod objMod in objCharacterVehicle.Mods)
                            {
                                Weapon objCopyWeapon = objMod.Weapons.DeepFindById(treVehicles.SelectedNode.Tag.ToString());
                                if (objCopyWeapon != null)
                                {
                                    // Do not let the user copy Gear or Cyberware Weapons.
                                    if (objCopyWeapon.Category == "Gear" || objCopyWeapon.Cyberware)
                                        return;

                                    MemoryStream objStream = new MemoryStream();
                                    XmlTextWriter objWriter = new XmlTextWriter(objStream, System.Text.Encoding.Unicode)
                                    {
                                        Formatting = Formatting.Indented,
                                        Indentation = 1,
                                        IndentChar = '\t'
                                    };

                                    objWriter.WriteStartDocument();

                                    // </characters>
                                    objWriter.WriteStartElement("character");

                                    objCopyWeapon.Save(objWriter);

                                    // </characters>
                                    objWriter.WriteEndElement();

                                    // Finish the document and flush the Writer and Stream.
                                    objWriter.WriteEndDocument();
                                    objWriter.Flush();

                                    // Read the stream.
                                    StreamReader objReader = new StreamReader(objStream);
                                    objStream.Position = 0;
                                    XmlDocument objCharacterXML = new XmlDocument();

                                    // Put the stream into an XmlDocument.
                                    string strXML = objReader.ReadToEnd();
                                    objCharacterXML.LoadXml(strXML);

                                    objWriter.Close();

                                    GlobalOptions.Clipboard = objCharacterXML;
                                    GlobalOptions.ClipboardContentType = ClipboardContentType.Weapon;

                                    RefreshPasteStatus();
                                    return;
                                }
                            }
                        }
                    }
                }
            }
            RefreshPasteStatus();
        }

        private void tsbCopy_Click(object sender, EventArgs e)
        {
            mnuEditCopy_Click(sender, e);
        }

        private void mnuSpecialConvertToFreeSprite_Click(object sender, EventArgs e)
        {
            XmlDocument objXmlDocument = XmlManager.Load("critterpowers.xml");
            XmlNode objXmlPower = objXmlDocument.SelectSingleNode("/chummer/powers/power[name = \"Denial\"]");
            TreeNode objNode = new TreeNode();
            CritterPower objPower = new CritterPower(CharacterObject);
            objPower.Create(objXmlPower, objNode);
            objPower.CountTowardsLimit = false;
            objNode.ContextMenuStrip = cmsCritterPowers;
            if (objPower.InternalId == Guid.Empty.ToString())
                return;

            CharacterObject.CritterPowers.Add(objPower);

            treCritterPowers.Nodes[0].Nodes.Add(objNode);
            treCritterPowers.Nodes[0].Expand();

            CharacterObject.MetatypeCategory = "Free Sprite";
            mnuSpecialConvertToFreeSprite.Visible = false;

            treCritterPowers.SortCustom();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void mnuSpecialAddCyberwareSuite_Click(object sender, EventArgs e)
        {
            AddCyberwareSuite(Improvement.ImprovementSource.Cyberware);
        }

        private void mnuSpecialAddBiowareSuite_Click(object sender, EventArgs e)
        {
            AddCyberwareSuite(Improvement.ImprovementSource.Bioware);
        }
#endregion

#region SpellDefense Events
        private void UpdateSpellDefence(Dictionary<string, int> dicAttributeTotalValues)
        {
            // Update the Spell Defence labels.
            string strSpellTooltip = string.Empty;
            string strModifiers = LanguageManager.GetString("Tip_Modifiers", GlobalOptions.Language);
            string strCounterSpelling = LanguageManager.GetString("Label_CounterspellingDice", GlobalOptions.Language);
            string strSpellResistance = LanguageManager.GetString("String_SpellResistanceDice", GlobalOptions.Language);
            //Indirect Dodge
            lblSpellDefenceIndirectDodge.Text = (dicAttributeTotalValues["INT"] + dicAttributeTotalValues["REA"] + CharacterObject.TotalBonusDodgeRating).ToString();
            strSpellTooltip = $"{strModifiers}: " +
                              $"{CharacterObject.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) + {CharacterObject.REA.DisplayAbbrev} ({dicAttributeTotalValues["REA"]}) + {strModifiers} ({CharacterObject.TotalBonusDodgeRating})";
            tipTooltip.SetToolTip(lblSpellDefenceIndirectDodge, strSpellTooltip);
            //Indirect Soak
            int intTotalArmor = CharacterObject.TotalArmorRating;
            lblSpellDefenceIndirectSoak.Text = (intTotalArmor + dicAttributeTotalValues["BOD"]).ToString();
            strSpellTooltip = $"{strModifiers}: " +
                              $"{LanguageManager.GetString("Tip_Armor", GlobalOptions.Language)} ({intTotalArmor}) + {CharacterObject.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]})";
            tipTooltip.SetToolTip(lblSpellDefenceIndirectSoak, strSpellTooltip);
            //Direct Soak - Mana
            lblSpellDefenceDirectSoakMana.Text = (dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: " +
                              $"{CharacterObject.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDirectSoakMana, strSpellTooltip);
            //Direct Soak - Physical
            lblSpellDefenceDirectSoakPhysical.Text = (dicAttributeTotalValues["BOD"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDirectSoakPhysical, strSpellTooltip);
            //Detection Spells
            lblSpellDefenceDetection.Text =
                (dicAttributeTotalValues["LOG"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DetectionSpellResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: " +
                              $"{CharacterObject.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) + {CharacterObject.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) " +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DetectionSpellResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceDetection, strSpellTooltip);
            //Decrease Attribute - BOD
            lblSpellDefenceDecAttBOD.Text =
                (dicAttributeTotalValues["BOD"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttBOD, strSpellTooltip);
            //Decrease Attribute - AGI
            lblSpellDefenceDecAttAGI.Text =
                (dicAttributeTotalValues["AGI"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.AGI.DisplayAbbrev} ({dicAttributeTotalValues["AGI"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttAGI, strSpellTooltip);
            //Decrease Attribute - REA
            lblSpellDefenceDecAttREA.Text =
                (dicAttributeTotalValues["REA"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.REA.DisplayAbbrev} ({dicAttributeTotalValues["REA"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttREA, strSpellTooltip);
            //Decrease Attribute - STR
            lblSpellDefenceDecAttSTR.Text =
                (dicAttributeTotalValues["STR"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.STR.DisplayAbbrev} ({dicAttributeTotalValues["STR"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttSTR, strSpellTooltip);
            //Decrease Attribute - CHA
            lblSpellDefenceDecAttCHA.Text =
                (dicAttributeTotalValues["CHA"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.CHA.DisplayAbbrev} ({dicAttributeTotalValues["CHA"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttCHA, strSpellTooltip);
            //Decrease Attribute - INT
            lblSpellDefenceDecAttINT.Text =
                (dicAttributeTotalValues["INT"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttINT, strSpellTooltip);
            //Decrease Attribute - LOG
            lblSpellDefenceDecAttLOG.Text =
                (dicAttributeTotalValues["LOG"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttLOG, strSpellTooltip);
            //Decrease Attribute - WIL
            lblSpellDefenceDecAttWIL.Text =
                (dicAttributeTotalValues["WIL"] + dicAttributeTotalValues["WIL"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance})";
            tipTooltip.SetToolTip(lblSpellDefenceDecAttWIL, strSpellTooltip);
            //Illusion - Mana
            lblSpellDefenceIllusionMana.Text =
                (dicAttributeTotalValues["WIL"] + dicAttributeTotalValues["LOG"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.ManaIllusionResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.ManaIllusionResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceIllusionMana, strSpellTooltip);
            //Illusion - Physical
            lblSpellDefenceIllusionPhysical.Text =
                (dicAttributeTotalValues["INT"] + dicAttributeTotalValues["LOG"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.PhysicalIllusionResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) +{CharacterObject.LOG.DisplayAbbrev} +({dicAttributeTotalValues["LOG"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.PhysicalIllusionResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceIllusionPhysical, strSpellTooltip);
            //Manipulation - Mental
            lblSpellDefenceManipMental.Text =
                (dicAttributeTotalValues["WIL"] + dicAttributeTotalValues["LOG"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.MentalManipulationResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]}) +{CharacterObject.WIL.DisplayAbbrev} +({dicAttributeTotalValues["WIL"]})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.MentalManipulationResist)})";
            tipTooltip.SetToolTip(lblSpellDefenceManipMental, strSpellTooltip);
            //Manipulation - Physical
            lbllSpellDefenceManipPhysical.Text =
                (dicAttributeTotalValues["STR"] + dicAttributeTotalValues["BOD"] + nudCounterspellingDice.Value + CharacterObject.SpellResistance + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.PhysicalManipulationResist)).ToString(GlobalOptions.CultureInfo);
            strSpellTooltip = $"{strModifiers}: {CharacterObject.STR.DisplayAbbrev} ({dicAttributeTotalValues["STR"]}) +{CharacterObject.BOD.DisplayAbbrev} +({CharacterObject.BOD.TotalValue})" +
                              $" + {strCounterSpelling} ({nudCounterspellingDice.Value}) + {strSpellResistance} ({CharacterObject.SpellResistance}) + {strModifiers} ({ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.PhysicalManipulationResist)})";
            tipTooltip.SetToolTip(lbllSpellDefenceManipPhysical, strSpellTooltip);
        }

        private void nudCounterspellingDice_Changed(object sender, EventArgs e)
        {
            Dictionary<string, int> dicAttributeTotalValues = new Dictionary<string, int>(AttributeSection.AttributeStrings.Count);
            foreach (string strAttribute in AttributeSection.AttributeStrings)
            {
                dicAttributeTotalValues.Add(strAttribute, CharacterObject.GetAttribute(strAttribute).TotalValue);
            }
            UpdateSpellDefence(dicAttributeTotalValues);
        }
#endregion

#region ContactControl Events
        private void DeleteContact(object sender, EventArgs e)
        {
            DeleteContact(sender, false);
        }

        private void DeleteContact(object sender, bool force)
        {
            if (!force && !CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteContact", GlobalOptions.Language)))
                return;

            // Handle the DeleteContact Event for the ContactControl object.
            ContactControl objSender = (ContactControl) sender;
            bool blnFound = false;
            foreach (ContactControl objContactControl in panContacts.Controls)
            {
                // Set the flag to show that we have found the Contact.
                if (objContactControl == objSender)
                {
                    blnFound = true;
                    CharacterObject.Contacts.Remove(objContactControl.ContactObject);
                }

                // Once the Contact has been found, all of the other ContactControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (blnFound)
                {
                    objContactControl.Top -= 25;
                }
            }
            // Remove the ContactControl that raised the Event.
            panContacts.Controls.Remove(objSender);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
#endregion

#region EnemyControl Events
        private void DeleteEnemy(object sender, EventArgs e)
        {
            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteEnemy", GlobalOptions.Language)))
                return;

            // Determine the Karam cost to remove the Enemy.
            ContactControl objSender = (ContactControl)sender;
            Contact objSenderContact = objSender.ContactObject;
            int intKarmaCost = (objSenderContact.Connection + objSenderContact.Loyalty) * CharacterObjectOptions.KarmaQuality;

            bool blnKarmaExpense = CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseEnemy", GlobalOptions.Language).Replace("{0}", intKarmaCost.ToString()));

            if (blnKarmaExpense)
            {
                // Make sure the character has enough Karma.
                if (intKarmaCost > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseRemoveEnemy", GlobalOptions.Language) + " " + objSenderContact.Name, ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaCost;
            }

            // Handle the DeleteContact Event for the ContactControl object.
            foreach (ContactControl objContactControl in panEnemies.Controls)
            {
                if (objContactControl == objSender)
                // Once the Enemy has been found, all of the other ContactControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                {
                    CharacterObject.Contacts.Remove(objSenderContact);
                    objContactControl.Top -= 25;
                }
            }
            // Remove the ContactControl that raised the Event.
            panEnemies.Controls.Remove(objSender);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
#endregion

#region PetControl Events
        private void DeletePet(object sender, EventArgs e)
        {
            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteContact", GlobalOptions.Language)))
                return;

            // Handle the DeleteContact Event for the ContactControl object.
            PetControl objSender = (PetControl)sender;
            bool blnFound = false;
            foreach (PetControl objContactControl in panPets.Controls)
            {
                // Set the flag to show that we have found the Contact.
                if (objContactControl == objSender)
                    blnFound = true;

                // Once the Contact has been found, all of the other ContactControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (blnFound)
                    CharacterObject.Contacts.Remove(objContactControl.ContactObject);
            }
            // Remove the ContactControl that raised the Event.
            panPets.Controls.Remove(objSender);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
#endregion

        #region SpiritControl Events
        private void DeleteSpirit(object sender, EventArgs e)
        {
            SpiritControl objSender = (SpiritControl)sender;
            Spirit objSpirit = objSender.SpiritObject;
            bool blnIsSpirit = objSpirit.EntityType == SpiritType.Spirit;
            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString(blnIsSpirit ? "Message_DeleteSpirit" : "Message_DeleteSprite", GlobalOptions.Language)))
                return;

            Panel panControlContainer = blnIsSpirit ? panSpirits : panSprites;
            int intRemovedControlHeight = 0;
            foreach (SpiritControl objSpiritControl in panControlContainer.Controls)
            {
                // Set the flag to show that we have found the Spirit.
                if (objSpiritControl == objSender)
                {
                    CharacterObject.Spirits.Remove(objSpiritControl.SpiritObject);
                    intRemovedControlHeight = objSpiritControl.Height;
                }

                // Once the Spirit has been found, all of the other SpiritControls on the Panel should move up 25 pixels to fill in the gap that deleting this one will cause.
                if (intRemovedControlHeight != 0)
                {
                    objSpiritControl.Top -= intRemovedControlHeight;
                }
            }
            // Remove the SpiritControl that raised the Event.
            panControlContainer.Controls.Remove(objSender);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
        #endregion

        #region Martial Tab Control Events
        private void treMartialArts_AfterSelect(object sender, TreeViewEventArgs e)
        {
            _blnSkipRefresh = true;
            if (treMartialArts.SelectedNode != null)
            {
                // The Rating NUD is only enabled if a Martial Art is currently selected.
                if (treMartialArts.SelectedNode.Level == 1 && treMartialArts.SelectedNode.Parent == treMartialArts.Nodes[0])
                {
                    MartialArt objMartialArt = CharacterObject.MartialArts.FindById(treMartialArts.SelectedNode.Tag.ToString());

                    string strBook = CommonFunctions.LanguageBookShort(objMartialArt.Source, GlobalOptions.Language);
                    string strPage = objMartialArt.Page(GlobalOptions.Language);
                    lblMartialArtSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblMartialArtSource, CommonFunctions.LanguageBookLong(objMartialArt.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                }

                // Display the Martial Art Advantage information.
                if (treMartialArts.SelectedNode.Level == 2)
                {
                    MartialArtAdvantage objAdvantage = CommonFunctions.FindMartialArtAdvantage(treMartialArts.SelectedNode.Tag.ToString(), CharacterObject.MartialArts, out MartialArt objMartialArt);

                    string strBook = CommonFunctions.LanguageBookShort(objMartialArt.Source, GlobalOptions.Language);
                    string strPage = objMartialArt.Page(GlobalOptions.Language);
                    lblMartialArtSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblMartialArtSource, CommonFunctions.LanguageBookLong(objMartialArt.Source, GlobalOptions.Language) + " page " + strPage);
                }

                // Display the Maneuver information.
                if (treMartialArts.SelectedNode.Level == 1 && treMartialArts.SelectedNode.Parent == treMartialArts.Nodes[1])
                {
                    MartialArtManeuver objManeuver = CharacterObject.MartialArtManeuvers.FindById(treMartialArts.SelectedNode.Tag.ToString());

                    string strBook = CommonFunctions.LanguageBookShort(objManeuver.Source, GlobalOptions.Language);
                    string strPage = objManeuver.Page(GlobalOptions.Language);
                    lblMartialArtSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblMartialArtSource, CommonFunctions.LanguageBookLong(objManeuver.Source, GlobalOptions.Language) + " page " + strPage);
                }
            }
            _blnSkipRefresh = false;
        }
        #endregion

        #region Button Events
        private void treLimit_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteLimitModifier_Click(sender, e);
            }
        }
        private void panContacts_DragDrop(object sender, DragEventArgs e)
        {
            TransportWrapper wrapper = (TransportWrapper)e.Data.GetData(typeof(TransportWrapper));
            Control source = wrapper.Control;

            Point mousePosition = panContacts.PointToClient(new Point(e.X, e.Y));
            Control destination = panContacts.GetChildAtPoint(mousePosition);

            int indexDestination = panContacts.Controls.IndexOf(destination);
            if (panContacts.Controls.IndexOf(source) < indexDestination)
                indexDestination--;

            panContacts.Controls.SetChildIndex(source, indexDestination);

            foreach (ContactControl objControl in panContacts.Controls)
            {
                    objControl.BackColor = SystemColors.Control;
            }
        }

        private void panContacts_DragOver(object sender, DragEventArgs e)
        {
            Point mousePosition = panContacts.PointToClient(new Point(e.X, e.Y));
            Control destination = panContacts.GetChildAtPoint(mousePosition);

            if (destination == null)
                return;

            destination.BackColor = SystemColors.ControlDark;
            foreach (ContactControl objControl in panContacts.Controls)
            {
                if (objControl != (destination as ContactControl))
                {
                    objControl.BackColor = SystemColors.Control;
                }
            }
            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
        }

        void panContacts_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void panContactControl_MouseDown(object sender, MouseEventArgs e)
        {
            Control source = (Control)sender;
            source.DoDragDrop(new TransportWrapper(source), DragDropEffects.Move);
        }

        private void cmdAddContact_Click(object sender, EventArgs e)
        {
            Contact objContact = new Contact(CharacterObject)
            {
                EntityType = ContactType.Contact
            };
            CharacterObject.Contacts.Add(objContact);

            int i = panContacts.Controls.Count;
            ContactControl objContactControl = new ContactControl(objContact);

            // Attach an EventHandler for the ConnectionRatingChanged, LoyaltyRatingChanged, DeleteContact, and FileNameChanged Events.
            objContactControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
            objContactControl.DeleteContact += DeleteContact;
            objContactControl.MouseDown += panContactControl_MouseDown;

            panContacts.Controls.Add(objContactControl);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdAddEnemy_Click(object sender, EventArgs e)
        {
            // Handle the ConnectionRatingChanged Event for the ContactControl object.
            Contact objContact = new Contact(CharacterObject)
            {
                EntityType = ContactType.Enemy
            };
            CharacterObject.Contacts.Add(objContact);

            int i = panEnemies.Controls.Count;
            ContactControl objContactControl = new ContactControl(objContact);

            // Attach an EventHandler for the ConnectioNRatingChanged, LoyaltyRatingChanged, DeleteContact, and FileNameChanged Events.
            objContactControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
            objContactControl.DeleteContact += DeleteEnemy;

            panEnemies.Controls.Add(objContactControl);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdAddSpell_Click(object sender, EventArgs e)
        {
            // Open the Spells XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("spells.xml");
            bool blnAddAgain = false;

            do
            {
                int intSpellKarmaCost = CharacterObject.SpellKarmaCost;
                // Make sure the character has enough Karma before letting them select a Spell.
                if (CharacterObject.Karma < intSpellKarmaCost)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;
                }

                frmSelectSpell frmPickSpell = new frmSelectSpell(CharacterObject);
                frmPickSpell.ShowDialog(this);
                // Make sure the dialogue window was not canceled.
                if (frmPickSpell.DialogResult == DialogResult.Cancel)
                {
                    frmPickSpell.Dispose();
                    break;
                }
                blnAddAgain = frmPickSpell.AddAgain;

                XmlNode objXmlSpell = objXmlDocument.SelectSingleNode("/chummer/spells/spell[id = \"" + frmPickSpell.SelectedSpell + "\"]");

                Spell objSpell = new Spell(CharacterObject);
                TreeNode objNode = new TreeNode();
                objSpell.Create(objXmlSpell, objNode, string.Empty, frmPickSpell.Limited, frmPickSpell.Extended, frmPickSpell.Alchemical);
                objNode.ContextMenuStrip = cmsSpell;
                if (objSpell.InternalId == Guid.Empty.ToString())
                {
                    frmPickSpell.Dispose();
                    continue;
                }
                objSpell.FreeBonus = frmPickSpell.FreeBonus;
                if (!objSpell.FreeBonus)
                {
                    if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language)
                        .Replace("{0}", objSpell.DisplayName(GlobalOptions.Language)).Replace("{1}", intSpellKarmaCost.ToString())))
                    {
                        frmPickSpell.Dispose();
                        continue;
                    }
                }
                // Barehanded Adept
                else if (CharacterObject.AdeptEnabled && !CharacterObject.MagicianEnabled && objSpell.Range == "T")
                {
                    objSpell.UsesUnarmed = true;
                }

                CharacterObject.Spells.Add(objSpell);
                if (!objSpell.FreeBonus)
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                    objEntry.Create(-intSpellKarmaCost, LanguageManager.GetString("String_ExpenseLearnSpell", GlobalOptions.Language) + " " + objSpell.Name, ExpenseType.Karma, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objEntry);
                    CharacterObject.Karma -= intSpellKarmaCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateKarma(KarmaExpenseType.AddSpell, objSpell.InternalId);
                    objEntry.Undo = objUndo;
                }
                IsCharacterUpdateRequested = true;

                IsDirty = true;
                frmPickSpell.Dispose();
            }
            while (blnAddAgain);
        }

        private void cmdDeleteSpell_Click(object sender, EventArgs e)
        {
            // Delete the selected Spell.
            if (treSpells.SelectedNode != null)
            {
                if (treSpells.SelectedNode.Level > 0)
                {
                    // Locate the Spell that is selected in the tree.
                    Spell objSpell = CharacterObject.Spells.FindById(treSpells.SelectedNode.Tag.ToString());

                    // Cannot delete spells acquired through initiation
                    if (objSpell.Grade != 0 )
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveSpell", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveSpell", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteSpell", GlobalOptions.Language)))
                        return;

                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Spell, objSpell.InternalId);

                    CharacterObject.Spells.Remove(objSpell);
                    treSpells.SelectedNode.Remove();
                }
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void cmdAddSpirit_Click(object sender, EventArgs e)
        {
            int i = panSpirits.Controls.Count;

            Spirit objSpirit = new Spirit(CharacterObject)
            {
                EntityType = SpiritType.Spirit,
                Force = CharacterObject.MaxSpiritForce
            };
            CharacterObject.Spirits.Add(objSpirit);

            SpiritControl objSpiritControl = new SpiritControl(objSpirit);

            // Attach an EventHandler for the ServicesOwedChanged Event.
            objSpiritControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
            objSpiritControl.DeleteSpirit += DeleteSpirit;
            
            objSpiritControl.RebuildSpiritList(CharacterObject.MagicTradition);

            objSpiritControl.Top = i * objSpiritControl.Height;
            panSpirits.Controls.Add(objSpiritControl);

            IsDirty = true;
        }

        private void cmdAddSprite_Click(object sender, EventArgs e)
        {
            int i = panSprites.Controls.Count;

            Spirit objSprite = new Spirit(CharacterObject)
            {
                EntityType = SpiritType.Sprite,
                Force = CharacterObject.MaxSpriteLevel
            };
            CharacterObject.Spirits.Add(objSprite);

            SpiritControl objSpriteControl = new SpiritControl(objSprite);

            // Attach an EventHandler for the ServicesOwedChanged Event.
            objSpriteControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
            objSpriteControl.DeleteSpirit += DeleteSpirit;
            
            objSpriteControl.RebuildSpiritList(CharacterObject.TechnomancerStream);

            objSpriteControl.Top = i * objSpriteControl.Height;
            panSprites.Controls.Add(objSpriteControl);

            IsDirty = true;
        }

        private void cmdAddCyberware_Click(object sender, EventArgs e)
        {
            bool blnAddAgain = false;
            do
            {
                // Select the root Cyberware node then open the Select Cyberware window.
                treCyberware.SelectedNode = treCyberware.Nodes[0];
                blnAddAgain = PickCyberware();
            }
            while (blnAddAgain);
        }

        private void cmdDeleteCyberware_Click(object sender, EventArgs e)
        {
            if (treCyberware.SelectedNode != null)
            {
                if (treCyberware.SelectedNode.Level > 0)
                {
                    Cyberware objParent = null;
                    XmlDocument objXmlDocument = null;
                    // Locate the piece of Cyberware that is selected in the tree.
                    Cyberware objCyberware = CharacterObject.Cyberware.DeepFindById(treCyberware.SelectedNode.Tag.ToString());
                    if (objCyberware != null)
                    {
                        objParent = objCyberware.Parent;

                        if (objCyberware.SourceType == Improvement.ImprovementSource.Bioware)
                        {
                            objXmlDocument = XmlManager.Load("bioware.xml");
                        }
                        else
                        {
                            objXmlDocument = XmlManager.Load("cyberware.xml");
                        }

                        if (objCyberware.Capacity == "[*]" && treCyberware.SelectedNode.Level == 2)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveCyberware", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveCyberware", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        if (objCyberware.SourceType == Improvement.ImprovementSource.Cyberware)
                        {
                            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteCyberware", GlobalOptions.Language)))
                                return;
                        }
                        if (objCyberware.SourceType == Improvement.ImprovementSource.Bioware)
                        {
                            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteBioware", GlobalOptions.Language)))
                                return;
                        }

                        objCyberware.DeleteCyberware(treWeapons, treVehicles);
                        // Remove the Children.
                        objCyberware.Children.Clear();

                        CharacterObject.Cyberware.Remove(objCyberware);

                        if (objCyberware.Parent == null)
                        {
                            //Add essence hole.
                            IncreaseEssenceHole((int) (objCyberware.CalculatedESS() * 100m));
                        }

                        // Open the Cyberware XML file and locate the selected piece.
                        XmlNode objXmlCyberware;
                        if (objCyberware.SourceType == Improvement.ImprovementSource.Bioware)
                        {
                            objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/biowares/bioware[name = \"" + objCyberware.Name + "\"]");
                        }
                        else
                        {
                            objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + objCyberware.Name + "\"]");
                        }
                        
                        // Fix for legacy characters with old addqualities improvements. 
                        if (objXmlCyberware?["addqualities"] != null)
                        {
                            RemoveAddedQualities(objXmlCyberware.SelectNodes("addqualities/addquality"), treQualities);
                        }
                    }
                    else
                    {
                        // Find and remove the selected piece of Gear.
                        Gear objGear = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(), CharacterObject.Cyberware.GetAllDescendants(x => x.Children), out objCyberware);
                        if (objGear.Parent == null)
                            objCyberware.Gear.Remove(objGear);
                        else
                        {
                            objGear.Parent.Children.Remove(objGear);
                            objGear.Parent.RefreshMatrixAttributeArray();
                        }
                        objGear.DeleteGear(treWeapons, treVehicles);
                    }

                    // Remove the item from the TreeView.
                    treCyberware.Nodes.Remove(treCyberware.SelectedNode);

                    // If the Parent is populated, remove the item from its Parent.
                    if (objParent != null)
                        objParent.Children.Remove(objCyberware);
                }

                IsCharacterUpdateRequested = true;
                RefreshSelectedCyberware();

                IsDirty = true;
            }
        }

        private void IncreaseEssenceHole(int centiessence)
        {
            //id of essence hole, get by id to avoid name confusions
            Guid essenceHoldID = Guid.Parse("b57eadaa-7c3b-4b80-8d79-cbbd922c1196");  //don't parse for every obj
            Cyberware objHole = CharacterObject.Cyberware.FirstOrDefault(x => x.SourceID == essenceHoldID);

            if (objHole == null)
            {
                XmlDocument xmlCyberware = XmlManager.Load("cyberware.xml");
                XmlNode xmlEssHole = xmlCyberware.SelectSingleNode("//id[.='b57eadaa-7c3b-4b80-8d79-cbbd922c1196']/..");
                objHole = new Cyberware(CharacterObject);
                TreeNode treNode = new TreeNode();

                objHole.Create(xmlEssHole, CharacterObject, CharacterObject.GetGradeList(Improvement.ImprovementSource.Cyberware).FirstOrDefault(x => x.Name == "None"), Improvement.ImprovementSource.Cyberware, centiessence, treNode, new List<Weapon>(), new List<TreeNode>(), new List<Vehicle>(), new List<TreeNode>());
                treCyberware.Nodes.Add(treNode);
                CharacterObject.Cyberware.Add(objHole);
            }
            else  
            {
                objHole.Rating += centiessence;
            }

        }

        private void DecreaseEssenceHole(int centiessence)
        {
            //id of essence hole, get by id to avoid name confusions
            Guid essenceHoldID = Guid.Parse("b57eadaa-7c3b-4b80-8d79-cbbd922c1196");  //don't parse for every obj
            Cyberware objHole = CharacterObject.Cyberware.FirstOrDefault(x => x.SourceID == essenceHoldID);

            if (objHole != null)
            {
                if (objHole.Rating > centiessence)
                {
                    objHole.Rating -= centiessence;
                }
                else
                {
                    CharacterObject.Cyberware.Remove(objHole);
                    for (int i = treCyberware.Nodes.Count - 1; i >= 0; i--)
                    {
                        //Equals as Tag is exposed while obj, but not refequals
                        if (objHole.InternalId.Equals(treCyberware.Nodes[i].Tag))
                        {
                            treCyberware.Nodes.RemoveAt(i);
                            break;
                        }
                    }
                }
            }
        }

        private void cmdAddComplexForm_Click(object sender, EventArgs e)
        {
            XmlDocument objXmlDocument = XmlManager.Load("complexforms.xml");
            bool blnAddAgain = false;

            do
            {
                // The number of Complex Forms cannot exceed the character's LOG.
                if (CharacterObject.ComplexForms.Count >= ((CharacterObject.RES.Value * 2) + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.ComplexFormLimit)))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_ComplexFormLimitCareer", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_ComplexFormLimit", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;
                }
                int intComplexFormKarmaCost = CharacterObject.ComplexFormKarmaCost;

                // Make sure the character has enough Karma before letting them select a Complex Form.
                if (CharacterObject.Karma < intComplexFormKarmaCost)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;
                }
                // Let the user select a Program.
                frmSelectProgram frmPickProgram = new frmSelectProgram(CharacterObject);
                frmPickProgram.ShowDialog(this);

                // Make sure the dialogue window was not canceled.
                if (frmPickProgram.DialogResult == DialogResult.Cancel)
                {
                    frmPickProgram.Dispose();
                    break;
                }
                blnAddAgain = frmPickProgram.AddAgain;

                XmlNode objXmlProgram = objXmlDocument.SelectSingleNode("/chummer/complexforms/complexform[id = \"" + frmPickProgram.SelectedProgram + "\"]");

                // Check for SelectText.
                string strExtra = string.Empty;
                if (objXmlProgram["bonus"] != null)
                {
                    if (objXmlProgram["bonus"]["selecttext"] != null)
                    {
                        frmSelectText frmPickText = new frmSelectText
                        {
                            Description = LanguageManager.GetString("String_Improvement_SelectText", GlobalOptions.Language).Replace("{0}", objXmlProgram["translate"]?.InnerText ?? objXmlProgram["name"].InnerText)
                        };
                        frmPickText.ShowDialog(this);
                        strExtra = frmPickText.SelectedValue;
                    }
                }

                TreeNode objNode = new TreeNode();
                ComplexForm objProgram = new ComplexForm(CharacterObject);
                objProgram.Create(objXmlProgram, objNode, cmsComplexForm, strExtra);
                if (objProgram.InternalId == Guid.Empty.ToString())
                {
                    frmPickProgram.Dispose();
                    continue;
                }

                CharacterObject.ComplexForms.Add(objProgram);

                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", objProgram.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", intComplexFormKarmaCost.ToString())))
                {
                    // Remove the Improvements created by the Complex Form.
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ComplexForm, objProgram.InternalId);
                    frmPickProgram.Dispose();
                    continue;
                }

                treComplexForms.Nodes[0].Nodes.Add(objNode);
                treComplexForms.Nodes[0].Expand();

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intComplexFormKarmaCost * -1, LanguageManager.GetString("String_ExpenseLearnComplexForm", GlobalOptions.Language) + " " + objProgram.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intComplexFormKarmaCost;

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.AddComplexForm, objProgram.InternalId);
                objExpense.Undo = objUndo;

                treComplexForms.SortCustom();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
                frmPickProgram.Dispose();
            }
            while (blnAddAgain);
        }

        private void cmdAddArmor_Click(object sender, EventArgs e)
        {
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickArmor(treArmor.Nodes[0]);
            }
            while (blnAddAgain);
        }

        private void cmdDeleteArmor_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treArmor.SelectedNode;

            if (objSelectedNode == null)
                return;

            if (objSelectedNode.Level == 0)
            {
                if (objSelectedNode.Text == LanguageManager.GetString("Node_SelectedArmor", GlobalOptions.Language))
                    return;

                if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteArmorLocation", GlobalOptions.Language)))
                    return;

                // Move all of the child nodes in the current parent to the Selected Armor parent node.
                foreach (TreeNode objNode in objSelectedNode.Nodes)
                {
                    Armor objArmor = CharacterObject.Armor.FindById(objNode.Tag.ToString());

                    // Change the Location for the Armor.
                    objArmor.Location = string.Empty;

                    TreeNode nodNewNode = new TreeNode
                    {
                        Text = objNode.Text,
                        Tag = objNode.Tag,
                        ContextMenuStrip = cmsArmor
                    };

                    // Add child nodes.
                    foreach (ArmorMod objChild in objArmor.ArmorMods)
                    {
                        TreeNode nodChildNode = new TreeNode
                        {
                            Text = objChild.DisplayName(GlobalOptions.Language),
                            Tag = objChild.InternalId,
                            ContextMenuStrip = string.IsNullOrEmpty(objChild.GearCapacity) ? cmsArmorMod : cmsArmorGear
                        };
                        nodNewNode.Nodes.Add(nodChildNode);
                        nodNewNode.Expand();
                        foreach (Gear objGearChild in objChild.Gear)
                        {
                            TreeNode nodGearChildNode = new TreeNode
                            {
                                Text = objGearChild.DisplayName(GlobalOptions.Language),
                                Tag = objGearChild.InternalId,
                                ContextMenuStrip = cmsArmorGear
                            };
                            nodChildNode.Nodes.Add(nodGearChildNode);
                            nodChildNode.Expand();
                        }
                    }

                    foreach (Gear objChild in objArmor.Gear)
                    {
                        TreeNode nodChildNode = new TreeNode
                        {
                            Text = objChild.DisplayName(GlobalOptions.Language),
                            Tag = objChild.InternalId,
                            ContextMenuStrip = cmsArmorGear
                        };
                        nodNewNode.Nodes.Add(nodChildNode);
                        nodNewNode.Expand();
                    }

                    treArmor.Nodes[0].Nodes.Add(nodNewNode);
                    treArmor.Nodes[0].Expand();
                }

                // Remove the Location from the character, then remove the selected node.
                CharacterObject.ArmorLocations.Remove(objSelectedNode.Text);
                objSelectedNode.Remove();
            }
            else
            {
                if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteArmor", GlobalOptions.Language)))
                    return;

                Armor objArmor = CharacterObject.Armor.FindById(objSelectedNode.Tag.ToString());
                if (objArmor != null)
                {
                    objArmor.DeleteArmor(treWeapons, treVehicles);
                    CharacterObject.Armor.Remove(objArmor);
                    objSelectedNode.Remove();
                }
                else
                {
                    ArmorMod objMod = CommonFunctions.FindArmorMod(objSelectedNode.Tag.ToString(), CharacterObject.Armor);
                    if (objMod != null)
                    {
                        objMod.DeleteArmorMod(treWeapons, treVehicles);
                        objMod.Parent.ArmorMods.Remove(objMod);
                        objSelectedNode.Remove();
                    }
                    else
                    {
                        Gear objGear = CommonFunctions.FindArmorGear(objSelectedNode.Tag.ToString(), CharacterObject.Armor, out objArmor, out objMod);
                        if (objGear != null)
                        {
                            objGear.DeleteGear(treWeapons, treVehicles);

                            Gear objGearParent = objGear.Parent;
                            if (objGearParent != null)
                            {
                                objGearParent.Children.Remove(objGear);
                                objGearParent.RefreshMatrixAttributeArray();
                            }
                            else if (objMod != null)
                                objMod.Gear.Remove(objGear);
                            else if (objArmor != null)
                                objArmor.Gear.Remove(objGear);

                            objSelectedNode.Remove();
                        }
                    }
                }
            }

            IsCharacterUpdateRequested = true;
            RefreshSelectedArmor();

            IsDirty = true;
        }

        private void cmdAddBioware_Click(object sender, EventArgs e)
        {
            bool blnAddAgain = false;
            do
            {
                // Select the root Bioware node then open the Select Cyberware window.
                treCyberware.SelectedNode = treCyberware.Nodes[1];
                blnAddAgain = PickCyberware(Improvement.ImprovementSource.Bioware);
            }
            while (blnAddAgain);
        }

        private bool PickWeapon(TreeNode n)
        {
            frmSelectWeapon frmPickWeapon = new frmSelectWeapon(CharacterObject);
            frmPickWeapon.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickWeapon.DialogResult == DialogResult.Cancel)
                return false;

            // Open the Weapons XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/weapons/weapon[id = \"" + frmPickWeapon.SelectedWeapon + "\"]");

            List<TreeNode> lstNodes = new List<TreeNode>();
            Weapon objWeapon = new Weapon(CharacterObject);
            objWeapon.Create(objXmlWeapon, lstNodes, cmsWeapon, cmsWeaponAccessory, CharacterObject.Weapons, cmsWeaponAccessoryGear);
            objWeapon.DiscountCost = frmPickWeapon.BlackMarketDiscount;

            decimal decCost = objWeapon.TotalCost;
            // Apply a markup if applicable.
            if (frmPickWeapon.Markup != 0)
            {
                decCost *= 1 + (frmPickWeapon.Markup / 100.0m);
            }

            // Multiply the cost if applicable.
            string strAvail = objWeapon.TotalAvail(GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickWeapon.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return frmPickWeapon.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseWeapon", GlobalOptions.Language) + " " + objWeapon.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddWeapon, objWeapon.InternalId);
                    objExpense.Undo = objUndo;
                }
            }

            CharacterObject.Weapons.Add(objWeapon);

            foreach (TreeNode objLoopNode in lstNodes)
            {
                objLoopNode.ContextMenuStrip = cmsWeapon;
                n.Nodes.Add(objLoopNode);
            }
            n.Expand();
            treWeapons.SelectedNode = lstNodes[0];

            IsCharacterUpdateRequested = true;

            IsDirty = true;

            return frmPickWeapon.AddAgain;
        }

        private void cmdAddWeapon_Click(object sender, EventArgs e)
        {
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickWeapon(treWeapons.Nodes[0]);
            }
            while (blnAddAgain);
        }

        private void cmdDeleteWeapon_Click(object sender, EventArgs e)
        {
            // Delete the selected Weapon.
            if (treWeapons.SelectedNode != null)
            {
                if (treWeapons.SelectedNode.Level == 0)
                {
                    if (treWeapons.SelectedNode.Text == LanguageManager.GetString("Node_SelectedWeapons", GlobalOptions.Language))
                        return;

                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteWeaponLocation", GlobalOptions.Language)))
                        return;

                    // Move all of the child nodes in the current parent to the Selected Weapons parent node.
                    foreach (TreeNode objNode in treWeapons.SelectedNode.Nodes)
                    {
                        Weapon objWeapon = CharacterObject.Weapons.DeepFindById(objNode.Tag.ToString());

                        // Change the Location for the Weapon.
                        objWeapon.Location = string.Empty;
                    }

                    List<TreeNode> lstMoveNodes = new List<TreeNode>();
                    foreach (TreeNode objNode in treWeapons.SelectedNode.Nodes)
                        lstMoveNodes.Add(objNode);

                    foreach (TreeNode objNode in lstMoveNodes)
                    {
                        treWeapons.SelectedNode.Nodes.Remove(objNode);
                        treWeapons.Nodes[0].Nodes.Add(objNode);
                    }

                    // Remove the Weapon Location from the character, then remove the selected node.
                    CharacterObject.WeaponLocations.Remove(treWeapons.SelectedNode.Text);
                    treWeapons.SelectedNode.Remove();
                }

                if (treWeapons.SelectedNode.Level > 0)
                {
                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteWeapon", GlobalOptions.Language)))
                        return;

                    // Locate the Weapon that is selected in the tree.
                    Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());
                    if (objWeapon != null)
                    {
                        // Cyberweapons cannot be removed through here and must be done by removing the piece of Cyberware.
                        if (objWeapon.Cyberware)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveCyberweapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveCyberweapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        if (objWeapon.Category == "Gear")
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveGearWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveGearWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        if (objWeapon.Category.StartsWith("Quality"))
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveQualityWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveQualityWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        objWeapon.DeleteWeapon(treWeapons, treVehicles);

                        if (objWeapon.Parent != null)
                            objWeapon.Parent.Children.Remove(objWeapon);
                        else
                            CharacterObject.Weapons.Remove(objWeapon);
                        treWeapons.SelectedNode.Remove();
                    }
                    else
                    {
                        objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Parent.Tag.ToString());

                        // Locate the Accessory that is selected in the tree.
                        WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
                        if (objAccessory != null)
                        {
                            foreach (Gear objGear in objAccessory.Gear)
                                objGear.DeleteGear(treWeapons, treVehicles);
                            objWeapon.WeaponAccessories.Remove(objAccessory);
                            treWeapons.SelectedNode.Remove();
                        }
                        else
                        {
                            // Find the selected Gear.
                            Gear objGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons, out objAccessory);
                            objGear.DeleteGear(treWeapons, treVehicles);
                            if (objGear.Parent == null)
                                objAccessory.Gear.Remove(objGear);
                            else
                            {
                                objGear.Parent.Children.Remove(objGear);
                                objGear.Parent.RefreshMatrixAttributeArray();
                            }
                            treWeapons.SelectedNode.Remove();
                        }
                    }
                }
                IsCharacterUpdateRequested = true;
                RefreshSelectedWeapon();

                IsDirty = true;
            }
        }

        private void cmdAddLifestyle_Click(object sender, EventArgs e)
        {
            bool blnAddAgain = false;

            do
            {
                Lifestyle objLifestyle = new Lifestyle(CharacterObject);
                frmSelectLifestyle frmPickLifestyle = new frmSelectLifestyle(objLifestyle, CharacterObject);
                frmPickLifestyle.ShowDialog(this);

                // Make sure the dialogue window was not canceled.
                if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                {
                    frmPickLifestyle.Dispose();
                    break;
                }
                blnAddAgain = frmPickLifestyle.AddAgain;
                frmPickLifestyle.Dispose();

                objLifestyle.Months = 0;
                CharacterObject.Lifestyles.Add(objLifestyle);

                TreeNode objNode = new TreeNode
                {
                    Text = objLifestyle.DisplayName(GlobalOptions.Language),
                    Tag = objLifestyle.InternalId,
                    ContextMenuStrip = cmsLifestyleNotes
                };
                treLifestyles.Nodes[0].Nodes.Add(objNode);
                treLifestyles.Nodes[0].Expand();
                treLifestyles.SelectedNode = objNode;

                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void cmdDeleteLifestyle_Click(object sender, EventArgs e)
        {
            // Delete the selected Lifestyle.
            if (treLifestyles.SelectedNode != null)
            {
                if (treLifestyles.SelectedNode.Level > 0)
                {
                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteLifestyle", GlobalOptions.Language)))
                        return;

                    Lifestyle objLifestyle = CharacterObject.Lifestyles.FindById(treLifestyles.SelectedNode.Tag.ToString());
                    if (objLifestyle == null)
                        return;

                    CharacterObject.Lifestyles.Remove(objLifestyle);
                    treLifestyles.SelectedNode.Remove();
                }
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void cmdAddGear_Click(object sender, EventArgs e)
        {
            bool blnAddAgain = false;
            do
            {
                // Select the root Gear node then open the Select Gear window.
                treGear.SelectedNode = treGear.Nodes[0];
                blnAddAgain = PickGear(treGear.SelectedNode);
            }
            while (blnAddAgain);
            CharacterObject.PopulateFocusList(treFoci);
        }

        private void cmdDeleteGear_Click(object sender, EventArgs e)
        {
            // Delete the selected Gear.
            if (treGear.SelectedNode != null)
            {
                if (treGear.SelectedNode.Level == 0)
                {
                    if (treGear.SelectedNode.Text == LanguageManager.GetString("Node_SelectedGear", GlobalOptions.Language))
                        return;

                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteGearLocation", GlobalOptions.Language)))
                        return;

                    // Move all of the child nodes in the current parent to the Selected Gear parent node.
                    foreach (TreeNode objNode in treGear.SelectedNode.Nodes)
                    {
                        Gear objGear = CharacterObject.Gear.DeepFindById(objNode.Tag.ToString());

                        // Change the Location for the Gear.
                        objGear.Location = string.Empty;
                    }

                    List<TreeNode> lstMoveNodes = new List<TreeNode>();
                    foreach (TreeNode objNode in treGear.SelectedNode.Nodes)
                        lstMoveNodes.Add(objNode);

                    foreach (TreeNode objNode in lstMoveNodes)
                    {
                        treGear.SelectedNode.Nodes.Remove(objNode);
                        treGear.Nodes[0].Nodes.Add(objNode);
                    }

                    // Remove the Location from the character, then remove the selected node.
                    CharacterObject.GearLocations.Remove(treGear.SelectedNode.Text);
                    treGear.SelectedNode.Remove();
                }
                if (treGear.SelectedNode.Level > 0)
                {
                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteGear", GlobalOptions.Language)))
                        return;

                    Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
                    Gear objParent = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Parent.Tag.ToString());

                    objGear.DeleteGear(treWeapons, treVehicles);

                    CharacterObject.Gear.Remove(objGear);
                    treGear.SelectedNode.Remove();

                    // If the Parent is populated, remove the item from its Parent.
                    if (objParent != null)
                    {
                        objParent.Children.Remove(objGear);
                        objGear.Parent.RefreshMatrixAttributeArray();
                    }
                }
                CharacterObject.PopulateFocusList(treFoci);
                IsCharacterUpdateRequested = true;
                RefreshSelectedGear();

                IsDirty = true;
            }
        }

        private bool AddVehicle(TreeNode n)
        {
            frmSelectVehicle frmPickVehicle = new frmSelectVehicle(CharacterObject);
            frmPickVehicle.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickVehicle.DialogResult == DialogResult.Cancel)
                return false;

            // Open the Vehicles XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("vehicles.xml");

            XmlNode objXmlVehicle = objXmlDocument.SelectSingleNode("/chummer/vehicles/vehicle[name = \"" + frmPickVehicle.SelectedVehicle + "\"]");

            TreeNode objNode = new TreeNode();
            Vehicle objVehicle = new Vehicle(CharacterObject);
            objVehicle.Create(objXmlVehicle, objNode, cmsVehicle, cmsVehicleGear, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsWeaponMount);
            // Update the Used Vehicle information if applicable.
            if (frmPickVehicle.UsedVehicle)
            {
                objVehicle.Avail = frmPickVehicle.UsedAvail;
                objVehicle.Cost = frmPickVehicle.UsedCost.ToString(GlobalOptions.InvariantCultureInfo);
            }
            objVehicle.BlackMarketDiscount = frmPickVehicle.BlackMarketDiscount;

            decimal decCost = objVehicle.TotalCost;
            // Apply a markup if applicable.
            if (frmPickVehicle.Markup != 0)
            {
                decCost *= 1 + (frmPickVehicle.Markup / 100.0m);
            }

            // Multiply the cost if applicable.
            string strAvail = objVehicle.CalculatedAvail(GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickVehicle.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return frmPickVehicle.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicle", GlobalOptions.Language) + " " + objVehicle.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddVehicle, objVehicle.InternalId);
                    objExpense.Undo = objUndo;
                }
            }

            objVehicle.BlackMarketDiscount = frmPickVehicle.BlackMarketDiscount;

            CharacterObject.Vehicles.Add(objVehicle);

            objNode.ContextMenuStrip = cmsVehicle;
            n.Nodes.Add(objNode);
            n.Expand();
            treVehicles.SelectedNode = objNode;

            IsCharacterUpdateRequested = true;
            RefreshSelectedVehicle();

            IsDirty = true;

            return frmPickVehicle.AddAgain;
        }

        private void cmdAddVehicle_Click(object sender, EventArgs e)
        {
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = AddVehicle(treVehicles.Nodes[0]);
            }
            while (blnAddAgain);
        }

        private void cmdDeleteVehicle_Click(object sender, EventArgs e)
        {
            // Delete the selected Vehicle.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level == 0)
            {
                return;
            }

            if (treVehicles.SelectedNode.Level != 2)
            {
                if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteVehicle", GlobalOptions.Language)))
                    return;
            }

            // Weapons that are first-level children of vehicles cannot be removed (for some reason)
            foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
            {
                if (objCharacterVehicle.Weapons.DeepFirstOrDefault(x => x.Children, x => x.InternalId == treVehicles.SelectedNode.Tag.ToString()) != null)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveGearWeaponVehicle", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveGearWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            // Locate the Vehicle that is selected in the tree.
            Vehicle objVehicle = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());

            // Removing a Vehicle
            if (objVehicle != null)
            {
                // Remove any Gear Improvements from the character (primarily those provided by an Emotitoy).
                foreach (Gear objGear in objVehicle.Gear)
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);

                CharacterObject.Vehicles.Remove(objVehicle);
                foreach (Weapon objLoopWeapon in objVehicle.Weapons)
                {
                    objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                }
                foreach (VehicleMod objLoopMod in objVehicle.Mods)
                {
                    foreach (Weapon objLoopWeapon in objLoopMod.Weapons)
                    {
                        objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                    }
                    foreach (Cyberware objLoopCyberware in objLoopMod.Cyberware)
                    {
                        objLoopCyberware.DeleteCyberware(treWeapons, treVehicles);
                    }
                }
                foreach (WeaponMount objLoopMount in objVehicle.WeaponMounts)
                {
                    foreach (Weapon objLoopWeapon in objLoopMount.Weapons)
                    {
                        objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                    }
                }
                treVehicles.SelectedNode.Remove();
            }
            else
            {
                WeaponMount objWeaponMount = CommonFunctions.FindVehicleWeaponMount(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle);
                // Removing a Weapon Mount
                if (objWeaponMount != null)
                {
                    objVehicle.WeaponMounts.Remove(objWeaponMount);
                    foreach (Weapon objLoopWeapon in objWeaponMount.Weapons)
                    {
                        objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                    }
                    foreach (VehicleMod objLoopMod in objWeaponMount.Mods)
                    {
                        // Check for Improved Sensor bonus.
                        if (objLoopMod.Bonus?["improvesensor"] != null || (objLoopMod.WirelessOn && objLoopMod.WirelessBonus?["improvesensor"] != null))
                        {
                            ChangeVehicleSensor(objVehicle, false);
                        }
                        foreach (Weapon objLoopWeapon in objLoopMod.Weapons)
                        {
                            objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                        }
                        foreach (Cyberware objLoopCyberware in objLoopMod.Cyberware)
                        {
                            objLoopCyberware.DeleteCyberware(treWeapons, treVehicles);
                        }
                    }
                    treVehicles.SelectedNode.Remove();
                }
                else
                {
                    // Locate the VehicleMod that is selected in the tree.
                    VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle, out objWeaponMount);
                    // Removing a Vehicle Mod
                    if (objMod != null)
                    {
                        if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteVehicle", GlobalOptions.Language)))
                            return;

                        // Check for Improved Sensor bonus.
                        if (objMod.Bonus?["improvesensor"] != null || (objMod.WirelessOn && objMod.WirelessBonus?["improvesensor"] != null))
                        {
                            ChangeVehicleSensor(objVehicle, false);
                        }

                        // If this is the Obsolete Mod, the user must select a percentage. This will create an Expense that costs X% of the Vehicle's base cost to remove the special Obsolete Mod.
                        if (objMod.Name == "Obsolete" || (objMod.Name == "Obsolescent" && CharacterObjectOptions.AllowObsolescentUpgrade))
                        {
                            frmSelectNumber frmModPercent = new frmSelectNumber(2)
                            {
                                Minimum = 0,
                                Maximum = 1000000,
                                Description = LanguageManager.GetString("String_Retrofit", GlobalOptions.Language)
                            };
                            frmModPercent.ShowDialog(this);

                            if (frmModPercent.DialogResult == DialogResult.Cancel)
                                return;

                            decimal decPercentage = frmModPercent.SelectedValue;
                            decimal decVehicleCost = objVehicle.OwnCost;

                            // Make sure the character has enough Nuyen for the expense.
                            decimal decCost = decVehicleCost * decPercentage / 100;
                            if (decCost > CharacterObject.Nuyen)
                            {
                                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }

                            // Create a Vehicle Mod for the Retrofit.
                            VehicleMod objRetrofit = new VehicleMod(CharacterObject);

                            XmlDocument objVehiclesDoc = XmlManager.Load("vehicles.xml");
                            XmlNode objXmlNode = objVehiclesDoc.SelectSingleNode("/chummer/mods/mod[name = \"Retrofit\"]");
                            TreeNode objTreeNode = new TreeNode();
                            objRetrofit.Create(objXmlNode, objTreeNode, 0, objVehicle);
                            objRetrofit.Cost = decCost.ToString(GlobalOptions.InvariantCultureInfo);
                            objVehicle.Mods.Add(objRetrofit);
                            treVehicles.SelectedNode.Parent.Nodes.Add(objTreeNode);

                            // Create an Expense Log Entry for removing the Obsolete Mod.
                            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                            objEntry.Create(decCost * -1, LanguageManager.GetString("String_ExpenseVehicleRetrofit", GlobalOptions.Language).Replace("{0}", objVehicle.DisplayName(GlobalOptions.Language)), ExpenseType.Nuyen, DateTime.Now);
                            CharacterObject.ExpenseEntries.Add(objEntry);

                            // Adjust the character's Nuyen total.
                            CharacterObject.Nuyen += decCost * -1;
                        }

                        if (objWeaponMount != null)
                            objWeaponMount.Mods.Remove(objMod);
                        else
                            objVehicle.Mods.Remove(objMod);
                        foreach (Weapon objLoopWeapon in objMod.Weapons)
                        {
                            objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                        }
                        foreach (Cyberware objLoopCyberware in objMod.Cyberware)
                        {
                            objLoopCyberware.DeleteCyberware(treWeapons, treVehicles);
                        }
                        treVehicles.SelectedNode.Remove();
                    }
                    else
                    {
                        Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle, out objWeaponMount, out objMod);
                        // Removing a Weapon
                        if (objWeapon != null)
                        {
                            objWeapon.DeleteWeapon(treWeapons, treVehicles);
                            if (objWeapon.Parent != null)
                                objWeapon.Parent.Children.Remove(objWeapon);
                            else if (objMod != null)
                                objMod.Weapons.Remove(objWeapon);
                            else if (objWeaponMount != null)
                                objWeaponMount.Weapons.Remove(objWeapon);
                            // This bit here should never be reached, but I'm adding it for future-proofing in case we want people to be able to remove weapons attached directly to vehicles
                            else
                                objVehicle.Weapons.Remove(objWeapon);
                            treVehicles.SelectedNode.Remove();
                        }
                        else
                        {
                            WeaponAccessory objWeaponAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objWeapon);
                            // Removing a weapon accessory
                            if (objWeaponAccessory != null)
                            {
                                objWeapon.WeaponAccessories.Remove(objWeaponAccessory);
                                foreach (Gear objLoopGear in objWeaponAccessory.Gear)
                                {
                                    objLoopGear.DeleteGear(treWeapons, treVehicles);
                                }
                                treVehicles.SelectedNode.Remove();
                            }
                            else
                            {
                                Cyberware objCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objMod);
                                // Removing Cyberware
                                if (objCyberware != null)
                                {
                                    if (objCyberware.Parent == null)
                                        objMod.Cyberware.Remove(objCyberware);
                                    else
                                    {
                                        objCyberware.Parent.Children.Remove(objCyberware);
                                    }
                                    treVehicles.SelectedNode.Remove();

                                    objCyberware.DeleteCyberware(treWeapons, treVehicles);
                                }
                                else
                                {
                                    objVehicle = null;
                                    objWeaponAccessory = null;
                                    objCyberware = null;
                                    Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle, out objWeaponAccessory, out objCyberware);
                                    if (objGear != null)
                                    {
                                        if (objGear.Parent == null)
                                        {
                                            if (objCyberware != null)
                                                objCyberware.Gear.Remove(objGear);
                                            else if (objWeaponAccessory != null)
                                                objWeaponAccessory.Gear.Remove(objGear);
                                            else
                                                objVehicle.Gear.Remove(objGear);
                                        }
                                        else
                                        {
                                            objGear.Parent.Children.Remove(objGear);
                                            objGear.Parent.RefreshMatrixAttributeArray();
                                        }
                                        treVehicles.SelectedNode.Remove();

                                        objGear.DeleteGear(treWeapons, treVehicles);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            IsCharacterUpdateRequested = true;
            RefreshSelectedVehicle();

            IsDirty = true;
        }

        private void cmdAddMartialArt_Click(object sender, EventArgs e)
        {
            frmSelectMartialArt frmPickMartialArt = new frmSelectMartialArt(CharacterObject);
            frmPickMartialArt.ShowDialog(this);

            if (frmPickMartialArt.DialogResult == DialogResult.Cancel)
                return;

            // Open the Martial Arts XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("martialarts.xml");

            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/martialarts/martialart[name = \"" + frmPickMartialArt.SelectedMartialArt + "\"]");

            TreeNode objNode = new TreeNode();
            MartialArt objMartialArt = new MartialArt(CharacterObject);
            objMartialArt.Create(objXmlArt, objNode);

            int intKarmaCost = objMartialArt.Rating * objMartialArt.Cost * CharacterObjectOptions.KarmaQuality;
            if (intKarmaCost > CharacterObject.Karma)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.MartialArt, objMartialArt.InternalId);
                return;
            }

            CharacterObject.MartialArts.Add(objMartialArt);

            objNode.ContextMenuStrip = cmsMartialArts;

            // Create the Expense Log Entry.
            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
            objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseLearnMartialArt", GlobalOptions.Language) + " " + frmPickMartialArt.SelectedMartialArt, ExpenseType.Karma, DateTime.Now);
            CharacterObject.ExpenseEntries.Add(objExpense);
            CharacterObject.Karma -= intKarmaCost;

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateKarma(KarmaExpenseType.AddMartialArt, objMartialArt.Name);
            objExpense.Undo = objUndo;

            treMartialArts.Nodes[0].Nodes.Add(objNode);
            treMartialArts.Nodes[0].Expand();

            treMartialArts.SelectedNode = objNode;

            treMartialArts.SortCustom();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdDeleteMartialArt_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode != null && treMartialArts.SelectedNode.Level > 0)
            {
                if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteMartialArt", GlobalOptions.Language)))
                    return;

                if (treMartialArts.SelectedNode.Level == 1)
                {
                    // Delete the selected Martial Art.
                    MartialArt objMartialArt = CharacterObject.MartialArts.FindById(treMartialArts.SelectedNode.Tag.ToString());

                    bool blnDoQualityRefresh = false;
                    if (objMartialArt.Name == "One Trick Pony")
                    {
                        Quality objQuality = CharacterObject.Qualities.FirstOrDefault(objLoopQuality => objLoopQuality.Name == "One Trick Pony");
                        if (objQuality != null)
                        {
                            CharacterObject.Qualities.Remove(objQuality);
                            if (!CharacterObject.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objQuality.QualityId && objExistingQuality.Extra == objQuality.Extra))
                            {
                                foreach (TreeNode nodQuality in treQualities.Nodes[0].Nodes)
                                {
                                    if (nodQuality.Text == "One Trick Pony")
                                        nodQuality.Remove();
                                }
                            }
                            else
                                blnDoQualityRefresh = true;
                        }
                    }

                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.MartialArt, objMartialArt.InternalId);
                    // Remove the Improvements for any Advantages for the Martial Art that is being removed.
                    foreach (MartialArtAdvantage objAdvantage in objMartialArt.Advantages)
                    {
                        ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.MartialArtAdvantage, objAdvantage.InternalId);
                    }

                    CharacterObject.MartialArts.Remove(objMartialArt);
                    if (blnDoQualityRefresh)
                        RefreshQualityNames(treQualities);
                }
                if (treMartialArts.SelectedNode.Level == 2)
                {
                    // Find the selected Advantage object.
                    MartialArtAdvantage objSelectedAdvantage = CommonFunctions.FindMartialArtAdvantage(treMartialArts.SelectedNode.Tag.ToString(), CharacterObject.MartialArts, out MartialArt objSelectedMartialArt);

                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.MartialArtAdvantage, objSelectedAdvantage.InternalId);
                    
                    objSelectedMartialArt.Advantages.Remove(objSelectedAdvantage);
                }
                treMartialArts.SelectedNode.Remove();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void cmdAddManeuver_Click(object sender, EventArgs e)
        {
            // Characters may only have 2 Maneuvers per Martial Art Rating.
            int intTotalRating = 0;
            foreach (MartialArt objMartialArt in CharacterObject.MartialArts)
                intTotalRating += objMartialArt.Rating * 2;

            if (treMartialArts.Nodes[1].Nodes.Count >= intTotalRating)
            {
                MessageBox.Show(LanguageManager.GetString("Message_MartialArtManeuverLimit", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_MartialArtManeuverLimit", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Make sure the character has enough Karma.
            int intKarmaCost = CharacterObjectOptions.KarmaManeuver;


            if (intKarmaCost > CharacterObject.Karma)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectMartialArtManeuver frmPickMartialArtManeuver = new frmSelectMartialArtManeuver(CharacterObject);
            frmPickMartialArtManeuver.ShowDialog(this);

            if (frmPickMartialArtManeuver.DialogResult == DialogResult.Cancel)
                return;

            // Open the Martial Arts XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("martialarts.xml");

            XmlNode objXmlManeuver = objXmlDocument.SelectSingleNode("/chummer/maneuvers/maneuver[name = \"" + frmPickMartialArtManeuver.SelectedManeuver + "\"]");

            TreeNode objNode = new TreeNode();
            MartialArtManeuver objManeuver = new MartialArtManeuver(CharacterObject);
            objManeuver.Create(objXmlManeuver, objNode);
            objNode.ContextMenuStrip = cmsMartialArtManeuver;
            CharacterObject.MartialArtManeuvers.Add(objManeuver);

            treMartialArts.Nodes[1].Nodes.Add(objNode);
            treMartialArts.Nodes[1].Expand();

            treMartialArts.SelectedNode = objNode;

            // Create the Expense Log Entry.
            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
            objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseLearnManeuver", GlobalOptions.Language) + " " + objManeuver.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
            CharacterObject.ExpenseEntries.Add(objExpense);
            CharacterObject.Karma -= intKarmaCost;

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateKarma(KarmaExpenseType.AddMartialArtManeuver, objManeuver.InternalId);
            objExpense.Undo = objUndo;

            treMartialArts.SortCustom();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdAddMugshot_Click(object sender, EventArgs e)
        {
            if (AddMugshot())
            {
                lblNumMugshots.Text = "/ " + CharacterObject.Mugshots.Count.ToString();
                nudMugshotIndex.Maximum += 1;
                nudMugshotIndex.Value = CharacterObject.Mugshots.Count;

                IsDirty = true;
            }
        }

        private void cmdDeleteMugshot_Click(object sender, EventArgs e)
        {
            if (CharacterObject.Mugshots.Count > 0)
            {
                RemoveMugshot(decimal.ToInt32(nudMugshotIndex.Value) - 1);

                lblNumMugshots.Text = "/ " + CharacterObject.Mugshots.Count.ToString();
                nudMugshotIndex.Maximum -= 1;
                if (nudMugshotIndex.Value > nudMugshotIndex.Maximum)
                    nudMugshotIndex.Value = nudMugshotIndex.Maximum;
                else
                {
                    if (decimal.ToInt32(nudMugshotIndex.Value) - 1 == CharacterObject.MainMugshotIndex)
                        chkIsMainMugshot.Checked = true;
                    else if (chkIsMainMugshot.Checked == true)
                        chkIsMainMugshot.Checked = false;

                    UpdateMugshot(picMugshot, decimal.ToInt32(nudMugshotIndex.Value) - 1);
                }

                IsDirty = true;
            }
        }


        private void nudMugshotIndex_ValueChanged(object sender, EventArgs e)
        {
            if (CharacterObject.Mugshots.Count == 0)
            {
                nudMugshotIndex.Minimum = 0;
                nudMugshotIndex.Maximum = 0;
                nudMugshotIndex.Value = 0;
            }
            else
            {
                nudMugshotIndex.Minimum = 1;
                if (nudMugshotIndex.Value < nudMugshotIndex.Minimum)
                    nudMugshotIndex.Value = nudMugshotIndex.Maximum;
                else if (nudMugshotIndex.Value > nudMugshotIndex.Maximum)
                    nudMugshotIndex.Value = nudMugshotIndex.Minimum;
            }

            if (decimal.ToInt32(nudMugshotIndex.Value) - 1 == CharacterObject.MainMugshotIndex)
                chkIsMainMugshot.Checked = true;
            else if (chkIsMainMugshot.Checked == true)
                chkIsMainMugshot.Checked = false;

            UpdateMugshot(picMugshot, decimal.ToInt32(nudMugshotIndex.Value) - 1);
        }

        private void chkIsMainMugshot_CheckedChanged(object sender, EventArgs e)
        {
            bool blnStatusChanged = false;
            if (chkIsMainMugshot.Checked == true && CharacterObject.MainMugshotIndex != decimal.ToInt32(nudMugshotIndex.Value) - 1)
            {
                CharacterObject.MainMugshotIndex = decimal.ToInt32(nudMugshotIndex.Value) - 1;
                blnStatusChanged = true;
            }
            else if (chkIsMainMugshot.Checked == false && decimal.ToInt32(nudMugshotIndex.Value) - 1 == CharacterObject.MainMugshotIndex)
            {
                CharacterObject.MainMugshotIndex = -1;
                blnStatusChanged = true;
            }

            if (blnStatusChanged)
            {
                IsDirty = true;
            }
        }

        private void cmdAddMetamagic_Click(object sender, EventArgs e)
        {
            if (CharacterObject.MAGEnabled)
            {
                // Make sure that the Initiate Grade is not attempting to go above the character's MAG CharacterAttribute.
                if (CharacterObject.InitiateGrade + 1 > CharacterObject.MAG.TotalValue ||
                    (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept && CharacterObject.InitiateGrade + 1 > CharacterObject.MAGAdept.TotalValue))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotIncreaseInitiateGrade", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotIncreaseInitiateGrade", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the character has enough Karma.
                decimal decMultiplier = 1.0m;
                if (chkInitiationGroup.Checked)
                    decMultiplier -= 0.1m;
                if (chkInitiationOrdeal.Checked)
                    decMultiplier -= 0.1m;
                if (chkInitiationSchooling.Checked)
                    decMultiplier -= 0.1m;

                int intKarmaExpense = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.InitiateGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                if (intKarmaExpense > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (chkInitiationSchooling.Checked && (10000 > CharacterObject.Nuyen))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (chkInitiationSchooling.Checked)
                {
                    if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaandNuyenExpense", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_InitiateGrade", GlobalOptions.Language)).Replace("{1}", (CharacterObject.InitiateGrade + 1).ToString()).Replace("{2}", intKarmaExpense.ToString()).Replace("{3}", (10000).ToString())))
                        return;
                }
                else
                {
                    if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpense", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_InitiateGrade", GlobalOptions.Language)).Replace("{1}", (CharacterObject.InitiateGrade + 1).ToString()).Replace("{2}", intKarmaExpense.ToString())))
                        return;
                }

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaExpense * -1, LanguageManager.GetString("String_ExpenseInitiateGrade", GlobalOptions.Language) + " " + CharacterObject.InitiateGrade.ToString() + " -> " + (CharacterObject.InitiateGrade + 1).ToString(), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaExpense;

                // Create the Initiate Grade object.
                InitiationGrade objGrade = new InitiationGrade(CharacterObject);
                objGrade.Create(CharacterObject.InitiateGrade + 1, CharacterObject.RESEnabled, chkInitiationGroup.Checked, chkInitiationOrdeal.Checked, chkInitiationSchooling.Checked);
                CharacterObject.InitiationGrades.Add(objGrade);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.ImproveInitiateGrade, objGrade.InternalId);
                objExpense.Undo = objUndo;

                if (chkInitiationSchooling.Checked)
                {
                    ExpenseLogEntry objNuyenExpense = new ExpenseLogEntry(CharacterObject);
                    objNuyenExpense.Create(-10000, LanguageManager.GetString("String_ExpenseInitiateGrade", GlobalOptions.Language) + " " + CharacterObject.InitiateGrade.ToString() + " -> " + (CharacterObject.InitiateGrade + 1).ToString(), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objNuyenExpense);
                    CharacterObject.Nuyen -= 10000;

                    ExpenseUndo objNuyenUndo = new ExpenseUndo();
                    objNuyenUndo.CreateNuyen(NuyenExpenseType.ImproveInitiateGrade, objGrade.InternalId, 10000);
                    objNuyenExpense.Undo = objNuyenUndo;
                }

                // Set the character's Initiate Grade.
                CharacterObject.InitiateGrade += 1;

                // Remove any existing Initiation Improvements.
                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Initiation, "Initiation");

                // Create the replacement Improvement.
                ImprovementManager.CreateImprovement(CharacterObject, "MAG", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, CharacterObject.InitiateGrade);
                ImprovementManager.CreateImprovement(CharacterObject, "MAGAdept", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, CharacterObject.InitiateGrade);
                ImprovementManager.Commit(CharacterObject);

                // Update any Metamagic Improvements the character might have.
                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                {
                    if (objMetamagic.Bonus != null)
                    {
                        // If the Bonus contains "Rating", remove the existing Improvement and create new ones.
                        if (objMetamagic.Bonus.InnerXml.Contains("Rating"))
                        {
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId);
                            ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId, objMetamagic.Bonus, false, CharacterObject.InitiateGrade, objMetamagic.DisplayNameShort(GlobalOptions.Language));
                        }
                    }
                }

                int intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.InitiateGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                string strInitTip = LanguageManager.GetString("Tip_ImproveInitiateGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.InitiateGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
                tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
            }
            else if (CharacterObject.RESEnabled)
            {

                // Make sure that the Initiate Grade is not attempting to go above the character's RES CharacterAttribute.
                if (CharacterObject.SubmersionGrade + 1 > CharacterObject.RES.TotalValue)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotIncreaseSubmersionGrade", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotIncreaseSubmersionGrade", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the character has enough Karma.
                decimal decMultiplier = 1.0m;
                if (chkInitiationOrdeal.Checked)
                    decMultiplier -= 0.2m;

                int intKarmaExpense = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.SubmersionGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                if (intKarmaExpense > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpense", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_SubmersionGrade", GlobalOptions.Language)).Replace("{1}", (CharacterObject.SubmersionGrade + 1).ToString()).Replace("{2}", intKarmaExpense.ToString())))
                    return;

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaExpense * -1, LanguageManager.GetString("String_ExpenseSubmersionGrade", GlobalOptions.Language) + " " + CharacterObject.SubmersionGrade.ToString() + " -> " + (CharacterObject.SubmersionGrade + 1).ToString(), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaExpense;

                // Create the Initiate Grade object.
                InitiationGrade objGrade = new InitiationGrade(CharacterObject);
                objGrade.Create(CharacterObject.SubmersionGrade + 1, CharacterObject.RESEnabled, chkInitiationGroup.Checked, chkInitiationOrdeal.Checked, chkInitiationSchooling.Checked);
                CharacterObject.InitiationGrades.Add(objGrade);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.ImproveInitiateGrade, objGrade.InternalId);
                objExpense.Undo = objUndo;

                // Set the character's Submersion Grade.
                CharacterObject.SubmersionGrade += 1;

                // Remove any existing Initiation Improvements.
                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Submersion, "Submersion");

                // Create the replacement Improvement.
                ImprovementManager.CreateImprovement(CharacterObject, "RES", Improvement.ImprovementSource.Submersion, "Submersion", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, CharacterObject.SubmersionGrade);
                ImprovementManager.Commit(CharacterObject);

                // Update any Echo Improvements the character might have.
                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                {
                    if (objMetamagic.Bonus != null)
                    {
                        // If the Bonus contains "Rating", remove the existing Improvement and create new ones.
                        if (objMetamagic.Bonus.InnerXml.Contains("Rating"))
                        {
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Echo, objMetamagic.InternalId);
                            ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Echo, objMetamagic.InternalId, objMetamagic.Bonus, false, CharacterObject.SubmersionGrade, objMetamagic.DisplayNameShort(GlobalOptions.Language));
                        }
                    }
                }

                int intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.SubmersionGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                string strInitTip = LanguageManager.GetString("Tip_ImproveSubmersionGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.SubmersionGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
                tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
            }

            UpdateInitiationGradeTree();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdDeleteMetamagic_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode != null)
            {
                if (treMetamagic.SelectedNode.Level == 0)
                {
                    // Locate the selected Metamagic.
                    Metamagic objMetamagic = CharacterObject.Metamagics.FindById(treMetamagic.SelectedNode.Tag.ToString());
                    if (objMetamagic.Grade < 0)
                        return;

                    string strMessage = string.Empty;
                    if (CharacterObject.MAGEnabled)
                        strMessage = LanguageManager.GetString("Message_DeleteMetamagic", GlobalOptions.Language);
                    else if (CharacterObject.RESEnabled)
                        strMessage = LanguageManager.GetString("Message_DeleteEcho", GlobalOptions.Language);
                    if (!CharacterObject.ConfirmDelete(strMessage))
                        return;

                    // Remove the Improvements created by the Metamagic.
                    ImprovementManager.RemoveImprovements(CharacterObject, objMetamagic.SourceType, objMetamagic.InternalId);

                    // Remove the Metamagic from the character.
                    CharacterObject.Metamagics.Remove(objMetamagic);

                    treMetamagic.SelectedNode.Remove();

                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }

        private void cmdKarmaGained_Click(object sender, EventArgs e)
        {
            frmExpense frmNewExpense = new frmExpense
            {
                KarmaNuyenExchangeString = LanguageManager.GetString("String_WorkingForThePeople", GlobalOptions.Language)
            };
            frmNewExpense.ShowDialog(this);

            if (frmNewExpense.DialogResult == DialogResult.Cancel)
                return;

            // Create the Expense Log Entry.
            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
            objEntry.Create(frmNewExpense.Amount, frmNewExpense.Reason, ExpenseType.Karma, frmNewExpense.SelectedDate, frmNewExpense.Refund);
            CharacterObject.ExpenseEntries.Add(objEntry);

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateKarma(KarmaExpenseType.ManualAdd, string.Empty);
            objEntry.Undo = objUndo;

            // Adjust the character's Karma total.
            CharacterObject.Karma += decimal.ToInt32(frmNewExpense.Amount);

            if (frmNewExpense.KarmaNuyenExchange)
            {
                // Create the Expense Log Entry.
                objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(frmNewExpense.Amount * 2000 * -1, frmNewExpense.Reason, ExpenseType.Nuyen, frmNewExpense.SelectedDate);
                CharacterObject.ExpenseEntries.Add(objEntry);

                objUndo = new ExpenseUndo();
                objUndo.CreateNuyen(NuyenExpenseType.ManualSubtract, string.Empty);
                objEntry.Undo = objUndo;

                // Adjust the character's Nuyen total.
                CharacterObject.Nuyen += frmNewExpense.Amount * 2000.0m * -1;
            }

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdKarmaSpent_Click(object sender, EventArgs e)
        {
            frmExpense frmNewExpense = new frmExpense
            {
                KarmaNuyenExchangeString = LanguageManager.GetString("String_WorkingForTheMan", GlobalOptions.Language)
            };

            frmNewExpense.ShowDialog(this);

            if (frmNewExpense.DialogResult == DialogResult.Cancel)
                return;

            // Make sure the Karma expense would not put the character's remaining Karma amount below 0.
            if (CharacterObject.Karma - frmNewExpense.Amount < 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Create the Expense Log Entry.
            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
            objEntry.Create(frmNewExpense.Amount * -1, frmNewExpense.Reason, ExpenseType.Karma, frmNewExpense.SelectedDate, frmNewExpense.Refund);
            CharacterObject.ExpenseEntries.Add(objEntry);

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateKarma(KarmaExpenseType.ManualSubtract, string.Empty);
            objEntry.Undo = objUndo;

            // Adjust the character's Karma total.
            CharacterObject.Karma += decimal.ToInt32(frmNewExpense.Amount) * -1;

            if (frmNewExpense.KarmaNuyenExchange)
            {
                // Create the Expense Log Entry.
                objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(frmNewExpense.Amount * 2000.0m, frmNewExpense.Reason, ExpenseType.Nuyen, frmNewExpense.SelectedDate);
                CharacterObject.ExpenseEntries.Add(objEntry);

                objUndo = new ExpenseUndo();
                objUndo.CreateNuyen(NuyenExpenseType.ManualSubtract, string.Empty);
                objEntry.Undo = objUndo;

                // Adjust the character's Nuyen total.
                CharacterObject.Nuyen += frmNewExpense.Amount * 2000.0m;
            }

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdKarmaEdit_Click(object sender, EventArgs e)
        {
            lstKarma_DoubleClick(sender, e);
        }

        private void cmdNuyenGained_Click(object sender, EventArgs e)
        {
            frmExpense frmNewExpense = new frmExpense
            {
                Mode = ExpenseType.Nuyen,
                KarmaNuyenExchangeString = LanguageManager.GetString("String_WorkingForTheMan", GlobalOptions.Language)
            };
            frmNewExpense.ShowDialog(this);

            if (frmNewExpense.DialogResult == DialogResult.Cancel)
                return;

            // Create the Expense Log Entry.
            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
            objEntry.Create(frmNewExpense.Amount, frmNewExpense.Reason, ExpenseType.Nuyen, frmNewExpense.SelectedDate);
            objEntry.Refund = frmNewExpense.Refund;
            CharacterObject.ExpenseEntries.Add(objEntry);

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateNuyen(NuyenExpenseType.ManualAdd, string.Empty);
            objEntry.Undo = objUndo;

            // Adjust the character's Nuyen total.
            CharacterObject.Nuyen += frmNewExpense.Amount;

            if (frmNewExpense.KarmaNuyenExchange)
            {
                // Create the Expense Log Entry.
                objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(frmNewExpense.Amount / 2000.0m * -1, frmNewExpense.Reason, ExpenseType.Karma, frmNewExpense.SelectedDate, frmNewExpense.Refund);
                CharacterObject.ExpenseEntries.Add(objEntry);

                objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.ManualSubtract, string.Empty);
                objEntry.Undo = objUndo;

                // Adjust the character's Karma total.
                CharacterObject.Karma += decimal.ToInt32(frmNewExpense.Amount / 2000.0m) * -1;
            }

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdNuyenSpent_Click(object sender, EventArgs e)
        {
            frmExpense frmNewExpense = new frmExpense
            {
                Mode = ExpenseType.Nuyen,
                KarmaNuyenExchangeString = LanguageManager.GetString("String_WorkingForThePeople", GlobalOptions.Language)
            };
            frmNewExpense.ShowDialog(this);

            if (frmNewExpense.DialogResult == DialogResult.Cancel)
                return;

            // Make sure the Nuyen expense would not put the character's remaining Nuyen amount below 0.
            if (CharacterObject.Nuyen - frmNewExpense.Amount < 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Create the Expense Log Entry.
            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
            objEntry.Create(frmNewExpense.Amount * -1, frmNewExpense.Reason, ExpenseType.Nuyen, frmNewExpense.SelectedDate);
            CharacterObject.ExpenseEntries.Add(objEntry);

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateNuyen(NuyenExpenseType.ManualSubtract, string.Empty);
            objEntry.Undo = objUndo;

            // Adjust the character's Nuyen total.
            CharacterObject.Nuyen += frmNewExpense.Amount * -1;

            if (frmNewExpense.KarmaNuyenExchange)
            {
                // Create the Expense Log Entry.
                objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(frmNewExpense.Amount / 2000.0m, frmNewExpense.Reason, ExpenseType.Karma, frmNewExpense.SelectedDate, frmNewExpense.Refund);
                CharacterObject.ExpenseEntries.Add(objEntry);

                objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.ManualSubtract, string.Empty);
                objEntry.Undo = objUndo;

                // Adjust the character's Karma total.
                CharacterObject.Karma += decimal.ToInt32(frmNewExpense.Amount / 2000.0m);
            }

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdNuyenEdit_Click(object sender, EventArgs e)
        {
            lstNuyen_DoubleClick(sender, e);
        }

        private void cmdDecreaseLifestyleMonths_Click(object sender, EventArgs e)
        {
                if (treLifestyles.SelectedNode == null)
                    return;

            // Locate the selected Lifestyle.
            Lifestyle objLifestyle = CharacterObject.Lifestyles.FindById(treLifestyles.SelectedNode.Tag.ToString());
            if (objLifestyle == null)
                return;

            objLifestyle.Months -= 1;
            lblLifestyleMonths.Text = objLifestyle.Months.ToString();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdIncreaseLifestyleMonths_Click(object sender, EventArgs e)
        {
                if (treLifestyles.SelectedNode == null)
                    return;

            // Locate the selected Lifestyle.
            Lifestyle objLifestyle = CharacterObject.Lifestyles.FindById(treLifestyles.SelectedNode.Tag.ToString());
            if (objLifestyle == null)
                return;

            // Create the Expense Log Entry.
            decimal decAmount = objLifestyle.TotalMonthlyCost;
            if (decAmount > CharacterObject.Nuyen)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
            objExpense.Create(decAmount * -1, LanguageManager.GetString("String_ExpenseLifestyle", GlobalOptions.Language) + " " + objLifestyle.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
            CharacterObject.ExpenseEntries.Add(objExpense);
            CharacterObject.Nuyen -= decAmount;

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateNuyen(NuyenExpenseType.IncreaseLifestyle, objLifestyle.InternalId);
            objExpense.Undo = objUndo;

            objLifestyle.Months += 1;
            lblLifestyleMonths.Text = objLifestyle.Months.ToString();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdAddCritterPower_Click(object sender, EventArgs e)
        {
            // Make sure the Critter is allowed to have Optional Powers.
            XmlDocument objXmlDocument = XmlManager.Load("critters.xml");
            XmlNode objXmlCritter = objXmlDocument.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + CharacterObject.Metatype + "\"]");

            if (objXmlCritter == null)
            {
                objXmlDocument = XmlManager.Load("metatypes.xml");
                objXmlCritter = objXmlDocument.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + CharacterObject.Metatype + "\"]");
            }

            bool blnAddAgain = false;
            do
            {
                frmSelectCritterPower frmPickCritterPower = new frmSelectCritterPower(CharacterObject);
                frmPickCritterPower.ShowDialog(this);

                if (frmPickCritterPower.DialogResult == DialogResult.Cancel)
                {
                    frmPickCritterPower.Dispose();
                    break;
                }
                blnAddAgain = frmPickCritterPower.AddAgain;

                objXmlDocument = XmlManager.Load("critterpowers.xml");
                XmlNode objXmlPower = objXmlDocument.SelectSingleNode("/chummer/powers/power[id = \"" + frmPickCritterPower.SelectedPower + "\"]");
                TreeNode objNode = new TreeNode();
                CritterPower objPower = new CritterPower(CharacterObject);
                objPower.Create(objXmlPower, objNode, frmPickCritterPower.SelectedRating);
                objPower.PowerPoints = frmPickCritterPower.PowerPoints;
                objNode.ContextMenuStrip = cmsCritterPowers;
                if (objPower.InternalId == Guid.Empty.ToString())
                {
                    frmPickCritterPower.Dispose();
                    continue;
                }

                CharacterObject.CritterPowers.Add(objPower);

                if (objPower.Category != "Weakness")
                {
                    treCritterPowers.Nodes[0].Nodes.Add(objNode);
                    treCritterPowers.Nodes[0].Expand();
                }
                else
                {
                    treCritterPowers.Nodes[1].Nodes.Add(objNode);
                    treCritterPowers.Nodes[1].Expand();
                }
                if (objPower.Karma > 0)
                {
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(objPower.Karma * -1, LanguageManager.GetString("String_ExpensePurchaseCritterPower", GlobalOptions.Language) + " " + objPower.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateKarma(KarmaExpenseType.AddCritterPower, objPower.InternalId);
                    objExpense.Undo = objUndo;
                }
                // Determine if the Critter should have access to the Possession menu item.
                bool blnAllowPossession = false;
                foreach (CritterPower objCritterPower in CharacterObject.CritterPowers)
                {
                    if (objCritterPower.Name == "Inhabitation" || objCritterPower.Name == "Possession")
                    {
                        blnAllowPossession = true;
                        break;
                    }
                }
                mnuSpecialPossess.Visible = blnAllowPossession;

                treCritterPowers.SortCustom();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
                frmPickCritterPower.Dispose();
            }
            while (blnAddAgain);
        }

        private void cmdDeleteCritterPower_Click(object sender, EventArgs e)
        {
            if (treCritterPowers.SelectedNode == null || treCritterPowers.SelectedNode.Level == 0)
                return;

            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteCritterPower", GlobalOptions.Language)))
                return;

            // Locate the selected Critter Power.
            CritterPower objPower = CharacterObject.CritterPowers.FindById(treCritterPowers.SelectedNode.Tag.ToString());

            // Remove any Improvements that were created by the Critter Power.
            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.CritterPower, objPower.InternalId);

            CharacterObject.CritterPowers.Remove(objPower);
            treCritterPowers.SelectedNode.Remove();

            // Determine if the Critter should have access to the Possession menu item.
            bool blnAllowPossession = false;
            foreach (CritterPower objCritterPower in CharacterObject.CritterPowers)
            {
                if (objCritterPower.Name == "Inhabitation" || objCritterPower.Name == "Possession")
                {
                    blnAllowPossession = true;
                    break;
                }
            }
            mnuSpecialPossess.Visible = blnAllowPossession;

            IsDirty = true;
        }

        private void cmdDeleteComplexForm_Click(object sender, EventArgs e)
        {
            // Delete the selected Complex Form.
            if (treComplexForms.SelectedNode != null)
            {
                if (treComplexForms.SelectedNode.Level == 1)
                {
                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteComplexForm", GlobalOptions.Language)))
                        return;

                    // Locate the Program that is selected in the tree.
                    ComplexForm objProgram = CharacterObject.ComplexForms.FindById(treComplexForms.SelectedNode.Tag.ToString());

                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ComplexForm, objProgram.InternalId);

                    CharacterObject.ComplexForms.Remove(objProgram);
                    treComplexForms.SelectedNode.Remove();
                }
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void cmdImproveComplexForm_Click(object sender, EventArgs e)
        {
            if (treComplexForms.SelectedNode != null)
            {
                if (treComplexForms.SelectedNode.Level == 1)
                {
                    // Locate the Program that is selected in the tree.
                    ComplexForm objProgram = CharacterObject.ComplexForms.FindById(treComplexForms.SelectedNode.Tag.ToString());

                    // Make sure the character has enough Karma.
                    int intKarmaCost = CharacterObjectOptions.KarmaImproveComplexForm;

                    if (intKarmaCost > CharacterObject.Karma)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", intKarmaCost.ToString()).Replace("{1}", objProgram.DisplayNameShort(GlobalOptions.Language))))
                        return;

                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseComplexForm", GlobalOptions.Language) + " " + objProgram.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Karma -= intKarmaCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateKarma(KarmaExpenseType.ImproveComplexForm, objProgram.InternalId);
                    objExpense.Undo = objUndo;

                    treComplexForms.SelectedNode.Text = objProgram.DisplayName;
                }

                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void cmdGearReduceQty_Click(object sender, EventArgs e)
        {
            Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            Gear objParent = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Parent.Tag.ToString());

            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_ReduceQty", GlobalOptions.Language)))
                return;
                
            objGear.Quantity -= 1;

            if (objGear.Quantity > 0)
            {
                treGear.SelectedNode.Text = objGear.DisplayName(GlobalOptions.Language);
                RefreshSelectedGear();
            }
            else
            {
                // Remove the Gear if its quantity has been reduced to 0.
                if (objParent == null)
                {
                    CharacterObject.Gear.Remove(objGear);
                    treGear.SelectedNode.Remove();
                }
                else
                {
                    objParent.Children.Remove(objGear);
                    treGear.SelectedNode.Remove();
                }

                // Remove any Weapons that came with it.
                if (objGear.WeaponID != Guid.Empty.ToString())
                {
                    List<string> lstNodesToRemoveIds = new List<string>();
                    foreach (Weapon objWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objGear.InternalId))
                    {
                        lstNodesToRemoveIds.Add(objWeapon.InternalId);
                        objWeapon.DeleteWeapon(treWeapons, treVehicles);
                        // We can remove here because GetAllDescendants creates a new IEnumerable, different from these two
                        if (objWeapon.Parent != null)
                            objWeapon.Parent.Children.Remove(objWeapon);
                        else
                            CharacterObject.Weapons.Remove(objWeapon);
                    }
                    foreach (string strNodeId in lstNodesToRemoveIds)
                    {
                        // Remove the Weapons from the TreeView.
                        treWeapons.FindNode(strNodeId)?.Remove();
                    }
                }
            }

            IsDirty = true;
        }

        private void cmdGearSplitQty_Click(object sender, EventArgs e)
        {
            // This can only be done with the first level of Nodes.
            if (treGear.SelectedNode == null || treGear.SelectedNode.Level != 1)
                    return;

            Gear objSelectedGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());

            decimal decMinimumAmount = 1.0m;
            int intDecimalPlaces = 0;
            if (objSelectedGear.Name.StartsWith("Nuyen"))
            {
                intDecimalPlaces = Math.Max(0, CharacterObject.Options.NuyenFormat.Length - 1 - CharacterObject.Options.NuyenFormat.LastIndexOf('.'));
                // Need a for loop instead of a power system to maintain exact precision
                for (int i = 0; i < intDecimalPlaces; ++i)
                    decMinimumAmount /= 10.0m;
            }
            else if (objSelectedGear.Category == "Currency")
            {
                intDecimalPlaces = 2;
                decMinimumAmount = 0.01m;
            }
            // Cannot split a stack of 1 item.
            if (objSelectedGear.Quantity <= decMinimumAmount)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotSplitGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotSplitGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            frmSelectNumber frmPickNumber = new frmSelectNumber(intDecimalPlaces)
            {
                Minimum = decMinimumAmount,
                Maximum = objSelectedGear.Quantity - decMinimumAmount,
                Description = LanguageManager.GetString("String_SplitGear", GlobalOptions.Language)
            };
            frmPickNumber.ShowDialog(this);

            if (frmPickNumber.DialogResult == DialogResult.Cancel)
                return;

            // Create a new piece of Gear.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + objSelectedGear.Name + "\" and category = \"" + objSelectedGear.Category + "\"]");
            
            TreeNode objGearNode = new TreeNode();
            List<Weapon> lstWeapons = new List<Weapon>();
            List<TreeNode> lstWeaponNodes = new List<TreeNode>();
            Gear objGear = new Gear(CharacterObject);

            objGear.Copy(objSelectedGear, objGearNode, lstWeapons, lstWeaponNodes);

            objGear.Quantity = frmPickNumber.SelectedValue;
            objGear.Equipped = objSelectedGear.Equipped;
            objGear.Location = objSelectedGear.Location;
            objGear.Notes = objSelectedGear.Notes;
            objGearNode.Text = objGear.DisplayName(GlobalOptions.Language);
            objGearNode.ContextMenuStrip = treGear.SelectedNode.ContextMenuStrip;

            // Update the selected item.
            objSelectedGear.Quantity -= frmPickNumber.SelectedValue;
            treGear.SelectedNode.Text = objSelectedGear.DisplayName(GlobalOptions.Language);

            treGear.SelectedNode.Parent.Nodes.Add(objGearNode);
            CharacterObject.Gear.Add(objGear);

            // Create any Weapons that came with this Gear.
            foreach (Weapon objWeapon in lstWeapons)
                CharacterObject.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in lstWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            IsDirty = true;
        }

        private void cmdGearMergeQty_Click(object sender, EventArgs e)
        {
            Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            List<Gear> lstGear = new List<Gear>();

            foreach (Gear objCharacterGear in CharacterObject.Gear)
            {
                bool blnMatch = false;
                // Matches must happen on Name, Category, Rating, and Extra, plus all plugins.
                if (objCharacterGear.Name == objGear.Name && objCharacterGear.Category == objGear.Category && objCharacterGear.Rating == objGear.Rating && objCharacterGear.Extra == objGear.Extra && objCharacterGear.InternalId != objGear.InternalId)
                {
                    blnMatch = true;
                    if (objCharacterGear.Children.Count == objGear.Children.Count)
                    {
                        for (int i = 0; i <= objCharacterGear.Children.Count - 1; i++)
                        {
                            if (objCharacterGear.Children[i].Name != objGear.Children[i].Name || objCharacterGear.Children[i].Extra != objGear.Children[i].Extra || objCharacterGear.Children[i].Rating != objGear.Children[i].Rating)
                            {
                                blnMatch = false;
                                break;
                            }
                        }
                    }
                    else
                        blnMatch = false;
                }

                if (blnMatch)
                    lstGear.Add(objCharacterGear);
            }

            // If there were no matches, don't try to merge anything.
            if (lstGear.Count == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotMergeGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotMergeGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Show the Select Item window.
            frmSelectItem frmPickItem = new frmSelectItem
            {
                Gear = lstGear
            };
            frmPickItem.ShowDialog(this);

            if (frmPickItem.DialogResult == DialogResult.Cancel)
                return;

            Gear objSelectedGear = CharacterObject.Gear.DeepFindById(frmPickItem.SelectedItem);

            decimal decMinimumAmount = 1.0m;
            int intDecimalPlaces = 0;
            if (objSelectedGear.Name.StartsWith("Nuyen"))
            {
                intDecimalPlaces = Math.Max(0, CharacterObject.Options.NuyenFormat.Length - 1 - CharacterObject.Options.NuyenFormat.LastIndexOf('.'));
                // Need a for loop instead of a power system to maintain exact precision
                for (int i = 0; i < intDecimalPlaces; ++i)
                    decMinimumAmount /= 10.0m;
            }
            else if (objSelectedGear.Category == "Currency")
            {
                intDecimalPlaces = 2;
                decMinimumAmount = 0.01m;
            }
            frmSelectNumber frmPickNumber = new frmSelectNumber(intDecimalPlaces)
            {
                Minimum = decMinimumAmount,
                Maximum = objGear.Quantity,
                Description = LanguageManager.GetString("String_MergeGear", GlobalOptions.Language)
            };
            frmPickNumber.ShowDialog(this);

            if (frmPickNumber.DialogResult == DialogResult.Cancel)
                return;

            // Increase the quantity for the selected item.
            objSelectedGear.Quantity += frmPickNumber.SelectedValue;
            // Located the item in the Tree and update its display information.
            foreach (TreeNode objParent in treGear.Nodes)
            {
                foreach (TreeNode objNode in objParent.Nodes)
                {
                    if (objNode.Tag.ToString() == objSelectedGear.InternalId)
                    {
                        objNode.Text = objSelectedGear.DisplayName(GlobalOptions.Language);
                        break;
                    }
                }
            }

            // Reduce the quantity for the selected item.
            objGear.Quantity -= frmPickNumber.SelectedValue;
            // If the quantity has reached 0, delete the item and any Weapons it created.
            if (objGear.Quantity <= 0)
            {
                // Remove the Gear Weapon created by the Gear if applicable.
                if (objGear.WeaponID != Guid.Empty.ToString())
                {
                    List<string> lstNodesToRemoveIds = new List<string>();
                    foreach (Weapon objWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objGear.InternalId))
                    {
                        lstNodesToRemoveIds.Add(objWeapon.InternalId);
                        objWeapon.DeleteWeapon(treWeapons, treVehicles);
                        // We can remove here because GetAllDescendants creates a new IEnumerable, different from these two
                        if (objWeapon.Parent != null)
                            objWeapon.Parent.Children.Remove(objWeapon);
                        else
                            CharacterObject.Weapons.Remove(objWeapon);
                    }
                    foreach (string strNodeId in lstNodesToRemoveIds)
                    {
                        // Remove the Weapons from the TreeView.
                        treWeapons.FindNode(strNodeId)?.Remove();
                    }
                }

                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);

                // Remove the Gear from the character.
                CharacterObject.Gear.Remove(objGear);
                treGear.SelectedNode.Remove();
            }
            else
                treGear.SelectedNode.Text = objGear.DisplayName(GlobalOptions.Language);

            IsDirty = true;
        }

        private void cmdGearMoveToVehicle_Click(object sender, EventArgs e)
        {
            frmSelectItem frmPickItem = new frmSelectItem
            {
                Vehicles = CharacterObject.Vehicles
            };
            frmPickItem.ShowDialog(this);

            if (frmPickItem.DialogResult == DialogResult.Cancel)
                return;

            // Locate the selected Vehicle.
            Vehicle objVehicle = null;
            foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
            {
                if (objCharacterVehicle.InternalId == frmPickItem.SelectedItem)
                {
                    objVehicle = objCharacterVehicle;
                    break;
                }
            }

            Gear objSelectedGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());

            decimal decMinimumAmount = 1.0m;
            int intDecimalPlaces = 0;
            if (objSelectedGear.Name.StartsWith("Nuyen"))
            {
                intDecimalPlaces = Math.Max(0, CharacterObject.Options.NuyenFormat.Length - 1 - CharacterObject.Options.NuyenFormat.LastIndexOf('.'));
                // Need a for loop instead of a power system to maintain exact precision
                for (int i = 0; i < intDecimalPlaces; ++i)
                    decMinimumAmount /= 10.0m;
            }
            else if (objSelectedGear.Category == "Currency")
            {
                intDecimalPlaces = 2;
                decMinimumAmount = 0.01m;
            }

            decimal decMove = 0;
            if (objSelectedGear.Quantity == decMinimumAmount)
                decMove = decMinimumAmount;
            else
            {
                frmSelectNumber frmPickNumber = new frmSelectNumber(intDecimalPlaces)
                {
                    Minimum = decMinimumAmount,
                    Maximum = objSelectedGear.Quantity,
                    Description = LanguageManager.GetString("String_MoveGear", GlobalOptions.Language)
                };
                frmPickNumber.ShowDialog(this);

                if (frmPickNumber.DialogResult == DialogResult.Cancel)
                    return;

                decMove = frmPickNumber.SelectedValue;
            }

            // See if the Vehicle already has a matching piece of Gear.
            bool blnMatch = false;
            Gear objFoundGear = null;
            foreach (Gear objVehicleGear in objVehicle.Gear)
            {
                if (objVehicleGear.Name == objSelectedGear.Name && objVehicleGear.Category == objSelectedGear.Category && objVehicleGear.Rating == objSelectedGear.Rating && objVehicleGear.Extra == objSelectedGear.Extra && objVehicleGear.GearName == objSelectedGear.GearName && objVehicleGear.Notes == objSelectedGear.Notes)
                {
                    blnMatch = true;
                    objFoundGear = objVehicleGear;
                    if (objVehicleGear.Children.Count == objSelectedGear.Children.Count)
                    {
                        for (int i = 0; i <= objVehicleGear.Children.Count - 1; i++)
                        {
                            if (objVehicleGear.Children[i].Name != objSelectedGear.Children[i].Name || objVehicleGear.Children[i].Extra != objSelectedGear.Children[i].Extra || objVehicleGear.Children[i].Rating != objSelectedGear.Children[i].Rating)
                            {
                                blnMatch = false;
                                break;
                            }
                        }
                    }
                    else
                        blnMatch = false;
                }
            }

            if (!blnMatch)
            {
                // Create a new piece of Gear.
                TreeNode objGearNode = new TreeNode();
                List<Weapon> lstWeapons = new List<Weapon>();
                List<TreeNode> lstWeaponNodes = new List<TreeNode>();
                Gear objGear = new Gear(CharacterObject);

                objGear.Copy(objSelectedGear, objGearNode, lstWeapons, lstWeaponNodes);

                objGear.Parent = null;
                objGear.Quantity = decMove;
                objGear.Location = string.Empty;
                objGearNode.Text = objGear.DisplayName(GlobalOptions.Language);
                objGearNode.ContextMenuStrip = cmsVehicleGear;

                // Locate the Node for the selected Vehicle.
                foreach (TreeNode nodNode in treVehicles.Nodes[0].Nodes)
                {
                    if (nodNode.Tag.ToString() == objVehicle.InternalId)
                    {
                        nodNode.Nodes.Add(objGearNode);
                        break;
                    }
                }
                
                objVehicle.Gear.Add(objGear);
            }
            else
            {
                // Everything matches up, so just increase the quantity.
                objFoundGear.Quantity += decMove;
                foreach (TreeNode nodVehicle in treVehicles.Nodes[0].Nodes)
                {
                    if (nodVehicle.Tag.ToString() == objVehicle.InternalId)
                    {
                        foreach (TreeNode nodGear in nodVehicle.Nodes)
                        {
                            if (nodGear.Tag.ToString() == objFoundGear.InternalId)
                                nodGear.Text = objFoundGear.DisplayName(GlobalOptions.Language);
                        }
                    }
                }
            }

            // Update the selected item.
            objSelectedGear.Quantity -= decMove;
            if (objSelectedGear.Quantity <= 0)
            {
                if (objSelectedGear.Parent != null)
                {
                    objSelectedGear.Parent.Children.Remove(objSelectedGear);
                    objSelectedGear.Parent.RefreshMatrixAttributeArray();
                }
                else
                    CharacterObject.Gear.Remove(objSelectedGear);
                objSelectedGear.DeleteGear(treWeapons, treVehicles);
                treGear.SelectedNode.Remove();
                IsCharacterUpdateRequested = true;
            }
            else
            {
                treGear.SelectedNode.Text = objSelectedGear.DisplayName(GlobalOptions.Language);
            }

            IsDirty = true;
        }

        private void cmdVehicleMoveToInventory_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            bool blnFound = false;
            Weapon objWeapon = null;
            Vehicle objVehicle = null;
            VehicleMod objMod = null;

            foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
            {
                foreach (Weapon objVehicleWeapon in objCharacterVehicle.Weapons)
                {
                    if (objVehicleWeapon.InternalId == treVehicles.SelectedNode.Tag.ToString())
                    {
                        objWeapon = objVehicleWeapon;
                        objVehicle = objCharacterVehicle;
                        blnFound = true;
                        break;
                    }
                }
                foreach (VehicleMod objVehicleMod in objCharacterVehicle.Mods)
                {
                    foreach (Weapon objVehicleWeapon in objVehicleMod.Weapons)
                    {
                        if (objVehicleWeapon.InternalId == treVehicles.SelectedNode.Tag.ToString())
                        {
                            objWeapon = objVehicleWeapon;
                            objVehicle = objCharacterVehicle;
                            objMod = objVehicleMod;
                            blnFound = true;
                            break;
                        }
                    }
                }
            }

            if (blnFound)
            {
                // Move the Weapons from the Vehicle Mod (or Vehicle) to the character.
                if (objMod != null)
                    objMod.Weapons.Remove(objWeapon);
                else
                    objVehicle.Weapons.Remove(objWeapon);

                CharacterObject.Weapons.Add(objWeapon);

                TreeNode objNode = treVehicles.SelectedNode;

                treVehicles.SelectedNode.Remove();
                treWeapons.Nodes[0].Nodes.Add(objNode);
                objWeapon.ParentVehicle = null;
                objNode.Expand();
            }
            else
            {
                // Locate the selected Gear.
                Gear objSelectedGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

                decimal decMinimumAmount = 1.0m;
                int intDecimalPlaces = 0;
                if (objSelectedGear.Name.StartsWith("Nuyen"))
                {
                    intDecimalPlaces = Math.Max(0, CharacterObject.Options.NuyenFormat.Length - 1 - CharacterObject.Options.NuyenFormat.LastIndexOf('.'));
                    // Need a for loop instead of a power system to maintain exact precision
                    for (int i = 0; i < intDecimalPlaces; ++i)
                        decMinimumAmount /= 10.0m;
                }
                else if (objSelectedGear.Category == "Currency")
                {
                    intDecimalPlaces = 2;
                    decMinimumAmount = 0.01m;
                }

                decimal decMove = 0;
                if (objSelectedGear.Quantity == decMinimumAmount)
                    decMove = decMinimumAmount;
                else
                {
                    frmSelectNumber frmPickNumber = new frmSelectNumber(intDecimalPlaces)
                    {
                        Minimum = decMinimumAmount,
                        Maximum = objSelectedGear.Quantity,
                        Description = LanguageManager.GetString("String_MoveGear", GlobalOptions.Language)
                    };
                    frmPickNumber.ShowDialog(this);

                    if (frmPickNumber.DialogResult == DialogResult.Cancel)
                        return;

                    decMove = frmPickNumber.SelectedValue;
                }

                // See if the character already has a matching piece of Gear.
                Gear objFoundGear = CharacterObject.Gear.FirstOrDefault(x => objSelectedGear.IsIdenticalToOtherGear(x));

                if (objFoundGear == null)
                {
                    // Create a new piece of Gear.
                    TreeNode objGearNode = new TreeNode();
                    List<Weapon> lstWeapons = new List<Weapon>();
                    List<TreeNode> lstWeaponNodes = new List<TreeNode>();
                    Gear objGear = new Gear(CharacterObject);

                    objGear.Copy(objSelectedGear, objGearNode, lstWeapons, lstWeaponNodes);

                    objGear.Parent = null;
                    objGear.Quantity = decMove;
                    objGearNode.Text = objGear.DisplayName(GlobalOptions.Language);
                    objGearNode.ContextMenuStrip = cmsGear;

                    treGear.Nodes[0].Nodes.Add(objGearNode);
                    CharacterObject.Gear.Add(objGear);

                    // Create any Weapons that came with this Gear.
                    foreach (Weapon objGearWeapon in lstWeapons)
                        CharacterObject.Weapons.Add(objGearWeapon);

                    foreach (TreeNode objWeaponNode in lstWeaponNodes)
                    {
                        objWeaponNode.ContextMenuStrip = cmsWeapon;
                        treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                        treWeapons.Nodes[0].Expand();
                    }

                    AddGearImprovements(objGear);
                    IsCharacterUpdateRequested = true;
                }
                else
                {
                    // Everything matches up, so just increase the quantity.
                    objFoundGear.Quantity += decMove;
                    TreeNode nodGear = treGear.FindNode(objFoundGear.InternalId);
                    if (nodGear != null)
                    {
                        nodGear.Text = objFoundGear.DisplayName(GlobalOptions.Language);
                        treGear.SelectedNode = nodGear;
                    }
                }

                // Update the selected item.
                objSelectedGear.Quantity -= decMove;
                if (objSelectedGear.Quantity <= 0)
                {
                    // The quantity has reached 0, so remove it entirely.
                    treVehicles.SelectedNode.Remove();
                    foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
                        objCharacterVehicle.Gear.Remove(objSelectedGear);
                }
                else
                    treVehicles.SelectedNode.Text = objSelectedGear.DisplayName(GlobalOptions.Language);
            }

            IsDirty = true;
        }
        
        private void cmdGearIncreaseQty_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treGear.SelectedNode;
            bool blnAddAgain = false;
            Gear objGear = CharacterObject.Gear.DeepFindById(objSelectedNode.Tag.ToString());
            do
            {
                // Select the root Gear node then open the Select Gear window.
                blnAddAgain = PickGear(treVehicles.Nodes[0], objGear.Category == "Ammunition", objGear, objGear.Name);
                if (blnAddAgain)
                    treGear.SelectedNode = objSelectedNode;
            }
            while (blnAddAgain);
            CharacterObject.PopulateFocusList(treFoci);
        }

        private void cmdVehicleGearReduceQty_Click(object sender, EventArgs e)
        {
            // Locate the currently selected piece of Gear.
            Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out Vehicle objVehicle, out WeaponAccessory objWeaponAccessory, out Cyberware objCyberware);
            Gear objParent = objGear?.Parent;

            if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_ReduceQty", GlobalOptions.Language)))
                return;

            objGear.Quantity -= 1;

            if (objGear.Quantity > 0)
            {
                treVehicles.SelectedNode.Text = objGear.DisplayName(GlobalOptions.Language);
                RefreshSelectedVehicle();
            }
            else
            {
                // Remove the Gear if its quantity has been reduced to 0.
                if (objParent == null)
                {
                    if (objWeaponAccessory != null)
                        objWeaponAccessory.Gear.Remove(objGear);
                    else if (objCyberware != null)
                        objCyberware.Gear.Remove(objGear);
                    else
                        objVehicle.Gear.Remove(objGear);
                    treVehicles.SelectedNode.Remove();
                    objGear.DeleteGear(treWeapons, treVehicles);
                }
                else
                {
                    objParent.Children.Remove(objGear);
                    objParent.RefreshMatrixAttributeArray();
                    treVehicles.SelectedNode.Remove();
                    objGear.DeleteGear(treWeapons, treVehicles);
                }
            }

            IsDirty = true;
        }

        private void cmdAddQuality_Click(object sender, EventArgs e)
        {
            XmlDocument objXmlDocument = XmlManager.Load("qualities.xml");
            bool blnAddAgain = false;

            do
            {
                frmSelectQuality frmPickQuality = new frmSelectQuality(CharacterObject);
                frmPickQuality.ShowDialog(this);

                // Don't do anything else if the form was canceled.
                if (frmPickQuality.DialogResult == DialogResult.Cancel)
                {
                    frmPickQuality.Dispose();
                    break;
                }
                blnAddAgain = frmPickQuality.AddAgain;

                XmlNode objXmlQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + frmPickQuality.SelectedQuality + "\"]");

                TreeNode objNode = new TreeNode();
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                Quality objQuality = new Quality(CharacterObject);

                objQuality.Create(objXmlQuality, CharacterObject, QualitySource.Selected, objNode, objWeapons, objWeaponNodes);
                if (objQuality.InternalId == Guid.Empty.ToString())
                {
                    // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                    frmPickQuality.Dispose();
                    continue;
                }
                objNode.ContextMenuStrip = cmsQuality;
                bool blnHasQualityAlready = CharacterObject.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objQuality.QualityId && objExistingQuality.Extra == objQuality.Extra);

                if (frmPickQuality.FreeCost)
                    objQuality.BP = 0;

                bool blnAddItem = true;
                int intKarmaCost = objQuality.BP * CharacterObjectOptions.KarmaQuality;
                if (!CharacterObject.Options.DontDoubleQualityPurchases && objQuality.DoubleCost)
                    intKarmaCost *= 2;

                // Make sure the character has enough Karma to pay for the Quality.
                if (objQuality.Type == QualityType.Positive)
                {
                    if (intKarmaCost > CharacterObject.Karma)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        blnAddItem = false;
                    }

                    if (blnAddItem && !frmPickQuality.FreeCost && objQuality.ContributeToBP)
                    {
                        if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", objQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", intKarmaCost.ToString())))
                            blnAddItem = false;
                    }

                    if (blnAddItem && objQuality.ContributeToBP)
                    {
                        // Create the Karma expense.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseAddPositiveQuality", GlobalOptions.Language) + " " + objQuality.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Karma -= intKarmaCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateKarma(KarmaExpenseType.AddQuality, objQuality.InternalId);
                        objExpense.Undo = objUndo;
                    }
                }
                else
                {
                    if (MessageBox.Show(LanguageManager.GetString("Message_AddNegativeQuality", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_AddNegativeQuality", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                        blnAddItem = false;

                    if (blnAddItem)
                    {
                        // Create a Karma Expense for the Negative Quality.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(0, LanguageManager.GetString("String_ExpenseAddNegativeQuality", GlobalOptions.Language) + " " + objQuality.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateKarma(KarmaExpenseType.AddQuality, objQuality.InternalId);
                        objExpense.Undo = objUndo;
                    }
                }

                if (blnAddItem)
                {
                    // Add the Quality to the appropriate parent node.
                    if (!blnHasQualityAlready)
                    {
                        if (objQuality.Type == QualityType.Positive)
                        {
                            treQualities.Nodes[0].Nodes.Add(objNode);
                            treQualities.Nodes[0].Expand();
                        }
                        else
                        {
                            treQualities.Nodes[1].Nodes.Add(objNode);
                            treQualities.Nodes[1].Expand();
                        }
                    }
                    CharacterObject.Qualities.Add(objQuality);

                    // Add any created Weapons to the character.
                    foreach (Weapon objWeapon in objWeapons)
                        CharacterObject.Weapons.Add(objWeapon);

                    // Create the Weapon Node if one exists.
                    foreach (TreeNode objWeaponNode in objWeaponNodes)
                    {
                        objWeaponNode.ContextMenuStrip = cmsWeapon;
                        treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                        treWeapons.Nodes[0].Expand();
                    }

                    // Add any additional Qualities that are forced on the character.
                    if (objXmlQuality.SelectNodes("addqualities/addquality").Count > 0)
                    {

                    }
                }
                else
                {
                    // Remove the Improvements created by the Create method.
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                }

                treQualities.SortCustom();
                // If entry already exists in tree, just update the rating
                if (blnHasQualityAlready)
                    RefreshQualityNames(treQualities);

                IsCharacterUpdateRequested = true;

                nudQualityLevel_UpdateValue(null);

                IsDirty = true;
                frmPickQuality.Dispose();
            }
            while (blnAddAgain);

            if (IsCharacterUpdateRequested)
            {
                UpdateMentorSpirits();
                RefreshMartialArts();
                RefreshAIPrograms();
                RefreshLimitModifiers();
                RefreshContacts();
                PopulateCyberware();
                RefreshSelectedCyberware();
                PopulateGearList();
                RefreshCritterPowers(treCritterPowers, cmsCritterPowers);
            }
        }

        private void cmdDeleteQuality_Click(object sender, EventArgs e)
        {
            // Locate the selected Quality.
            if (treQualities.SelectedNode == null || treQualities.SelectedNode.Level <= 0)
                return;

            Quality objSelectedQuality = CharacterObject.Qualities.FindById(treQualities.SelectedNode.Tag.ToString());
            string strInternalIDToRemove = objSelectedQuality.QualityId;
            // Can't do a foreach because we're removing items, this is the next best thing
            bool blnFirstRemoval = true;
            for (int i = CharacterObject.Qualities.Count - 1; i >= 0; --i)
            {
                Quality objLoopQuality = CharacterObject.Qualities.ElementAt(i);
                if (objLoopQuality.QualityId == strInternalIDToRemove)
                {
                    if (!RemoveQuality(objLoopQuality, blnFirstRemoval))
                        break;
                    blnFirstRemoval = false;
                    if (i > CharacterObject.Qualities.Count)
                    {
                        i = CharacterObject.Qualities.Count;
                    }
                }
            }

            // Only refresh if at least one quality was removed
            if (!blnFirstRemoval)
            {
                RefreshQualities(treQualities, cmsQuality, true);
                treQualities.SortCustom();
                nudQualityLevel_UpdateValue(null);
                UpdateMentorSpirits();
                IsCharacterUpdateRequested = true;
                RefreshMartialArts();
                RefreshAIPrograms();
                RefreshLimitModifiers();
                PopulateGearList();
                RefreshContacts();
                IsDirty = true;
            }
        }

        private void cmdSwapQuality_Click(object sender, EventArgs e)
        {
            // Locate the selected Quality.
            if (treQualities.SelectedNode == null || treQualities.SelectedNode.Level == 0)
                return;

            Quality objQuality = CharacterObject.Qualities.FindById(treQualities.SelectedNode.Tag.ToString());
            if (objQuality.InternalId == Guid.Empty.ToString())
                return;

            // Qualities that come from a Metatype cannot be removed.
            if (objQuality.OriginSource == QualitySource.Metatype)
            {
                MessageBox.Show(LanguageManager.GetString("Message_MetavariantQualitySwap", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_MetavariantQualitySwap", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            // Neither can qualities from Improvements
            if (objQuality.OriginSource == QualitySource.Improvement)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ImprovementQuality", GlobalOptions.Language).Replace("{0}", objQuality.GetSourceName(GlobalOptions.Language)), LanguageManager.GetString("MessageTitle_MetavariantQuality", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectQuality frmPickQuality = new frmSelectQuality(CharacterObject)
            {
                ForceCategory = objQuality.Type.ToString(),
                IgnoreQuality = objQuality.Name
            };
            frmPickQuality.ShowDialog(this);

            // Don't do anything else if the form was canceled.
            if (frmPickQuality.DialogResult == DialogResult.Cancel)
                return;

            XmlDocument objXmlDocument = XmlManager.Load("qualities.xml");
            XmlNode objXmlQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + frmPickQuality.SelectedQuality + "\"]");

            TreeNode objNode = new TreeNode();
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            Quality objNewQuality = new Quality(CharacterObject);

            objNewQuality.Create(objXmlQuality, CharacterObject, QualitySource.Selected, objNode, objWeapons, objWeaponNodes);
            objNode.ContextMenuStrip = cmsQuality;

            bool blnAddItem = true;
            int intKarmaCost = (objNewQuality.BP - objQuality.BP) * CharacterObjectOptions.KarmaQuality;
            // Make sure the character has enough Karma to pay for the Quality.
            if (objNewQuality.Type == QualityType.Positive)
            {
                if (!CharacterObjectOptions.DontDoubleQualityPurchases)
                {
                    intKarmaCost *= 2;
                }
                if (intKarmaCost > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    blnAddItem = false;
                }

                if (blnAddItem)
                {
                    if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_QualitySwap", GlobalOptions.Language).Replace("{0}", objQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", objNewQuality.DisplayNameShort(GlobalOptions.Language))))
                        blnAddItem = false;
                }

                if (blnAddItem)
                {
                    // Create the Karma expense.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseSwapPositiveQuality", GlobalOptions.Language).Replace("{0}", objQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", objNewQuality.DisplayNameShort(GlobalOptions.Language)), ExpenseType.Karma, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Karma -= intKarmaCost;
                }
            }
            else
            {
                if (!CharacterObjectOptions.DontDoubleQualityRefunds)
                {
                    intKarmaCost *= 2;
                }
                // This should only happen when a character is trading up to a less-costly Quality.
                if (intKarmaCost > 0)
                {
                    if (intKarmaCost > CharacterObject.Karma)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        blnAddItem = false;
                    }

                    if (blnAddItem)
                    {
                        if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_QualitySwap", GlobalOptions.Language).Replace("{0}", objQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", objNewQuality.DisplayNameShort(GlobalOptions.Language))))
                            blnAddItem = false;
                    }

                    if (blnAddItem)
                    {
                        // Create the Karma expense.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseSwapNegativeQuality", GlobalOptions.Language).Replace("{0}", objQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", objNewQuality.DisplayNameShort(GlobalOptions.Language)), ExpenseType.Karma, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Karma -= intKarmaCost;
                    }
                }
            }

            bool blnHasNewQualityAlready = CharacterObject.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objNewQuality.QualityId && objExistingQuality.Extra == objNewQuality.Extra);
            if (blnAddItem)
            {
                // Add the Quality to the appropriate parent node.
                if (!blnHasNewQualityAlready)
                {
                    if (objNewQuality.Type == QualityType.Positive)
                    {
                        treQualities.Nodes[0].Nodes.Add(objNode);
                        treQualities.Nodes[0].Expand();
                    }
                    else
                    {
                        treQualities.Nodes[1].Nodes.Add(objNode);
                        treQualities.Nodes[1].Expand();
                    }
                }

                // Add any created Weapons to the character.
                foreach (Weapon objWeapon in objWeapons)
                    CharacterObject.Weapons.Add(objWeapon);

                // Create the Weapon Node if one exists.
                foreach (TreeNode objWeaponNode in objWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeapon;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }

                // Remove any Improvements for the old Quality.
                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                CharacterObject.Qualities.Remove(objQuality);
                if (!CharacterObject.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objQuality.QualityId && objExistingQuality.Extra == objQuality.Extra))
                    treQualities.SelectedNode.Remove();

                // Remove any Weapons created by the old Quality if applicable.
                if (objQuality.WeaponID != Guid.Empty.ToString())
                {
                    List<string> lstNodesToRemoveIds = new List<string>();
                    foreach (Weapon objWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objQuality.InternalId))
                    {
                        lstNodesToRemoveIds.Add(objWeapon.InternalId);
                        objWeapon.DeleteWeapon(treWeapons, treVehicles);
                        // We can remove here because GetAllDescendants creates a new IEnumerable, different from these two
                        if (objWeapon.Parent != null)
                            objWeapon.Parent.Children.Remove(objWeapon);
                        else
                            CharacterObject.Weapons.Remove(objWeapon);
                    }
                    foreach (string strNodeId in lstNodesToRemoveIds)
                    {
                        // Remove the Weapons from the TreeView.
                        treWeapons.FindNode(strNodeId)?.Remove();
                    }
                }

                // Add the new Quality to the character.
                CharacterObject.Qualities.Add(objNewQuality);
            }

            // If entry already exists in tree, just update the rating
            if (blnHasNewQualityAlready)
                RefreshQualityNames(treQualities);
            UpdateMentorSpirits();
            IsCharacterUpdateRequested = true;
            RefreshContacts();

            IsDirty = true;
        }

        private bool RemoveQuality(Quality objSelectedQuality, bool blnConfirmDelete = true, bool blnCompleteDelete = true)
        {
            XmlDocument objXmlDocument = XmlManager.Load("qualities.xml");
            XmlNode objXmlDeleteQuality = objXmlDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objSelectedQuality.Name + "\"]");
            bool blnMetatypeQuality = false;

            // Qualities that come from a Metatype cannot be removed.
            if (objSelectedQuality.OriginSource == QualitySource.Metatype)
            {
                MessageBox.Show(LanguageManager.GetString("Message_MetavariantQuality", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_MetavariantQuality", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            else if (objSelectedQuality.OriginSource == QualitySource.Improvement)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ImprovementQuality", GlobalOptions.Language).Replace("{0}", objSelectedQuality.GetSourceName(GlobalOptions.Language)), LanguageManager.GetString("MessageTitle_MetavariantQuality", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return false;
            }
            else if (objSelectedQuality.OriginSource == QualitySource.MetatypeRemovable)
            {
                // Look up the cost of the Quality.
                int intBP = Convert.ToInt32(objXmlDeleteQuality["karma"].InnerText) * CharacterObjectOptions.KarmaQuality;
                if (blnCompleteDelete)
                    intBP *= objSelectedQuality.Levels;
                if (!CharacterObjectOptions.DontDoubleQualityRefunds)
                {
                    intBP *= -2;
                }
                string strBP = intBP.ToString() + " " + LanguageManager.GetString("String_Karma", GlobalOptions.Language);

                if (blnConfirmDelete && !CharacterObject.ConfirmDelete(blnCompleteDelete ?
                                                                        LanguageManager.GetString("Message_DeleteMetatypeQuality", GlobalOptions.Language).Replace("{0}", strBP) :
                                                                        LanguageManager.GetString("Message_LowerMetatypeQualityLevel", GlobalOptions.Language).Replace("{0}", strBP)))
                    return false;

                blnMetatypeQuality = true;
            }

            if (objSelectedQuality.Type == QualityType.Positive)
            {
                if (objXmlDeleteQuality["refundkarmaonremove"] != null)
                {
                    int intKarmaCost = objSelectedQuality.BP * CharacterObjectOptions.KarmaQuality;
                    if (!CharacterObject.Options.DontDoubleQualityPurchases && objSelectedQuality.DoubleCost)
                        intKarmaCost *= 2;

                    ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                    objEntry.Create(intKarmaCost, LanguageManager.GetString("String_ExpenseSwapPositiveQuality", GlobalOptions.Language).Replace("{0}", objSelectedQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", LanguageManager.GetString("String_Karma", GlobalOptions.Language)), ExpenseType.Karma, DateTime.Now, true);
                    CharacterObject.ExpenseEntries.Add(objEntry);
                    CharacterObject.Karma += intKarmaCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateKarma(KarmaExpenseType.RemoveQuality, objSelectedQuality.Name);
                    objUndo.Extra = objSelectedQuality.Extra;
                    objEntry.Undo = objUndo;
                }
                else if (!blnMetatypeQuality)
                {
                    if (blnConfirmDelete && !CharacterObject.ConfirmDelete(blnCompleteDelete ?
                                                                        LanguageManager.GetString("Message_DeletePositiveQualityCareer", GlobalOptions.Language) :
                                                                        LanguageManager.GetString("Message_LowerPositiveQualityLevelCareer", GlobalOptions.Language)))
                        return false;
                }

                if (objSelectedQuality.Name == "One Trick Pony")
                {
                    if (treMartialArts.Nodes[1].Nodes.Count > 0)
                    {
                        foreach (MartialArt objMartialArt in CharacterObject.MartialArts)
                        {
                            if (objMartialArt.Name == "One Trick Pony")
                            {
                                CharacterObject.MartialArts.Remove(objMartialArt);
                                treMartialArts.Nodes[1].Nodes[0].Remove();
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                // Make sure the character has enough Karma to buy off the Quality.
                int intKarmaCost = (objSelectedQuality.BP * CharacterObjectOptions.KarmaQuality);
                if (!CharacterObjectOptions.DontDoubleQualityRefunds)
                {
                    intKarmaCost = intKarmaCost * -2;
                }
                int intTotalKarmaCost = intKarmaCost;
                if (blnCompleteDelete)
                    intTotalKarmaCost *= objSelectedQuality.Levels;
                if (intTotalKarmaCost > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }

                if (!blnMetatypeQuality)
                {
                    if (blnConfirmDelete && !CharacterObject.ConfirmKarmaExpense((blnCompleteDelete ? LanguageManager.GetString("Message_ConfirmKarmaExpenseRemove", GlobalOptions.Language) :
                        LanguageManager.GetString("Message_ConfirmKarmaExpenseLowerLevel", GlobalOptions.Language)).Replace("{0}", objSelectedQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", intTotalKarmaCost.ToString())))
                        return false;
                }

                // Create the Karma expense.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseRemoveNegativeQuality", GlobalOptions.Language) + " " + objSelectedQuality.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaCost;

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.RemoveQuality, objSelectedQuality.Name);
                objUndo.Extra = objSelectedQuality.Extra;
                objExpense.Undo = objUndo;
            }

            // Remove the Improvements that were created by the Quality.
            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objSelectedQuality.InternalId);

            switch (objSelectedQuality.Name)
            {
                case "Changeling (Class I SURGE)":
                case "Changeling (Class II SURGE)":
                case "Changeling (Class III SURGE)":
                    CharacterObject.MetageneticLimit = 0;
                    break;
                default:
                    break;
            }

            // Remove any Critter Powers that are gained through the Quality (Infected).
            if (objXmlDeleteQuality.SelectNodes("powers/power").Count > 0)
            {
                objXmlDocument = XmlManager.Load("critterpowers.xml");
                foreach (XmlNode objXmlPower in objXmlDeleteQuality.SelectNodes("optionalpowers/optionalpower"))
                {
                    string strExtra = string.Empty;
                    if (objXmlPower.Attributes["select"] != null)
                        strExtra = objXmlPower.Attributes["select"].InnerText;

                    foreach (CritterPower objPower in CharacterObject.CritterPowers)
                    {
                        if (objPower.Name == objXmlPower.InnerText && objPower.Extra == strExtra)
                        {
                            // Remove any Improvements created by the Critter Power.
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.CritterPower, objPower.InternalId);

                            // Remove the Critter Power from the character.
                            CharacterObject.CritterPowers.Remove(objPower);

                            // Remove the Critter Power from the Tree.
                            foreach (TreeNode objNode in treCritterPowers.Nodes[0].Nodes)
                            {
                                if (objNode.Tag.ToString() == objPower.InternalId)
                                {
                                    objNode.Remove();
                                    break;
                                }
                            }
                            foreach (TreeNode objNode in treCritterPowers.Nodes[1].Nodes)
                            {
                                if (objNode.Tag.ToString() == objPower.InternalId)
                                {
                                    objNode.Remove();
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
            }

            // Remove any Weapons created by the Quality if applicable.
            if (objSelectedQuality.WeaponID != Guid.Empty.ToString())
            {
                List<string> lstNodesToRemoveIds = new List<string>();
                foreach (Weapon objWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objSelectedQuality.InternalId))
                {
                    lstNodesToRemoveIds.Add(objWeapon.InternalId);
                    objWeapon.DeleteWeapon(treWeapons, treVehicles);
                    // We can remove here because GetAllDescendants creates a new IEnumerable, different from these two
                    if (objWeapon.Parent != null)
                        objWeapon.Parent.Children.Remove(objWeapon);
                    else
                        CharacterObject.Weapons.Remove(objWeapon);
                }
                foreach (string strNodeId in lstNodesToRemoveIds)
                {
                    // Remove the Weapons from the TreeView.
                    treWeapons.FindNode(strNodeId)?.Remove();
                }
            }

            // Fix for legacy characters with old addqualities improvements.
            if (objXmlDeleteQuality?["addqualities"] != null)
            {
                RemoveAddedQualities(objXmlDeleteQuality.SelectNodes("addqualities/addquality"), treQualities);
            }

            CharacterObject.Qualities.Remove(objSelectedQuality);
            return true;
        }

        private void nudQualityLevel_UpdateValue(Quality objSelectedQuality)
        {
            nudQualityLevel.Enabled = false;
            if (objSelectedQuality == null || objSelectedQuality.OriginSource == QualitySource.Improvement || objSelectedQuality.OriginSource == QualitySource.Metatype)
            {
                nudQualityLevel.Value = 1;
                return;
            }
            XmlNode objQualityNode = objSelectedQuality.GetNode();
            string strLimitString = objQualityNode?["limit"]?.InnerText;
            if (!string.IsNullOrWhiteSpace(strLimitString) && objQualityNode?["nolevels"] == null && int.TryParse(strLimitString, out int intMaxRating))
            {
                nudQualityLevel.Maximum = intMaxRating;
                nudQualityLevel.Value = objSelectedQuality.Levels;
                nudQualityLevel.Enabled = true;
            }
            else
            {
                nudQualityLevel.Value = 1;
            }
        }

        private void nudQualityLevel_ValueChanged(object sender, EventArgs e)
        {
            if (nudQualityLevel.Enabled && treQualities.SelectedNode != null && treQualities.SelectedNode.Level > 0)
            {
                // Locate the selected Quality.
                Quality objSelectedQuality = CharacterObject.Qualities.FindById(treQualities.SelectedNode.Tag.ToString());
                int intCurrentLevels = objSelectedQuality.Levels;

                bool blnRequireUpdate = false;
                bool blnRequireTreQualitiesRebuild = false;
                // Adding a new level
                for (; nudQualityLevel.Value > intCurrentLevels; ++intCurrentLevels)
                {
                    XmlNode objXmlSelectedQuality = objSelectedQuality.GetNode();
                    if (!SelectionShared.RequirementsMet(objXmlSelectedQuality, true, CharacterObject))
                    {
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }

                    TreeNode objNode = new TreeNode();
                    List<Weapon> objWeapons = new List<Weapon>();
                    List<TreeNode> objWeaponNodes = new List<TreeNode>();
                    Quality objQuality = new Quality(CharacterObject);

                    objQuality.Create(objXmlSelectedQuality, CharacterObject, QualitySource.Selected, objNode, objWeapons, objWeaponNodes, objSelectedQuality.Extra);
                    if (objQuality.InternalId == Guid.Empty.ToString())
                    {
                        // If the Quality could not be added, remove the Improvements that were added during the Quality Creation process.
                        ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }
                    objNode.ContextMenuStrip = cmsQuality;

                    objQuality.BP = objSelectedQuality.BP;
                    objQuality.ContributeToLimit = objSelectedQuality.ContributeToLimit;

                    bool blnAddItem = false;
                    int intKarmaCost = objQuality.BP * CharacterObjectOptions.KarmaQuality;
                    if (!CharacterObject.Options.DontDoubleQualityPurchases && objQuality.DoubleCost)
                        intKarmaCost *= 2;

                    // Make sure the character has enough Karma to pay for the Quality.
                    if (objQuality.Type == QualityType.Positive)
                    {
                        if (intKarmaCost > CharacterObject.Karma)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else if (objQuality.ContributeToBP && (objQuality.BP == 0 || CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", objQuality.DisplayNameShort(GlobalOptions.Language)).Replace("{1}", intKarmaCost.ToString()))))
                        {
                            // Create the Karma expense.
                            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                            objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseAddPositiveQuality", GlobalOptions.Language) + " " + objQuality.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                            CharacterObject.ExpenseEntries.Add(objExpense);
                            CharacterObject.Karma -= intKarmaCost;

                            ExpenseUndo objUndo = new ExpenseUndo();
                            objUndo.CreateKarma(KarmaExpenseType.AddQuality, objQuality.InternalId);
                            objExpense.Undo = objUndo;
                            blnAddItem = true;
                        }
                    }
                    else
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_AddNegativeQuality", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_AddNegativeQuality", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            // Create a Karma Expense for the Negative Quality.
                            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                            objExpense.Create(0, LanguageManager.GetString("String_ExpenseAddNegativeQuality", GlobalOptions.Language) + " " + objQuality.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                            CharacterObject.ExpenseEntries.Add(objExpense);

                            ExpenseUndo objUndo = new ExpenseUndo();
                            objUndo.CreateKarma(KarmaExpenseType.AddQuality, objQuality.InternalId);
                            objExpense.Undo = objUndo;
                            blnAddItem = true;
                        }
                    }

                    if (blnAddItem)
                    {
                        blnRequireUpdate = true;
                        // Add the Quality to the appropriate parent node.
                        CharacterObject.Qualities.Add(objQuality);

                        // Add any created Weapons to the character.
                        foreach (Weapon objWeapon in objWeapons)
                        {
                            CharacterObject.Weapons.Add(objWeapon);
                        }

                        // Create the Weapon Node if one exists.
                        foreach (TreeNode objWeaponNode in objWeaponNodes)
                        {
                            objWeaponNode.ContextMenuStrip = cmsWeapon;
                            treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                            treWeapons.Nodes[0].Expand();
                        }
                    }
                    else
                    {
                        // Remove the Improvements created by the Create method.
                        ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }
                }
                // Removing a level
                for (; nudQualityLevel.Value < intCurrentLevels; --intCurrentLevels)
                {
                    Quality objInvisibleQuality = CharacterObject.Qualities.FirstOrDefault(x => x.QualityId == objSelectedQuality.QualityId && x.Extra == objSelectedQuality.Extra && x.SourceName == objSelectedQuality.SourceName && x.InternalId != objSelectedQuality.InternalId);
                    if (objInvisibleQuality != null && RemoveQuality(objInvisibleQuality, false, false))
                    {
                        blnRequireUpdate = true;
                    }
                    else if (RemoveQuality(objSelectedQuality, false, false))
                    {
                        blnRequireUpdate = true;
                        blnRequireTreQualitiesRebuild = true;
                        break;
                    }
                    else
                    {
                        nudQualityLevel_UpdateValue(objSelectedQuality);
                        break;
                    }
                }

                if (blnRequireUpdate)
                {
                    if (blnRequireTreQualitiesRebuild)
                        RefreshQualities(treQualities, cmsQuality, true);
                    else
                        RefreshQualityNames(treQualities);
                    UpdateMentorSpirits();
                    IsCharacterUpdateRequested = true;
                    RefreshMartialArts();
                    RefreshAIPrograms();
                    RefreshLimitModifiers();
                    PopulateGearList();
                    RefreshCritterPowers(treCritterPowers, cmsCritterPowers);
                    RefreshContacts();
                    RefreshSelectedCyberware();
                    IsDirty = true;
                }
            }
        }

        private void cmdAddLocation_Click(object sender, EventArgs e)
        {
            // Add a new location to the Gear Tree.
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            CharacterObject.GearLocations.Add(strLocation);

            TreeNode objLocation = new TreeNode
            {
                Tag = strLocation,
                Text = strLocation,
                ContextMenuStrip = cmsGearLocation
            };
            treGear.Nodes.Add(objLocation);

            IsDirty = true;
        }

        private void cmdAddWeaponLocation_Click(object sender, EventArgs e)
        {
            // Add a new location to the Gear Tree.
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            CharacterObject.WeaponLocations.Add(strLocation);

            TreeNode objLocation = new TreeNode
            {
                Tag = strLocation,
                Text = strLocation,
                ContextMenuStrip = cmsWeaponLocation
            };
            treWeapons.Nodes.Add(objLocation);

            IsDirty = true;
        }

        private void cmdAddWeek_Click(object sender, EventArgs e)
        {
            CalendarWeek objWeek = new CalendarWeek();
            if (CharacterObject.Calendar != null && CharacterObject.Calendar.LastOrDefault() != null)
            {
                objWeek.Year = CharacterObject.Calendar.Last().Year;
                objWeek.Week = CharacterObject.Calendar.Last().Week;
                objWeek.Week++;
                if (objWeek.Week > 52)
                {
                    objWeek.Week = 1;
                    objWeek.Year++;
                }
            }
            else
            {
                objWeek = new CalendarWeek();
                frmSelectCalendarStart frmPickStart = new frmSelectCalendarStart();
                frmPickStart.ShowDialog(this);

                if (frmPickStart.DialogResult == DialogResult.Cancel)
                    return;

                objWeek.Year = frmPickStart.SelectedYear;
                objWeek.Week = frmPickStart.SelectedWeek;
            }

            CharacterObject.Calendar.Add(objWeek);

            PopulateCalendar();

            IsDirty = true;
        }


        private void cmdDeleteWeek_Click(object sender, EventArgs e)
        {
            ListViewItem objItem = null;
            if (lstCalendar != null && lstCalendar.SelectedItems.Count > 0)
            {
                objItem = lstCalendar.SelectedItems[0];
            }
            else
            {
                return;
            }

            CalendarWeek objWeek = new CalendarWeek();

            // Find the selected Calendar Week.
            foreach (CalendarWeek objCharacterWeek in CharacterObject.Calendar)
            {
                if (objCharacterWeek.InternalId == objItem.SubItems[2].Text)
                {
                    objWeek = objCharacterWeek;
                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteCalendarWeek", GlobalOptions.Language)))
                        return;
                    CharacterObject.Calendar.Remove(objWeek);
                    IsDirty = true;
                    PopulateCalendar();
                    break;
                }
            }
        }

        private void cmdEditWeek_Click(object sender, EventArgs e)
        {
            ListViewItem objItem = null;
            if (lstCalendar != null && lstCalendar.SelectedItems.Count > 0)
            {
                objItem = lstCalendar.SelectedItems[0];
            }
            else
            {
                return;
            }

            CalendarWeek objWeek = new CalendarWeek();

            // Find the selected Calendar Week.
            foreach (CalendarWeek objCharacterWeek in CharacterObject.Calendar)
            {
                if (objCharacterWeek.InternalId == objItem.SubItems[2].Text)
                {
                    objWeek = objCharacterWeek;
                    break;
                }
            }

            string strOldValue = objWeek.Notes;
            frmNotes frmItemNotes = new frmNotes
            {
                Notes = strOldValue
            };
            frmItemNotes.ShowDialog(this);

            if (frmItemNotes.DialogResult == DialogResult.OK)
            {
                objWeek.Notes = frmItemNotes.Notes;
                if (objWeek.Notes != strOldValue)
                {
                    IsDirty = true;
                    PopulateCalendar();
                }
            }
        }

        private void cmdChangeStartWeek_Click(object sender, EventArgs e)
        {
            // Find the first date.
            CalendarWeek objStart;
            if (CharacterObject.Calendar != null && CharacterObject.Calendar.FirstOrDefault() != null)
            {
                 objStart = CharacterObject.Calendar.First();
            }
            else
            {
                return;
            }

            frmSelectCalendarStart frmPickStart = new frmSelectCalendarStart(objStart);
            frmPickStart.ShowDialog(this);

            if (frmPickStart.DialogResult == DialogResult.Cancel)
                return;

            // Determine the difference between the starting value and selected values for year and week.
            int intYear = frmPickStart.SelectedYear;
            int intWeek = frmPickStart.SelectedWeek;
            int intYearDiff = intYear - objStart.Year;
            int intWeekDiff = intWeek - objStart.Week;

            // Update each of the CalendarWeek entries for the character.
            foreach (CalendarWeek objWeek in CharacterObject.Calendar)
            {
                objWeek.Week += intWeekDiff;
                objWeek.Year += intYearDiff;

                // If the date range goes outside of 52 weeks, increase or decrease the year as necessary.
                if (objWeek.Week < 1)
                {
                    objWeek.Year--;
                    objWeek.Week += 52;
                }
                if (objWeek.Week > 52)
                {
                    objWeek.Year++;
                    objWeek.Week -= 52;
                }
            }

            IsDirty = true;
            PopulateCalendar();
        }

        private void cmdAddImprovement_Click(object sender, EventArgs e)
        {
            frmCreateImprovement frmPickImprovement = new frmCreateImprovement(CharacterObject);
            frmPickImprovement.ShowDialog(this);
            
            if (frmPickImprovement.DialogResult == DialogResult.Cancel)
                return;

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdCreateStackedFocus_Click(object sender, EventArgs e)
        {
            int intFree = 0;
            List<Gear> lstGear = new List<Gear>();
            List<Gear> lstStack = new List<Gear>();

            // Run through all of the Foci the character has and count the un-Bonded ones.
            foreach (Gear objGear in CharacterObject.Gear)
            {
                if (objGear.Category == "Foci" || objGear.Category == "Metamagic Foci")
                {
                    if (!objGear.Bonded)
                    {
                        intFree++;
                        lstGear.Add(objGear);
                    }
                }
            }

            // If the character does not have at least 2 un-Bonded Foci, display an error and leave.
            if (intFree < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotStackFoci", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotStackFoci", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectItem frmPickItem = new frmSelectItem();

            // Let the character select the Foci they'd like to stack, stopping when they either click Cancel or there are no more items left in the list.
            do
            {
                frmPickItem.Gear = lstGear;
                frmPickItem.AllowAutoSelect = false;
                frmPickItem.Description = LanguageManager.GetString("String_SelectItemFocus", GlobalOptions.Language);
                frmPickItem.ShowDialog(this);

                if (frmPickItem.DialogResult == DialogResult.OK)
                {
                    // Move the item from the Gear list to the Stack list.
                    foreach (Gear objGear in lstGear)
                    {
                        if (objGear.InternalId == frmPickItem.SelectedItem)
                        {
                            objGear.Bonded = true;
                            lstStack.Add(objGear);
                            lstGear.Remove(objGear);
                            break;
                        }
                    }
                }
            } while (lstGear.Count > 0 && frmPickItem.DialogResult != DialogResult.Cancel);

            // Make sure at least 2 Foci were selected.
            if (lstStack.Count < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_StackedFocusMinimum", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotStackFoci", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Make sure the combined Force of the Foci do not exceed 6.
            if (!CharacterObjectOptions.AllowHigherStackedFoci)
            {
                int intCombined = 0;
                foreach (Gear objGear in lstStack)
                    intCombined += objGear.Rating;
                if (intCombined > 6)
                {
                    foreach (Gear objGear in lstStack)
                        objGear.Bonded = false;
                    MessageBox.Show(LanguageManager.GetString("Message_StackedFocusForce", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotStackFoci", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            // Create the Stacked Focus.
            StackedFocus objStack = new StackedFocus(CharacterObject);
            foreach (Gear objGear in lstStack)
                objStack.Gear.Add(objGear);
            CharacterObject.StackedFoci.Add(objStack);

            // Remove the Gear from the character and replace it with a Stacked Focus item.
            decimal decCost = 0.0m;
            foreach (Gear objGear in lstStack)
            {
                decCost += objGear.TotalCost;
                CharacterObject.Gear.Remove(objGear);

                // Remove the TreeNode from Gear.
                foreach (TreeNode nodRoot in treGear.Nodes)
                {
                    foreach (TreeNode nodItem in nodRoot.Nodes)
                    {
                        if (nodItem.Tag.ToString() == objGear.InternalId)
                        {
                            nodRoot.Nodes.Remove(nodItem);
                            break;
                        }
                    }
                }
            }

            Gear objStackItem = new Gear(CharacterObject)
            {
                Category = "Stacked Focus",
                Name = "Stacked Focus: " + objStack.Name(GlobalOptions.Language),
                MinRating = 0,
                MaxRating = 0,
                Source = "SR5",
                Page = "1",
                Cost = decCost.ToString(GlobalOptions.CultureInfo),
                Avail = "0"
            };

            TreeNode nodStackNode = new TreeNode
            {
                Text = objStackItem.DisplayNameShort(GlobalOptions.Language),
                Tag = objStackItem.InternalId
            };

            treGear.Nodes[0].Nodes.Add(nodStackNode);

            CharacterObject.Gear.Add(objStackItem);

            objStack.GearId = objStackItem.InternalId;

            IsDirty = true;
            CharacterObject.PopulateFocusList(treFoci);
            IsCharacterUpdateRequested = true;
        }

        private void cmdBurnStreetCred_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(LanguageManager.GetString("Message_BurnStreetCred", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_BurnStreetCred", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                return;

            CharacterObject.BurntStreetCred += 2;

            IsDirty = true;
            UpdateReputation();
        }

        private void cmdEditImprovement_Click(object sender, EventArgs e)
        {
            treImprovements_DoubleClick(sender, e);
        }

        private void cmdDeleteImprovement_Click(object sender, EventArgs e)
        {
            if (treImprovements.SelectedNode != null)
            {
                if (treImprovements.SelectedNode.Level == 0)
                {
                    if (treImprovements.SelectedNode.Text == LanguageManager.GetString("Node_SelectedImprovements", GlobalOptions.Language))
                        return;

                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteImprovementGroup", GlobalOptions.Language)))
                        return;

                    // Move all of the child nodes in the current parent to the Selected Improvements parent node.
                    foreach (TreeNode objNode in treImprovements.SelectedNode.Nodes)
                    {
                        Improvement objImprovement = null;
                        foreach (Improvement objCharacterImprovement in CharacterObject.Improvements)
                        {
                            if (objCharacterImprovement.CustomGroup == treImprovements.SelectedNode.Text)
                            {
                                objImprovement = objCharacterImprovement;
                                break;
                            }
                        }

                        // Change the Location for the Armor.
                        objImprovement.CustomGroup = string.Empty;

                        TreeNode nodNewNode = new TreeNode
                        {
                            Text = objNode.Text,
                            Tag = objNode.Tag
                        };

                        treImprovements.Nodes[0].Nodes.Add(nodNewNode);
                        treImprovements.Nodes[0].Expand();
                    }

                    // Remove the Group from the character, then remove the selected node.
                    CharacterObject.ImprovementGroups.Remove(treImprovements.SelectedNode.Text);
                    treImprovements.SelectedNode.Remove();
                    return;
                }
                if (treImprovements.SelectedNode.Level > 0)
                {
                    Improvement objImprovement = null;
                    foreach (Improvement objCharacterImprovement in CharacterObject.Improvements)
                    {
                        if (objCharacterImprovement.SourceName == treImprovements.SelectedNode.Tag.ToString())
                        {
                            objImprovement = objCharacterImprovement;
                            break;
                        }
                    }

                    if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteImprovement", GlobalOptions.Language)))
                        return;

                    // Remove the Improvement from the character.
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Custom, objImprovement.SourceName);
                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }

        private void cmdAddArmorBundle_Click(object sender, EventArgs e)
        {
            // Add a new location to the Armor Tree.
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            CharacterObject.ArmorLocations.Add(strLocation);

            TreeNode objLocation = new TreeNode
            {
                Tag = strLocation,
                Text = strLocation,
                ContextMenuStrip = cmsArmorLocation
            };
            treArmor.Nodes.Add(objLocation);

            IsDirty = true;
        }

        private void cmdArmorEquipAll_Click(object sender, EventArgs e)
        {
            // Equip all of the Armor in the Armor Bundle.
            foreach (Armor objArmor in CharacterObject.Armor)
            {
                if (objArmor.Location == treArmor.SelectedNode.Tag.ToString() || (treArmor.SelectedNode == treArmor.Nodes[0] && string.IsNullOrEmpty(objArmor.Location)))
                {
                    objArmor.Equipped = true;
                    // Add the Armor's Improevments to the character.
                    if (objArmor.Bonus != null)
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.Bonus, false, 1, objArmor.DisplayNameShort(GlobalOptions.Language));
                    if (objArmor.WirelessOn && objArmor.WirelessBonus != null)
                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.WirelessBonus, false, 1, objArmor.DisplayNameShort(GlobalOptions.Language));
                    // Add the Improvements from any Armor Mods in the Armor.
                    foreach (ArmorMod objMod in objArmor.ArmorMods)
                    {
                        if (objMod.Equipped)
                        {
                            if (objMod.Bonus != null)
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort(GlobalOptions.Language));
                            if (objMod.WirelessOn && objMod.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.WirelessBonus, false, objMod.Rating, objMod.DisplayNameShort(GlobalOptions.Language));
                            // Add the Improvements from any Gear in the Armor.
                            foreach (Gear objGear in objMod.Gear)
                            {
                                if (objGear.Equipped)
                                {
                                    if (objGear.Bonus != null)
                                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                                    if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                                }
                            }
                        }
                    }
                    // Add the Improvements from any Gear in the Armor.
                    foreach (Gear objGear in objArmor.Gear)
                    {
                        if (objGear.Equipped)
                        {
                            if (objGear.Bonus != null)
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                            if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                        }
                    }
                }
            }
            RefreshSelectedArmor();

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        private void cmdArmorUnEquipAll_Click(object sender, EventArgs e)
        {
            // Un-equip all of the Armor in the Armor Bundle.
            foreach (Armor objArmor in CharacterObject.Armor)
            {
                if (objArmor.Location == treArmor.SelectedNode.Tag.ToString() || (treArmor.SelectedNode == treArmor.Nodes[0] && string.IsNullOrEmpty(objArmor.Location)))
                {
                    objArmor.Equipped = false;
                    // Remove any Improvements the Armor created.
                    if (objArmor.Bonus != null || (objArmor.WirelessOn && objArmor.WirelessBonus != null))
                        ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId);
                    // Remove any Improvements from any Armor Mods in the Armor.
                    foreach (ArmorMod objMod in objArmor.ArmorMods)
                    {
                        if (objMod.Bonus != null || (objMod.WirelessOn && objMod.WirelessBonus != null))
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                        // Remove any Improvements from any Gear in the Armor.
                        foreach (Gear objGear in objMod.Gear)
                        {
                            if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);
                        }
                    }
                    // Remove any Improvements from any Gear in the Armor.
                    foreach (Gear objGear in objArmor.Gear)
                    {
                        if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);
                    }
                }
            }
            RefreshSelectedArmor();

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        private void cmdImprovementsEnableAll_Click(object sender, EventArgs e)
        {
            // Enable all of the Improvements in the Improvement Group.
            if (treImprovements.SelectedNode != null && treImprovements.Nodes.Count > 0)
            {
                bool blnSelectedTop = treImprovements.SelectedNode == treImprovements.Nodes[0];
                List<Improvement> lstImprovementsEnabled = new List<Improvement>();
                foreach (Improvement objImprovement in CharacterObject.Improvements)
                {
                    if (objImprovement.CustomGroup == treImprovements.SelectedNode.Tag.ToString() || (blnSelectedTop && string.IsNullOrEmpty(objImprovement.CustomGroup)))
                    {
                        objImprovement.Enabled = true;
                        lstImprovementsEnabled.Add(objImprovement);
                    }
                }
                if (lstImprovementsEnabled.Count > 0)
                {
                    CharacterObject.ImprovementHook(lstImprovementsEnabled);

                    IsDirty = true;
                    IsCharacterUpdateRequested = true;
                }
            }
        }

        private void cmdImprovementsDisableAll_Click(object sender, EventArgs e)
        {
            // Disable all of the Improvements in the Improvement Group.
            if (treImprovements.SelectedNode != null && treImprovements.Nodes.Count > 0)
            {
                bool blnSelectedTop = treImprovements.SelectedNode == treImprovements.Nodes[0];
                List<Improvement> lstImprovementsDisabled = new List<Improvement>();
                foreach (Improvement objImprovement in CharacterObject.Improvements)
                {
                    if (objImprovement.CustomGroup == treImprovements.SelectedNode.Tag.ToString() || (blnSelectedTop && string.IsNullOrEmpty(objImprovement.CustomGroup)))
                    {
                        objImprovement.Enabled = false;
                        lstImprovementsDisabled.Add(objImprovement);
                    }
                }
                if (lstImprovementsDisabled.Count > 0)
                {
                    CharacterObject.ImprovementHook(lstImprovementsDisabled);

                    IsDirty = true;
                    IsCharacterUpdateRequested = true;
                }
            }
        }

        private void cmdRollSpell_Click(object sender, EventArgs e)
        {
            int.TryParse(lblSpellDicePool.Text, out int intDice);
            DiceRollerOpenedInt(CharacterObject, intDice);
        }

        private void cmdRollDrain_Click(object sender, EventArgs e)
        {
            int.TryParse(lblDrainAttributesValue.Text, out int intDice);
            DiceRollerOpenedInt(CharacterObject, intDice);
        }

        private void cmdRollFading_Click(object sender, EventArgs e)
        {
            int.TryParse(lblFadingAttributesValue.Text, out int intDice);
            DiceRollerOpenedInt(CharacterObject, intDice);
        }

        private void cmdRollWeapon_Click(object sender, EventArgs e)
        {
            int.TryParse(lblWeaponDicePool.Text, out int intDice);
            DiceRollerOpenedInt(CharacterObject, intDice);
        }

        private void cmdRollVehicleWeapon_Click(object sender, EventArgs e)
        {
            int.TryParse(lblVehicleWeaponDicePool.Text, out int intDice);
            DiceRollerOpenedInt(CharacterObject, intDice);
        }

        private void cmdAddVehicleLocation_Click(object sender, EventArgs e)
        {
            // Make sure a Vehicle is selected.
            Vehicle objVehicle = null;
            if (treVehicles.SelectedNode != null)
            {
                objVehicle = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());
            }
            else
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectVehicleLocation", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectVehicle", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Add a new location to the selected Vehicle.
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            if (objVehicle != null)
            {
                objVehicle.Locations.Add(strLocation);
            }
            else
            {
                CharacterObject.VehicleLocations.Add(strLocation);
            }

            TreeNode objLocation = new TreeNode
            {
                Tag = strLocation,
                Text = strLocation,
                ContextMenuStrip = cmsVehicleLocation
            };
            treVehicles.SelectedNode.Nodes.Add(objLocation);

            IsDirty = true;
        }

        private void cmdAddPet_Click(object sender, EventArgs e)
        {
            Contact objContact = new Contact(CharacterObject)
            {
                EntityType = ContactType.Pet
            };
            CharacterObject.Contacts.Add(objContact);

            PetControl objContactControl = new PetControl(objContact);

            // Attach an EventHandler for the DeleteContact and FileNameChanged Events.
            objContactControl.DeleteContact += DeletePet;
            objContactControl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;

            // Add the control to the Panel.
            panPets.Controls.Add(objContactControl);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdQuickenSpell_Click(object sender, EventArgs e)
        {
            if (treSpells.SelectedNode == null || treSpells.SelectedNode.Level != 1)
                return;

            frmSelectNumber frmPickNumber = new frmSelectNumber(0)
            {
                Description = LanguageManager.GetString("String_QuickeningKarma", GlobalOptions.Language).Replace("{0}", treSpells.SelectedNode.Text),
                Minimum = 1
            };
            frmPickNumber.ShowDialog(this);

            if (frmPickNumber.DialogResult == DialogResult.Cancel)
                return;

            // Make sure the character has enough Karma to improve the CharacterAttribute.
            int intKarmaCost = decimal.ToInt32(frmPickNumber.SelectedValue);
            if (intKarmaCost > CharacterObject.Karma)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseQuickeningMetamagic", GlobalOptions.Language).Replace("{0}", intKarmaCost.ToString()).Replace("{1}", treSpells.SelectedNode.Text)))
                return;

            // Create the Karma expense.
            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
            objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_ExpenseQuickenMetamagic", GlobalOptions.Language) + " " + treSpells.SelectedNode.Text, ExpenseType.Karma, DateTime.Now);
            CharacterObject.ExpenseEntries.Add(objExpense);
            CharacterObject.Karma -= intKarmaCost;

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateKarma(KarmaExpenseType.QuickeningMetamagic, string.Empty);
            objExpense.Undo = objUndo;

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
        #endregion

#region ContextMenu Events
        private void InitiationContextMenu_Opening(object sender, CancelEventArgs e)
        {
            // Enable and disable menu items
            if (treMetamagic.SelectedNode.Level == 0)
            {
                bool blnHasArt = false;
                bool blnHasBonus = false;
                int intGrade = 0;
                foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
                {
                    if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                    {
                        intGrade = objGrade.Grade;
                        break;
                    }
                }
                foreach (Art objGradeArt in CharacterObject.Arts)
                {
                    if (objGradeArt.Grade == intGrade)
                    {
                        blnHasArt = true;
                        break;
                    }
                }
                foreach (Metamagic objGradeMetamagic in CharacterObject.Metamagics)
                {
                    if (objGradeMetamagic.Grade == intGrade)
                    {
                        blnHasBonus = true;
                        break;
                    }
                }
                foreach (Spell objGradeSpell in CharacterObject.Spells)
                {
                    if (objGradeSpell.Grade == intGrade)
                    {
                        blnHasBonus = true;
                        break;
                    }
                }
                if (blnHasArt)
                    tsMetamagicAddArt.Enabled = false;
                else
                    tsMetamagicAddArt.Enabled = true;
                if (blnHasBonus)
                    tsMetamagicAddMetamagic.Enabled = false;
                else
                    tsMetamagicAddMetamagic.Enabled = true;
            }

        }
        
        private void tsCyberwareAddAsPlugin_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treCyberware.SelectedNode;
            // Make sure a parent items is selected, then open the Select Cyberware window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectCyberware", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectCyberware", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            bool blnAddAgain = false;
            do
            {
                if (objSelectedNode.GetTopParent() == treCyberware.Nodes[1])
                    blnAddAgain = PickCyberware(Improvement.ImprovementSource.Bioware);
                else
                    blnAddAgain = PickCyberware();
                if (blnAddAgain)
                    treCyberware.SelectedNode = objSelectedNode;
            }
            while (blnAddAgain);
        }

        private void tsWeaponAddAccessory_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treWeapons.SelectedNode;
            // Make sure a parent item is selected, then open the Select Accessory window.
            if (objSelectedNode  == null || objSelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponAccessory", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Weapon that is selected in the Tree.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(objSelectedNode.Tag.ToString());

            // Accessories cannot be added to Cyberweapons.
            if (objWeapon.Cyberware)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CyberweaponNoAccessory", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CyberweaponNoAccessory", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Weapons XML file and locate the selected Weapon.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objWeapon.GetNode();
            if (objXmlWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotFindWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotModifyWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNodeList objXmlMountList = objXmlWeapon.SelectNodes("accessorymounts/mount");
            bool blnAddAgain = false;

            do
            {
                // Make sure the Weapon allows Accessories to be added to it.
                if (!objWeapon.AllowAccessory)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotModifyWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotModifyWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;
                }

                frmSelectWeaponAccessory frmPickWeaponAccessory = new frmSelectWeaponAccessory(CharacterObject);

                string strMounts = string.Empty;
                foreach (XmlNode objXmlMount in objXmlMountList)
                {
                    if (!objWeapon.WeaponAccessories.Any(objMod => objMod.Mount == objXmlMount.InnerText || objMod.ExtraMount == objXmlMount.InnerText))
                    {
                        strMounts += objXmlMount.InnerText + "/";
                    }
                }

                // Remove the trailing /
                if (!string.IsNullOrEmpty(strMounts) && strMounts.Contains('/'))
                    strMounts = strMounts.Substring(0, strMounts.Length - 1);

                frmPickWeaponAccessory.AllowedMounts = strMounts;

                frmPickWeaponAccessory.CurrentWeaponName = objWeapon.Name;
                frmPickWeaponAccessory.WeaponCost = objWeapon.Cost;
                frmPickWeaponAccessory.AccessoryMultiplier = objWeapon.AccessoryMultiplier;
                frmPickWeaponAccessory.InstalledAccessories = objWeapon.WeaponAccessories;
                frmPickWeaponAccessory.ShowDialog();

                if (frmPickWeaponAccessory.DialogResult == DialogResult.Cancel)
                {
                    frmPickWeaponAccessory.Dispose();
                    break;
                }
                blnAddAgain = frmPickWeaponAccessory.AddAgain;

                // Locate the selected piece.
                objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/accessories/accessory[name = \"" + frmPickWeaponAccessory.SelectedAccessory + "\"]");

                TreeNode objNode = new TreeNode();
                WeaponAccessory objAccessory = new WeaponAccessory(CharacterObject);
                objAccessory.Create(objXmlWeapon, objNode, frmPickWeaponAccessory.SelectedMount, Convert.ToInt32(frmPickWeaponAccessory.SelectedRating), cmsWeaponAccessoryGear);
                objAccessory.Parent = objWeapon;

                if (objAccessory.Cost.StartsWith("Variable("))
                {
                    decimal decMin = 0;
                    decimal decMax = decimal.MaxValue;
                    string strCost = objAccessory.Cost.TrimStart("Variable(", true).TrimEnd(')');
                    if (strCost.Contains('-'))
                    {
                        string[] strValues = strCost.Split('-');
                        decMin = Convert.ToDecimal(strValues[0], GlobalOptions.InvariantCultureInfo);
                        decMax = Convert.ToDecimal(strValues[1], GlobalOptions.InvariantCultureInfo);
                    }
                    else
                        decMin = Convert.ToDecimal(strCost.FastEscape('+'), GlobalOptions.InvariantCultureInfo);

                    if (decMin != 0 || decMax != decimal.MaxValue)
                    {
                        string strNuyenFormat = CharacterObject.Options.NuyenFormat;
                        int intDecimalPlaces = strNuyenFormat.IndexOf('.');
                        if (intDecimalPlaces == -1)
                            intDecimalPlaces = 0;
                        else
                            intDecimalPlaces = strNuyenFormat.Length - intDecimalPlaces - 1;
                        frmSelectNumber frmPickNumber = new frmSelectNumber(intDecimalPlaces);
                        if (decMax > 1000000)
                            decMax = 1000000;
                        frmPickNumber.Minimum = decMin;
                        frmPickNumber.Maximum = decMax;
                        frmPickNumber.Description = LanguageManager.GetString("String_SelectVariableCost", GlobalOptions.Language).Replace("{0}", objAccessory.DisplayNameShort(GlobalOptions.Language));
                        frmPickNumber.AllowCancel = false;
                        frmPickNumber.ShowDialog();
                        objAccessory.Cost = frmPickNumber.SelectedValue.ToString(GlobalOptions.InvariantCultureInfo);
                    }
                }

                // Check the item's Cost and make sure the character can afford it.
                decimal decOriginalCost = objWeapon.TotalCost;
                objWeapon.WeaponAccessories.Add(objAccessory);

                decimal decCost = objWeapon.TotalCost - decOriginalCost;
                // Apply a markup if applicable.
                if (frmPickWeaponAccessory.Markup != 0)
                {
                    decCost *= 1 + (frmPickWeaponAccessory.Markup / 100.0m);
                }

                // Multiply the cost if applicable.
                string strAvail = objAccessory.TotalAvail(GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                if (!frmPickWeaponAccessory.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objWeapon.WeaponAccessories.Remove(objAccessory);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);

                        frmPickWeaponAccessory.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseWeaponAccessory", GlobalOptions.Language) + " " + objAccessory.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddWeaponAccessory, objAccessory.InternalId);
                        objExpense.Undo = objUndo;
                    }
                }

                objNode.ContextMenuStrip = cmsWeaponAccessory;
                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                RefreshSelectedWeapon();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
                
                frmPickWeaponAccessory.Dispose();
            }
            while (blnAddAgain);
        }

        private bool PickArmor(TreeNode n)
        {
            frmSelectArmor frmPickArmor = new frmSelectArmor(CharacterObject);
            frmPickArmor.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickArmor.DialogResult == DialogResult.Cancel)
                return false;

            // Open the Armor XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("armor.xml");

            XmlNode objXmlArmor = objXmlDocument.SelectSingleNode("/chummer/armors/armor[name = \"" + frmPickArmor.SelectedArmor + "\"]");

            TreeNode objNode = new TreeNode();
            Armor objArmor = new Armor(CharacterObject);
            List<Weapon> objWeapons = new List<Weapon>();
            objArmor.Create(objXmlArmor, objNode, cmsArmorMod, cmsArmorGear, frmPickArmor.Rating, objWeapons);
            objArmor.DiscountCost = frmPickArmor.BlackMarketDiscount;

            if (objArmor.InternalId == Guid.Empty.ToString())
                return frmPickArmor.AddAgain;

            decimal decCost = objArmor.TotalCost;
            // Apply a markup if applicable.
            if (frmPickArmor.Markup != 0)
            {
                decCost *= 1 + (frmPickArmor.Markup / 100.0m);
            }

            // Multiply the cost if applicable.
            string strAvail = objArmor.TotalAvail(GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickArmor.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Remove the Improvements created by the Armor.
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId);

                    return frmPickArmor.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseArmor", GlobalOptions.Language) + " " + objArmor.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddArmor, objArmor.InternalId);
                    objExpense.Undo = objUndo;
                }
            }

            CharacterObject.Armor.Add(objArmor);

            objNode.ContextMenuStrip = cmsArmor;
            n.Nodes.Add(objNode);
            n.Expand();
            treArmor.SelectedNode = objNode;

            foreach (Weapon objWeapon in objWeapons)
            {
                CharacterObject.Weapons.Add(objWeapon);
                CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear, objArmor.WeaponID);
            }

            IsCharacterUpdateRequested = true;

            IsDirty = true;

            return frmPickArmor.AddAgain;
        }

        private void tsArmorLocationAddArmor_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treArmor.SelectedNode;
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickArmor(objSelectedNode);
            }
            while (blnAddAgain);
        }

        private void tsAddArmorMod_Click(object sender, EventArgs e)
        {
            while (treArmor.SelectedNode != null && treArmor.SelectedNode.Level > 1)
                treArmor.SelectedNode = treArmor.SelectedNode.Parent;

            TreeNode objSelectedNode = treArmor.SelectedNode;
            // Make sure a parent item is selected, then open the Select Accessory window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmor", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectArmor", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Armor that is selected in the tree.
            Armor objArmor = CharacterObject.Armor.FindById(objSelectedNode.Tag.ToString());

            // Open the Armor XML file and locate the selected Armor.
            XmlDocument objXmlDocument = XmlManager.Load("armor.xml");

            bool blnAddAgain = false;
            do
            {
                XmlNode objXmlArmor = objArmor.GetNode();

                frmSelectArmorMod frmPickArmorMod = new frmSelectArmorMod(CharacterObject)
                {
                    ArmorCost = objArmor.Cost,
                    AllowedCategories = objArmor.Category + "," + objArmor.Name,
                    CapacityDisplayStyle = objArmor.CapacityDisplayStyle
                };
                XmlNode xmlAddModCategory = objXmlArmor["addmodcategory"];
                if (xmlAddModCategory != null)
                    frmPickArmorMod.AllowedCategories += "," + xmlAddModCategory.InnerText;

                frmPickArmorMod.ShowDialog(this);

                if (frmPickArmorMod.DialogResult == DialogResult.Cancel)
                {
                    frmPickArmorMod.Dispose();
                    break;
                }
                blnAddAgain = frmPickArmorMod.AddAgain;

                // Locate the selected piece.
                objXmlArmor = objXmlDocument.SelectSingleNode("/chummer/mods/mod[name = \"" + frmPickArmorMod.SelectedArmorMod + "\"]");

                TreeNode objNode = new TreeNode();
                ArmorMod objMod = new ArmorMod(CharacterObject);
                List<Weapon> lstWeapons = new List<Weapon>();
                List<TreeNode> lstWeaponNodes = new List<TreeNode>();
                int intRating = 0;
                if (Convert.ToInt32(objXmlArmor["maxrating"].InnerText) > 1)
                    intRating = frmPickArmorMod.SelectedRating;

                objMod.Create(objXmlArmor, objNode, cmsArmorGear, intRating, lstWeapons, lstWeaponNodes);
                objMod.Parent = objArmor;
                objNode.ContextMenuStrip = string.IsNullOrEmpty(objMod.GearCapacity) ? cmsArmorMod : cmsArmorGear;
                if (objMod.InternalId == Guid.Empty.ToString())
                {
                    frmPickArmorMod.Dispose();
                    continue;
                }

                // Check the item's Cost and make sure the character can afford it.
                decimal decOriginalCost = objArmor.TotalCost;
                objArmor.ArmorMods.Add(objMod);

                // Do not allow the user to add a new piece of Armor if its Capacity has been reached.
                if (CharacterObjectOptions.EnforceCapacity && objArmor.CapacityRemaining < 0)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    objArmor.ArmorMods.Remove(objMod);
                    frmPickArmorMod.Dispose();
                    continue;
                }

                decimal decCost = objArmor.TotalCost - decOriginalCost;
                // Apply a markup if applicable.
                if (frmPickArmorMod.Markup != 0)
                {
                    decCost *= 1 + (frmPickArmorMod.Markup / 100.0m);
                }

                // Multiply the cost if applicable.
                string strAvail = objMod.TotalAvail(GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                if (!frmPickArmorMod.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objArmor.ArmorMods.Remove(objMod);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        // Remove the Improvements created by the Armor Mod.
                        ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                        frmPickArmorMod.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseArmorMod", GlobalOptions.Language) + " " + objMod.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddArmorMod, objMod.InternalId);
                        objExpense.Undo = objUndo;
                    }
                }

                treArmor.SelectedNode.Nodes.Add(objNode);
                treArmor.SelectedNode.Expand();
                if (!blnAddAgain)
                {
                    treArmor.SelectedNode = objNode;
                }

                // Add any Weapons created by the Mod.
                foreach (Weapon objWeapon in lstWeapons)
                    CharacterObject.Weapons.Add(objWeapon);

                foreach (TreeNode objWeaponNode in lstWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeapon;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }

                RefreshSelectedArmor();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
                
                frmPickArmorMod.Dispose();
            }
            while (blnAddAgain);
        }

        private void tsGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treGear.SelectedNode;
            // Make sure a parent items is selected, then open the Select Gear window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickGear(treGear.SelectedNode);
                if (blnAddAgain)
                    treGear.SelectedNode = objSelectedNode;
            }
            while (blnAddAgain);
        }

        private void tsVehicleAddMod_Click(object sender, EventArgs e)
        {
            while (treVehicles.SelectedNode != null && treVehicles.SelectedNode.Level > 1)
                treVehicles.SelectedNode = treVehicles.SelectedNode.Parent;

            TreeNode objSelectedNode = treVehicles.SelectedNode;
            // Make sure a parent items is selected, then open the Select Vehicle Mod window.
            if (objSelectedNode == null || objSelectedNode.Level <= 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectVehicle", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectVehicle", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            Vehicle objSelectedVehicle = CharacterObject.Vehicles.FindById(objSelectedNode.Tag.ToString());
            // Open the Vehicles XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("vehicles.xml");

            bool blnAddAgain = false;

            do
            {
                frmSelectVehicleMod frmPickVehicleMod = new frmSelectVehicleMod(CharacterObject)
                {
                    // Pass the selected vehicle on to the form.
                    SelectedVehicle = objSelectedVehicle,
                    InstalledMods = objSelectedVehicle.Mods
                };

                frmPickVehicleMod.ShowDialog(this);

                // Make sure the dialogue window was not canceled.
                if (frmPickVehicleMod.DialogResult == DialogResult.Cancel)
                {
                    frmPickVehicleMod.Dispose();
                    break;
                }
                blnAddAgain = frmPickVehicleMod.AddAgain;

                XmlNode objXmlMod = objXmlDocument.SelectSingleNode("/chummer/mods/mod[id = \"" + frmPickVehicleMod.SelectedMod + "\"]");

                TreeNode objNode = new TreeNode();
                VehicleMod objMod = new VehicleMod(CharacterObject);
                objMod.Create(objXmlMod, objNode, frmPickVehicleMod.SelectedRating, objSelectedVehicle, frmPickVehicleMod.Markup);
                // Make sure that the Armor Rating does not exceed the maximum allowed by the Vehicle.
                if (objMod.Name.StartsWith("Armor"))
                {
                    if (objMod.Rating > objSelectedVehicle.MaxArmor)
                    {
                        objMod.Rating = objSelectedVehicle.MaxArmor;
                        objNode.Text = objMod.DisplayName(GlobalOptions.Language);
                    }
                }
                else if (objMod.Category == "Handling")
                {
                    if (objMod.Rating > objSelectedVehicle.MaxHandling)
                    {
                        objMod.Rating = objSelectedVehicle.MaxHandling;
                        objNode.Text = objMod.DisplayName(GlobalOptions.Language);
                    }
                }
                else if (objMod.Category == "Speed")
                {
                    if (objMod.Rating > objSelectedVehicle.MaxSpeed)
                    {
                        objMod.Rating = objSelectedVehicle.MaxSpeed;
                        objNode.Text = objMod.DisplayName(GlobalOptions.Language);
                    }
                }
                else if (objMod.Category == "Acceleration")
                {
                    if (objMod.Rating > objSelectedVehicle.MaxAcceleration)
                    {
                        objMod.Rating = objSelectedVehicle.MaxAcceleration;
                        objNode.Text = objMod.DisplayName(GlobalOptions.Language);
                    }
                }
                else if (objMod.Category == "Sensor")
                {
                    if (objMod.Rating > objSelectedVehicle.MaxSensor)
                    {
                        objMod.Rating = objSelectedVehicle.MaxSensor;
                        objNode.Text = objMod.DisplayName(GlobalOptions.Language);
                    }
                }
                else if (objMod.Name.StartsWith("Pilot Program"))
                {
                    if (objMod.Rating > objSelectedVehicle.MaxPilot)
                    {
                        objMod.Rating = objSelectedVehicle.MaxPilot;
                        objNode.Text = objMod.DisplayName(GlobalOptions.Language);
                    }
                }

                // Check the item's Cost and make sure the character can afford it.
                decimal decOriginalCost = objSelectedVehicle.TotalCost;
                if (frmPickVehicleMod.FreeCost)
                    objMod.Cost = "0";

                objSelectedVehicle.Mods.Add(objMod);

                // Do not allow the user to add a new Vehicle Mod if the Vehicle's Capacity has been reached.
                if (CharacterObjectOptions.EnforceCapacity)
                {
                    bool blnOverCapacity = false;
                    if (CharacterObjectOptions.BookEnabled("R5"))
                    {
                        if (objSelectedVehicle.IsDrone && GlobalOptions.Dronemods)
                        {
                            if (objSelectedVehicle.DroneModSlotsUsed > objSelectedVehicle.DroneModSlots)
                                blnOverCapacity = true;
                        }
                        else
                        {
                            int intUsed = objSelectedVehicle.CalcCategoryUsed(objMod.Category);
                            int intAvail = objSelectedVehicle.CalcCategoryAvail(objMod.Category);
                            if (intUsed > intAvail)
                                blnOverCapacity = true;
                        }
                    }
                    else if (objSelectedVehicle.Slots < objSelectedVehicle.SlotsUsed)
                    {
                        blnOverCapacity = true;
                    }

                    if (blnOverCapacity)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        objSelectedVehicle.Mods.Remove(objMod);
                        frmPickVehicleMod.Dispose();
                        continue;
                    }
                }

                decimal decCost = objSelectedVehicle.TotalCost - decOriginalCost;

                // Multiply the cost if applicable.
                string strAvail = objMod.TotalAvail(GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                if (decCost > CharacterObject.Nuyen)
                {
                    objSelectedVehicle.Mods.Remove(objMod);
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    frmPickVehicleMod.Dispose();
                    continue;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicleMod", GlobalOptions.Language) + " " + objMod.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddVehicleMod, objMod.InternalId);
                    objExpense.Undo = objUndo;
                }

                objNode.ContextMenuStrip = cmsVehicle;
                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                // Check for Improved Sensor bonus.
                if (objMod.Bonus != null)
                {
                    if (objMod.Bonus["selecttext"] != null)
                    {
                        frmSelectText frmPickText = new frmSelectText
                        {
                            Description = LanguageManager.GetString("String_Improvement_SelectText", GlobalOptions.Language).Replace("{0}", objMod.DisplayNameShort(GlobalOptions.Language))
                        };
                        frmPickText.ShowDialog(this);
                        objMod.Extra = frmPickText.SelectedValue;
                        objNode.Text = objMod.DisplayName(GlobalOptions.Language);
                        frmPickText.Dispose();
                    }
                    if (objMod.Bonus["improvesensor"] != null)
                    {
                        ChangeVehicleSensor(objSelectedVehicle, true);
                    }
                }

                IsCharacterUpdateRequested = true;
                RefreshSelectedVehicle();

                IsDirty = true;

                frmPickVehicleMod.Dispose();
            }
            while (blnAddAgain);
        }

        private void tsVehicleAddWeaponWeapon_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            // Make sure that a Weapon Mount has been selected.
            // Attempt to locate the selected VehicleMod.
            VehicleMod objMod = null;
            WeaponMount objWeaponMount = CommonFunctions.FindVehicleWeaponMount(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles, out Vehicle objVehicle);
            if (objWeaponMount == null)
            {
                objMod = CommonFunctions.FindVehicleMod(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle, out objWeaponMount);
                if (objMod != null)
                {
                    if (!objMod.Name.StartsWith("Mechanical Arm") && !objMod.Name.Contains("Drone Arm"))
                    {
                        objMod = null;
                    }
                }
            }

            if (objWeaponMount == null && objMod == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotAddWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotAddWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = false;
            do
            {
                blnAddAgain = AddWeaponToWeaponMount(objWeaponMount, objMod, objVehicle);
            }
            while (blnAddAgain);
        }

        private bool AddWeaponToWeaponMount(WeaponMount objWeaponMount, VehicleMod objMod, Vehicle objVehicle)
        {
            frmSelectWeapon frmPickWeapon = new frmSelectWeapon(CharacterObject)
            {
                LimitToCategories = objMod == null ? objWeaponMount.WeaponMountCategories : objMod.WeaponMountCategories
            };
            frmPickWeapon.ShowDialog();

            if (frmPickWeapon.DialogResult == DialogResult.Cancel)
                return false;

            // Open the Weapons XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/weapons/weapon[id = \"" + frmPickWeapon.SelectedWeapon + "\"]");

            List<TreeNode> lstNodes = new List<TreeNode>();
            Weapon objWeapon = new Weapon(CharacterObject)
            {
                ParentVehicle = objVehicle,
                ParentMount = objMod == null ? objWeaponMount : null
            };
            objWeapon.Create(objXmlWeapon, lstNodes, cmsVehicleWeapon, cmsVehicleWeaponAccessory, objMod == null ? objWeaponMount.Weapons : objMod.Weapons, cmsVehicleWeaponAccessoryGear);

            decimal decCost = objWeapon.TotalCost;
            // Apply a markup if applicable.
            if (frmPickWeapon.Markup != 0)
            {
                decCost *= 1 + (frmPickWeapon.Markup / 100.0m);
            }

            // Multiply the cost if applicable.
            string strAvail = objWeapon.TotalAvail(GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            if (!frmPickWeapon.FreeCost)
            {
                // Check the item's Cost and make sure the character can afford it.
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);

                    return frmPickWeapon.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicleWeapon", GlobalOptions.Language) + " " + objWeapon.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddVehicleWeapon, objWeapon.InternalId);
                    objExpense.Undo = objUndo;
                }
            }

            if (objMod != null)
                objMod.Weapons.Add(objWeapon);
            else
                objWeaponMount.Weapons.Add(objWeapon);

            foreach (TreeNode objLoopNode in lstNodes)
            {
                objLoopNode.ContextMenuStrip = cmsVehicleWeapon;
                treVehicles.SelectedNode.Nodes.Add(objLoopNode);
            }
            treVehicles.SelectedNode.Expand();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
            return frmPickWeapon.AddAgain;
        }

        private void tsVehicleAddWeaponMount_Click(object sender, EventArgs e)
        {
            Vehicle v = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());
            frmCreateWeaponMount frmPickVehicleMod = new frmCreateWeaponMount(v, CharacterObject)
            {
                AllowDiscounts = true
            };
            frmPickVehicleMod.ShowDialog(this);

            if (frmPickVehicleMod.DialogResult != DialogResult.Cancel)
            {
                if (!frmPickVehicleMod.FreeCost)
                {
                    // Check the item's Cost and make sure the character can afford it.
                    decimal decCost = frmPickVehicleMod.WeaponMount.TotalCost;
                    // Apply a markup if applicable.
                    if (frmPickVehicleMod.Markup != 0)
                    {
                        decCost *= 1 + (frmPickVehicleMod.Markup / 100.0m);
                    }

                    // Multiply the cost if applicable.
                    string strAvail = frmPickVehicleMod.WeaponMount.TotalAvail(GlobalOptions.DefaultLanguage);
                    if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                        decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                    if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                        decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;
                    if (decCost > CharacterObject.Nuyen)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicleWeaponAccessory", GlobalOptions.Language) + " " + frmPickVehicleMod.WeaponMount.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddVehicleWeaponMount, frmPickVehicleMod.WeaponMount.InternalId);
                        objExpense.Undo = objUndo;
                    }
                }

                v.WeaponMounts.Add(frmPickVehicleMod.WeaponMount);
                TreeNode node = new TreeNode();
                foreach (TreeNode t in treVehicles.SelectedNode.Nodes)
                {
                    if (t.Tag.ToString() == "String_WeaponMounts")
                    {
                        node = t;
                        break;
                    }
                }
                if (node.Tag == null)
                {
                    node.Tag = "String_WeaponMounts";
                    node.Text = LanguageManager.GetString("String_WeaponMounts", GlobalOptions.Language);
                    treVehicles.SelectedNode.Nodes.Add(node);
                }
                TreeNode tn = new TreeNode
                {
                    Tag = frmPickVehicleMod.WeaponMount.InternalId,
                    Text = frmPickVehicleMod.WeaponMount.DisplayName(GlobalOptions.Language),
                    ContextMenuStrip = cmsWeaponMount
                };
                node.Nodes.Add(tn);
                treVehicles.SelectedNode.ExpandAll();
            }
        }

        private void tsVehicleAddWeaponAccessory_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            // Attempt to locate the selected VehicleWeapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_VehicleWeaponAccessories", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_VehicleWeaponAccessories", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Weapons XML file and locate the selected Weapon.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");
            XmlNode objXmlWeapon = objWeapon.GetNode();
            if (objXmlWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotFindWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotModifyWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNodeList objXmlMountList = objXmlWeapon.SelectNodes("accessorymounts/mount");
            bool blnAddAgain = false;

            do
            {
                // Make sure the Weapon allows Accessories to be added to it.
                if (!objWeapon.AllowAccessory)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotModifyWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotModifyWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                frmSelectWeaponAccessory frmPickWeaponAccessory = new frmSelectWeaponAccessory(CharacterObject);
                
                string strMounts = string.Empty;
                foreach (XmlNode objXmlMount in objXmlMountList)
                {
                    // Run through the Weapon's currenct Accessories and filter out any used up Mount points.
                    if (!objWeapon.WeaponAccessories.Any(objMod => objMod.Mount == objXmlMount.InnerText || objMod.ExtraMount == objXmlMount.InnerText))
                    {
                        strMounts += objXmlMount.InnerText + "/";
                    }
                }
                frmPickWeaponAccessory.AllowedMounts = strMounts;

                frmPickWeaponAccessory.CurrentWeaponName = objWeapon.Name;
                frmPickWeaponAccessory.WeaponCost = objWeapon.Cost;
                frmPickWeaponAccessory.AccessoryMultiplier = objWeapon.AccessoryMultiplier;
                frmPickWeaponAccessory.InstalledAccessories = objWeapon.WeaponAccessories;
                frmPickWeaponAccessory.ShowDialog();

                if (frmPickWeaponAccessory.DialogResult == DialogResult.Cancel)
                {
                    frmPickWeaponAccessory.Dispose();
                    break;
                }
                blnAddAgain = frmPickWeaponAccessory.AddAgain;

                // Locate the selected piece.
                objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/accessories/accessory[name = \"" + frmPickWeaponAccessory.SelectedAccessory + "\"]");

                TreeNode objNode = new TreeNode();
                WeaponAccessory objAccessory = new WeaponAccessory(CharacterObject);
                objAccessory.Create(objXmlWeapon, objNode, frmPickWeaponAccessory.SelectedMount, Convert.ToInt32(frmPickWeaponAccessory.SelectedRating), cmsWeaponAccessoryGear);
                objAccessory.Parent = objWeapon;

                // Check the item's Cost and make sure the character can afford it.
                decimal intOriginalCost = objWeapon.TotalCost;
                objWeapon.WeaponAccessories.Add(objAccessory);

                decimal decCost = objWeapon.TotalCost - intOriginalCost;
                // Apply a markup if applicable.
                if (frmPickWeaponAccessory.Markup != 0)
                {
                    decCost *= 1 + (frmPickWeaponAccessory.Markup / 100.0m);
                }

                // Multiply the cost if applicable.
                string strAvail = objAccessory.TotalAvail(GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                if (!frmPickWeaponAccessory.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objWeapon.WeaponAccessories.Remove(objAccessory);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);

                        frmPickWeaponAccessory.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicleWeaponAccessory", GlobalOptions.Language) + " " + objAccessory.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddVehicleWeaponAccessory, objAccessory.InternalId);
                        objExpense.Undo = objUndo;
                    }
                }

                objNode.ContextMenuStrip = cmsVehicleWeaponAccessory;
                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                RefreshSelectedVehicle();
                IsCharacterUpdateRequested = true;

                IsDirty = true;

                frmPickWeaponAccessory.Dispose();
            }
            while (blnAddAgain);
        }

        private bool AddUnderbarrelWeapon(Weapon objSelectedWeapon, TreeNode objWeaponNode, string strExpenseString)
        {
            if (objSelectedWeapon.UnderbarrelWeapons.Count > 0)
            {
                return false;
            }

            frmSelectWeapon frmPickWeapon = new frmSelectWeapon(CharacterObject)
            {
                LimitToCategories = "Underbarrel Weapons",
                Mounts = objSelectedWeapon.AccessoryMounts,

                Underbarrel = true
            };

            frmPickWeapon.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickWeapon.DialogResult == DialogResult.Cancel)
                return false;

            // Open the Weapons XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("weapons.xml");

            XmlNode objXmlWeapon = objXmlDocument.SelectSingleNode("/chummer/weapons/weapon[id = \"" + frmPickWeapon.SelectedWeapon + "\"]");

            List<TreeNode> lstNodes = new List<TreeNode>();
            Weapon objWeapon = new Weapon(CharacterObject)
            {
                ParentVehicle = objSelectedWeapon.ParentVehicle
            };
            objWeapon.Create(objXmlWeapon, lstNodes, cmsWeapon, cmsWeaponAccessory, objSelectedWeapon.UnderbarrelWeapons, cmsWeaponAccessoryGear);
            objWeapon.DiscountCost = frmPickWeapon.BlackMarketDiscount;
            objWeapon.Parent = objSelectedWeapon;
            if (objSelectedWeapon.AllowAccessory == false)
                objWeapon.AllowAccessory = false;

            decimal decCost = objWeapon.TotalCost;
            // Apply a markup if applicable.
            if (frmPickWeapon.Markup != 0)
            {
                decCost *= 1 + (frmPickWeapon.Markup / 100.0m);
            }

            // Multiply the cost if applicable.
            string strAvail = objWeapon.TotalAvail(GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickWeapon.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return frmPickWeapon.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, strExpenseString + " " + objWeapon.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddVehicleWeapon, objWeapon.InternalId);
                    objExpense.Undo = objUndo;
                }
            }

            objSelectedWeapon.UnderbarrelWeapons.Add(objWeapon);

            foreach (TreeNode objLoopNode in lstNodes)
            {
                objLoopNode.ContextMenuStrip = cmsVehicleWeapon;
                objWeaponNode.Nodes.Add(objLoopNode);
            }
            objWeaponNode.Expand();

            IsCharacterUpdateRequested = true;

            IsDirty = true;

            return frmPickWeapon.AddAgain;
        }

        private void tsVehicleAddUnderbarrelWeapon_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            // Attempt to locate the selected VehicleWeapon.
            Weapon objSelectedWeapon = CommonFunctions.FindVehicleWeapon(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objSelectedWeapon == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_VehicleWeaponUnderbarrel", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_VehicleWeaponUnderbarrel", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = false;
            do
            {
                blnAddAgain = AddUnderbarrelWeapon(objSelectedWeapon, objSelectedNode, LanguageManager.GetString("String_ExpensePurchaseVehicleWeapon", GlobalOptions.Language));
            }
            while (blnAddAgain);

            RefreshSelectedVehicle();
        }

        private void tsVehicleAddWeaponAccessoryAlt_Click(object sender, EventArgs e)
        {
            tsVehicleAddWeaponAccessory_Click(sender, e);
        }

        private void tsVehicleAddUnderbarrelWeaponAlt_Click(object sender, EventArgs e)
        {
            tsVehicleAddUnderbarrelWeapon_Click(sender, e);
        }

        private void tsMartialArtsAddAdvantage_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode != null)
            {
                // Select the Martial Arts node if we're currently on a child.
                if (treMartialArts.SelectedNode.Level > 1)
                    treMartialArts.SelectedNode = treMartialArts.SelectedNode.Parent;

                MartialArt objMartialArt = CharacterObject.MartialArts.FindById(treMartialArts.SelectedNode.Tag.ToString());

                frmSelectMartialArtAdvantage frmPickMartialArtAdvantage = new frmSelectMartialArtAdvantage(CharacterObject)
                {
                    MartialArt = objMartialArt.Name
                };
                frmPickMartialArtAdvantage.ShowDialog(this);

                if (frmPickMartialArtAdvantage.DialogResult == DialogResult.Cancel)
                    return;

                // Open the Martial Arts XML file and locate the selected piece.
                XmlDocument objXmlDocument = XmlManager.Load("martialarts.xml");

                XmlNode objXmlAdvantage = objXmlDocument.SelectSingleNode("/chummer/techniques/technique[name = \"" + frmPickMartialArtAdvantage.SelectedAdvantage + "\"]");

                // Create the Improvements for the Advantage if there are any.
                TreeNode objNode = new TreeNode();
                MartialArtAdvantage objAdvantage = new MartialArtAdvantage(CharacterObject);
                objAdvantage.Create(objXmlAdvantage, objNode);
                if (objAdvantage.InternalId == Guid.Empty.ToString())
                    return;

                objMartialArt.Advantages.Add(objAdvantage);

                objNode.ContextMenuStrip = cmsTechnique;
                treMartialArts.SelectedNode.Nodes.Add(objNode);
                treMartialArts.SelectedNode.Expand();

                // Create the Expense Log Entry.
                if (treMartialArts.SelectedNode.Nodes.Count > 1)
                {
                    ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                    objEntry.Create(CharacterObjectOptions.KarmaManeuver * -1, LanguageManager.GetString("String_ExpenseLearnTechnique", GlobalOptions.Language) + " " + frmPickMartialArtAdvantage.SelectedAdvantage, ExpenseType.Karma, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objEntry);
                    CharacterObject.Karma -= CharacterObjectOptions.KarmaManeuver;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateKarma(KarmaExpenseType.AddMartialArtManeuver, frmPickMartialArtAdvantage.SelectedAdvantage);
                    objEntry.Undo = objUndo;
                }

                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
            else
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectMartialArtAdvantage", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectMartialArtAdvantage", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void tsVehicleAddGear_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            // Make sure a parent items is selected, then open the Select Gear window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearVehicle", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGearVehicle", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the selected Vehicle.
            Vehicle objSelectedVehicle = CharacterObject.Vehicles.FindById(objSelectedNode.Tag.ToString());
            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objSelectedVehicle?.GetNode())
                {
                    ShowPositiveCapacityOnly = false
                };
                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                TreeNode objNode = new TreeNode();

                Gear objGear = new Gear(CharacterObject);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, false, true, frmPickGear.Aerodynamic);

                if (objGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objGear.Quantity = frmPickGear.SelectedQty;

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objGear.Cost = "(" + objGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objGear.Cost = "0";
                }

                objGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objGear.DisplayName(GlobalOptions.Language);

                // Change the cost of the Sensor itself to 0.
                //if (frmPickGear.SelectedCategory == "Sensors")
                //{
                //    objGear.Cost = "0";
                //    objGear.DictionaryCostN = new Tuple<int, Dictionary<int, string>>(-1, new Dictionary<int, string>());
                //}

                decimal decCost = objGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicleGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddVehicleGear, objGear.InternalId, 1);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                objNode.ContextMenuStrip = cmsVehicleGear;

                bool blnMatchFound = false;
                // If this is Ammunition, see if the character already has it on them.
                if (objGear.Category == "Ammunition")
                {
                    foreach (Gear objVehicleGear in objSelectedVehicle.Gear)
                    {
                        if (objVehicleGear.Name == objGear.Name && objVehicleGear.Category == objGear.Category && objVehicleGear.Rating == objGear.Rating && objVehicleGear.Extra == objGear.Extra)
                        {
                            // A match was found, so increase the quantity instead.
                            objVehicleGear.Quantity += objGear.Quantity;
                            blnMatchFound = true;

                            foreach (TreeNode objGearNode in objSelectedNode.Nodes)
                            {
                                if (objVehicleGear.InternalId == objGearNode.Tag.ToString())
                                {
                                    objGearNode.Text = objVehicleGear.DisplayName(GlobalOptions.Language);
                                    break;
                                }
                            }

                            break;
                        }
                    }
                }

                if (!blnMatchFound)
                {
                    objSelectedNode.Nodes.Add(objNode);
                    objSelectedNode.Expand();

                    // Add the Gear to the Vehicle.
                    objSelectedVehicle.Gear.Add(objGear);
                }

                IsCharacterUpdateRequested = true;
                RefreshSelectedVehicle();

                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void tsVehicleSensorAddAsPlugin_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            // Make sure a parent items is selected, then open the Select Gear window.
            if (objSelectedNode == null || objSelectedNode.Level < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_ModifyVehicleGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindVehicleGear(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objSensor == null)
            // Make sure the Sensor was found.
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_ModifyVehicleGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNode objXmlSensorGear = objSensor.GetNode();
            string strCategories = string.Empty;
            if (objXmlSensorGear?.InnerXml.Contains("<addoncategory>") == true)
            {

                foreach (XmlNode objXmlCategory in objXmlSensorGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
            }
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objXmlSensorGear)
                {
                    //frmPickGear.ShowNegativeCapacityOnly = true;
                    AllowedCategories = strCategories
                };

                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                // Open the Gear XML file and locate the selected piece.
                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                TreeNode objNode = new TreeNode();

                Gear objGear = new Gear(CharacterObject);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, false, true, frmPickGear.Aerodynamic);

                if (objGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objGear.Quantity = frmPickGear.SelectedQty;

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objGear.Cost = "(" + objGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objGear.Cost = "0";
                }

                objNode.Text = objGear.DisplayName(GlobalOptions.Language);

                decimal decCost = objGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.Language)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.Language)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicleGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddVehicleGear, objGear.InternalId, frmPickGear.SelectedQty);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                objGear.Parent = objSensor;
                objNode.ContextMenuStrip = cmsVehicleGear;

                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                objSensor.Children.Add(objGear);
                objSensor.RefreshMatrixAttributeArray();

                IsCharacterUpdateRequested = true;
                RefreshSelectedVehicle();

                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void tsVehicleGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            tsVehicleSensorAddAsPlugin_Click(sender, e);
        }

        private void tsVehicleGearNotes_Click(object sender, EventArgs e)
        {
            Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objGear != null)
            {
                string strOldValue = objGear.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objGear.Notes = frmItemNotes.Notes;
                    if (objGear.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objGear.Notes))
                    treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objGear.IncludedInParent)
                    treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                treVehicles.SelectedNode.ToolTipText = objGear.Notes.WordWrap(100);
            }
        }

        private void cmsAmmoSingleShot_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

            if (objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                objWeapon.AmmoRemaining -= 1;
                lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsAmmoShortBurst_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

            if (objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= 3)
                {
                    objWeapon.AmmoRemaining -= 3;
                }
                else
                {
                    if (objWeapon.AmmoRemaining == 1)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoSingleShot", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoShortBurstShort", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                }
                lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsAmmoLongBurst_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

            if (objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            if (objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= 6)
                {
                    objWeapon.AmmoRemaining -= 6;
                }
                else
                {
                    if (objWeapon.AmmoRemaining == 1)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoSingleShot", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else if (objWeapon.AmmoRemaining > 3)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoLongBurstShort", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else if (objWeapon.AmmoRemaining == 3)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoShortBurst", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoShortBurstShort", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                }
                lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsAmmoFullBurst_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

            if (objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= objWeapon.FullBurst)
                {
                    objWeapon.AmmoRemaining -= objWeapon.FullBurst;
                }
                else
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoFullBurst", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsAmmoSuppressiveFire_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

            if (objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= objWeapon.Suppressive)
                {
                    objWeapon.AmmoRemaining -= objWeapon.Suppressive;
                }
                else
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoSuppressiveFire", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsVehicleAmmoSingleShot_Click(object sender, EventArgs e)
        {
            // Locate the selected Vehicle Weapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            if (objWeapon == null || objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                objWeapon.AmmoRemaining -= 1;
                lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsVehicleAmmoShortBurst_Click(object sender, EventArgs e)
        {
            // Locate the selected Vehicle Weapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            if (objWeapon == null || objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= 3)
                {
                    objWeapon.AmmoRemaining -= 3;
                }
                else
                {
                    if (objWeapon.AmmoRemaining == 1)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoSingleShot", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoShortBurstShort", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                }
                lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsVehicleAmmoLongBurst_Click(object sender, EventArgs e)
        {
            // Locate the selected Vehicle Weapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            if (objWeapon == null || objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= 6)
                {
                    objWeapon.AmmoRemaining -= 6;
                }
                else
                {
                    if (objWeapon.AmmoRemaining == 1)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoSingleShot", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else if (objWeapon.AmmoRemaining > 3)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoLongBurstShort", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else if (objWeapon.AmmoRemaining == 3)
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoShortBurst", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                    else
                    {
                        if (MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoShortBurstShort", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                            objWeapon.AmmoRemaining = 0;
                    }
                }
                lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsVehicleAmmoFullBurst_Click(object sender, EventArgs e)
        {
            // Locate the selected Vehicle Weapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            if (objWeapon == null || objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= objWeapon.FullBurst)
                {
                    objWeapon.AmmoRemaining -= objWeapon.FullBurst;
                }
                else
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoFullBurst", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void cmsVehicleAmmoSuppressiveFire_Click(object sender, EventArgs e)
        {
            // Locate the selected Vehicle Weapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            if (objWeapon == null || objWeapon.AmmoRemaining == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmo", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            else
            {
                if (objWeapon.AmmoRemaining >= objWeapon.Suppressive)
                {
                    objWeapon.AmmoRemaining -= objWeapon.Suppressive;
                }
                else
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughAmmoSuppressiveFire", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
                lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
            }

            IsDirty = true;
        }

        private void tsCyberwareSell_Click(object sender, EventArgs e)
        {
            if (treCyberware.SelectedNode != null)
            {
                if (treCyberware.SelectedNode.Level > 0)
                {
                    // Locate the piece of Cyberware that is selected in the tree.
                    Cyberware objCyberware = CharacterObject.Cyberware.DeepFindById(treCyberware.SelectedNode.Tag.ToString());
                    Cyberware objParent = objCyberware?.Parent;

                    if (objCyberware != null)
                    {
                        if (objCyberware.Capacity == "[*]" && treCyberware.SelectedNode.Level == 2)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveCyberware", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveCyberware", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        frmSellItem frmSell = new frmSellItem();
                        frmSell.ShowDialog(this);

                        if (frmSell.DialogResult == DialogResult.Cancel)
                            return;

                        // Create the Expense Log Entry for the sale.
                        decimal decAmount = objCyberware.TotalCost * frmSell.SellPercent;
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        string strEntry = LanguageManager.GetString(objCyberware.SourceType == Improvement.ImprovementSource.Cyberware ? "String_ExpenseSoldCyberware" : "String_ExpenseSoldBioware", GlobalOptions.Language);
                        decAmount += objCyberware.DeleteCyberware(treWeapons, treVehicles) * frmSell.SellPercent;
                        objExpense.Create(decAmount, strEntry + " " + objCyberware.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen += decAmount;
                        
                        if (objCyberware.Parent != null)
                            objCyberware.Parent.Children.Remove(objCyberware);
                        else
                            CharacterObject.Cyberware.Remove(objCyberware);

                        IncreaseEssenceHole((int)(objCyberware.CalculatedESS() * 100));

                        // Remove the item from the TreeView.
                        treCyberware.Nodes.Remove(treCyberware.SelectedNode);
                    }
                    else
                    {
                        // Locate the selected piece of Gear.
                        Gear objGear = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(), CharacterObject.Cyberware.GetAllDescendants(x => x.Children), out objCyberware);

                        frmSellItem frmSell = new frmSellItem();
                        frmSell.ShowDialog(this);

                        if (frmSell.DialogResult == DialogResult.Cancel)
                            return;

                        // Create the Expense Log Entry for the sale.
                        decimal decAmount = objGear.TotalCost * frmSell.SellPercent;
                        decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        string strEntry = LanguageManager.GetString("String_ExpenseSoldCyberwareGear", GlobalOptions.Language);
                        objExpense.Create(decAmount, strEntry + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen += decAmount;

                        if (objGear.Parent == null)
                            objCyberware.Gear.Remove(objGear);
                        else
                        {
                            objGear.Parent.Children.Remove(objGear);
                            objGear.Parent.RefreshMatrixAttributeArray();
                        }
                        
                        treCyberware.SelectedNode.Remove();
                    }

                    IsCharacterUpdateRequested = true;
                    RefreshSelectedCyberware();

                    IsDirty = true;
                }
            }
        }

        private void tsArmorSell_Click(object sender, EventArgs e)
        {
            // Delete the selected piece of Armor.
            if (treArmor.SelectedNode != null)
            {
                if (treArmor.SelectedNode.Level == 1)
                {
                    // Locate the piece of Armor that is selected in the tree.
                    Armor objArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());

                    frmSellItem frmSell = new frmSellItem();
                    frmSell.ShowDialog(this);

                    if (frmSell.DialogResult == DialogResult.Cancel)
                        return;

                    // Create the Expense Log Entry for the sale.
                    decimal decAmount = objArmor.TotalCost * frmSell.SellPercent;
                    decAmount += objArmor.DeleteArmor(treWeapons, treVehicles) * frmSell.SellPercent;
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldArmor", GlobalOptions.Language) + " " + objArmor.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen += decAmount;
                }
                else if (treArmor.SelectedNode.Level == 2)
                {
                    // Locate the ArmorMod that is selected in the tree.
                    ArmorMod objMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);
                    if (objMod != null)
                    {
                        // Record the cost of the Armor with the ArmorMod.
                        decimal decOriginal = objMod.Parent.TotalCost;

                        frmSellItem frmSell = new frmSellItem();
                        frmSell.ShowDialog(this);

                        if (frmSell.DialogResult == DialogResult.Cancel)
                            return;

                        // Create the Expense Log Entry for the sale.
                        decimal decAmount = (decOriginal - objMod.Parent.TotalCost) * frmSell.SellPercent;
                        decAmount += objMod.DeleteArmorMod(treWeapons, treVehicles) * frmSell.SellPercent;
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldArmorMod", GlobalOptions.Language) + " " + objMod.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen += decAmount;
                    }
                    else
                    {
                        Gear objGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor, out Armor objArmor, out ArmorMod objArmorMod);

                        // Record the cost of the Armor with the ArmorMod.
                        decimal decOriginal = 0.0m;
                        if (objArmorMod != null)
                            decOriginal = objArmorMod.TotalCost;
                        else
                            decOriginal = objArmor.TotalCost;

                        frmSellItem frmSell = new frmSellItem();
                        frmSell.ShowDialog(this);

                        if (frmSell.DialogResult == DialogResult.Cancel)
                            return;

                        // Create the Expense Log Entry for the sale.
                        decimal decNewCost = 0.0m;
                        if (objArmorMod != null)
                            decNewCost = objArmorMod.TotalCost;
                        else
                            decNewCost = objArmor.TotalCost;
                        decimal decAmount = (decOriginal - decNewCost) * frmSell.SellPercent;
                        decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldArmorGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen += decAmount;
                    }
                }
                else if (treArmor.SelectedNode.Level > 2)
                {
                    Gear objGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor, out Armor objArmor, out ArmorMod objArmorMod);
                    Gear objParent = objGear.Parent;

                    // Record the cost of the Armor with the ArmorMod.
                    decimal decOriginal = 0.0m;
                    if (objArmorMod != null)
                        decOriginal = objArmorMod.TotalCost;
                    else
                        decOriginal = objArmor.TotalCost;

                    frmSellItem frmSell = new frmSellItem();
                    frmSell.ShowDialog(this);

                    if (frmSell.DialogResult == DialogResult.Cancel)
                        return;

                    // Create the Expense Log Entry for the sale.
                    decimal decNewCost = 0.0m;
                    if (objArmorMod != null)
                        decNewCost = objArmorMod.TotalCost;
                    else
                        decNewCost = objArmor.TotalCost;
                    decimal decAmount = (decOriginal - decNewCost) * frmSell.SellPercent;
                    decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldArmorGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen += decAmount;
                }
                IsCharacterUpdateRequested = true;
                RefreshSelectedArmor();

                IsDirty = true;
            }
        }

        private void tsWeaponSell_Click(object sender, EventArgs e)
        {
            // Delete the selected Weapon.
            if (treWeapons.SelectedNode != null)
            {
                if (treWeapons.SelectedNode.Level == 1)
                {
                    Weapon objWeapon = null;
                    // Locate the Weapon that is selected in the tree.
                    foreach (Weapon objCharacterWeapon in CharacterObject.Weapons)
                    {
                        if (objCharacterWeapon.InternalId == treWeapons.SelectedNode.Tag.ToString())
                        {
                            objWeapon = objCharacterWeapon;
                            break;
                        }
                    }

                    // Cyberweapons cannot be removed through here and must be done by removing the piece of Cyberware.
                    if (objWeapon.Cyberware)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveCyberweapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveCyberweapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (objWeapon.Category == "Gear")
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveGearWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveGearWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (objWeapon.Category.StartsWith("Quality"))
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveQualityWeapon", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveQualityWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    frmSellItem frmSell = new frmSellItem();
                    frmSell.ShowDialog(this);

                    if (frmSell.DialogResult == DialogResult.Cancel)
                        return;

                    // Create the Expense Log Entry for the sale.
                    decimal decAmount = (objWeapon.TotalCost + objWeapon.DeleteWeapon(treWeapons, treVehicles)) * frmSell.SellPercent;
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldWeapon", GlobalOptions.Language) + " " + objWeapon.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen += decAmount;

                    CharacterObject.Weapons.Remove(objWeapon);
                    treWeapons.SelectedNode.Remove();
                }
                else if (treWeapons.SelectedNode.Level > 1)
                {
                    Weapon objWeapon = null;
                    // Locate the Weapon that is selected in the tree.
                    foreach (Weapon objCharacterWeapon in CharacterObject.Weapons)
                    {
                        if (objCharacterWeapon.InternalId == treWeapons.SelectedNode.Parent.Tag.ToString())
                        {
                            objWeapon = objCharacterWeapon;
                            break;
                        }
                    }

                    WeaponAccessory objAccessory = null;
                    // Locate the Accessory that is selected in the tree.
                    foreach (WeaponAccessory objCharacterAccessory in objWeapon.WeaponAccessories)
                    {
                        if (objCharacterAccessory.InternalId == treWeapons.SelectedNode.Tag.ToString())
                        {
                            objAccessory = objCharacterAccessory;
                            break;
                        }
                    }

                    if (!string.IsNullOrEmpty(objAccessory.Name))
                    {
                        frmSellItem frmSell = new frmSellItem();
                        frmSell.ShowDialog(this);

                        if (frmSell.DialogResult == DialogResult.Cancel)
                            return;

                        // Record the Weapon's original cost.
                        decimal decOriginal = objWeapon.TotalCost;

                        objWeapon.WeaponAccessories.Remove(objAccessory);
                        treWeapons.SelectedNode.Remove();

                        decimal decAmount = (decOriginal - objWeapon.TotalCost) * frmSell.SellPercent;
                        foreach (Gear objGear in objAccessory.Gear)
                        {
                            decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                        }
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldWeaponAccessory", GlobalOptions.Language) + " " + objAccessory.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen += decAmount;
                    }
                    else
                    {
                        frmSellItem frmSell = new frmSellItem();
                        frmSell.ShowDialog(this);

                        if (frmSell.DialogResult == DialogResult.Cancel)
                            return;

                        // Find the selected Gear.
                        Gear objGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons, out objAccessory);
                        if (objGear.Parent == null)
                            objAccessory.Gear.Remove(objGear);
                        else
                        {
                            objGear.Parent.Children.Remove(objGear);
                            objGear.Parent.RefreshMatrixAttributeArray();
                        }
                        treWeapons.SelectedNode.Remove();

                        decimal decAmount = objGear.TotalCost * frmSell.SellPercent;
                        decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldWeaponGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen += decAmount;
                    }
                }
                IsCharacterUpdateRequested = true;
                RefreshSelectedWeapon();

                IsDirty = true;
            }
        }

        private void sellItemToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Delete the selected Gear.
            if (treGear.SelectedNode != null)
            {
                if (treGear.SelectedNode.Level > 0)
                {
                    Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
                    if (objGear == null)
                        return;
                    Gear objParent = objGear.Parent;

                    frmSellItem frmSell = new frmSellItem();
                    frmSell.ShowDialog(this);

                    if (frmSell.DialogResult == DialogResult.Cancel)
                        return;

                    // Create the Expense Log Entry for the sale.
                    decimal decAmount = objGear.TotalCost * frmSell.SellPercent;
                    decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen += decAmount;

                    CharacterObject.Gear.Remove(objGear);
                    treGear.SelectedNode.Remove();

                    // If the Parent is populated, remove the item from its Parent.
                    if (objParent != null)
                    {
                        objParent.Children.Remove(objGear);
                        objParent.RefreshMatrixAttributeArray();
                    }
                }
                CharacterObject.PopulateFocusList(treFoci);
                IsCharacterUpdateRequested = true;
                RefreshSelectedGear();

                IsDirty = true;
            }
        }

        private void tsVehicleSell_Click(object sender, EventArgs e)
        {
            // Delete the selected Vehicle.
            if (treVehicles.SelectedNode != null)
            {
                // Locate the Weapon that is selected in the tree.
                foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
                {
                    foreach (Weapon objWeapon in objCharacterVehicle.Weapons)
                    {
                        if (objWeapon.InternalId == treVehicles.SelectedNode.Tag.ToString())
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveGearWeaponVehicle", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveGearWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            break;
                        }
                    }
                }

                // Locate the Vehicle that is selected in the tree.
                Vehicle objVehicle = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());

                // Selling a Vehicle
                if (objVehicle != null)
                {
                    frmSellItem frmSell = new frmSellItem();
                    frmSell.ShowDialog(this);

                    if (frmSell.DialogResult == DialogResult.Cancel)
                        return;

                    // Create the Expense Log Entry for the sale.
                    decimal decAmount = objVehicle.TotalCost * frmSell.SellPercent;
                    // Remove any Gear Improvements from the character (primarily those provided by an Emotitoy).
                    foreach (Gear objGear in objVehicle.Gear)
                    {
                        decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                    }

                    foreach (Weapon objLoopWeapon in objVehicle.Weapons)
                    {
                        decAmount += objLoopWeapon.DeleteWeapon(treWeapons, treVehicles) * frmSell.SellPercent;
                    }
                    foreach (VehicleMod objLoopMod in objVehicle.Mods)
                    {
                        foreach (Weapon objLoopWeapon in objLoopMod.Weapons)
                        {
                            decAmount += objLoopWeapon.DeleteWeapon(treWeapons, treVehicles) * frmSell.SellPercent;
                        }
                        foreach (Cyberware objLoopCyberware in objLoopMod.Cyberware)
                        {
                            decAmount += objLoopCyberware.DeleteCyberware(treWeapons, treVehicles) * frmSell.SellPercent;
                        }
                    }
                    foreach (WeaponMount objLoopMount in objVehicle.WeaponMounts)
                    {
                        foreach (Weapon objLoopWeapon in objLoopMount.Weapons)
                        {
                            decAmount += objLoopWeapon.DeleteWeapon(treWeapons, treVehicles) * frmSell.SellPercent;
                        }
                    }
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldVehicle", GlobalOptions.Language) + " " + objVehicle.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen += decAmount;
                    CharacterObject.Vehicles.Remove(objVehicle);
                    treVehicles.SelectedNode.Remove();
                }
                else
                {
                    // Locate the WeaponMount that is selected in the tree.
                    WeaponMount objWeaponMount = CommonFunctions.FindVehicleWeaponMount(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle);
                    // Selling a Weapon Mount
                    if (objWeaponMount != null)
                    {
                        if (objWeaponMount.IncludedInVehicle)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveVehicleMod", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveVehicleMod", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        frmSellItem frmSell = new frmSellItem();
                        frmSell.ShowDialog(this);

                        if (frmSell.DialogResult == DialogResult.Cancel)
                            return;

                        // Record the original value of the Vehicle.
                        decimal decOriginal = objVehicle.TotalCost;

                        objVehicle.WeaponMounts.Remove(objWeaponMount);

                        // Create the Expense Log Entry for the sale.
                        decimal decAmount = (decOriginal - objVehicle.TotalCost) * frmSell.SellPercent;
                        foreach (Weapon objLoopWeapon in objWeaponMount.Weapons)
                        {
                            decAmount += objLoopWeapon.DeleteWeapon(treWeapons, treVehicles) * frmSell.SellPercent;
                        }
                        foreach (VehicleMod objLoopMod in objWeaponMount.Mods)
                        {
                            // Check for Improved Sensor bonus.
                            if (objLoopMod.Bonus?["improvesensor"] != null || (objLoopMod.WirelessOn && objLoopMod.WirelessBonus?["improvesensor"] != null))
                            {
                                ChangeVehicleSensor(objVehicle, false);
                            }
                            foreach (Weapon objLoopWeapon in objLoopMod.Weapons)
                            {
                                decAmount += objLoopWeapon.DeleteWeapon(treWeapons, treVehicles) * frmSell.SellPercent;
                            }
                            foreach (Cyberware objLoopCyberware in objLoopMod.Cyberware)
                            {
                                decAmount += objLoopCyberware.DeleteCyberware(treWeapons, treVehicles) * frmSell.SellPercent;
                            }
                        }

                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldVehicleMod", GlobalOptions.Language) + " " + objWeaponMount.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen += decAmount;
                        treVehicles.SelectedNode.Remove();
                    }
                    else
                    {
                        // Locate the VehicleMod that is selected in the tree.
                        VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle, out objWeaponMount);
                        // Selling a Vehicle Mod
                        if (objMod != null)
                        {
                            if (objMod.IncludedInVehicle)
                            {
                                MessageBox.Show(LanguageManager.GetString("Message_CannotRemoveVehicleMod", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRemoveVehicleMod", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }

                            frmSellItem frmSell = new frmSellItem();
                            frmSell.ShowDialog(this);

                            if (frmSell.DialogResult == DialogResult.Cancel)
                                return;

                            // Record the original value of the Vehicle.
                            decimal decOriginal = objVehicle.TotalCost;

                            // Check for Improved Sensor bonus.
                            if (objMod.Bonus?["improvesensor"] != null || (objMod.WirelessOn && objMod.WirelessBonus?["improvesensor"] != null))
                            {
                                ChangeVehicleSensor(objVehicle, false);
                            }

                            if (objWeaponMount != null)
                                objWeaponMount.Mods.Remove(objMod);
                            else
                                objVehicle.Mods.Remove(objMod);

                            // Create the Expense Log Entry for the sale.
                            decimal decAmount = (decOriginal - objVehicle.TotalCost) * frmSell.SellPercent;
                            foreach (Weapon objLoopWeapon in objMod.Weapons)
                            {
                                decAmount += objLoopWeapon.DeleteWeapon(treWeapons, treVehicles) * frmSell.SellPercent;
                            }
                            foreach (Cyberware objLoopCyberware in objMod.Cyberware)
                            {
                                decAmount += objLoopCyberware.DeleteCyberware(treWeapons, treVehicles) * frmSell.SellPercent;
                            }
                            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                            objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldVehicleMod", GlobalOptions.Language) + " " + objMod.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                            CharacterObject.ExpenseEntries.Add(objExpense);
                            CharacterObject.Nuyen += decAmount;
                            treVehicles.SelectedNode.Remove();
                        }
                        else
                        {
                            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle, out objWeaponMount, out objMod);
                            // Removing a Weapon
                            if (objWeapon != null)
                            {
                                frmSellItem frmSell = new frmSellItem();
                                frmSell.ShowDialog(this);

                                if (frmSell.DialogResult == DialogResult.Cancel)
                                    return;

                                // Record the original value of the Vehicle.
                                decimal decOriginal = objVehicle.TotalCost + objWeapon.DeleteWeapon(treWeapons, treVehicles);
                                if (objWeapon.Parent != null)
                                    objWeapon.Parent.Children.Remove(objWeapon);
                                else if (objMod != null)
                                    objMod.Weapons.Remove(objWeapon);
                                else if (objWeaponMount != null)
                                    objWeaponMount.Weapons.Remove(objWeapon);
                                // This bit here should never be reached, but I'm adding it for future-proofing in case we want people to be able to remove weapons attached directly to vehicles
                                else
                                    objVehicle.Weapons.Remove(objWeapon);

                                // Create the Expense Log Entry for the sale.
                                decimal decAmount = (decOriginal - objVehicle.TotalCost) * frmSell.SellPercent;
                                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                                objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldVehicleWeapon", GlobalOptions.Language) + " " + objWeapon.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                                CharacterObject.ExpenseEntries.Add(objExpense);
                                CharacterObject.Nuyen += decAmount;
                                treVehicles.SelectedNode.Remove();
                            }
                            else
                            {
                                WeaponAccessory objWeaponAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objWeapon);
                                // Removing a weapon accessory
                                if (objWeaponAccessory != null)
                                {
                                    frmSellItem frmSell = new frmSellItem();
                                    frmSell.ShowDialog(this);

                                    if (frmSell.DialogResult == DialogResult.Cancel)
                                        return;

                                    // Record the original value of the Vehicle.
                                    decimal decOriginal = objWeapon.TotalCost;
                                    objWeapon.WeaponAccessories.Remove(objWeaponAccessory);
                                
                                    treVehicles.SelectedNode.Remove();

                                    // Create the Expense Log Entry for the sale.
                                    decimal decAmount = (decOriginal - objVehicle.TotalCost) * frmSell.SellPercent;
                                    foreach (Gear objLoopGear in objWeaponAccessory.Gear)
                                    {
                                        decAmount += objLoopGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                                    }
                                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                                    objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldVehicleWeaponAccessory", GlobalOptions.Language) + " " + objWeaponAccessory.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                                    CharacterObject.ExpenseEntries.Add(objExpense);
                                    CharacterObject.Nuyen += decAmount;
                                }
                                else
                                {
                                    Cyberware objCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objMod);
                                    // Removing Cyberware
                                    if (objCyberware != null)
                                    {
                                        frmSellItem frmSell = new frmSellItem();
                                        frmSell.ShowDialog(this);

                                        if (frmSell.DialogResult == DialogResult.Cancel)
                                            return;

                                        // Record the original value of the Vehicle.
                                        decimal decOriginal = objMod.TotalCost;
                                        if (objCyberware.Parent == null)
                                        {
                                            objMod.Cyberware.Remove(objCyberware);
                                        }
                                        else
                                        {
                                            objCyberware.Parent.Children.Remove(objCyberware);
                                        }
                                        treVehicles.SelectedNode.Remove();

                                        // Create the Expense Log Entry for the sale.
                                        decimal decAmount = (decOriginal - objVehicle.TotalCost) * frmSell.SellPercent;
                                        decAmount += objCyberware.DeleteCyberware(treWeapons, treVehicles) * frmSell.SellPercent;
                                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                                        objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldVehicleCyberware", GlobalOptions.Language) + " " + objCyberware.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                                        CharacterObject.ExpenseEntries.Add(objExpense);
                                        CharacterObject.Nuyen += decAmount;
                                    }
                                    else
                                    {
                                        objVehicle = null;
                                        objWeaponAccessory = null;
                                        objCyberware = null;
                                        Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objVehicle, out objWeaponAccessory, out objCyberware);
                                        if (objGear != null)
                                        {
                                            frmSellItem frmSell = new frmSellItem();
                                            frmSell.ShowDialog(this);

                                            if (frmSell.DialogResult == DialogResult.Cancel)
                                                return;

                                            // Record the original value of the vehicle.
                                            decimal decOriginal = objVehicle.TotalCost;
                                            if (objGear.Parent == null)
                                            {
                                                if (objCyberware != null)
                                                    objCyberware.Gear.Remove(objGear);
                                                else if (objWeaponAccessory != null)
                                                    objWeaponAccessory.Gear.Remove(objGear);
                                                else
                                                    objVehicle.Gear.Remove(objGear);
                                            }
                                            else
                                            {
                                                objGear.Parent.Children.Remove(objGear);
                                                objGear.Parent.RefreshMatrixAttributeArray();
                                            }
                                            treVehicles.SelectedNode.Remove();

                                            // Create the Expense Log Entry for the sale.
                                            decimal decAmount = (decOriginal - objVehicle.TotalCost) * frmSell.SellPercent;
                                            decAmount += objGear.DeleteGear(treWeapons, treVehicles) * frmSell.SellPercent;
                                            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                                            objExpense.Create(decAmount, LanguageManager.GetString("String_ExpenseSoldVehicleGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                                            CharacterObject.ExpenseEntries.Add(objExpense);
                                            CharacterObject.Nuyen += decAmount;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                IsCharacterUpdateRequested = true;
                RefreshSelectedVehicle();

                IsDirty = true;
            }
        }

        private void tsAdvancedLifestyle_Click(object sender, EventArgs e)
        {
            Lifestyle objNewLifestyle = new Lifestyle(CharacterObject);
            frmSelectLifestyleAdvanced frmPickLifestyle = new frmSelectLifestyleAdvanced(objNewLifestyle, CharacterObject);
            frmPickLifestyle.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                return;

            objNewLifestyle.StyleType = LifestyleType.Advanced;

            CharacterObject.Lifestyles.Add(objNewLifestyle);

            TreeNode objNode = new TreeNode
            {
                Text = objNewLifestyle.Name,
                Tag = objNewLifestyle.InternalId,
                ContextMenuStrip = cmsAdvancedLifestyle
            };
            treLifestyles.Nodes[0].Nodes.Add(objNode);
            treLifestyles.Nodes[0].Expand();

            if (frmPickLifestyle.AddAgain)
                tsAdvancedLifestyle_Click(sender, e);

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void tsBoltHole_Click(object sender, EventArgs e)
        {
            Lifestyle objNewLifestyle = new Lifestyle(CharacterObject);
            frmSelectLifestyleAdvanced frmPickLifestyle = new frmSelectLifestyleAdvanced(objNewLifestyle, CharacterObject)
            {
                StyleType = LifestyleType.BoltHole
            };
            frmPickLifestyle.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                return;

            objNewLifestyle.Months = 0;
            CharacterObject.Lifestyles.Add(objNewLifestyle);

            TreeNode objNode = new TreeNode
            {
                Text = objNewLifestyle.Name,
                Tag = objNewLifestyle.InternalId,
                ContextMenuStrip = cmsAdvancedLifestyle
            };
            treLifestyles.Nodes[0].Nodes.Add(objNode);
            treLifestyles.Nodes[0].Expand();

            if (frmPickLifestyle.AddAgain)
                tsAdvancedLifestyle_Click(sender, e);

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsSafehouse_Click(object sender, EventArgs e)
        {
            Lifestyle objNewLifestyle = new Lifestyle(CharacterObject);
            frmSelectLifestyleAdvanced frmPickLifestyle = new frmSelectLifestyleAdvanced(objNewLifestyle, CharacterObject)
            {
                StyleType = LifestyleType.Safehouse
            };
            frmPickLifestyle.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                return;

            objNewLifestyle.Months = 0;
            CharacterObject.Lifestyles.Add(objNewLifestyle);

            TreeNode objNode = new TreeNode
            {
                Text = objNewLifestyle.Name,
                Tag = objNewLifestyle.InternalId,
                ContextMenuStrip = cmsAdvancedLifestyle
            };
            treLifestyles.Nodes[0].Nodes.Add(objNode);
            treLifestyles.Nodes[0].Expand();

            if (frmPickLifestyle.AddAgain)
                tsAdvancedLifestyle_Click(sender, e);

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsWeaponName_Click(object sender, EventArgs e)
        {
            // Make sure a parent item is selected, then open the Select Accessory window.
            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponName", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (treWeapons.SelectedNode.Level > 1)
                treWeapons.SelectedNode = treWeapons.SelectedNode.Parent;

            // Get the information for the currently selected Weapon.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());
            if (objWeapon == null)
                return;

            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_WeaponName", GlobalOptions.Language),
                DefaultString = objWeapon.WeaponName
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objWeapon.WeaponName = frmPickText.SelectedValue;
            treWeapons.SelectedNode.Text = objWeapon.DisplayName(GlobalOptions.Language);

            IsDirty = true;
        }

        private void tsGearName_Click(object sender, EventArgs e)
        {
            if (treGear.SelectedNode == null || treGear.SelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearName", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Gear.
            Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objGear == null)
                return;

            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_GearName", GlobalOptions.Language),
                DefaultString = objGear.GearName
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objGear.GearName = frmPickText.SelectedValue;
            treGear.SelectedNode.Text = objGear.DisplayName(GlobalOptions.Language);

            IsDirty = true;
        }

        private void tsWeaponAddUnderbarrel_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treWeapons.SelectedNode;
            // Make sure a parent item is selected, then open the Select Accessory window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectWeaponAccessory", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectWeapon", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Weapon that is selected in the tree.
            Weapon objSelectedWeapon = CharacterObject.Weapons.DeepFindById(objSelectedNode.Tag.ToString());
            if (objSelectedWeapon == null)
                return;

            if (objSelectedWeapon.Cyberware)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CyberwareUnderbarrel", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_WeaponUnderbarrel", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = false;
            do
            {
                blnAddAgain = AddUnderbarrelWeapon(objSelectedWeapon, objSelectedNode, LanguageManager.GetString("String_ExpensePurchaseWeapon", GlobalOptions.Language));
            }
            while (blnAddAgain);

            RefreshSelectedWeapon();
        }

        private void tsGearAddNexus_Click(object sender, EventArgs e)
        {
            treGear.SelectedNode = treGear.Nodes[0];

            frmSelectNexus frmPickNexus = new frmSelectNexus(CharacterObject);
            frmPickNexus.ShowDialog(this);

            if (frmPickNexus.DialogResult == DialogResult.Cancel)
                return;

            Gear objGear = frmPickNexus.SelectedNexus;

            decimal decCost = objGear.TotalCost;

            // Multiply the cost if applicable.
            string strAvail = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickNexus.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddGear, objGear.InternalId, 1);
                    objExpense.Undo = objUndo;
                }
            }

            TreeNode nodNexus = new TreeNode
            {
                Text = objGear.Name,
                Tag = objGear.InternalId,
                ContextMenuStrip = cmsGear
            };

            foreach (Gear objChild in objGear.Children)
            {
                TreeNode nodModule = new TreeNode
                {
                    Text = objChild.Name,
                    Tag = objChild.InternalId,
                    ContextMenuStrip = cmsGear
                };
                nodNexus.Nodes.Add(nodModule);
                nodNexus.Expand();
            }

            treGear.Nodes[0].Nodes.Add(nodNexus);
            treGear.Nodes[0].Expand();

            CharacterObject.Gear.Add(objGear);

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsGearButtonAddAccessory_Click(object sender, EventArgs e)
        {
            tsGearAddAsPlugin_Click(sender, e);
        }

        private void tsVehicleAddNexus_Click(object sender, EventArgs e)
        {
            // Make sure a parent items is selected, then open the Select Gear window.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectGearVehicle", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGearVehicle", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (treVehicles.SelectedNode.Level > 1)
                treVehicles.SelectedNode = treVehicles.SelectedNode.Parent;

            // Attempt to locate the selected Vehicle.
            Vehicle objSelectedVehicle = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());

            frmSelectNexus frmPickNexus = new frmSelectNexus(CharacterObject);
            frmPickNexus.ShowDialog(this);

            if (frmPickNexus.DialogResult == DialogResult.Cancel)
                return;

            Gear objGear = frmPickNexus.SelectedNexus;

            decimal decCost = objGear.TotalCost;

            // Multiply the cost if applicable.
            string strAvail = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickNexus.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseVehicleGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddVehicleGear, objGear.InternalId, 1);
                    objExpense.Undo = objUndo;
                }
            }

            TreeNode nodNexus = new TreeNode
            {
                Text = objGear.Name,
                Tag = objGear.InternalId,
                ContextMenuStrip = cmsVehicleGear
            };

            foreach (Gear objChild in objGear.Children)
            {
                TreeNode nodModule = new TreeNode
                {
                    Text = objChild.Name,
                    Tag = objChild.InternalId,
                    ContextMenuStrip = cmsVehicleGear
                };
                nodNexus.Nodes.Add(nodModule);
                nodNexus.Expand();
            }

            treVehicles.SelectedNode.Nodes.Add(nodNexus);
            treVehicles.SelectedNode.Expand();

            objSelectedVehicle.Gear.Add(objGear);

            IsCharacterUpdateRequested = true;
            RefreshSelectedVehicle();

            IsDirty = true;
        }

        private void tsUndoKarmaExpense_Click(object sender, EventArgs e)
        {
            ListViewItem objItem;

            if (lstKarma.SelectedItems != null && lstKarma.SelectedItems.Count > 0)
            {
                objItem = lstKarma.SelectedItems[0];
            }
            else
            {
                return;
            }

            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
            objItem = lstKarma.SelectedItems[0];

            // Find the selected Karma Expense.
            foreach (ExpenseLogEntry objCharacterEntry in CharacterObject.ExpenseEntries)
            {
                if (objCharacterEntry.InternalId == objItem.SubItems[3].Text)
                {
                    objEntry = objCharacterEntry;
                    break;
                }
            }

            if (objEntry.Undo == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_UndoNoHistory", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NoUndoHistory", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else if (objEntry.Undo.KarmaType == KarmaExpenseType.ImproveInitiateGrade)
            {
                // Get the grade of the item we're undoing and make sure it's the highest grade
                int intMaxGrade = 0;
                foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
                {
                    intMaxGrade = Math.Max(intMaxGrade, objGrade.Grade);
                }
                foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
                {
                    if (objGrade.InternalId == objEntry.Undo.ObjectId)
                    {
                        if (objGrade.Grade < intMaxGrade)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_UndoNotHighestGrade", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotHighestGrade", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        break;
                    }
                }
                if (MessageBox.Show(LanguageManager.GetString("Message_UndoExpense", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_UndoExpense", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return;
            }
            else
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_UndoExpense", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_UndoExpense", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return;
            }

            switch (objEntry.Undo.KarmaType)
            {
                case KarmaExpenseType.ImproveAttribute:
                    CharacterObject.GetAttribute(objEntry.Undo.ObjectId).Degrade(1);
                    break;
                case KarmaExpenseType.AddPowerPoint:
                    CharacterObject.MysticAdeptPowerPoints -= 1;
                    break;
                case KarmaExpenseType.AddQuality:
                    // Locate the Quality that was added.
                    foreach (Quality objQuality in CharacterObject.Qualities)
                    {
                        if (objQuality.InternalId == objEntry.Undo.ObjectId)
                        {
                            // Remove any Improvements that it created.
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Quality, objQuality.InternalId);
                            
                            // Remove the Quality from thc character.
                            CharacterObject.Qualities.Remove(objQuality);

                            // Remove any Weapons created by the Quality if applicable.
                            if (objQuality.WeaponID != Guid.Empty.ToString())
                            {
                                List<string> lstNodesToRemoveIds = new List<string>();
                                foreach (Weapon objWeapon in CharacterObject.Weapons.DeepWhere(x => x.Children, x => x.ParentID == objQuality.InternalId))
                                {
                                    lstNodesToRemoveIds.Add(objWeapon.InternalId);
                                    objWeapon.DeleteWeapon(treWeapons, treVehicles);
                                    // We can remove here because GetAllDescendants creates a new IEnumerable, different from these two
                                    if (objWeapon.Parent != null)
                                        objWeapon.Parent.Children.Remove(objWeapon);
                                    else
                                        CharacterObject.Weapons.Remove(objWeapon);
                                }
                                foreach (string strNodeId in lstNodesToRemoveIds)
                                {
                                    // Remove the Weapons from the TreeView.
                                    treWeapons.FindNode(strNodeId)?.Remove();
                                }
                            }

                            // If entry already exists in tree, just update the rating
                            if (CharacterObject.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objQuality.QualityId && objExistingQuality.Extra == objQuality.Extra))
                            {
                                RefreshQualityNames(treQualities);
                            }
                            else
                            {
                                // Remove the Quality from the Tree.
                                foreach (TreeNode objNode in treQualities.Nodes[0].Nodes)
                                {
                                    if (objNode.Tag.ToString() == objEntry.Undo.ObjectId)
                                    {
                                        objNode.Remove();
                                        break;
                                    }
                                }
                                foreach (TreeNode objNode in treQualities.Nodes[1].Nodes)
                                {
                                    if (objNode.Tag.ToString() == objEntry.Undo.ObjectId)
                                    {
                                        objNode.Remove();
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.AddSpell:
                    // Locate the Spell that was added.
                    foreach (Spell objSpell in CharacterObject.Spells)
                    {
                        if (objSpell.InternalId == objEntry.Undo.ObjectId)
                        {
                            // Remove any Improvements that it created.
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Spell, objSpell.InternalId);

                            // Remove the Spell from the character.
                            CharacterObject.Spells.Remove(objSpell);

                            // Remove the Spell from the Tree.
                            for (int i = 0; i <= treSpells.Nodes.Count; i++)
                            {
                                foreach (TreeNode objNode in treSpells.Nodes[i].Nodes)
                                {
                                    if (objNode.Tag.ToString() == objEntry.Undo.ObjectId)
                                    {
                                        objNode.Remove();
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.SkillSpec:  //I am resonable sure those 2 are the same. Was written looking at old AddSpecialization code
                case KarmaExpenseType.AddSpecialization:
                    {
                        Skill ContainingSkill = CharacterObject.SkillsSection.KnowledgeSkills.FirstOrDefault(x => x.Specializations.Any(s => s.InternalId == objEntry.Undo.ObjectId));
                        if (ContainingSkill == null)
                            ContainingSkill = CharacterObject.SkillsSection.Skills.FirstOrDefault(x => x.Specializations.Any(s => s.InternalId == objEntry.Undo.ObjectId));

                        if (ContainingSkill != null)
                            ContainingSkill.Specializations.Remove(ContainingSkill.Specializations.FirstOrDefault(x => x.InternalId == objEntry.Undo.ObjectId));
                    }
                    break;
                case KarmaExpenseType.ImproveSkillGroup:
                    // Locate the Skill Group that was affected.
                    SkillGroup group = CharacterObject.SkillsSection.SkillGroups.FirstOrDefault(g => g.Id.ToString() == objEntry.Undo.ObjectId);
                    if (group != null) group.Karma--;
                    break;
                case KarmaExpenseType.AddSkill:
                case KarmaExpenseType.ImproveSkill:
                    // Locate the Skill that was affected.
                    Skill skill = CharacterObject.SkillsSection.Skills.FirstOrDefault(s => s.Id.ToString() == objEntry.Undo.ObjectId) ??
                                  CharacterObject.SkillsSection.KnowledgeSkills.FirstOrDefault(s => s.Id.ToString() == objEntry.Undo.ObjectId);

                    if (skill != null)
                    {
                        skill.Karma--;
                    }

                    break;
                case KarmaExpenseType.AddMetamagic:
                    // Locate the Metamagic that was affected.
                    foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                    {
                        if (objMetamagic.InternalId == objEntry.Undo.ObjectId)
                        {
                            // Remove any Improvements created by the Metamagic.
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId);
                            
                            // Remove the Metamagic from the character.
                            CharacterObject.Metamagics.Remove(objMetamagic);

                            // Remove the Metamagic from the Tree.
                            foreach (TreeNode objNode in treMetamagic.Nodes)
                            {
                                if (objNode.Tag.ToString() == objEntry.Undo.ObjectId)
                                {
                                    objNode.Remove();
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.ImproveInitiateGrade:
                    // Locate the Initiate Grade that was affected.
                    foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
                    {
                        if (objGrade.InternalId == objEntry.Undo.ObjectId)
                        {
                            if (CharacterObject.MAGEnabled)
                            {
                                // Remove any Improvements created by the Grade.
                                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Initiation, objGrade.InternalId);

                                List<Art> lstArts = new List<Art>();
                                foreach (Art objArt in CharacterObject.Arts)
                                {
                                    if (objArt.Grade == objGrade.Grade)
                                    {
                                        lstArts.Add(objArt);
                                    }
                                }
                                foreach (Art objArt in lstArts)
                                {
                                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Art, objArt.InternalId);
                                    CharacterObject.Arts.Remove(objArt);
                                }

                                List<Metamagic> lstMetamagic = new List<Metamagic>();
                                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                                {
                                    if (objMetamagic.Grade == objGrade.Grade)
                                    {
                                        lstMetamagic.Add(objMetamagic);
                                    }
                                }
                                foreach (Metamagic objMetamagic in lstMetamagic)
                                {
                                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId);
                                    CharacterObject.Metamagics.Remove(objMetamagic);
                                }

                                List<Spell> lstSpells = new List<Spell>();
                                foreach (Spell objSpell in CharacterObject.Spells)
                                {
                                    if (objSpell.Grade == objGrade.Grade)
                                    {
                                        lstSpells.Add(objSpell);
                                    }
                                }
                                foreach (Spell objSpell in lstSpells)
                                {
                                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Spell, objSpell.InternalId);
                                    CharacterObject.Spells.Remove(objSpell);
                                }

                                // Remove the Grade from the character.
                                CharacterObject.InitiationGrades.Remove(objGrade);
                                CharacterObject.InitiateGrade -= 1;

                                // Update any Metamagic Improvements the character might have.
                                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                                {
                                    if (objMetamagic.Bonus != null)
                                    {
                                        // If the Bonus contains "Rating", remove the existing Improvement and create new ones.
                                        if (objMetamagic.Bonus.InnerXml.Contains("Rating"))
                                        {
                                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId);
                                            ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId, objMetamagic.Bonus, false, CharacterObject.InitiateGrade, objMetamagic.DisplayNameShort(GlobalOptions.Language));
                                        }
                                    }
                                }
                            }
                            else
                            {
                                // Remove any Improvements created by the Grade.
                                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Submersion, objGrade.InternalId);

                                // Remove the Grade from the character.
                                CharacterObject.InitiationGrades.Remove(objGrade);
                                CharacterObject.SubmersionGrade -= 1;

                                List<Metamagic> lstMetamagic = new List<Metamagic>();
                                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                                {
                                    if (objMetamagic.Grade == objGrade.Grade)
                                    {
                                        lstMetamagic.Add(objMetamagic);
                                    }
                                }
                                foreach (Metamagic objMetamagic in lstMetamagic)
                                {
                                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId);
                                    CharacterObject.Metamagics.Remove(objMetamagic);
                                }
                            }

                            // Refresh the Initiation Grade List.
                            UpdateInitiationGradeTree();
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.AddMartialArt:
                    // Locate the Martial Art that was affected.
                    foreach (MartialArt objMartialArt in CharacterObject.MartialArts)
                    {
                        if (objMartialArt.Name == objEntry.Undo.ObjectId)
                        {
                            // Remove the Martial Art from the character.
                            CharacterObject.MartialArts.Remove(objMartialArt);

                            // Remove the Martial Art from the Tree.
                            foreach (TreeNode objNode in treMartialArts.Nodes[0].Nodes)
                            {
                                if (objNode.Text == objEntry.Undo.ObjectId)
                                {
                                    objNode.Remove();
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.AddMartialArtManeuver:
                    // Locate the Martial Art Maneuver that was affected.
                    foreach (MartialArtManeuver objManeuver in CharacterObject.MartialArtManeuvers)
                    {
                        if (objManeuver.InternalId == objEntry.Undo.ObjectId)
                        {
                            // Remove the Maneuver from the character.
                            CharacterObject.MartialArtManeuvers.Remove(objManeuver);

                            // Remove the Maneuver from the Tree.
                            foreach (TreeNode objNode in treMartialArts.Nodes[1].Nodes)
                            {
                                if (objNode.Tag.ToString() == objEntry.Undo.ObjectId)
                                {
                                    objNode.Remove();
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.AddComplexForm:
                    // Locate the Complex Form that was affected.
                    foreach (ComplexForm objProgram in CharacterObject.ComplexForms)
                    {
                        if (objProgram.InternalId == objEntry.Undo.ObjectId)
                        {
                            // Remove any Improvements created by the Complex Form.
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ComplexForm, objProgram.InternalId);

                            // Remove the Complex Form from the character.
                            CharacterObject.ComplexForms.Remove(objProgram);

                            // Remove the Complex Form from the Tree.
                            foreach (TreeNode objParent in treComplexForms.Nodes)
                            {
                                foreach (TreeNode objNode in objParent.Nodes)
                                {
                                    if (objNode.Tag.ToString() == objEntry.Undo.ObjectId)
                                    {
                                        objNode.Remove();
                                        break;
                                    }
                                }
                            }
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.BindFocus:
                    // Locate the Focus that was bound.
                    foreach (Focus objFocus in CharacterObject.Foci)
                    {
                        if (objFocus.GearId == objEntry.Undo.ObjectId)
                        {
                            foreach (TreeNode objNode in treFoci.Nodes)
                            {
                                if (objFocus.GearId == objNode.Tag.ToString())
                                {
                                    _blnSkipRefresh = true;
                                    objNode.Checked = false;
                                    _blnSkipRefresh = false;
                                    break;
                                }
                            }
                            CharacterObject.Foci.Remove(objFocus);
                            break;
                        }
                    }

                    // Locate the Stacked Focus that was bound.
                    foreach (StackedFocus objStack in CharacterObject.StackedFoci)
                    {
                        if (objStack.InternalId == objEntry.Undo.ObjectId)
                        {
                            foreach (TreeNode objNode in treFoci.Nodes)
                            {
                                if (objStack.InternalId == objNode.Tag.ToString())
                                {
                                    _blnSkipRefresh = true;
                                    objNode.Checked = false;
                                    objStack.Bonded = false;
                                    _blnSkipRefresh = false;
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    break;
                case KarmaExpenseType.JoinGroup:
                    // Remove the character from their Group.
                    _blnSkipRefresh = true;
                    chkJoinGroup.Checked = false;
                    CharacterObject.GroupMember = false;
                    _blnSkipRefresh = false;
                    break;
                case KarmaExpenseType.LeaveGroup:
                    // Put the character back in their Group.
                    _blnSkipRefresh = true;
                    chkJoinGroup.Checked = true;
                    CharacterObject.GroupMember = true;
                    _blnSkipRefresh = false;
                    break;
                case KarmaExpenseType.RemoveQuality:
                    // Add the Quality back to the character.
                    TreeNode objQualityNode = new TreeNode();
                    List<Weapon> objWeapons = new List<Weapon>();
                    List<TreeNode> objWeaponNodes = new List<TreeNode>();

                    Quality objAddQuality = new Quality(CharacterObject);
                    XmlDocument objXmlQualityDocument = XmlManager.Load("qualities.xml");
                    XmlNode objXmlQualityNode = objXmlQualityDocument.SelectSingleNode("/chummer/qualities/quality[name = \"" + objEntry.Undo.ObjectId + "\"]");
                    objAddQuality.Create(objXmlQualityNode, CharacterObject, QualitySource.Selected, objQualityNode, objWeapons, objWeaponNodes, objEntry.Undo.Extra);

                    objQualityNode.ContextMenuStrip = cmsQuality;

                    // If entry already exists in tree, just update the rating
                    if (CharacterObject.Qualities.Any(objExistingQuality => objExistingQuality.QualityId == objAddQuality.QualityId && objExistingQuality.Extra == objAddQuality.Extra))
                    {
                        RefreshQualityNames(treQualities);
                    }
                    else
                    {
                        // Add the Quality to the appropriate parent node.
                        if (objAddQuality.Type == QualityType.Positive)
                        {
                            treQualities.Nodes[0].Nodes.Add(objQualityNode);
                            treQualities.Nodes[0].Expand();
                        }
                        else
                        {
                            treQualities.Nodes[1].Nodes.Add(objQualityNode);
                            treQualities.Nodes[1].Expand();
                        }
                    }
                    CharacterObject.Qualities.Add(objAddQuality);

                    // Add any created Weapons to the character.
                    foreach (Weapon objWeapon in objWeapons)
                        CharacterObject.Weapons.Add(objWeapon);

                    // Create the Weapon Node if one exists.
                    foreach (TreeNode objWeaponNode in objWeaponNodes)
                    {
                        objWeaponNode.ContextMenuStrip = cmsWeapon;
                        treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                        treWeapons.Nodes[0].Expand();
                    }

                    treQualities.SortCustom();
                    break;
                case KarmaExpenseType.ManualAdd:
                case KarmaExpenseType.ManualSubtract:
                case KarmaExpenseType.QuickeningMetamagic:
                    break;
                case KarmaExpenseType.AddCritterPower:
                    foreach (CritterPower objPower in CharacterObject.CritterPowers.Where(objPower => objPower.InternalId == objEntry.Undo.ObjectId))
                    {
                        CharacterObject.CritterPowers.Remove(objPower);
                    }
                    break;

            }
            // Refund the Karma amount and remove the Expense Entry.
            CharacterObject.Karma -= decimal.ToInt32(objEntry.Amount);
            CharacterObject.ExpenseEntries.Remove(objEntry);

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsUndoNuyenExpense_Click(object sender, EventArgs e)
        {
            ListViewItem objItem = new ListViewItem();

            if (lstNuyen.SelectedItems != null && lstNuyen.SelectedItems.Count > 0)
            {
                objItem = lstNuyen.SelectedItems[0];
            }
            else
            {
                return;
            }

            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
            objItem = lstNuyen.SelectedItems[0];

            // Find the selected Nuyen Expense.
            foreach (ExpenseLogEntry objCharacterEntry in CharacterObject.ExpenseEntries)
            {
                if (objCharacterEntry.InternalId == objItem.SubItems[3].Text)
                {
                    objEntry = objCharacterEntry;
                    break;
                }
            }

            if (objEntry.Undo == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_UndoNoHistory", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NoUndoHistory", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            string strUndoId = objEntry.Undo.ObjectId;

            if (objEntry.Undo.KarmaType == KarmaExpenseType.ImproveInitiateGrade)
            {
                // Get the grade of the item we're undoing and make sure it's the highest grade
                int intMaxGrade = 0;
                foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
                {
                    intMaxGrade = Math.Max(intMaxGrade, objGrade.Grade);
                }
                foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
                {
                    if (objGrade.InternalId == strUndoId)
                    {
                        if (objGrade.Grade < intMaxGrade)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_UndoNotHighestGrade", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotHighestGrade", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        break;
                    }
                }
                if (MessageBox.Show(LanguageManager.GetString("Message_UndoExpense", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_UndoExpense", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return;
            }
            else
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_UndoExpense", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_UndoExpense", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    return;
            }

            switch (objEntry.Undo.NuyenType)
            {
                case NuyenExpenseType.AddCyberware:
                    {
                        // Locate the Cyberware that was added.
                        VehicleMod objVehicleMod = null;
                        Cyberware objCyberware = CharacterObject.Cyberware.DeepFindById(strUndoId);
                        TreeNode objNode = null;
                        if (objCyberware == null)
                        {
                            objCyberware = CommonFunctions.FindVehicleCyberware(strUndoId, CharacterObject.Vehicles, out objVehicleMod);
                            if (objCyberware != null)
                                objNode = treVehicles.FindNode(strUndoId);
                        }
                        else
                            objNode = treCyberware.FindNode(strUndoId);
                        if (objCyberware != null)
                        {
                            objCyberware.DeleteCyberware(treWeapons, treVehicles);

                            // Remove the Cyberware.
                            if (objCyberware.Parent != null)
                                objCyberware.Parent.Children.Remove(objCyberware);
                            else if (objVehicleMod != null)
                                objVehicleMod.Cyberware.Remove(objCyberware);
                            else
                                CharacterObject.Cyberware.Remove(objCyberware);

                            // Remove the item from the Tree.
                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddGear:
                    {
                        // Locate the Gear that was added.
                        //If the gear was already deleted manually we will not be able to locate it here
                        Gear objGear = CharacterObject.Gear.DeepFindById(strUndoId);
                        TreeNode objNode = null;
                        Vehicle objVehicle = null;
                        WeaponAccessory objWeaponAccessory = null;
                        Cyberware objCyberware = null;
                        if (objGear != null)
                        {
                            objNode = treGear.FindNode(objGear.InternalId);
                        }
                        else
                        {
                            objGear = CommonFunctions.FindVehicleGear(strUndoId, CharacterObject.Vehicles);
                            if (objGear != null)
                                objNode = treVehicles.FindNode(objGear.InternalId);
                            else
                                break;
                        }
                        objGear.Quantity -= objEntry.Undo.Qty;

                        if (objGear.Quantity <= 0)
                        {
                            if (objGear.Parent != null)
                            {
                                objGear.Parent.Children.Remove(objGear);
                                objGear.Parent.RefreshMatrixAttributeArray();
                            }
                            else if (objWeaponAccessory != null)
                            {
                                objWeaponAccessory.Gear.Remove(objGear);
                            }
                            else if (objCyberware != null)
                            {
                                objCyberware.Gear.Remove(objGear);
                                objCyberware.RefreshMatrixAttributeArray();
                            }
                            else if (objVehicle != null)
                            {
                                objVehicle.Gear.Remove(objGear);
                                objVehicle.RefreshMatrixAttributeArray();
                            }
                            else
                                CharacterObject.Gear.Remove(objGear);

                            objGear.DeleteGear(treWeapons, treVehicles);
                            objNode?.Remove();
                        }
                        else if (objNode != null)
                        {
                            objNode.Text = objGear.DisplayName(GlobalOptions.Language);
                        }

                        CharacterObject.PopulateFocusList(treFoci);
                    }
                    break;
                case NuyenExpenseType.AddVehicle:
                    {
                        // Locate the Vehicle that was added.
                        Vehicle objVehicle = CharacterObject.Vehicles.FindById(strUndoId);
                        if (objVehicle != null)
                        {
                            foreach (Gear objLoopGear in objVehicle.Gear)
                            {
                                objLoopGear.DeleteGear(treWeapons, treVehicles);
                            }
                            foreach (Weapon objLoopWeapon in objVehicle.Weapons)
                            {
                                objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                            }
                            foreach (VehicleMod objLoopMod in objVehicle.Mods)
                            {
                                foreach (Weapon objLoopWeapon in objLoopMod.Weapons)
                                {
                                    objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                                }
                                foreach (Cyberware objLoopCyberware in objLoopMod.Cyberware)
                                {
                                    objLoopCyberware.DeleteCyberware(treWeapons, treVehicles);
                                }
                            }
                            foreach (WeaponMount objLoopWeaponMount in objVehicle.WeaponMounts)
                            {
                                foreach (Weapon objLoopWeapon in objLoopWeaponMount.Weapons)
                                {
                                    objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                                }
                            }

                            // Remove the Vehicle.
                            CharacterObject.Vehicles.Remove(objVehicle);

                            treVehicles.FindNode(strUndoId)?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddVehicleMod:
                    {
                        // Locate the Vehicle Mod that was added.
                        VehicleMod objVehicleMod = CommonFunctions.FindVehicleMod(strUndoId, CharacterObject.Vehicles, out Vehicle objVehicle, out WeaponMount objWeaponMount);
                        if (objVehicleMod != null)
                        {
                            // Check for Improved Sensor bonus.
                            if (objVehicleMod.Bonus?["improvesensor"] != null || (objVehicleMod.WirelessOn && objVehicleMod.WirelessBonus?["improvesensor"] != null))
                            {
                                ChangeVehicleSensor(objVehicle, false);
                            }

                            foreach (Weapon objLoopWeapon in objVehicleMod.Weapons)
                            {
                                objLoopWeapon.DeleteWeapon(treWeapons, treVehicles);
                            }
                            foreach (Cyberware objLoopCyberware in objVehicleMod.Cyberware)
                            {
                                objLoopCyberware.DeleteCyberware(treWeapons, treVehicles);
                            }

                            // Remove the Vehicle Mod.
                            if (objWeaponMount != null)
                                objWeaponMount.Mods.Remove(objVehicleMod);
                            else
                                objVehicle.Mods.Remove(objVehicleMod);

                            // Remove the Vehicle Mod from the tree.
                            treVehicles.FindNode(strUndoId)?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddVehicleGear:
                    {
                        // Locate the Gear that was added.
                        TreeNode objNode = null;
                        Gear objGear = CommonFunctions.FindVehicleGear(strUndoId, CharacterObject.Vehicles, out Vehicle objVehicle, out WeaponAccessory objWeaponAccessory, out Cyberware objCyberware);
                        if (objGear == null)
                        {
                            objGear = CharacterObject.Gear.DeepFindById(strUndoId);
                            if (objGear == null)
                            {
                                objGear = CommonFunctions.FindCyberwareGear(strUndoId, CharacterObject.Cyberware, out objCyberware);
                                if (objGear == null)
                                {
                                    objGear = CommonFunctions.FindWeaponGear(strUndoId, CharacterObject.Weapons, out objWeaponAccessory);
                                    if (objGear != null)
                                        objNode = treWeapons.FindNode(strUndoId);
                                }
                                else
                                    objNode = treCyberware.FindNode(strUndoId);
                            }
                            else
                                objNode = treGear.FindNode(strUndoId);
                        }
                        else
                            objNode = treVehicles.FindNode(strUndoId);
                        if (objGear != null)
                        {
                            // Deduct the Qty from the Gear.
                            objGear.Quantity -= objEntry.Undo.Qty;

                            // Remove the Gear if its Qty has been reduced to 0.
                            if (objGear.Quantity <= 0)
                            {
                                if (objGear.Parent != null)
                                {
                                    objGear.Parent.Children.Remove(objGear);
                                    objGear.Parent.RefreshMatrixAttributeArray();
                                }
                                else if (objWeaponAccessory != null)
                                    objWeaponAccessory.Gear.Remove(objGear);
                                else if (objCyberware != null)
                                    objCyberware.Gear.Remove(objGear);
                                else if (objVehicle != null)
                                    objVehicle.Gear.Remove(objGear);
                                else
                                    CharacterObject.Gear.Remove(objGear);

                                objGear.DeleteGear(treWeapons, treVehicles);
                                objNode?.Remove();
                            }
                            else if (objNode != null)
                            {
                                objNode.Text = objGear.DisplayName(GlobalOptions.Language);
                            }
                        }
                    }
                    break;
                case NuyenExpenseType.AddVehicleWeapon:
                    {
                        // Locate the Weapon that was added.
                        Weapon objWeapon = CommonFunctions.FindVehicleWeapon(strUndoId, CharacterObject.Vehicles, out Vehicle objVehicle, out WeaponMount objWeaponMount, out VehicleMod objVehicleMod);
                        TreeNode objNode = null;
                        if (objWeapon == null)
                        {
                            objWeapon = CharacterObject.Weapons.DeepFindById(strUndoId);
                            if (objWeapon != null)
                                objNode = treWeapons.FindNode(strUndoId);
                        }
                        else
                            objNode = treVehicles.FindNode(strUndoId);
                        if (objWeapon != null)
                        {
                            objWeapon.DeleteWeapon(treWeapons, treVehicles);

                            // Remove the Weapon.
                            if (objWeapon.Parent != null)
                                objWeapon.Parent.Children.Remove(objWeapon);
                            else if (objWeaponMount != null)
                                objWeaponMount.Weapons.Remove(objWeapon);
                            else if (objVehicleMod != null)
                                objVehicleMod.Weapons.Remove(objWeapon);
                            else if (objVehicle != null)
                                objVehicle.Weapons.Remove(objWeapon);
                            else
                                CharacterObject.Weapons.Remove(objWeapon);

                            // Remove the Weapon from the Tree.
                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddVehicleWeaponAccessory:
                    {
                        // Locate the Weapon Accessory that was added.
                        WeaponAccessory objWeaponAccessory = CommonFunctions.FindVehicleWeaponAccessory(strUndoId, CharacterObject.Vehicles, out Weapon objWeapon);
                        TreeNode objNode = null;
                        if (objWeaponAccessory == null)
                        {
                            objWeaponAccessory = CommonFunctions.FindWeaponAccessory(strUndoId, CharacterObject.Weapons, out objWeapon);
                            if (objWeapon != null)
                                objNode = treWeapons.FindNode(strUndoId);
                        }
                        else
                            objNode = treVehicles.FindNode(strUndoId);
                        if (objWeaponAccessory != null)
                        {
                            // Remove the Weapon Accessory.
                            objWeapon.WeaponAccessories.Remove(objWeaponAccessory);

                            foreach (Gear objLoopGear in objWeaponAccessory.Gear)
                                objLoopGear.DeleteGear(treWeapons, treVehicles);

                            // Remove the Weapon Accessory from the Tree.
                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddVehicleWeaponMount:
                    {
                        WeaponMount objWeaponMount = CommonFunctions.FindVehicleWeaponMount(strUndoId, CharacterObject.Vehicles, out Vehicle objVehicle);
                        if (objWeaponMount != null)
                        {
                            objVehicle.WeaponMounts.Remove(objWeaponMount);
                            foreach (Weapon objWeapon in objWeaponMount.Weapons)
                                objWeapon.DeleteWeapon(treWeapons, treVehicles);
                            treVehicles.FindNode(strUndoId)?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddVehicleWeaponMountMod:
                    {
                        VehicleMod v = CommonFunctions.FindVehicleWeaponMountMod(strUndoId, CharacterObject.Vehicles, out WeaponMount wm);
                        if (v != null)
                        {
                            wm.Mods.Remove(v);
                            treVehicles.FindNode(strUndoId)?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddArmor:
                    {
                        // Locate the Armor that was added.
                        Armor objArmor = CharacterObject.Armor.FindById(strUndoId);

                        if (objArmor != null)
                        {
                            objArmor.DeleteArmor(treWeapons, treVehicles);

                            // Remove the Armor from the character.
                            CharacterObject.Armor.Remove(objArmor);

                            // Remove the Armor from the Tree.
                            treArmor.FindNode(strUndoId)?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddArmorMod:
                    {
                        // Locate the Armor Mod that was added.
                        ArmorMod objArmorMod = CommonFunctions.FindArmorMod(strUndoId, CharacterObject.Armor);
                        if (objArmorMod != null)
                        {
                            objArmorMod.DeleteArmorMod(treWeapons, treVehicles);

                            // Remove the Armor Mod from the Armor.
                            objArmorMod.Parent?.ArmorMods.Remove(objArmorMod);

                            // Remove the Armor Mod from the Tree.
                            treArmor.FindNode(objArmorMod.InternalId)?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddWeapon:
                    {
                        // Locate the Weapon that was added.
                        Weapon objWeapon = CharacterObject.Weapons.DeepFindById(strUndoId);
                        Vehicle objVehicle = null;
                        WeaponMount objWeaponMount = null;
                        VehicleMod objVehicleMod = null;
                        TreeNode objNode = null;
                        if (objWeapon == null)
                        {
                            objWeapon = CommonFunctions.FindVehicleWeapon(strUndoId, CharacterObject.Vehicles, out objVehicle, out objWeaponMount, out objVehicleMod);
                            if (objWeapon != null)
                                objNode = treVehicles.FindNode(strUndoId);
                        }
                        else
                            objNode = treWeapons.FindNode(strUndoId);
                        if (objWeapon != null)
                        {
                            objWeapon.DeleteWeapon(treWeapons, treVehicles);

                            // Remove the Weapn from the character.
                            if (objWeapon.Parent != null)
                                objWeapon.Parent.Children.Remove(objWeapon);
                            else if (objWeaponMount != null)
                                objWeaponMount.Weapons.Remove(objWeapon);
                            else if (objVehicleMod != null)
                                objVehicleMod.Weapons.Remove(objWeapon);
                            else if (objVehicle != null)
                                objVehicle.Weapons.Remove(objWeapon);
                            else
                                CharacterObject.Weapons.Remove(objWeapon);

                            // Remove the Weapon from the Tree.
                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddWeaponAccessory:
                    {
                        // Locate the Weapon Accessory that was added.
                        WeaponAccessory objWeaponAccessory = CommonFunctions.FindWeaponAccessory(strUndoId, CharacterObject.Weapons, out Weapon objWeapon);
                        TreeNode objNode = null;
                        if (objWeaponAccessory == null)
                        {
                            objWeaponAccessory = CommonFunctions.FindVehicleWeaponAccessory(strUndoId, CharacterObject.Vehicles, out objWeapon);
                            if (objWeapon != null)
                                objNode = treVehicles.FindNode(strUndoId);
                        }
                        else
                            objNode = treWeapons.FindNode(strUndoId);
                        if (objWeaponAccessory != null)
                        {
                            // Remove the Weapon Accessory.
                            objWeapon.WeaponAccessories.Remove(objWeaponAccessory);

                            foreach (Gear objLoopGear in objWeaponAccessory.Gear)
                            {
                                objLoopGear.DeleteGear(treWeapons, treVehicles);
                            }

                            // Remove the Weapon Accessory from the tree.
                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.IncreaseLifestyle:
                    {
                        // Locate the Lifestyle that was increased.
                        Lifestyle objLifestyle = CharacterObject.Lifestyles.FirstOrDefault(x => x.InternalId == strUndoId);
                        if (objLifestyle != null)
                        {
                            objLifestyle.Months -= 1;
                            RefreshSelectedLifestyle();
                        }
                    }
                    break;
                case NuyenExpenseType.AddArmorGear:
                    {
                        // Locate the Armor Gear that was added.
                        Gear objGear = CommonFunctions.FindArmorGear(strUndoId, CharacterObject.Armor, out Armor objArmor, out ArmorMod objArmorMod);
                        if (objGear != null)
                        {
                            // Deduct the Qty from the Gear.
                            objGear.Quantity -= objEntry.Undo.Qty;
                            TreeNode objNode = treArmor.FindNode(strUndoId);

                            // Remove the Gear if its Qty has been reduced to 0.
                            if (objGear.Quantity <= 0)
                            {
                                objGear.DeleteGear(treWeapons, treVehicles);

                                if (objGear.Parent != null)
                                {
                                    objGear.Parent.Children.Remove(objGear);
                                    objGear.Parent.RefreshMatrixAttributeArray();
                                }
                                else if (objArmorMod != null)
                                    objArmorMod.Gear.Remove(objGear);
                                else if (objArmor != null)
                                    objArmor.Gear.Remove(objGear);

                                objNode?.Remove();
                            }
                            else if (objNode != null)
                                objNode.Text = objGear.DisplayName(GlobalOptions.Language);
                        }
                    }
                    break;
                case NuyenExpenseType.AddVehicleModCyberware:
                    {
                        // Locate the Cyberware that was added.
                        Cyberware objCyberware = CommonFunctions.FindVehicleCyberware(strUndoId, CharacterObject.Vehicles, out VehicleMod objVehicleMod);
                        TreeNode objNode = null;
                        if (objCyberware == null)
                        {
                            objCyberware = CharacterObject.Cyberware.DeepFindById(strUndoId);
                            if (objCyberware != null)
                                objNode = treCyberware.FindNode(strUndoId);
                        }
                        else
                            objNode = treVehicles.FindNode(strUndoId);
                        if (objCyberware != null)
                        {
                            objCyberware.DeleteCyberware(treWeapons, treVehicles);
                            // Remove the Cyberware.
                            if (objCyberware.Parent != null)
                            {
                                objCyberware.Parent.Children.Remove(objCyberware);
                                objCyberware.Parent.RefreshMatrixAttributeArray();
                            }
                            else if (objVehicleMod != null)
                                objVehicleMod.Cyberware.Remove(objCyberware);
                            else
                                CharacterObject.Cyberware.Remove(objCyberware);

                            // Remove the Cyberware from the Tree.
                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddCyberwareGear:
                    {
                        // Locate the Gear that was added.
                        TreeNode objNode = null;
                        Gear objGear = CommonFunctions.FindCyberwareGear(strUndoId, CharacterObject.Cyberware, out Cyberware objCyberware);
                        Vehicle objVehicle = null;
                        WeaponAccessory objWeaponAccessory = null;
                        if (objGear == null)
                        {
                            objGear = CommonFunctions.FindVehicleGear(strUndoId, CharacterObject.Vehicles, out objVehicle, out objWeaponAccessory, out objCyberware);
                            if (objGear == null)
                            {
                                objGear = CharacterObject.Gear.DeepFindById(strUndoId);
                                if (objGear != null)
                                    objNode = treGear.FindNode(objGear.InternalId);
                            }
                            else
                                objNode = treVehicles.FindNode(objGear.InternalId);
                        }
                        else
                            objNode = treCyberware.FindNode(objGear.InternalId);
                        if (objGear != null)
                        {
                            objGear.DeleteGear(treWeapons, treVehicles);

                            if (objGear.Parent != null)
                            {
                                objGear.Parent.Children.Remove(objGear);
                                objGear.Parent.RefreshMatrixAttributeArray();
                            }
                            else if (objWeaponAccessory != null)
                                objWeaponAccessory.Gear.Remove(objGear);
                            else if (objCyberware != null)
                            {
                                objCyberware.Gear.Remove(objGear);
                                objCyberware.RefreshMatrixAttributeArray();
                            }
                            else if (objVehicle != null)
                            {
                                objVehicle.Gear.Remove(objGear);
                                objVehicle.RefreshMatrixAttributeArray();
                            }
                            else
                                CharacterObject.Gear.Remove(objGear);

                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.AddWeaponGear:
                    {
                        // Locate the Gear that was added.
                        Gear objGear = CommonFunctions.FindWeaponGear(strUndoId, CharacterObject.Weapons, out WeaponAccessory objWeaponAccessory);
                        TreeNode objNode = null;
                        Vehicle objVehicle = null;
                        Cyberware objCyberware = null;
                        if (objGear == null)
                        {
                            objGear = CommonFunctions.FindVehicleGear(strUndoId, CharacterObject.Vehicles, out objVehicle, out objWeaponAccessory, out objCyberware);
                            if (objGear == null)
                            {
                                objGear = CharacterObject.Gear.DeepFindById(strUndoId);
                                if (objGear != null)
                                    objNode = treGear.FindNode(objGear.InternalId);
                            }
                            else
                                objNode = treVehicles.FindNode(objGear.InternalId);
                        }
                        else
                            objNode = treWeapons.FindNode(objGear.InternalId);
                        if (objGear != null)
                        {
                            objGear.DeleteGear(treWeapons, treVehicles);
                            if (objGear.Parent != null)
                            {
                                objGear.Parent.Children.Remove(objGear);
                                objGear.Parent.RefreshMatrixAttributeArray();
                            }
                            else if (objWeaponAccessory != null)
                                objWeaponAccessory.Gear.Remove(objGear);
                            else if (objCyberware != null)
                            {
                                objCyberware.Gear.Remove(objGear);
                                objCyberware.RefreshMatrixAttributeArray();
                            }
                            else if (objVehicle != null)
                            {
                                objVehicle.Gear.Remove(objGear);
                                objVehicle.RefreshMatrixAttributeArray();
                            }
                            else
                                CharacterObject.Gear.Remove(objGear);
                            objNode?.Remove();
                        }
                    }
                    break;
                case NuyenExpenseType.ManualAdd:
                case NuyenExpenseType.ManualSubtract:
                    break;
            }
            // Refund the Nuyen amount and remove the Expense Entry.
            CharacterObject.Nuyen -= objEntry.Amount;
            CharacterObject.ExpenseEntries.Remove(objEntry);

            // Update various lists
            RefreshQualities(treQualities, cmsQuality, true);
            treQualities.SortCustom();
            nudQualityLevel_UpdateValue(null);
            UpdateMentorSpirits();
            RefreshMartialArts();
            RefreshAIPrograms();
            RefreshLimitModifiers();
            RefreshSpells(treSpells, cmsSpell, CharacterObject);
            PopulateGearList();
            RefreshContacts();
            PopulateCyberware();
            PopulateCalendar();

            // Populate Armor.
            for (int i = treArmor.Nodes.Count - 1; i >= 0; --i)
            {
                if (i != 0)
                    treArmor.Nodes[i].Remove();
                else
                    treArmor.Nodes[i].Nodes.Clear();
            }
            // Start by populating Locations.
            foreach (string strLocation in CharacterObject.ArmorLocations)
            {
                TreeNode objLocation = new TreeNode
                {
                    Tag = strLocation,
                    Text = strLocation,
                    ContextMenuStrip = cmsArmorLocation
                };
                treArmor.Nodes.Add(objLocation);
            }
            foreach (Armor objArmor in CharacterObject.Armor)
            {
                CommonFunctions.CreateArmorTreeNode(objArmor, treArmor, cmsArmor, cmsArmorMod, cmsArmorGear);
            }

            // Populate Weapons.
            for (int i = treWeapons.Nodes.Count - 1; i >= 0; --i)
            {
                if (i != 0)
                    treWeapons.Nodes[i].Remove();
                else
                    treWeapons.Nodes[i].Nodes.Clear();
            }
            // Start by populating Locations.
            foreach (string strLocation in CharacterObject.WeaponLocations)
            {
                TreeNode objLocation = new TreeNode
                {
                    Tag = strLocation,
                    Text = strLocation,
                    ContextMenuStrip = cmsWeaponLocation
                };
                treWeapons.Nodes.Add(objLocation);
            }
            foreach (Weapon objWeapon in CharacterObject.Weapons)
            {
                TreeNode objLocationNode = treWeapons.Nodes[0];
                if (!string.IsNullOrEmpty(objWeapon.Location))
                {
                    objLocationNode = treWeapons.Nodes.Cast<TreeNode>().FirstOrDefault(x => x.Text == objWeapon.Location) ?? treWeapons.Nodes[0];
                }
                CommonFunctions.CreateWeaponTreeNode(objWeapon, objLocationNode, cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
            }

            // Populate Foci.
            CharacterObject.PopulateFocusList(treFoci);

            // Populate Vehicles.
            for (int i = treVehicles.Nodes.Count - 1; i >= 0; --i)
            {
                if (i != 0)
                    treVehicles.Nodes[i].Remove();
                else
                    treVehicles.Nodes[i].Nodes.Clear();
            }
            foreach (Vehicle objVehicle in CharacterObject.Vehicles)
            {
                CommonFunctions.CreateVehicleTreeNode(objVehicle, treVehicles, cmsVehicle, cmsVehicleLocation, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsVehicleGear, cmsWeaponMount);
            }

            // Selections will be cleared when the lists are rebuilt, but I put these here as a way to also clear out the displayed info on selected items
            if (treCyberware.SelectedNode != null)
                RefreshSelectedCyberware();
            if (treArmor.SelectedNode != null)
                RefreshSelectedArmor();
            if (treGear.SelectedNode != null)
                RefreshSelectedGear();
            if (treLifestyles.SelectedNode != null)
                RefreshSelectedLifestyle();
            if (treVehicles.SelectedNode != null)
                RefreshSelectedVehicle();
            if (treWeapons.SelectedNode != null)
                RefreshSelectedWeapon();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsEditNuyenExpense_Click(object sender, EventArgs e)
        {
            cmdNuyenEdit_Click(sender, e);
        }

        private void tsEditKarmaExpense_Click(object sender, EventArgs e)
        {
            cmdKarmaEdit_Click(sender, e);
        }

        private void tsAddArmorGear_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treArmor.SelectedNode;
            // Make sure a parent items is selected, then open the Select Gear window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmor", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectArmor", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Select the root Gear node then open the Select Gear window.
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickArmorGear(true);
                if (blnAddAgain)
                    treArmor.SelectedNode = objSelectedNode;
            }
            while (blnAddAgain);
        }

        private void tsArmorGearAddAsPlugin_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treArmor.SelectedNode;
            // Make sure a parent items is selected, then open the Select Gear window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmor", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectArmor", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Make sure the selected item is another piece of Gear.
            ArmorMod objMod = null;
            Gear objGear = CommonFunctions.FindArmorGear(objSelectedNode.Tag.ToString(), CharacterObject.Armor);
            if (objGear == null)
            {
                objMod = CommonFunctions.FindArmorMod(objSelectedNode.Tag.ToString(), CharacterObject.Armor);
                if (objMod == null || string.IsNullOrEmpty(objMod.GearCapacity))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_SelectArmor", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectArmor", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }

            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickArmorGear(objMod != null);
                if (blnAddAgain)
                    treArmor.SelectedNode = objSelectedNode;
            }
            while (blnAddAgain);
        }

        private void tsArmorNotes_Click(object sender, EventArgs e)
        {
            if (treArmor.SelectedNode == null)
                return;
            Armor objArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());
            if (objArmor != null)
            {
                string strOldValue = objArmor.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objArmor.Notes = frmItemNotes.Notes;
                    if (objArmor.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objArmor.Notes))
                    treArmor.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treArmor.SelectedNode.ForeColor = SystemColors.WindowText;
                treArmor.SelectedNode.ToolTipText = objArmor.Notes.WordWrap(100);
            }
        }

        private void tsArmorModNotes_Click(object sender, EventArgs e)
        {
            if (treArmor.SelectedNode == null)
                return;
            ArmorMod objArmorMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);
            if (objArmorMod != null)
            {
                string strOldValue = objArmorMod.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objArmorMod.Notes = frmItemNotes.Notes;
                    if (objArmorMod.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objArmorMod.Notes))
                    treArmor.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objArmorMod.IncludedInArmor)
                    treArmor.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treArmor.SelectedNode.ForeColor = SystemColors.WindowText;
                treArmor.SelectedNode.ToolTipText = objArmorMod.Notes.WordWrap(100);
            }
        }

        private void tsArmorGearNotes_Click(object sender, EventArgs e)
        {
            if (treArmor.SelectedNode == null)
                return;
            Gear objArmorGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);
            if (objArmorGear != null)
            {
                string strOldValue = objArmorGear.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objArmorGear.Notes = frmItemNotes.Notes;
                    if (objArmorGear.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objArmorGear.Notes))
                    treArmor.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objArmorGear.IncludedInParent)
                    treArmor.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treArmor.SelectedNode.ForeColor = SystemColors.WindowText;
                treArmor.SelectedNode.ToolTipText = objArmorGear.Notes.WordWrap(100);
            }
        }

        private void tsWeaponNotes_Click(object sender, EventArgs e)
        {
            if (treWeapons.SelectedNode == null)
                return;
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());
            if (objWeapon != null)
            {
                string strOldValue = objWeapon.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objWeapon.Notes = frmItemNotes.Notes;
                    if (objWeapon.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objWeapon.Notes))
                    treWeapons.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objWeapon.Cyberware || objWeapon.Category == "Gear" || !string.IsNullOrEmpty(objWeapon.ParentID))
                    treWeapons.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treWeapons.SelectedNode.ForeColor = SystemColors.WindowText;
                treWeapons.SelectedNode.ToolTipText = objWeapon.Notes.WordWrap(100);
            }
        }

        private void tsWeaponAccessoryNotes_Click(object sender, EventArgs e)
        {
            if (treWeapons.SelectedNode == null)
                return;
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);

            string strOldValue = objAccessory.Notes;
            frmNotes frmItemNotes = new frmNotes
            {
                Notes = strOldValue
            };
            frmItemNotes.ShowDialog(this);

            if (frmItemNotes.DialogResult == DialogResult.OK)
            {
                objAccessory.Notes = frmItemNotes.Notes;
                if (objAccessory.Notes != strOldValue)
                {
                    IsDirty = true;
                }
            }

            if (!string.IsNullOrEmpty(objAccessory.Notes))
                treWeapons.SelectedNode.ForeColor = Color.SaddleBrown;
            else if (objAccessory.IncludedInWeapon)
                treWeapons.SelectedNode.ForeColor = SystemColors.GrayText;
            else
                treWeapons.SelectedNode.ForeColor = SystemColors.WindowText;
            treWeapons.SelectedNode.ToolTipText = objAccessory.Notes.WordWrap(100);
        }

        private void tsCyberwareNotes_Click(object sender, EventArgs e)
        {
            if (treCyberware.SelectedNode == null)
                return;
            Cyberware objCyberware = CharacterObject.Cyberware.DeepFindById(treCyberware.SelectedNode.Tag.ToString());
            if (objCyberware != null)
            {
                string strOldValue = objCyberware.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objCyberware.Notes = frmItemNotes.Notes;
                    if (objCyberware.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

            if (!string.IsNullOrEmpty(objCyberware.Notes))
                    treCyberware.SelectedNode.ForeColor = Color.SaddleBrown;
            else if (objCyberware.Capacity == "[*]" || !string.IsNullOrEmpty(objCyberware.ParentID))
                        treCyberware.SelectedNode.ForeColor = SystemColors.GrayText;
                    else
                        treCyberware.SelectedNode.ForeColor = SystemColors.WindowText;
                treCyberware.SelectedNode.ToolTipText = objCyberware.Notes.WordWrap(100);
            }
        }

        private void tsQualityNotes_Click(object sender, EventArgs e)
        {
            if (treQualities.SelectedNode == null)
                return;
            Quality objQuality = CharacterObject.Qualities.FindById(treQualities.SelectedNode.Tag.ToString());
            if (objQuality != null)
            {
                string strOldValue = objQuality.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objQuality.Notes = frmItemNotes.Notes;
                    if (objQuality.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objQuality.Notes))
                    treQualities.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objQuality.OriginSource == QualitySource.Metatype || objQuality.OriginSource == QualitySource.MetatypeRemovable || objQuality.OriginSource == QualitySource.Improvement)
                    treQualities.SelectedNode.ForeColor = SystemColors.GrayText;
                else
                    treQualities.SelectedNode.ForeColor = SystemColors.WindowText;
                treQualities.SelectedNode.ToolTipText = objQuality.Notes.WordWrap(100);
            }
        }

        private void tsMartialArtsNotes_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode == null)
                return;
            MartialArt objMartialArt = CharacterObject.MartialArts.FindById(treMartialArts.SelectedNode.Tag.ToString());
            if (objMartialArt != null)
            {
                string strOldValue = objMartialArt.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objMartialArt.Notes = frmItemNotes.Notes;
                    if (objMartialArt.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objMartialArt.Notes))
                    treMartialArts.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMartialArts.SelectedNode.ForeColor = SystemColors.WindowText;
                treMartialArts.SelectedNode.ToolTipText = objMartialArt.Notes.WordWrap(100);
            }
            else
            {
                MartialArtAdvantage objTechnique = CommonFunctions.FindMartialArtAdvantage(treMartialArts.SelectedNode.Tag.ToString(), CharacterObject.MartialArts);
                if (objTechnique != null)
                {
                    string strOldValue = objTechnique.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objTechnique.Notes = frmItemNotes.Notes;
                        if (objTechnique.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objTechnique.Notes))
                        treMartialArts.SelectedNode.ForeColor = Color.SaddleBrown;
                    else
                        treMartialArts.SelectedNode.ForeColor = SystemColors.WindowText;
                    treMartialArts.SelectedNode.ToolTipText = objTechnique.Notes.WordWrap(100);
                }
            }
        }

        private void tsMartialArtManeuverNotes_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode == null)
                return;
            MartialArtManeuver objMartialArtManeuver = CharacterObject.MartialArtManeuvers.FindById(treMartialArts.SelectedNode.Tag.ToString());
            if (objMartialArtManeuver != null)
            {
                string strOldValue = objMartialArtManeuver.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };

                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objMartialArtManeuver.Notes = frmItemNotes.Notes;
                    if (objMartialArtManeuver.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objMartialArtManeuver.Notes))
                    treMartialArts.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMartialArts.SelectedNode.ForeColor = SystemColors.WindowText;
                treMartialArts.SelectedNode.ToolTipText = objMartialArtManeuver.Notes.WordWrap(100);
            }
        }

        private void tsSpellNotes_Click(object sender, EventArgs e)
        {
            if (treSpells.SelectedNode == null)
                return;
            Spell objSpell = CharacterObject.Spells.FindById(treSpells.SelectedNode.Tag.ToString());
            if (objSpell != null)
            {
                string strOldValue = objSpell.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objSpell.Notes = frmItemNotes.Notes;
                    if (objSpell.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objSpell.Notes))
                    treSpells.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treSpells.SelectedNode.ForeColor = SystemColors.WindowText;
                treSpells.SelectedNode.ToolTipText = objSpell.Notes.WordWrap(100);
            }
        }

        private void tsComplexFormNotes_Click(object sender, EventArgs e)
        {
            if (treComplexForms.SelectedNode == null)
                return;
            ComplexForm objComplexForm = CharacterObject.ComplexForms.FindById(treComplexForms.SelectedNode.Tag.ToString());
            if (objComplexForm != null)
            {
                string strOldValue = objComplexForm.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objComplexForm.Notes = frmItemNotes.Notes;
                    if (objComplexForm.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objComplexForm.Notes))
                    treComplexForms.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treComplexForms.SelectedNode.ForeColor = SystemColors.WindowText;
                treComplexForms.SelectedNode.ToolTipText = objComplexForm.Notes.WordWrap(100);
            }
        }

        private void tsCritterPowersNotes_Click(object sender, EventArgs e)
        {
            if (treCritterPowers.SelectedNode == null)
                return;
            CritterPower objCritterPower = CharacterObject.CritterPowers.FindById(treCritterPowers.SelectedNode.Tag.ToString());
            if (objCritterPower != null)
            {
                string strOldValue = objCritterPower.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objCritterPower.Notes = frmItemNotes.Notes;
                    if (objCritterPower.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objCritterPower.Notes))
                    treCritterPowers.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treCritterPowers.SelectedNode.ForeColor = SystemColors.WindowText;
                treCritterPowers.SelectedNode.ToolTipText = objCritterPower.Notes.WordWrap(100);
            }
        }

        private void tsMetamagicNotes_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode == null)
                return;
            InitiationGrade objGrade = CharacterObject.InitiationGrades.FindById(treMetamagic.SelectedNode.Tag.ToString());
            if (objGrade != null)
            {
                string strOldValue = objGrade.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objGrade.Notes = frmItemNotes.Notes;
                    if (objGrade.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objGrade.Notes))
                    treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                treMetamagic.SelectedNode.ToolTipText = objGrade.Notes.WordWrap(100);
            }
        }

        private void tsGearNotes_Click(object sender, EventArgs e)
        {
            if (treGear.SelectedNode == null)
                return;
            Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objGear != null)
            {
                string strOldValue = objGear.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objGear.Notes = frmItemNotes.Notes;
                    if (objGear.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

            if (!string.IsNullOrEmpty(objGear.Notes))
                    treGear.SelectedNode.ForeColor = Color.SaddleBrown;
            else if (objGear.IncludedInParent)
                treGear.SelectedNode.ForeColor = SystemColors.GrayText;
            else
                    treGear.SelectedNode.ForeColor = SystemColors.WindowText;
                treGear.SelectedNode.ToolTipText = objGear.Notes.WordWrap(100);
            }
        }

        private void tsGearPluginNotes_Click(object sender, EventArgs e)
        {
            if (treGear.SelectedNode == null)
                return;
            Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objGear != null)
            {
                string strOldValue = objGear.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objGear.Notes = frmItemNotes.Notes;
                    if (objGear.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

            if (!string.IsNullOrEmpty(objGear.Notes))
                    treGear.SelectedNode.ForeColor = Color.SaddleBrown;
            else if (objGear.IncludedInParent)
                treGear.SelectedNode.ForeColor = SystemColors.GrayText;
            else
                    treGear.SelectedNode.ForeColor = SystemColors.WindowText;
                treGear.SelectedNode.ToolTipText = objGear.Notes.WordWrap(100);
            }
        }

        private void tsVehicleNotes_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null)
                return;
            Vehicle objVehicle = CharacterObject.Vehicles.FirstOrDefault(x => x.InternalId == treVehicles.SelectedNode.Tag.ToString());

            if (objVehicle != null)
            {
                string strOldValue = objVehicle.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objVehicle.Notes = frmItemNotes.Notes;
                    if (objVehicle.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objVehicle.Notes))
                    treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                else
                    treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                treVehicles.SelectedNode.ToolTipText = objVehicle.Notes.WordWrap(100);
            }
            else
            {
                VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                if (objMod != null)
                {
                    string strOldValue = objMod.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objMod.Notes = frmItemNotes.Notes;
                        if (objMod.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objMod.Notes))
                        treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                    else if (objMod.IncludedInVehicle)
                        treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
                    else
                        treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                    treVehicles.SelectedNode.ToolTipText = objMod.Notes.WordWrap(100);
                }
            }
        }

        private void tsLifestyleNotes_Click(object sender, EventArgs e)
        {
            if (treLifestyles.SelectedNode != null)
            {
                Lifestyle objLifestyle = CharacterObject.Lifestyles.FindById(treLifestyles.SelectedNode.Tag.ToString());
                if (objLifestyle != null)
                {
                    string strOldValue = objLifestyle.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objLifestyle.Notes = frmItemNotes.Notes;
                        if (objLifestyle.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objLifestyle.Notes))
                        treLifestyles.SelectedNode.ForeColor = Color.SaddleBrown;
                    else
                        treLifestyles.SelectedNode.ForeColor = SystemColors.WindowText;
                    treLifestyles.SelectedNode.ToolTipText = objLifestyle.Notes.WordWrap(100);
                }
            }
        }

        private void tsVehicleWeaponNotes_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode != null)
                return;
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objWeapon != null)
            {
                string strOldValue = objWeapon.Notes;
                frmNotes frmItemNotes = new frmNotes
                {
                    Notes = strOldValue
                };
                frmItemNotes.ShowDialog(this);

                if (frmItemNotes.DialogResult == DialogResult.OK)
                {
                    objWeapon.Notes = frmItemNotes.Notes;
                    if (objWeapon.Notes != strOldValue)
                    {
                        IsDirty = true;
                    }
                }

                if (!string.IsNullOrEmpty(objWeapon.Notes))
                    treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
                else if (objWeapon.Cyberware || objWeapon.Category == "Gear" || !string.IsNullOrEmpty(objWeapon.ParentID))
                        treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
                    else
                        treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
                treVehicles.SelectedNode.ToolTipText = objWeapon.Notes.WordWrap(100);
            }
        }

        private void tsVehicleName_Click(object sender, EventArgs e)
        {
            // Make sure a parent item is selected.
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectVehicleName", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectVehicle", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            while (treVehicles.SelectedNode.Level > 1)
            {
                treVehicles.SelectedNode = treVehicles.SelectedNode.Parent;
            }

            // Get the information for the currently selected Vehicle.
            Vehicle objVehicle = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());

            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_VehicleName", GlobalOptions.Language),
                DefaultString = objVehicle.VehicleName
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objVehicle.VehicleName = frmPickText.SelectedValue;
            treVehicles.SelectedNode.Text = objVehicle.DisplayName(GlobalOptions.Language);

            IsDirty = true;
        }

        private void tsVehicleAddCyberware_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            Cyberware objCyberwareParent = null;
            VehicleMod objMod = CommonFunctions.FindVehicleMod(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles, out Vehicle objVehicle, out WeaponMount objWeaponMount);
            if (objMod == null)
                objCyberwareParent = CommonFunctions.FindVehicleCyberware(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles, out objMod);

            if (objCyberwareParent == null && (objMod == null || !objMod.AllowCyberware))
            {
                MessageBox.Show(LanguageManager.GetString("Message_VehicleCyberwarePlugin", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NoCyberware", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("cyberware.xml");
            bool blnAddAgain = false;

            do
            {
                frmSelectCyberware frmPickCyberware = new frmSelectCyberware(CharacterObject, Improvement.ImprovementSource.Cyberware, objCyberwareParent?.GetNode() ?? objMod.GetNode());
                if (objCyberwareParent == null)
                {
                    //frmPickCyberware.SetGrade = "Standard";
                    frmPickCyberware.MaximumCapacity = objMod.CapacityRemaining;
                    frmPickCyberware.Subsystems = objMod.Subsystems;
                    HashSet<string> setDisallowedMounts = new HashSet<string>();
                    HashSet<string> setHasMounts = new HashSet<string>();
                    foreach (Cyberware objLoopCyberware in objMod.Cyberware.DeepWhere(x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                    {
                        string[] strLoopDisallowedMounts = objLoopCyberware.BlocksMounts.Split(',');
                        foreach (string strLoop in strLoopDisallowedMounts)
                            if (!setDisallowedMounts.Contains(strLoop + objLoopCyberware.Location))
                                setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                        string strLoopHasModularMount = objLoopCyberware.HasModularMount;
                        if (!string.IsNullOrEmpty(strLoopHasModularMount))
                            if (!setHasMounts.Contains(strLoopHasModularMount))
                                setHasMounts.Add(strLoopHasModularMount);
                    }
                    string strDisallowedMounts = string.Empty;
                    foreach (string strLoop in setDisallowedMounts)
                        if (!strLoop.EndsWith("Right") && (!strLoop.EndsWith("Left") || setDisallowedMounts.Contains(strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                            strDisallowedMounts += strLoop + ",";
                    // Remove trailing ","
                    if (!string.IsNullOrEmpty(strDisallowedMounts))
                        strDisallowedMounts = strDisallowedMounts.Substring(0, strDisallowedMounts.Length - 1);
                    frmPickCyberware.DisallowedMounts = strDisallowedMounts;
                    string strHasMounts = string.Empty;
                    foreach (string strLoop in setHasMounts)
                        strHasMounts += strLoop + ",";
                    // Remove trailing ","
                    if (!string.IsNullOrEmpty(strHasMounts))
                        strHasMounts = strHasMounts.Substring(0, strHasMounts.Length - 1);
                    frmPickCyberware.HasModularMounts = strHasMounts;
                }
                else
                {
                    frmPickCyberware.SetGrade = objCyberwareParent.Grade;
                    // If the Cyberware has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                    if (!objCyberwareParent.Capacity.Contains('['))
                    {
                        frmPickCyberware.MaximumCapacity = objCyberwareParent.CapacityRemaining;

                        // Do not allow the user to add a new piece of Cyberware if its Capacity has been reached.
                        if (CharacterObjectOptions.EnforceCapacity && objCyberwareParent.CapacityRemaining < 0)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            frmPickCyberware.Dispose();
                            break;
                        }
                    }

                    frmPickCyberware.CyberwareParent = objCyberwareParent;
                    frmPickCyberware.Subsystems = objCyberwareParent.AllowedSubsystems;

                    HashSet<string> setDisallowedMounts = new HashSet<string>();
                    HashSet<string> setHasMounts = new HashSet<string>();
                    string[] strLoopDisallowedMounts = objCyberwareParent.BlocksMounts.Split(',');
                    foreach (string strLoop in strLoopDisallowedMounts)
                        setDisallowedMounts.Add(strLoop + objCyberwareParent.Location);
                    string strLoopHasModularMount = objCyberwareParent.HasModularMount;
                    if (!string.IsNullOrEmpty(strLoopHasModularMount))
                        setHasMounts.Add(strLoopHasModularMount);
                    foreach (Cyberware objLoopCyberware in objCyberwareParent.Children.DeepWhere(x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                    {
                        strLoopDisallowedMounts = objLoopCyberware.BlocksMounts.Split(',');
                        foreach (string strLoop in strLoopDisallowedMounts)
                            if (!setDisallowedMounts.Contains(strLoop + objLoopCyberware.Location))
                                setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                        strLoopHasModularMount = objLoopCyberware.HasModularMount;
                        if (!string.IsNullOrEmpty(strLoopHasModularMount))
                            if (!setHasMounts.Contains(strLoopHasModularMount))
                                setHasMounts.Add(strLoopHasModularMount);
                    }
                    string strDisallowedMounts = string.Empty;
                    foreach (string strLoop in setDisallowedMounts)
                        if (!strLoop.EndsWith("Right") && (!strLoop.EndsWith("Left") || setDisallowedMounts.Contains(strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                            strDisallowedMounts += strLoop + ",";
                    // Remove trailing ","
                    if (!string.IsNullOrEmpty(strDisallowedMounts))
                        strDisallowedMounts = strDisallowedMounts.Substring(0, strDisallowedMounts.Length - 1);
                    frmPickCyberware.DisallowedMounts = strDisallowedMounts;
                    string strHasMounts = string.Empty;
                    foreach (string strLoop in setHasMounts)
                        strHasMounts += strLoop + ",";
                    // Remove trailing ","
                    if (!string.IsNullOrEmpty(strHasMounts))
                        strHasMounts = strHasMounts.Substring(0, strHasMounts.Length - 1);
                    frmPickCyberware.HasModularMounts = strHasMounts;
                }
                frmPickCyberware.LockGrade();
                frmPickCyberware.ParentVehicle = objVehicle ?? objMod.Parent;
                frmPickCyberware.ShowDialog(this);

                if (frmPickCyberware.DialogResult == DialogResult.Cancel)
                {
                    frmPickCyberware.Dispose();
                    break;
                }
                blnAddAgain = frmPickCyberware.AddAgain;

                XmlNode objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + frmPickCyberware.SelectedCyberware + "\"]");

                // Create the Cyberware object.
                Cyberware objCyberware = new Cyberware(CharacterObject);
                List<Weapon> objWeapons = new List<Weapon>();
                TreeNode objNode = new TreeNode();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                List<Vehicle> objVehicles = new List<Vehicle>();
                List<TreeNode> objVehicleNodes = new List<TreeNode>();
                objCyberware.Create(objXmlCyberware, CharacterObject, frmPickCyberware.SelectedGrade, Improvement.ImprovementSource.Cyberware, frmPickCyberware.SelectedRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, false, true, string.Empty, null, objVehicle);
                if (objCyberware.InternalId == Guid.Empty.ToString())
                {
                    frmPickCyberware.Dispose();
                    continue;
                }

                if (frmPickCyberware.FreeCost)
                    objCyberware.Cost = "0";

                decimal decCost = objCyberware.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objCyberware.TotalAvail(GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Apply a markup if applicable.
                if (frmPickCyberware.Markup != 0 && !frmPickCyberware.FreeCost)
                {
                    decCost *= 1 + (frmPickCyberware.Markup / 100.0m);
                }

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickCyberware.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickCyberware.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        string strEntry = string.Empty;
                        strEntry = LanguageManager.GetString("String_ExpensePurchaseVehicleCyberware", GlobalOptions.Language);
                        objExpense.Create(decCost * -1, strEntry + " " + objCyberware.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddVehicleModCyberware, objCyberware.InternalId);
                        objExpense.Undo = objUndo;
                    }
                }

                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();
                objMod.Cyberware.Add(objCyberware);

                foreach (Weapon objWeapon in objWeapons)
                {
                    objWeapon.ParentVehicle = objVehicle;
                    objMod.Weapons.Add(objWeapon);
                }

                // Create the Weapon Node if one exists.
                foreach (TreeNode objWeaponNode in objWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsVehicleWeapon;
                    objSelectedNode.Parent.Nodes.Add(objWeaponNode);
                    objSelectedNode.Parent.Expand();
                }

                RefreshSelectedVehicle();
                IsCharacterUpdateRequested = true;

                IsDirty = true;

                frmPickCyberware.Dispose();
            }
            while (blnAddAgain);
        }

        private void tsArmorName_Click(object sender, EventArgs e)
        {
            // Make sure a parent item is selected, then open the Select Accessory window.
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectArmorName", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectArmor", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (treArmor.SelectedNode.Level > 1)
                treArmor.SelectedNode = treArmor.SelectedNode.Parent;

            // Get the information for the currently selected Armor.
            Armor objArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());

            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_ArmorName", GlobalOptions.Language),
                DefaultString = objArmor.ArmorName
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objArmor.ArmorName = frmPickText.SelectedValue;
            treArmor.SelectedNode.Text = objArmor.DisplayName(GlobalOptions.Language);

            IsDirty = true;
        }

        private void tsEditAdvancedLifestyle_Click(object sender, EventArgs e)
        {
            treLifestyles_DoubleClick(sender, e);
        }

        private void tsAdvancedLifestyleNotes_Click(object sender, EventArgs e)
        {
            tsLifestyleNotes_Click(sender, e);
        }

        private void tsEditLifestyle_Click(object sender, EventArgs e)
        {
            treLifestyles_DoubleClick(sender, e);
        }

        private void tsLifestyleName_Click(object sender, EventArgs e)
        {
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectLifestyleName", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectLifestyle", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Get the information for the currently selected Lifestyle.
            Lifestyle objLifestyle = null;
            foreach (Lifestyle objSelectedLifestyle in CharacterObject.Lifestyles)
            {
                if (objSelectedLifestyle.InternalId == treLifestyles.SelectedNode.Tag.ToString())
                {
                    objLifestyle = objSelectedLifestyle;
                    break;
                }
            }

            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_LifestyleName", GlobalOptions.Language),
                DefaultString = objLifestyle.Name
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            objLifestyle.Name = frmPickText.SelectedValue;
            treLifestyles.SelectedNode.Text = objLifestyle.DisplayName(GlobalOptions.Language);

            IsDirty = true;
        }

        private void tsGearRenameLocation_Click(object sender, EventArgs e)
        {
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            string strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in CharacterObject.GearLocations)
            {
                i++;
                if (strLocation == treGear.SelectedNode.Text)
                {
                    foreach (Gear objGear in CharacterObject.Gear)
                    {
                        if (objGear.Location == strLocation)
                            objGear.Location = strNewLocation;
                    }

                    CharacterObject.GearLocations[i] = strNewLocation;
                    treGear.SelectedNode.Text = strNewLocation;
                    break;
                }
            }

            IsDirty = true;
        }

        private void tsWeaponRenameLocation_Click(object sender, EventArgs e)
        {
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            string strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in CharacterObject.WeaponLocations)
            {
                i++;
                if (strLocation == treWeapons.SelectedNode.Text)
                {
                    foreach (Weapon objWeapon in CharacterObject.Weapons)
                    {
                        if (objWeapon.Location == strLocation)
                            objWeapon.Location = strNewLocation;
                    }

                    CharacterObject.WeaponLocations[i] = strNewLocation;
                    treWeapons.SelectedNode.Text = strNewLocation;
                    break;
                }
            }

            IsDirty = true;
        }

        private void tsCreateSpell_Click(object sender, EventArgs e)
        {
            int intSpellKarmaCost = CharacterObject.SpellKarmaCost;
            // Make sure the character has enough Karma before letting them select a Spell.
            if (CharacterObject.Karma < intSpellKarmaCost)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // The character is still allowed to add Spells, so show the Create Spell window.
            frmCreateSpell frmSpell = new frmCreateSpell(CharacterObject);
            frmSpell.ShowDialog(this);

            if (frmSpell.DialogResult == DialogResult.Cancel)
                return;

            Spell objSpell = frmSpell.SelectedSpell;

            if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", objSpell.DisplayName(GlobalOptions.Language)).Replace("{1}", intSpellKarmaCost.ToString())))
                return;

            TreeNode objNode = new TreeNode
            {
                Text = objSpell.DisplayName(GlobalOptions.Language),
                Tag = objSpell.InternalId,
                ContextMenuStrip = cmsSpell
            };

            CharacterObject.Spells.Add(objSpell);

            switch (objSpell.Category)
            {
                case "Combat":
                    treSpells.Nodes[0].Nodes.Add(objNode);
                    treSpells.Nodes[0].Expand();
                    break;
                case "Detection":
                    treSpells.Nodes[1].Nodes.Add(objNode);
                    treSpells.Nodes[1].Expand();
                    break;
                case "Health":
                    treSpells.Nodes[2].Nodes.Add(objNode);
                    treSpells.Nodes[2].Expand();
                    break;
                case "Illusion":
                    treSpells.Nodes[3].Nodes.Add(objNode);
                    treSpells.Nodes[3].Expand();
                    break;
                case "Manipulation":
                    treSpells.Nodes[4].Nodes.Add(objNode);
                    treSpells.Nodes[4].Expand();
                    break;
                case "Rituals":
                    /*
                    int intNode = 5;
                    if (_objCharacter.AdeptEnabled && !_objCharacter.MagicianEnabled)
                        intNode = 0;
                    treSpells.Nodes[intNode].Nodes.Add(objNode);
                    treSpells.Nodes[intNode].Expand();
                    */
                    treSpells.Nodes[5].Nodes.Add(objNode);
                    treSpells.Nodes[5].Expand();
                    break;
                case "Enchantments":
                    treSpells.Nodes[6].Nodes.Add(objNode);
                    treSpells.Nodes[6].Expand();
                    break;
            }

            treSpells.SelectedNode = objNode;

            // Create the Expense Log Entry.
            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
            objEntry.Create(intSpellKarmaCost * -1, LanguageManager.GetString("String_ExpenseLearnSpell", GlobalOptions.Language) + " " + objSpell.Name, ExpenseType.Karma, DateTime.Now);
            CharacterObject.ExpenseEntries.Add(objEntry);
            CharacterObject.Karma -= intSpellKarmaCost;

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateKarma(KarmaExpenseType.AddSpell, objSpell.InternalId);
            objEntry.Undo = objUndo;


            treSpells.SortCustom();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsImprovementNotes_Click(object sender, EventArgs e)
        {
            if (treImprovements.SelectedNode != null)
            {
                if (treImprovements.SelectedNode.Level > 0)
                {
                    Improvement objImprovement = null;
                    foreach (Improvement objCharacterImprovement in CharacterObject.Improvements)
                    {
                        if (objCharacterImprovement.SourceName == treImprovements.SelectedNode.Tag.ToString())
                        {
                            objImprovement = objCharacterImprovement;
                            break;
                        }
                    }

                    string strOldValue = objImprovement.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objImprovement.Notes = frmItemNotes.Notes;
                        if (objImprovement.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objImprovement.Notes))
                    {
                        if (objImprovement.Enabled)
                            treImprovements.SelectedNode.ForeColor = Color.SaddleBrown;
                        else
                            treImprovements.SelectedNode.ForeColor = Color.SandyBrown;
                    }
                    else if (objImprovement.Enabled)
                            treImprovements.SelectedNode.ForeColor = SystemColors.WindowText;
                        else
                            treImprovements.SelectedNode.ForeColor = SystemColors.GrayText;
                    treImprovements.SelectedNode.ToolTipText = objImprovement.Notes.WordWrap(100);
                }
            }
        }

        private void tsArmorRenameLocation_Click(object sender, EventArgs e)
        {
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            string strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in CharacterObject.ArmorLocations)
            {
                i++;
                if (strLocation == treArmor.SelectedNode.Text)
                {
                    foreach (Armor objArmor in CharacterObject.Armor)
                    {
                        if (objArmor.Location == strLocation)
                            objArmor.Location = strNewLocation;
                    }

                    CharacterObject.ArmorLocations[i] = strNewLocation;
                    treArmor.SelectedNode.Text = strNewLocation;
                    break;
                }
            }

            IsDirty = true;
        }

        private void tsImprovementRenameLocation_Click(object sender, EventArgs e)
        {
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            string strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in CharacterObject.ImprovementGroups)
            {
                i++;
                if (strLocation == treImprovements.SelectedNode.Text)
                {
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.CustomGroup == strLocation)
                            objImprovement.CustomGroup = strNewLocation;
                    }

                    CharacterObject.ImprovementGroups[i] = strNewLocation;
                    treImprovements.SelectedNode.Text = strNewLocation;
                    break;
                }
            }

            IsDirty = true;
        }

        private void tsCyberwareAddGear_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treCyberware.SelectedNode;
            // Make sure a parent items is selected, then open the Select Gear window.
            if (objSelectedNode == null || objSelectedNode.Level == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectCyberware", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectCyberware", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            Cyberware objCyberware = CharacterObject.Cyberware.DeepFindById(objSelectedNode.Tag.ToString());

            // Make sure the Cyberware is allowed to accept Gear.
            if (objCyberware.AllowGear == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CyberwareGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CyberwareGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objCyberware.GetNode());
                string strCategories = string.Empty;
                foreach (XmlNode objXmlCategory in objCyberware.AllowGear)
                    strCategories += objXmlCategory.InnerText + ",";
                frmPickGear.AllowedCategories = strCategories;
                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                TreeNode objNode = new TreeNode();

                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();

                Gear objNewGear = new Gear(CharacterObject);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, true, true, frmPickGear.Aerodynamic);

                if (objNewGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objNewGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objNewGear.DisplayName(GlobalOptions.Language);

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objNewGear.Cost = "0";
                }

                decimal decCost = objNewGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objNewGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objNewGear.DeleteGear(treWeapons, treVehicles);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseCyberwearGear", GlobalOptions.Language) + " " + objNewGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddCyberwareGear, objNewGear.InternalId, 1);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                // Create any Weapons that came with this Gear.
                foreach (Weapon objWeapon in objWeapons)
                    CharacterObject.Weapons.Add(objWeapon);

                foreach (TreeNode objWeaponNode in objWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeapon;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }

                objCyberware.Gear.Add(objNewGear);

                objNode.ContextMenuStrip = cmsCyberwareGear;
                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                RefreshSelectedCyberware();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void tsCyberwareGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treCyberware.SelectedNode;
            // Make sure a parent items is selected, then open the Select Gear window.
            if (objSelectedNode == null || objSelectedNode.Level < 2)
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindCyberwareGear(objSelectedNode.Tag.ToString(), CharacterObject.Cyberware.GetAllDescendants(x => x.Children), out Cyberware objFoundCyber);
            if (objSensor == null)
            // Make sure the Gear was found.
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            XmlNode objXmlSensorGear = objSensor.GetNode();
            string strCategories = string.Empty;
            if (objXmlSensorGear?.InnerXml.Contains("<addoncategory>") == true)
            {
                foreach (XmlNode objXmlCategory in objXmlSensorGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
            }
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objXmlSensorGear)
                {
                    //frmPickGear.ShowNegativeCapacityOnly = true;
                    AllowedCategories = strCategories
                };

                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                // Open the Gear XML file and locate the selected piece.
                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                TreeNode objNode = new TreeNode();

                Gear objGear = new Gear(CharacterObject);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, true, true, frmPickGear.Aerodynamic);

                if (objGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objGear.Quantity = frmPickGear.SelectedQty;

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objGear.Cost = "(" + objGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objGear.Cost = "0";
                }

                objNode.Text = objGear.DisplayName(GlobalOptions.Language);

                decimal decCost = objGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objGear.DeleteGear(treWeapons, treVehicles);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseCyberwearGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddCyberwareGear, objGear.InternalId, frmPickGear.SelectedQty);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                if (objSelectedNode.Level < 3)
                    objNode.ContextMenuStrip = cmsCyberwareGear;

                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                objGear.Parent = objSensor;
                objSensor.Children.Add(objGear);
                objSensor.RefreshMatrixAttributeArray();

                IsCharacterUpdateRequested = true;
                RefreshSelectedCyberware();

                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void tsWeaponAccessoryAddGear_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treWeapons.SelectedNode;
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(objSelectedNode.Tag.ToString(), CharacterObject.Weapons);

            // Make sure the Weapon Accessory is allowed to accept Gear.
            if (objAccessory.AllowGear == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_WeaponGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CyberwareGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objAccessory.GetNode());
                string strCategories = string.Empty;
                foreach (XmlNode objXmlCategory in objAccessory.AllowGear)
                    strCategories += objXmlCategory.InnerText + ",";
                frmPickGear.AllowedCategories = strCategories;
                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                TreeNode objNode = new TreeNode();

                // Open the Gear XML file and locate the selected piece.
                XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();

                Gear objNewGear = new Gear(CharacterObject);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, true, true, frmPickGear.Aerodynamic);

                if (objNewGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objNewGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objNewGear.DisplayName(GlobalOptions.Language);

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objNewGear.Cost = "0";
                }

                decimal decCost = objNewGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objNewGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objNewGear.DeleteGear(treWeapons, treVehicles);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseWeaponGear", GlobalOptions.Language) + " " + objNewGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddWeaponGear, objNewGear.InternalId, 1);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                // Create any Weapons that came with this Gear.
                foreach (Weapon objWeapon in objWeapons)
                    CharacterObject.Weapons.Add(objWeapon);

                foreach (TreeNode objWeaponNode in objWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeaponAccessoryGear;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }

                objAccessory.Gear.Add(objNewGear);

                objNode.ContextMenuStrip = cmsWeaponAccessoryGear;
                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                RefreshSelectedWeapon();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void tsWeaponAccessoryGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treWeapons.SelectedNode;
            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindWeaponGear(objSelectedNode.Tag.ToString(), CharacterObject.Weapons);
            if (objSensor == null)
            // Make sure the Gear was found.
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objXmlSensorGear = objSensor.GetNode();
            string strCategories = string.Empty;
            if (objXmlSensorGear?.InnerXml.Contains("<addoncategory>") == true)
            {
                foreach (XmlNode objXmlCategory in objXmlSensorGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
            }
            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objXmlSensorGear)
                {
                    //frmPickGear.ShowNegativeCapacityOnly = true;
                    AllowedCategories = strCategories
                };

                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                TreeNode objNode = new TreeNode();

                Gear objGear = new Gear(CharacterObject);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, true, true, frmPickGear.Aerodynamic);

                if (objGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objGear.DisplayName(GlobalOptions.Language);

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objGear.Cost = "(" + objGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objGear.Cost = "0";
                }

                decimal decCost = objGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objGear.DeleteGear(treWeapons, treVehicles);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseWeaponGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddWeaponGear, objGear.InternalId, frmPickGear.SelectedQty);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                objNode.ContextMenuStrip = cmsCyberwareGear;

                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                objGear.Parent = objSensor;
                objSensor.Children.Add(objGear);
                objSensor.RefreshMatrixAttributeArray();

                IsCharacterUpdateRequested = true;
                RefreshSelectedWeapon();

                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void tsVehicleRenameLocation_Click(object sender, EventArgs e)
        {
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel)
                return;

            // Determine if this is a Location.
            TreeNode objVehicleNode = treVehicles.SelectedNode;
            do
            {
                objVehicleNode = objVehicleNode.Parent;
            } while (objVehicleNode.Level > 1);

            // Get a reference to the affected Vehicle.
            Vehicle objVehicle = null;
            foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
            {
                if (objCharacterVehicle.InternalId == objVehicleNode.Tag.ToString())
                {
                    objVehicle = objCharacterVehicle;
                    break;
                }
            }

            string strNewLocation = frmPickText.SelectedValue;

            int i = -1;
            foreach (string strLocation in objVehicle.Locations)
            {
                i++;
                if (strLocation == treVehicles.SelectedNode.Text)
                {
                    foreach (Gear objGear in objVehicle.Gear)
                    {
                        if (objGear.Location == strLocation)
                            objGear.Location = strNewLocation;
                    }

                    objVehicle.Locations[i] = strNewLocation;
                    treVehicles.SelectedNode.Text = strNewLocation;
                    break;
                }
            }
        }

        private void tsCreateNaturalWeapon_Click(object sender, EventArgs e)
        {
            frmNaturalWeapon frmCreateNaturalWeapon = new frmNaturalWeapon(CharacterObject);
            frmCreateNaturalWeapon.ShowDialog(this);

            if (frmCreateNaturalWeapon.DialogResult == DialogResult.Cancel)
                return;

            Weapon objWeapon = frmCreateNaturalWeapon.SelectedWeapon;
            CharacterObject.Weapons.Add(objWeapon);
            CommonFunctions.CreateWeaponTreeNode(objWeapon, treWeapons.Nodes[0], cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        private void tsVehicleWeaponAccessoryNotes_Click(object sender, EventArgs e)
        {
            WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            string strOldValue = objAccessory.Notes;
            frmNotes frmItemNotes = new frmNotes
            {
                Notes = strOldValue
            };
            frmItemNotes.ShowDialog(this);

            if (frmItemNotes.DialogResult == DialogResult.OK)
            {
                objAccessory.Notes = frmItemNotes.Notes;
                if (objAccessory.Notes != strOldValue)
                {
                    IsDirty = true;
                }
            }

            if (!string.IsNullOrEmpty(objAccessory.Notes))
                treVehicles.SelectedNode.ForeColor = Color.SaddleBrown;
            else if (objAccessory.IncludedInWeapon)
                treVehicles.SelectedNode.ForeColor = SystemColors.GrayText;
            else
                treVehicles.SelectedNode.ForeColor = SystemColors.WindowText;
            treVehicles.SelectedNode.ToolTipText = objAccessory.Notes.WordWrap(100);
        }

        private void tsVehicleWeaponAccessoryGearMenuAddAsPlugin_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            // Locate the Vehicle Sensor Gear.
            Gear objSensor = CommonFunctions.FindVehicleGear(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objSensor == null)
            // Make sure the Gear was found.
            {
                MessageBox.Show(LanguageManager.GetString("Message_ModifyVehicleGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objXmlSensorGear = objSensor.GetNode();
            string strCategories = string.Empty;
            if (objXmlSensorGear?.InnerXml.Contains("<addoncategory>") == true)
            {
                foreach (XmlNode objXmlCategory in objXmlSensorGear.SelectNodes("addoncategory"))
                    strCategories += objXmlCategory.InnerText + ",";
                // Remove the trailing comma.
                strCategories = strCategories.Substring(0, strCategories.Length - 1);
            }
            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objXmlSensorGear)
                {
                    //frmPickGear.ShowNegativeCapacityOnly = true;
                    AllowedCategories = strCategories
                };

                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();
                TreeNode objNode = new TreeNode();

                Gear objGear = new Gear(CharacterObject);
                objGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, false, true, frmPickGear.Aerodynamic);

                if (objGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objGear.DisplayName(GlobalOptions.Language);

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objGear.Cost = "(" + objGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objGear.Cost = "0";
                }

                decimal decCost = objGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objGear.DeleteGear(treWeapons, treVehicles);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseWeaponGear", GlobalOptions.Language) + " " + objGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddWeaponGear, objGear.InternalId, frmPickGear.SelectedQty);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                objNode.ContextMenuStrip = cmsCyberwareGear;

                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                objGear.Parent = objSensor;
                objSensor.Children.Add(objGear);
                objSensor.RefreshMatrixAttributeArray();

                IsCharacterUpdateRequested = true;
                RefreshSelectedVehicle();
                IsDirty = true;
            }
            while (blnAddAgain);
        }

        private void tsVehicleWeaponAccessoryAddGear_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(objSelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            // Make sure the Weapon Accessory is allowed to accept Gear.
            if (objAccessory.AllowGear == null)
            {
                MessageBox.Show(LanguageManager.GetString("Message_WeaponGear", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CyberwareGear", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Open the Gear XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            bool blnAddAgain = false;

            do
            {
                Cursor = Cursors.WaitCursor;
                frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objAccessory.GetNode());
                string strCategories = string.Empty;
                foreach (XmlNode objXmlCategory in objAccessory.AllowGear)
                    strCategories += objXmlCategory.InnerText + ",";
                frmPickGear.AllowedCategories = strCategories;
                frmPickGear.ShowDialog(this);
                Cursor = Cursors.Default;

                if (frmPickGear.DialogResult == DialogResult.Cancel)
                {
                    frmPickGear.Dispose();
                    break;
                }
                blnAddAgain = frmPickGear.AddAgain;

                TreeNode objNode = new TreeNode();

                XmlNode objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

                // Create the new piece of Gear.
                List<Weapon> objWeapons = new List<Weapon>();
                List<TreeNode> objWeaponNodes = new List<TreeNode>();

                Gear objNewGear = new Gear(CharacterObject);
                objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, false, true, frmPickGear.Aerodynamic);

                if (objNewGear.InternalId == Guid.Empty.ToString())
                {
                    frmPickGear.Dispose();
                    continue;
                }

                objNewGear.Quantity = frmPickGear.SelectedQty;
                objNode.Text = objNewGear.DisplayName(GlobalOptions.Language);

                // Reduce the cost for Do It Yourself components.
                if (frmPickGear.DoItYourself)
                    objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.5";
                // If the item was marked as free, change its cost.
                if (frmPickGear.FreeCost)
                {
                    objNewGear.Cost = "0";
                }

                decimal decCost = objNewGear.TotalCost;

                // Multiply the cost if applicable.
                string strAvail = objNewGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                    decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
                if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                    decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

                // Check the item's Cost and make sure the character can afford it.
                if (!frmPickGear.FreeCost)
                {
                    if (decCost > CharacterObject.Nuyen)
                    {
                        objNewGear.DeleteGear(treWeapons, treVehicles);
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        frmPickGear.Dispose();
                        continue;
                    }
                    else
                    {
                        // Create the Expense Log Entry.
                        ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                        objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseWeaponGear", GlobalOptions.Language) + " " + objNewGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                        CharacterObject.ExpenseEntries.Add(objExpense);
                        CharacterObject.Nuyen -= decCost;

                        ExpenseUndo objUndo = new ExpenseUndo();
                        objUndo.CreateNuyen(NuyenExpenseType.AddWeaponGear, objNewGear.InternalId, 1);
                        objExpense.Undo = objUndo;
                    }
                }
                frmPickGear.Dispose();

                objAccessory.Gear.Add(objNewGear);

                objNode.ContextMenuStrip = cmsVehicleWeaponAccessoryGear;
                objSelectedNode.Nodes.Add(objNode);
                objSelectedNode.Expand();

                RefreshSelectedVehicle();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
            while (blnAddAgain);
        }
#endregion

#region Additional Common Tab Control Events
        private void treQualities_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // Locate the selected Quality.
            lblQualitySource.Text = string.Empty;
            tipTooltip.SetToolTip(lblQualitySource, null);
            if (treQualities.SelectedNode == null || treQualities.SelectedNode.Level == 0)
            {
                nudQualityLevel_UpdateValue(null);
                return;
            }

            Quality objQuality = CharacterObject.Qualities.FindById(treQualities.SelectedNode.Tag.ToString());

            string strBook = CommonFunctions.LanguageBookShort(objQuality.Source, GlobalOptions.Language);
            string strPage = objQuality.Page(GlobalOptions.Language);
            lblQualitySource.Text = strBook + " " + strPage;
            tipTooltip.SetToolTip(lblQualitySource, CommonFunctions.LanguageBookLong(objQuality.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
            lblQualityBP.Text = (objQuality.BP * objQuality.Levels * CharacterObjectOptions.KarmaQuality).ToString() + " " + LanguageManager.GetString("String_Karma", GlobalOptions.Language);

            nudQualityLevel_UpdateValue(objQuality);
        }

        private void tabControl_MouseWheel(object sender, MouseEventArgs e)
        {
            //TODO: Global option to switch behaviour on/off, method to emulate clicking the scroll buttons instead of changing the selected index,
            //allow wrapping back to first/last tab item based on scroll direction
            var tabControl = (sender as TabControl);
            if (e.Location.Y <= tabControl.ItemSize.Height)
            {
                var scrollAmount = e.Delta;
                var selectedTabIndex = tabControl.SelectedIndex;

                if ((selectedTabIndex == tabControl.TabCount - 1 && scrollAmount < 0) ||
                    (selectedTabIndex == 0 && scrollAmount > 0))
                    return;

                tabControl.SelectedIndex = scrollAmount < 0 ? selectedTabIndex + 1 : selectedTabIndex - 1;
            }
        }
        #endregion

        #region Additional Cyberware Tab Control Events
        private void treCyberware_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedCyberware();
        }
#endregion

#region Additional Street Gear Tab Control Events
        private void treWeapons_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedWeapon();
            RefreshPasteStatus();
        }

        private void treWeapons_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treWeapons.SelectedNode == null)
                return;

                if (treWeapons.SelectedNode.Level != 1 && treWeapons.SelectedNode.Level != 0)
                    return;

                // Do not allow the root element to be moved.
                if (treWeapons.SelectedNode.Tag.ToString() == "Node_SelectedWeapons")
                    return;

            _intDragLevel = treWeapons.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treWeapons_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treWeapons_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else if (treWeapons.Nodes.Count > 0)
            {
                intNewIndex = treWeapons.Nodes[treWeapons.Nodes.Count - 1].Nodes.Count;
                nodDestination = treWeapons.Nodes[treWeapons.Nodes.Count - 1];
            }

            if (treWeapons.SelectedNode.Level == 1)
                CommonFunctions.MoveWeaponNode(CharacterObject, intNewIndex, nodDestination, treWeapons);
            else
                CommonFunctions.MoveWeaponRoot(CharacterObject, intNewIndex, nodDestination, treWeapons);

            // Clear the background color for all Nodes.
            treWeapons.ClearNodeBackground(null);

            IsDirty = true;
        }

        private void treWeapons_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treWeapons.ClearNodeBackground(objNode);
        }

        private void treArmor_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (treArmor.SelectedNode.Level == 0)
            {
                cmdArmorEquipAll.Visible = true;
                cmdArmorUnEquipAll.Visible = true;
            }
            else
            {
                cmdArmorEquipAll.Visible = false;
                cmdArmorUnEquipAll.Visible = false;
            }

            if (treArmor.SelectedNode.Level == 1)
            {
                cmdArmorDecrease.Enabled = true;
                cmdArmorIncrease.Enabled = true;
            }
            else if (treArmor.SelectedNode.Level == 2)
            {
                cmdArmorDecrease.Enabled = false;
                cmdArmorIncrease.Enabled = false;
            }

            RefreshSelectedArmor();
            RefreshPasteStatus();
        }

        private void treArmor_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treArmor.SelectedNode == null || treArmor.SelectedNode.Level != 1)
                    return;

            _intDragLevel = treArmor.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treArmor_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treArmor_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else if (treArmor.Nodes.Count > 0)
            {
                intNewIndex = treArmor.Nodes[treArmor.Nodes.Count - 1].Nodes.Count;
                nodDestination = treArmor.Nodes[treArmor.Nodes.Count - 1];
            }

            CommonFunctions.MoveArmorNode(CharacterObject, intNewIndex, nodDestination, treArmor);

            // Clear the background color for all Nodes.
            treArmor.ClearNodeBackground(null);

            IsDirty = true;
        }

        private void treArmor_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treArmor.ClearNodeBackground(objNode);
        }

        private void treLifestyles_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedLifestyle();
            RefreshPasteStatus();
        }

        private void treLifestyles_DoubleClick(object sender, EventArgs e)
        {
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level == 0)
            {
                return;
            }

            // Locate the selected Lifestyle.
            Lifestyle objLifestyle = null;
            string strGuid = string.Empty;
            int intMonths = 0;
            int intPosition = -1;
            foreach (Lifestyle objCharacterLifestyle in CharacterObject.Lifestyles)
            {
                intPosition++;
                if (objCharacterLifestyle.InternalId == treLifestyles.SelectedNode.Tag.ToString())
                {
                    objLifestyle = objCharacterLifestyle;
                    strGuid = objLifestyle.InternalId;
                    intMonths = objLifestyle.Months;
                    break;
                }
            }
            if (objLifestyle == null)
                return;

            Lifestyle objNewLifestyle = new Lifestyle(CharacterObject);
            if (objLifestyle.StyleType.ToString() != "Standard")
            {
                // Edit Advanced Lifestyle.
                frmSelectLifestyleAdvanced frmPickLifestyle = new frmSelectLifestyleAdvanced(objNewLifestyle, CharacterObject);
                frmPickLifestyle.SetLifestyle(objLifestyle);
                frmPickLifestyle.ShowDialog(this);

                if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                    return;

                // Update the selected Lifestyle and refresh the list.
                objLifestyle = frmPickLifestyle.SelectedLifestyle;
            }
            else
            {
                // Edit Basic Lifestyle.
                frmSelectLifestyle frmPickLifestyle = new frmSelectLifestyle(objNewLifestyle, CharacterObject);
                frmPickLifestyle.SetLifestyle(objLifestyle);
                frmPickLifestyle.ShowDialog(this);

                if (frmPickLifestyle.DialogResult == DialogResult.Cancel)
                    return;

                // Update the selected Lifestyle and refresh the list.
                objLifestyle = frmPickLifestyle.SelectedLifestyle;
            }
            objLifestyle.SetInternalId(strGuid);
            objLifestyle.Months = intMonths;
            CharacterObject.Lifestyles[intPosition] = objLifestyle;
            treLifestyles.SelectedNode.Text = objLifestyle.DisplayName(GlobalOptions.Language);
            RefreshSelectedLifestyle();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void treLifestyles_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level != 1)
            {
                    return;
            }
            _intDragLevel = treLifestyles.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treLifestyles_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treLifestyles_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else if (treLifestyles.Nodes.Count > 0)
            {
                intNewIndex = treLifestyles.Nodes[treLifestyles.Nodes.Count - 1].Nodes.Count;
                nodDestination = treLifestyles.Nodes[treLifestyles.Nodes.Count - 1];
            }

            CommonFunctions.MoveLifestyleNode(CharacterObject, intNewIndex, nodDestination, treLifestyles);

            // Clear the background color for all Nodes.
            treLifestyles.ClearNodeBackground(null);

            IsDirty = true;
        }

        private void treLifestyles_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treLifestyles.ClearNodeBackground(objNode);
        }

        private void treGear_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedGear();
            RefreshPasteStatus();
        }

        private void chkArmorEquipped_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Locate the selected Armor or Armor Mod.
            if (treArmor.SelectedNode != null)
            {
                if (treArmor.SelectedNode.Level == 1)
                {
                    Armor objArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());
                    if (objArmor != null)
                    {
                        objArmor.Equipped = chkArmorEquipped.Checked;
                        if (chkArmorEquipped.Checked)
                        {
                            // Add the Armor's Improevments to the character.
                            if (objArmor.Bonus != null)
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.Bonus, false, 1, objArmor.DisplayNameShort(GlobalOptions.Language));
                            if (objArmor.WirelessOn && objArmor.WirelessBonus != null)
                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId, objArmor.WirelessBonus, false, 1, objArmor.DisplayNameShort(GlobalOptions.Language));
                            // Add the Improvements from any Armor Mods in the Armor.
                            foreach (ArmorMod objMod in objArmor.ArmorMods)
                            {
                                if (objMod.Equipped)
                                {
                                    if (objMod.Bonus != null)
                                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort(GlobalOptions.Language));
                                    if (objMod.WirelessOn && objMod.WirelessBonus != null)
                                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.WirelessBonus, false, objMod.Rating, objMod.DisplayNameShort(GlobalOptions.Language));
                                    // Add the Improvements from any Gear in the Armor.
                                    foreach (Gear objGear in objMod.Gear)
                                    {
                                        if (objGear.Equipped)
                                        {
                                            if (objGear.Bonus != null)
                                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                                            if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                                ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                                        }
                                    }
                                }
                            }
                            // Add the Improvements from any Gear in the Armor.
                            foreach (Gear objGear in objArmor.Gear)
                            {
                                if (objGear.Equipped)
                                {
                                    if (objGear.Bonus != null)
                                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                                    if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                        ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                                }
                            }
                        }
                        else
                        {
                            // Remove any Improvements the Armor created.
                            if (objArmor.Bonus != null || (objArmor.WirelessOn && objArmor.WirelessBonus != null))
                                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Armor, objArmor.InternalId);
                            // Remove any Improvements from any Armor Mods in the Armor.
                            foreach (ArmorMod objMod in objArmor.ArmorMods)
                            {
                                if (objMod.Bonus != null || (objMod.WirelessOn && objMod.WirelessBonus != null))
                                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                                // Remove any Improvements from any Gear in the Armor.
                                foreach (Gear objGear in objMod.Gear)
                                {
                                    if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                                        ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);
                                }
                            }
                            // Remove any Improvements from any Gear in the Armor.
                            foreach (Gear objGear in objArmor.Gear)
                            {
                                if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);
                            }
                        }
                    }
                }
                else if (treArmor.SelectedNode.Level > 1)
                {
                    ArmorMod objMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);
                    if (objMod != null)
                    {
                        objMod.Equipped = chkArmorEquipped.Checked;
                        if (chkArmorEquipped.Checked)
                        {
                            if (objMod.Parent.Equipped)
                            {
                                // Add the Mod's Improevments to the character.
                                if (objMod.Bonus != null)
                                    ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.Bonus, false, objMod.Rating, objMod.DisplayNameShort(GlobalOptions.Language));
                                if (objMod.WirelessOn && objMod.WirelessBonus != null)
                                    ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId, objMod.WirelessBonus, false, objMod.Rating, objMod.DisplayNameShort(GlobalOptions.Language));
                            }
                        }
                        else
                        {
                            // Remove any Improvements the Mod created.
                            if (objMod.Bonus != null || (objMod.WirelessOn && objMod.WirelessBonus != null))
                                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ArmorMod, objMod.InternalId);
                        }
                    }

                    Gear objGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor, out Armor objFoundArmor, out ArmorMod objFoundArmorMod);
                    if (objGear != null)
                    {
                        objGear.Equipped = chkArmorEquipped.Checked;
                        if (chkArmorEquipped.Checked)
                        {
                            if (objFoundArmor.Equipped && (objFoundArmorMod == null || objFoundArmorMod.Equipped))
                            {
                                // Add the Gear's Improevments to the character.
                                if (objGear.Bonus != null)
                                    ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                                if (objGear.WirelessOn && objGear.WirelessBonus != null)
                                    ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                            }
                        }
                        else
                        {
                            // Remove any Improvements the Gear created.
                            if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
                                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);
                        }
                    }
                }
                RefreshSelectedArmor();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void cmdFireWeapon_Click(object sender, EventArgs e)
        {
            // "Click" the first menu item available.
            if (cmsAmmoSingleShot.Enabled)
                cmsAmmoSingleShot_Click(sender, e);
            else
            {
                if (cmsAmmoShortBurst.Enabled)
                    cmsAmmoShortBurst_Click(sender, e);
                else
                    cmsAmmoLongBurst_Click(sender, e);
            }
        }

        private void cmdReloadWeapon_Click(object sender, EventArgs e)
        {
            List<Gear> lstAmmo = new List<Gear>();
            List<string> lstCount = new List<string>();
            bool blnExternalSource = false;
            Gear objExternalSource = new Gear(CharacterObject)
            {
                Name = "External Source"
            };

            // Locate the selected Weapon.
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());
            if (!objWeapon.RequireAmmo)
            {
                // If the Weapon does not require Ammo, just use External Source.
                lstAmmo.Add(objExternalSource);
            }
            else
            {
                string ammoString = objWeapon.CalculatedAmmo(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
                // Determine which loading methods are available to the Weapon.
                if (ammoString.Contains(" or ") || ammoString.Contains('x') || ammoString.Contains("Special") || ammoString.Contains('+'))
                {
                    string strWeaponAmmo = ammoString.ToLower();
                    if (strWeaponAmmo.Contains("external source"))
                        blnExternalSource = true;
                    // Get rid of external source, special, or belt, and + energy.
                    strWeaponAmmo = strWeaponAmmo.Replace("external source", "100");
                    strWeaponAmmo = strWeaponAmmo.Replace("special", "100");
                    strWeaponAmmo = strWeaponAmmo.Replace(" + energy", string.Empty);
                    strWeaponAmmo = strWeaponAmmo.Replace(" or belt", " or 250(belt)");


                    string[] strAmmos = strWeaponAmmo.Split(new[] { " or " }, StringSplitOptions.RemoveEmptyEntries);

                    foreach (string strAmmo in strAmmos)
                    {
                        string strThisAmmo = strAmmo;
                        if (strThisAmmo.StartsWith("2x") || strThisAmmo.StartsWith("3x") || strThisAmmo.StartsWith("4x"))
                            strThisAmmo = strThisAmmo.Substring(2, strThisAmmo.Length - 2);
                        if (strThisAmmo.EndsWith("x2") || strThisAmmo.EndsWith("x3") || strThisAmmo.EndsWith("x4"))
                            strThisAmmo = strThisAmmo.Substring(0, strThisAmmo.Length - 2);

                        if (strThisAmmo.Contains('('))
                            strThisAmmo = strThisAmmo.Substring(0, strThisAmmo.IndexOf('('));

                        lstCount.Add(strThisAmmo);
                    }
                }
                else
                {
                    // Nothing weird in the ammo string, so just use the number given.
                    string strAmmo = ammoString;
                    if (strAmmo.Contains('('))
                        strAmmo = strAmmo.Substring(0, strAmmo.IndexOf('('));
                    lstCount.Add(strAmmo);
                }

                // Load ammo for flare guns
                if (objWeapon.Spec == "Flare Launcher" && objWeapon.Name == "Micro Flare Launcher")
                {
                    lstAmmo.AddRange(CharacterObject.Gear.DeepWhere(x => x.Children, x => x.Name == "Micro Flares" && x.Category == "Survival Gear" && x.Quantity > 0));
                }
                // Find all of the Ammo for the current Weapon that the character is carrying.
                if (objWeapon.AmmoCategory != "Grenade Launchers" && objWeapon.AmmoCategory != "Missile Launchers" && objWeapon.AmmoCategory != "Mortar Launchers")
                {
                    // This is a standard Weapon, so consume traditional Ammunition.
                    lstAmmo.AddRange(CharacterObject.Gear.DeepWhere(x => x.Children, x => x.Category == "Ammunition" && x.Quantity > 0 && (x.Extra == objWeapon.AmmoCategory || (objWeapon.UseSkill == "Throwing Weapons" && objWeapon.Name == x.Name))));
                }
                else if (objWeapon.AmmoCategory == "Grenade Launchers")
                {
                    // Grenade Launchers can only use Grenades.
                    lstAmmo.AddRange(CharacterObject.Gear.DeepWhere(x => x.Children, x => x.Category == "Ammunition" && x.Quantity > 0 && x.Name.StartsWith("Minigrenade:")));
                }
                else if (objWeapon.AmmoCategory == "Missile Launchers")
                {
                    // Missile Launchers can only use Missiles and Rockets.
                    lstAmmo.AddRange(CharacterObject.Gear.DeepWhere(x => x.Children, x => x.Category == "Ammunition" && x.Quantity > 0 && (x.Name.StartsWith("Missile:") || x.Name.StartsWith("Rocket:"))));
                }
                else if (objWeapon.AmmoCategory == "Mortar Launchers")
                {
                    // Mortar Launchers can only use Mortars.
                    lstAmmo.AddRange(CharacterObject.Gear.DeepWhere(x => x.Children, x => x.Category == "Ammunition" && x.Quantity > 0 && x.Name.StartsWith("Mortar Round:")));
                }

                // If the Weapon is allowed to use an External Source, put in an External Source item.
                if (blnExternalSource)
                {
                    lstAmmo.Add(objExternalSource);
                }

                // Make sure the character has some form of Ammunition for this Weapon.
                if (lstAmmo.Count == 0)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmoType", GlobalOptions.Language).Replace("{0}", objWeapon.DisplayAmmoCategory(GlobalOptions.Language)), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }
            }

            // Show the Ammunition Selection window.
            frmReload frmReloadWeapon = new frmReload
            {
                Ammo = lstAmmo,
                Count = lstCount
            };
            frmReloadWeapon.ShowDialog(this);

            if (frmReloadWeapon.DialogResult == DialogResult.Cancel)
                return;

            // Return any unspent rounds to the Ammo.
            if (objWeapon.AmmoRemaining > 0)
            {
                foreach (Gear objAmmo in CharacterObject.Gear)
                {
                    if (objAmmo.InternalId == objWeapon.AmmoLoaded)
                    {
                        objAmmo.Quantity += objWeapon.AmmoRemaining;

                        // Refresh the Gear tree.
                        TreeNode objNode = treGear.FindNode(objAmmo.InternalId);
                        if (objNode != null)
                        {
                            objNode.Text = objAmmo.DisplayName(GlobalOptions.Language);
                        }

                        break;
                    }
                    foreach (Gear objChild in objAmmo.Children.GetAllDescendants(x => x.Children))
                    {
                        if (objChild.InternalId == objWeapon.AmmoLoaded)
                        {
                            // If this is a plugin for a Spare Clip, move any extra rounds to the character instead of messing with the Clip amount.
                            if (objChild.Parent.Name.StartsWith("Spare Clip") || objChild.Parent.Name.StartsWith("Speed Loader"))
                            {
                                TreeNode objNewNode = new TreeNode();
                                List<Weapon> lstWeapons = new List<Weapon>();
                                List<TreeNode> lstWeaponNodes = new List<TreeNode>();
                                Gear objNewGear = new Gear(CharacterObject);
                                objNewGear.Copy(objChild, objNewNode, lstWeapons, lstWeaponNodes);
                                objNewGear.Quantity = objWeapon.AmmoRemaining;
                                objNewNode.Text = objNewGear.DisplayName(GlobalOptions.Language);
                                CharacterObject.Gear.Add(objNewGear);
                                treGear.Nodes[0].Nodes.Add(objNewNode);
                                goto EndLoop;
                            }
                            else
                                objChild.Quantity += objWeapon.AmmoRemaining;

                            // Refresh the Gear tree.
                            TreeNode objNode = treGear.FindNode(objChild.InternalId);
                            if (objNode != null)
                            {
                                objNode.Text = objAmmo.DisplayName(GlobalOptions.Language);
                            }
                            break;
                        }
                    }
                }
                EndLoop:;
            }

            Gear objSelectedAmmo = null;
            decimal decQty = frmReloadWeapon.SelectedCount;
            // If an External Source is not being used, consume ammo.
            if (frmReloadWeapon.SelectedAmmo != objExternalSource.InternalId)
            {
                objSelectedAmmo = CharacterObject.Gear.DeepFindById(frmReloadWeapon.SelectedAmmo);

                if (objSelectedAmmo.Quantity == decQty && objSelectedAmmo.Parent != null)
                {
                    Gear objParent = objSelectedAmmo.Parent;
                    // If the Ammo is coming from a Spare Clip, reduce the container quantity instead of the plugin quantity.
                    if (objParent.Name.StartsWith("Spare Clip") || objParent.Name.StartsWith("Speed Loader"))
                    {
                        if (objParent.Quantity > 0)
                            objParent.Quantity -= 1;
                        TreeNode objNode = treGear.FindNode(objParent.InternalId);
                        objNode.Text = objParent.DisplayName(GlobalOptions.Language);
                    }
                }
                else
                {
                    // Deduct the ammo qty from the ammo. If there isn't enough remaining, use whatever is left.
                    if (objSelectedAmmo.Quantity > decQty)
                        objSelectedAmmo.Quantity -= decQty;
                    else
                    {
                        decQty = objSelectedAmmo.Quantity;
                        objSelectedAmmo.Quantity = 0;
                    }
                }

                // Refresh the Gear tree.
                TreeNode objSelectedNode = treGear.FindNode(objSelectedAmmo.InternalId);
                if (objSelectedNode != null)
                    objSelectedNode.Text = objSelectedAmmo.DisplayName(GlobalOptions.Language);
            }
            else
            {
                objSelectedAmmo = objExternalSource;
            }

            objWeapon.AmmoRemaining = decimal.ToInt32(decQty);
            objWeapon.AmmoLoaded = objSelectedAmmo.InternalId;
            lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();

            IsCharacterUpdateRequested = true;
            RefreshSelectedWeapon();

            IsDirty = true;
        }

        private void chkWeaponAccessoryInstalled_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            // Locate the selected Weapon Accessory or Modification.
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
            if (objAccessory != null)
            {
                objAccessory.Installed = chkWeaponAccessoryInstalled.Checked;
            }
            else
            {
                // Determine if this is an Underbarrel Weapon.
                Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());
                if (objWeapon != null)
                {
                    objWeapon.Installed = chkWeaponAccessoryInstalled.Checked;
                }
                else
                {
                    // Find the selected Gear.
                    Gear objSelectedGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);

                    if (objSelectedGear != null)
                    {
                        objSelectedGear.Equipped = chkWeaponAccessoryInstalled.Checked;

                        objSelectedGear.ChangeEquippedStatus(chkWeaponAccessoryInstalled.Checked);
                    }
                }
            }
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void chkIncludedInWeapon_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            // Locate the selected Weapon Accessory or Modification.
            WeaponAccessory objAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
            if (objAccessory != null)
            {
                objAccessory.IncludedInWeapon = chkIncludedInWeapon.Checked;

                IsDirty = true;
                IsCharacterUpdateRequested = true;
            }
        }

        private void treGear_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treGear.SelectedNode != null)
            {
                if (e.Button == MouseButtons.Left)
                {
                    if (treGear.SelectedNode.Level != 1 && treGear.SelectedNode.Level != 0)
                        return;
                    _objDragButton = MouseButtons.Left;
                }
                else
                {
                    if (treGear.SelectedNode.Level == 0)
                        return;
                    _objDragButton = MouseButtons.Right;
                }

                // Do not allow the root element to be moved.
                if (treGear.SelectedNode.Tag.ToString() == "Node_SelectedGear")
                    return;

            _intDragLevel = treGear.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }
        }

        private void treGear_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treGear_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else if (treGear.Nodes.Count > 0)
            {
                intNewIndex = treGear.Nodes[treGear.Nodes.Count - 1].Nodes.Count;
                nodDestination = treGear.Nodes[treGear.Nodes.Count - 1];
            }

            // If the item was moved using the left mouse button, change the order of things.
            if (_objDragButton == MouseButtons.Left)
            {
                if (treGear.SelectedNode.Level == 1)
                    CommonFunctions.MoveGearNode(CharacterObject, intNewIndex, nodDestination, treGear);
                else
                    CommonFunctions.MoveGearRoot(CharacterObject, intNewIndex, nodDestination, treGear);
            }
            if (_objDragButton == MouseButtons.Right)
                CommonFunctions.MoveGearParent(CharacterObject, nodDestination, treGear, cmsGear);

            // Clear the background color for all Nodes.
            treGear.ClearNodeBackground(null);

            _objDragButton = MouseButtons.None;

            IsDirty = true;
        }

        private void treGear_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (_objDragButton == MouseButtons.Left)
            {
                if (objNode.Level <= _intDragLevel)
                    objNode.BackColor = SystemColors.ControlDark;
            }
            else
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treGear.ClearNodeBackground(objNode);
        }

        private void chkGearEquipped_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treGear.SelectedNode == null)
                return;

            // Attempt to locate the selected piece of Gear.
            Gear objSelectedGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objSelectedGear != null)
            {
                objSelectedGear.Equipped = chkGearEquipped.Checked;

                objSelectedGear.ChangeEquippedStatus(chkGearEquipped.Checked);

                RefreshSelectedGear();
                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void cboWeaponAmmo_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level == 0)
                    return;

            if (_blnSkipRefresh)
                return;

            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

            objWeapon.ActiveAmmoSlot = Convert.ToInt32(cboWeaponAmmo.SelectedValue.ToString());
            IsCharacterUpdateRequested = true;
            RefreshSelectedWeapon();

            IsDirty = true;
        }

        private void chkGearHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            string strGuid = treGear.SelectedNode?.Tag.ToString() ?? string.Empty;
            if (!string.IsNullOrEmpty(strGuid))
            {
                IHasMatrixAttributes objCommlink = CharacterObject.Gear.DeepFindById(strGuid);
                if (objCommlink != null)
                {
                    objCommlink.SetHomeNode(CharacterObject, chkGearHomeNode.Checked);
                    RefreshSelectedGear();
                    if (chkVehicleHomeNode.Checked)
                        RefreshSelectedVehicle();
                    if (chkCyberwareHomeNode.Checked)
                        RefreshSelectedCyberware();
                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }

        private void chkCyberwareHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            string strGuid = treCyberware.SelectedNode?.Tag.ToString() ?? string.Empty;
            if (!string.IsNullOrEmpty(strGuid))
            {
                IHasMatrixAttributes objCommlink = CommonFunctions.FindCyberwareGear(strGuid, CharacterObject.Cyberware);
                if (objCommlink == null)
                {
                    objCommlink = CharacterObject.Cyberware.DeepFirstOrDefault(x => x.Children, x => x.InternalId == strGuid);
                }
                if (objCommlink != null)
                {
                    objCommlink.SetHomeNode(CharacterObject, chkCyberwareHomeNode.Checked);
                    RefreshSelectedCyberware();
                    if (chkVehicleHomeNode.Checked)
                        RefreshSelectedVehicle();
                    if (chkGearHomeNode.Checked)
                        RefreshSelectedGear();
                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }

        private void cmdWeaponBuyAmmo_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            TreeNode objSelectedNode = treWeapons.SelectedNode;
            TreeNode objSelectedGearNode = treGear.SelectedNode;
            Weapon objWeapon = CharacterObject.Weapons.DeepFindById(objSelectedNode.Tag.ToString());
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickGear(treGear.Nodes[0], true, null, objWeapon.AmmoCategory);
                if (blnAddAgain)
                {
                    treWeapons.SelectedNode = objSelectedNode;
                    treGear.SelectedNode = objSelectedGearNode;
                }
            }
            while (blnAddAgain);
        }

        private void cmdWeaponMoveToVehicle_Click(object sender, EventArgs e)
        {
            // Locate the selected Weapon.
            Weapon objWeapon = null;
            foreach (Weapon objCharacterWeapon in CharacterObject.Weapons)
            {
                if (objCharacterWeapon.InternalId == treWeapons.SelectedNode.Tag.ToString())
                {
                    objWeapon = objCharacterWeapon;
                    break;
                }
            }

            List<Vehicle> lstVehicles = new List<Vehicle>();
            foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
            {
                foreach (VehicleMod objVehicleMod in objCharacterVehicle.Mods)
                {
                    // Only add a Vehicle to the list if it has a Weapon Mount or Mechanical Arm.
                    if (objVehicleMod.Name.Contains("Weapon Mount") || objVehicleMod.Name.StartsWith("Mechanical Arm") || (!string.IsNullOrEmpty(objVehicleMod.WeaponMountCategories) && objVehicleMod.WeaponMountCategories.Contains(objWeapon.Category)))
                    {
                        lstVehicles.Add(objCharacterVehicle);
                        break;
                    }
                }
            }

            // Cannot continue if there are no Vehicles with a Weapon Mount or Mechanical Arm.
            if (lstVehicles.Count == 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotMoveWeapons", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotMoveWeapons", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectItem frmPickItem = new frmSelectItem
            {
                Vehicles = lstVehicles
            };
            frmPickItem.ShowDialog(this);

            if (frmPickItem.DialogResult == DialogResult.Cancel)
                return;

            // Locate the selected Vehicle.
            Vehicle objVehicle = null;
            foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
            {
                if (objCharacterVehicle.InternalId == frmPickItem.SelectedItem)
                {
                    objVehicle = objCharacterVehicle;
                    break;
                }
            }

            // Now display a list of the acceptable mounting points for the Weapon.
            List<VehicleMod> lstMods = new List<VehicleMod>();
            foreach (VehicleMod objVehicleMod in objVehicle.Mods)
            {
                if (objVehicleMod.Name.Contains("Weapon Mount") || objVehicleMod.Name.StartsWith("Mechanical Arm") || (!string.IsNullOrEmpty(objVehicleMod.WeaponMountCategories) && objVehicleMod.WeaponMountCategories.Contains(objWeapon.Category)))
                    lstMods.Add(objVehicleMod);
            }

            frmPickItem.VehicleMods = lstMods;
            frmPickItem.ShowDialog(this);

            if (frmPickItem.DialogResult == DialogResult.Cancel)
                return;

            // Locate the selected Vehicle Mod.
            VehicleMod objMod = null;
            foreach (VehicleMod objCharacterMod in objVehicle.Mods)
            {
                if (objCharacterMod.InternalId == frmPickItem.SelectedItem)
                {
                    objMod = objCharacterMod;
                    break;
                }
            }

            // Remove the Weapon from the character and add it to the Vehicle Mod.
            CharacterObject.Weapons.Remove(objWeapon);
            objMod.Weapons.Add(objWeapon);
            objWeapon.ParentVehicle = objVehicle;
            objWeapon.Location = string.Empty;

            // Move the TreeNode to the Vehicle Mod.
            TreeNode objNode = treWeapons.SelectedNode;
            treWeapons.SelectedNode.Remove();

            foreach (TreeNode objVehicleNode in treVehicles.Nodes[0].Nodes)
            {
                foreach (TreeNode objModNode in objVehicleNode.Nodes)
                {
                    if (objModNode.Tag.ToString() == objMod.InternalId)
                    {
                        objModNode.Nodes.Add(objNode);
                        objModNode.Expand();
                        objNode.Expand();
                        break;
                    }
                }
            }

            // Remove any Improvements from the Character.
            foreach (WeaponAccessory objAccessory in objWeapon.WeaponAccessories)
            {
                foreach (Gear objGear in objAccessory.Gear)
                    objGear.DeleteGear(treWeapons, treVehicles);
            }
            if (objWeapon.UnderbarrelWeapons.Count > 0)
            {
                foreach (Weapon objUnderbarrelWeapon in objWeapon.UnderbarrelWeapons)
                {
                    foreach (WeaponAccessory objAccessory in objUnderbarrelWeapon.WeaponAccessories)
                    {
                        foreach (Gear objGear in objAccessory.Gear)
                            objGear.DeleteGear(treWeapons, treVehicles);
                    }
                }
            }

            IsDirty = true;
        }

        private void cmdArmorIncrease_Click(object sender, EventArgs e)
        {
            Armor objArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());
            if (objArmor == null)
                return;

            objArmor.ArmorDamage -= 1;
            RefreshSelectedArmor();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdArmorDecrease_Click(object sender, EventArgs e)
        {
            Armor objArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());
            if (objArmor == null)
                return;

            objArmor.ArmorDamage += 1;
            RefreshSelectedArmor();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void chkIncludedInArmor_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Locate the selected Armor Modification.
            ArmorMod objMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);
            if (objMod != null)
                objMod.IncludedInArmor = chkIncludedInArmor.Checked;

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        private void chkCommlinks_CheckedChanged(object sender, EventArgs e)
        {
            PopulateGearList();
        }

        private void chkGearActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Attempt to locate the selected piece of Gear.
            if (treGear.SelectedNode != null)
            {
                IHasMatrixAttributes objSelectedCommlink = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
                if (objSelectedCommlink != null)
                {
                    objSelectedCommlink.SetActiveCommlink(CharacterObject, chkGearActiveCommlink.Checked);
                    if (chkVehicleActiveCommlink.Checked)
                        RefreshSelectedVehicle();
                    if (chkCyberwareActiveCommlink.Checked)
                        RefreshSelectedCyberware();
                    RefreshSelectedGear();
                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }


        private void chkCyberwareActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Attempt to locate the selected piece of Gear.
            if (treCyberware.SelectedNode != null)
            {
                string strGuid = treCyberware.SelectedNode.Tag.ToString();
                IHasMatrixAttributes objSelectedCommlink = CharacterObject.Cyberware.DeepFindById(strGuid);
                if (objSelectedCommlink == null)
                {
                    objSelectedCommlink = CommonFunctions.FindCyberwareGear(strGuid, CharacterObject.Cyberware);
                }
                if (objSelectedCommlink != null)
                {
                    objSelectedCommlink.SetActiveCommlink(CharacterObject, chkCyberwareActiveCommlink.Checked);
                    if (chkVehicleActiveCommlink.Checked)
                        RefreshSelectedVehicle();
                    if (chkGearActiveCommlink.Checked)
                        RefreshSelectedGear();
                    RefreshSelectedCyberware();
                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }

        private void chkVehicleActiveCommlink_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Attempt to locate the selected piece of Gear.
            if (treVehicles.SelectedNode != null)
            {
                string strGuid = treVehicles.SelectedNode.Tag.ToString();
                IHasMatrixAttributes objSelectedCommlink = CommonFunctions.FindVehicleGear(strGuid, CharacterObject.Vehicles);
                if (objSelectedCommlink == null)
                {
                    objSelectedCommlink = CharacterObject.Vehicles.FirstOrDefault(x => x.InternalId == strGuid);
                    if (objSelectedCommlink == null)
                    {
                        objSelectedCommlink = CommonFunctions.FindVehicleCyberware(strGuid, CharacterObject.Vehicles);
                    }
                }
                if (objSelectedCommlink != null)
                {
                    objSelectedCommlink.SetActiveCommlink(CharacterObject, chkVehicleActiveCommlink.Checked);
                    if (chkGearActiveCommlink.Checked)
                        RefreshSelectedGear();
                    if (chkCyberwareActiveCommlink.Checked)
                        RefreshSelectedCyberware();
                    RefreshSelectedVehicle();
                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }

        private void cboGearAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearAttack.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboGearAttack, cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboGearSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearSleaze.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboGearSleaze, cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboGearDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearDataProcessing.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboGearDataProcessing, cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboGearFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboGearFirewall.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboGearFirewall, cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }

        private void cboVehicleGearAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearAttack.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treVehicles.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Vehicles.FindById(strGuid);
            if (objTarget == null)
            {
                objTarget = CommonFunctions.FindVehicleGear(strGuid, CharacterObject.Vehicles);
                if (objTarget == null)
                    objTarget = CommonFunctions.FindVehicleCyberware(strGuid, CharacterObject.Vehicles);
            }
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboVehicleGearAttack, cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboVehicleGearSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearSleaze.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treVehicles.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Vehicles.FindById(strGuid);
            if (objTarget == null)
            {
                objTarget = CommonFunctions.FindVehicleGear(strGuid, CharacterObject.Vehicles);
                if (objTarget == null)
                    objTarget = CommonFunctions.FindVehicleCyberware(strGuid, CharacterObject.Vehicles);
            }
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboVehicleGearSleaze, cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboVehicleGearFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearFirewall.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treVehicles.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Vehicles.FindById(strGuid);
            if (objTarget == null)
            {
                objTarget = CommonFunctions.FindVehicleGear(strGuid, CharacterObject.Vehicles);
                if (objTarget == null)
                    objTarget = CommonFunctions.FindVehicleCyberware(strGuid, CharacterObject.Vehicles);
            }
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboVehicleGearFirewall, cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboVehicleGearDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboVehicleGearDataProcessing.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treVehicles.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Vehicles.FindById(strGuid);
            if (objTarget == null)
            {
                objTarget = CommonFunctions.FindVehicleGear(strGuid, CharacterObject.Vehicles);
                if (objTarget == null)
                    objTarget = CommonFunctions.FindVehicleCyberware(strGuid, CharacterObject.Vehicles);
            }
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboVehicleGearDataProcessing, cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }

        private void cboCyberwareGearAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboCyberwareGearAttack.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treCyberware.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Cyberware.DeepFindById(strGuid);
            if (objTarget == null)
                objTarget = CommonFunctions.FindCyberwareGear(strGuid, CharacterObject.Cyberware);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboCyberwareGearAttack, cboCyberwareGearAttack, cboCyberwareGearSleaze, cboCyberwareGearDataProcessing, cboCyberwareGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboCyberwareGearSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboCyberwareGearSleaze.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treCyberware.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Cyberware.DeepFindById(strGuid);
            if (objTarget == null)
                objTarget = CommonFunctions.FindCyberwareGear(strGuid, CharacterObject.Cyberware);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboCyberwareGearSleaze, cboCyberwareGearAttack, cboCyberwareGearSleaze, cboCyberwareGearDataProcessing, cboCyberwareGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboCyberwareGearDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboCyberwareGearDataProcessing.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treCyberware.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Cyberware.DeepFindById(strGuid);
            if (objTarget == null)
                objTarget = CommonFunctions.FindCyberwareGear(strGuid, CharacterObject.Cyberware);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboCyberwareGearDataProcessing, cboCyberwareGearAttack, cboCyberwareGearSleaze, cboCyberwareGearDataProcessing, cboCyberwareGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboCyberwareGearFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboCyberwareGearFirewall.Enabled)
                return;

            _blnLoading = true;

            string strGuid = treCyberware.SelectedNode.Tag.ToString();
            IHasMatrixAttributes objTarget = CharacterObject.Cyberware.DeepFindById(strGuid);
            if (objTarget == null)
                objTarget = CommonFunctions.FindCyberwareGear(strGuid, CharacterObject.Cyberware);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboCyberwareGearFirewall, cboCyberwareGearAttack, cboCyberwareGearSleaze, cboCyberwareGearDataProcessing, cboCyberwareGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }

        private void cboWeaponGearAttack_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboWeaponGearAttack.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboWeaponGearAttack, cboWeaponGearAttack, cboWeaponGearSleaze, cboWeaponGearDataProcessing, cboWeaponGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboWeaponGearSleaze_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboWeaponGearSleaze.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboWeaponGearSleaze, cboWeaponGearAttack, cboWeaponGearSleaze, cboWeaponGearDataProcessing, cboWeaponGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboWeaponGearDataProcessing_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboWeaponGearDataProcessing.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboWeaponGearDataProcessing, cboWeaponGearAttack, cboWeaponGearSleaze, cboWeaponGearDataProcessing, cboWeaponGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
        private void cboWeaponGearFirewall_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || !cboWeaponGearFirewall.Enabled)
                return;

            _blnLoading = true;

            IHasMatrixAttributes objTarget = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
            if (objTarget.ProcessMatrixAttributeCBOChange(CharacterObject, cboWeaponGearFirewall, cboWeaponGearAttack, cboWeaponGearSleaze, cboWeaponGearDataProcessing, cboWeaponGearFirewall))
            {
                IsCharacterUpdateRequested = true;
                IsDirty = true;
            }

            _blnLoading = false;
        }
#endregion

#region Additional Vehicle Tab Control Events
        private void treVehicles_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedVehicle();
            RefreshPasteStatus();
        }

        private void treVehicles_ItemDrag(object sender, ItemDragEventArgs e)
        {
            if (treVehicles.SelectedNode != null)
            {
                if (treVehicles.SelectedNode.Level != 1)
                {
                    // Determine if this is a piece of Gear. If not, don't let the user drag the Node.
                    Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                    if (objGear != null)
                    {
                        _objDragButton = e.Button;
                        _blnDraggingGear = true;
                        _intDragLevel = treVehicles.SelectedNode.Level;
                        DoDragDrop(e.Item, DragDropEffects.Move);
                    }
                }
            }
        }

        private void treVehicles_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treVehicles_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else if (treVehicles.Nodes.Count > 0)
            {
                intNewIndex = treVehicles.Nodes[treVehicles.Nodes.Count - 1].Nodes.Count;
                nodDestination = treVehicles.Nodes[treVehicles.Nodes.Count - 1];
            }

            if (!_blnDraggingGear)
            {
                CommonFunctions.MoveVehicleNode(CharacterObject, intNewIndex, nodDestination, treVehicles);
            }
            else
            {
                if (_objDragButton == MouseButtons.Left)
                    return;
                else
                    CommonFunctions.MoveVehicleGearParent(CharacterObject, nodDestination, treVehicles, cmsVehicleGear);
            }

            // Clear the background color for all Nodes.
            treVehicles.ClearNodeBackground(null);

            _blnDraggingGear = false;

            IsDirty = true;
        }

        private void treVehicles_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (_objDragButton == MouseButtons.Left)
            {
                if (objNode.Level <= _intDragLevel)
                    objNode.BackColor = SystemColors.ControlDark;
            }
            else
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treVehicles.ClearNodeBackground(objNode);
        }

        private void cmdFireVehicleWeapon_Click(object sender, EventArgs e)
        {
            // "Click" the first menu item available.
            if (cmsVehicleAmmoSingleShot.Enabled)
                cmsVehicleAmmoSingleShot_Click(sender, e);
            else
            {
                if (cmsVehicleAmmoShortBurst.Enabled)
                    cmsVehicleAmmoShortBurst_Click(sender, e);
                else
                    cmsVehicleAmmoLongBurst_Click(sender, e);
            }
        }

        private void cmdReloadVehicleWeapon_Click(object sender, EventArgs e)
        {
            List<Gear> lstAmmo = new List<Gear>();
            List<string> lstCount = new List<string>();
            bool blnExternalSource = false;

            Gear objExternalSource = new Gear(CharacterObject)
            {
                Name = "External Source"
            };

            // Locate the selected Vehicle Weapon.
            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out Vehicle objVehicle);

            // Determine which loading methods are available to the Weapon.
            string ammoString = objWeapon.CalculatedAmmo(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
            if (ammoString.Contains(" or ") || ammoString.Contains('x') || ammoString.Contains("Special") || ammoString.Contains('+'))
            {
                string strWeaponAmmo = ammoString.ToLower();
                if (strWeaponAmmo.Contains("external source"))
                    blnExternalSource = true;
                // Get rid of external source, special, or belt, and + energy.
                strWeaponAmmo = strWeaponAmmo.Replace("external source", "100");
                strWeaponAmmo = strWeaponAmmo.Replace("special", "100");
                strWeaponAmmo = strWeaponAmmo.Replace(" + energy", string.Empty);
                strWeaponAmmo = strWeaponAmmo.Replace(" or belt", string.Empty);

                string[] strSplit = new string[] { " or " };
                string[] strAmmos = strWeaponAmmo.Split(strSplit, StringSplitOptions.RemoveEmptyEntries);

                foreach (string strAmmo in strAmmos)
                {
                    string strThisAmmo = strAmmo;
                    if (strThisAmmo.StartsWith("2x") || strThisAmmo.StartsWith("3x") || strThisAmmo.StartsWith("4x"))
                        strThisAmmo = strThisAmmo.Substring(2, strThisAmmo.Length - 2);
                    if (strThisAmmo.EndsWith("x2") || strThisAmmo.EndsWith("x3") || strThisAmmo.EndsWith("x4"))
                        strThisAmmo = strThisAmmo.Substring(0, strThisAmmo.Length - 2);

                    if (strThisAmmo.Contains('('))
                        strThisAmmo = strThisAmmo.Substring(0, strThisAmmo.IndexOf('('));

                    lstCount.Add(strThisAmmo);
                }
            }
            else
            {
                // Nothing weird in the ammo string, so just use the number given.
                if (ammoString.Contains('('))
                    ammoString = ammoString.Substring(0, ammoString.IndexOf('('));
                lstCount.Add(ammoString);
            }

            // Find all of the Ammo for the current Weapon that the character is carrying.
            if (objWeapon.AmmoCategory != "Grenade Launchers" && objWeapon.AmmoCategory != "Missile Launchers" && objWeapon.AmmoCategory != "Mortar Launchers")
            {
                // This is a standard Weapon, so consume traditional Ammunition.
                foreach (Gear objAmmo in objVehicle.Gear)
                {
                    if (objAmmo.Quantity > 0)
                    {
                        if (objAmmo.Category == "Ammunition" && objAmmo.Extra == objWeapon.AmmoCategory)
                            lstAmmo.Add(objAmmo);
                    }
                }
            }
            else
            {
                if (objWeapon.AmmoCategory == "Grenade Launchers")
                {
                    // Grenade Launchers can only use Grenades.
                    foreach (Gear objAmmo in objVehicle.Gear)
                    {
                        if (objAmmo.Quantity > 0)
                        {
                            if (objAmmo.Category == "Ammunition" && objAmmo.Name.StartsWith("Minigrenade:"))
                                lstAmmo.Add(objAmmo);
                        }
                    }
                }
                if (objWeapon.AmmoCategory == "Missile Launchers")
                {
                    // Missile Launchers can only use Missiles and Rockets.
                    foreach (Gear objAmmo in objVehicle.Gear)
                    {
                        if (objAmmo.Quantity > 0)
                        {
                            if (objAmmo.Category == "Ammunition" && (objAmmo.Name.StartsWith("Missile:") || objAmmo.Name.StartsWith("Rocket:")))
                                lstAmmo.Add(objAmmo);
                        }
                    }
                }
                if (objWeapon.AmmoCategory == "Mortar Launchers")
                {
                    // Mortar Launchers can only use Mortars.
                    foreach (Gear objAmmo in objVehicle.Gear)
                    {
                        if (objAmmo.Quantity > 0)
                        {
                            if (objAmmo.Category == "Ammunition" && objAmmo.Name.StartsWith("Mortar Round:"))
                                lstAmmo.Add(objAmmo);
                        }
                    }
                }
            }

            // If the Weapon is allowed to use an External Source, put in an External Source item.
            if (blnExternalSource)
                lstAmmo.Add(objExternalSource);

            // Make sure the character has some form of Ammunition for this Weapon.
            if (lstAmmo.Count == 0 && objWeapon.RequireAmmo)
            {
                MessageBox.Show(LanguageManager.GetString("Message_OutOfAmmoType", GlobalOptions.Language).Replace("{0}", objWeapon.DisplayAmmoCategory(GlobalOptions.Language)), LanguageManager.GetString("MessageTitle_OutOfAmmo", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }

            if (!objWeapon.RequireAmmo)
            {
                // If the Weapon does not require Ammo, clear the Ammo list and just use External Source.
                lstAmmo.Clear();
                lstAmmo.Add(objExternalSource);
            }

            // Show the Ammunition Selection window.
            frmReload frmReloadWeapon = new frmReload
            {
                Ammo = lstAmmo,
                Count = lstCount
            };
            frmReloadWeapon.ShowDialog(this);

            if (frmReloadWeapon.DialogResult == DialogResult.Cancel)
                return;

            // Return any unspent rounds to the Ammo.
            if (objWeapon.AmmoRemaining > 0)
            {
                foreach (Gear objAmmo in objVehicle.Gear)
                {
                    if (objAmmo.InternalId == objWeapon.AmmoLoaded)
                    {
                        objAmmo.Quantity += objWeapon.AmmoRemaining;

                        TreeNode objSelectedNode = treVehicles.FindNode(objAmmo.InternalId);
                        if (objSelectedNode != null)
                            objSelectedNode.Text = objAmmo.DisplayName(GlobalOptions.Language);
                        break;
                    }
                }
            }

            Gear objSelectedAmmo = null;
            decimal decQty = frmReloadWeapon.SelectedCount;
            // If an External Source is not being used, consume ammo.
            if (frmReloadWeapon.SelectedAmmo != objExternalSource.InternalId)
            {
                foreach (Gear objGear in objVehicle.Gear)
                {
                    if (objGear.InternalId == frmReloadWeapon.SelectedAmmo)
                    {
                        objSelectedAmmo = objGear;
                        break;
                    }
                }

                // Deduct the ammo qty from the ammo. If there isn't enough remaining, use whatever is left.
                if (objSelectedAmmo.Quantity > decQty)
                    objSelectedAmmo.Quantity -= decQty;
                else
                {
                    decQty = objSelectedAmmo.Quantity;
                    objSelectedAmmo.Quantity = 0;
                }

                // Refresh the Vehicle tree.
                TreeNode objSelectedNode = treVehicles.FindNode(objSelectedAmmo.InternalId);
                if (objSelectedNode != null)
                    objSelectedNode.Text = objSelectedAmmo.DisplayName(GlobalOptions.Language);
            }
            else
            {
                objSelectedAmmo = objExternalSource;
            }

            objWeapon.AmmoRemaining = decimal.ToInt32(decQty);
            objWeapon.AmmoLoaded = objSelectedAmmo.InternalId;
            lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();

            IsCharacterUpdateRequested = true;
            RefreshSelectedVehicle();

            IsDirty = true;
        }

        private void chkVehicleWeaponAccessoryInstalled_CheckedChanged(object sender, EventArgs e)
        {
            // Locate the the Selected Vehicle Weapon Accessory of Modification.
            WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objAccessory != null)
                objAccessory.Installed = chkVehicleWeaponAccessoryInstalled.Checked;
            else
            {
                // If this isn't a Weapon Mod, then it must be a Vehicle Mod.
                VehicleMod objVehicleMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                if (objVehicleMod != null)
                    objVehicleMod.Installed = chkVehicleWeaponAccessoryInstalled.Checked;
                else
                {
                    // If everything else has failed, we're left with a Vehicle Weapon.
                    Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                    objWeapon.Installed = chkVehicleWeaponAccessoryInstalled.Checked;
                }
            }

            IsDirty = true;
        }

        private void cboVehicleWeaponAmmo_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level < 2)
            {
                return;
            }

            if (_blnSkipRefresh)
                return;

            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            objWeapon.ActiveAmmoSlot = Convert.ToInt32(cboVehicleWeaponAmmo.SelectedValue.ToString());
            IsCharacterUpdateRequested = true;
            RefreshSelectedVehicle();

            IsDirty = true;
        }

        private void chkVehicleHomeNode_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;
            string strGuid = treVehicles.SelectedNode?.Tag.ToString() ?? string.Empty;
            if (!string.IsNullOrEmpty(strGuid))
            {
                IHasMatrixAttributes objTarget = CharacterObject.Vehicles.FindById(strGuid);
                if (objTarget == null)
                {
                    objTarget = CommonFunctions.FindVehicleGear(strGuid, CharacterObject.Vehicles);
                    if (objTarget == null)
                        objTarget = CommonFunctions.FindVehicleCyberware(strGuid, CharacterObject.Vehicles);
                }
                if (objTarget != null)
                {
                    objTarget.SetHomeNode(CharacterObject, chkVehicleHomeNode.Checked);
                    RefreshSelectedVehicle();
                    if (chkGearHomeNode.Checked)
                        RefreshSelectedGear();
                    if (chkCyberwareHomeNode.Checked)
                        RefreshSelectedCyberware();
                    IsCharacterUpdateRequested = true;

                    IsDirty = true;
                }
            }
        }
#endregion

#region Additional Spells and Spirits Tab Control Events
        private void treSpells_AfterSelect(object sender, TreeViewEventArgs e)
        {
            _blnSkipRefresh = true;
            if (treSpells.SelectedNode.Level > 0)
            {
                // Locate the selected Spell.
                Spell objSpell = CharacterObject.Spells.FindById(e.Node.Tag.ToString());

                lblSpellDescriptors.Text = objSpell.DisplayDescriptors(GlobalOptions.Language);
                lblSpellCategory.Text = objSpell.DisplayCategory(GlobalOptions.Language);
                lblSpellType.Text = objSpell.DisplayType(GlobalOptions.Language);
                lblSpellRange.Text = objSpell.DisplayRange(GlobalOptions.Language);
                lblSpellDamage.Text = objSpell.DisplayDamage(GlobalOptions.Language);
                lblSpellDuration.Text = objSpell.DisplayDuration(GlobalOptions.Language);
                lblSpellDV.Text = objSpell.DisplayDV(GlobalOptions.Language);
                string strBook = CommonFunctions.LanguageBookShort(objSpell.Source, GlobalOptions.Language);
                string strPage = objSpell.DisplayPage(GlobalOptions.Language);
                lblSpellSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblSpellSource, CommonFunctions.LanguageBookLong(objSpell.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);

                // Determine the size of the Spellcasting Dice Pool.
                lblSpellDicePool.Text = objSpell.DicePool.ToString();
                tipTooltip.SetToolTip(lblSpellDicePool, objSpell.DicePoolTooltip);

                // Build the DV tooltip.
                tipTooltip.SetToolTip(lblSpellDV, objSpell.DVTooltip);

                // Update the Drain CharacterAttribute Value.
                if (CharacterObject.MAGEnabled && !string.IsNullOrEmpty(lblDrainAttributes.Text))
                {
                    string strTip = string.Empty;

                    string strDrain = lblDrainAttributes.Text;

                    foreach (string strAttribute in AttributeSection.AttributeStrings)
                    {
                        CharacterAttrib objAttrib = CharacterObject.GetAttribute(strAttribute);
                        strDrain = strDrain.CheapReplace(objAttrib.DisplayAbbrev, () => objAttrib.TotalValue.ToString());
                    }
                    int intDrain = 0;
                    try
                    {
                        intDrain = Convert.ToInt32(CommonFunctions.EvaluateInvariantXPath(strDrain).ToString());
                    }
                    catch (XPathException)
                    {
                    }
                    intDrain += ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DrainResistance);

                    strTip = lblDrainAttributes.Text;

                    foreach (string strAttribute in AttributeSection.AttributeStrings)
                    {
                        CharacterAttrib objAttrib = CharacterObject.GetAttribute(strAttribute);
                        strTip = strTip.CheapReplace(objAttrib.DisplayAbbrev, () => objAttrib.DisplayAbbrev + " (" + objAttrib.TotalValue.ToString() + ")");
                    }

                    if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DrainResistance) != 0)
                        strTip += " + " + LanguageManager.GetString("Tip_Skill_DicePoolModifiers", GlobalOptions.Language) + " (" + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DrainResistance).ToString() + ")";
                    //if (objSpell.Limited)
                    //{
                    //    intDrain += 2;
                    //    strTip += " + " + LanguageManager.GetString("String_SpellLimited") + " (2)";
                    //}
                    lblDrainAttributesValue.Text = intDrain.ToString();
                    tipTooltip.SetToolTip(lblDrainAttributesValue, strTip);
                }
            }
            else
            {
                lblSpellDescriptors.Text = string.Empty;
                lblSpellCategory.Text = string.Empty;
                lblSpellType.Text = string.Empty;
                lblSpellRange.Text = string.Empty;
                lblSpellDamage.Text = string.Empty;
                lblSpellDuration.Text = string.Empty;
                lblSpellDV.Text = string.Empty;
                lblSpellSource.Text = string.Empty;
                lblSpellDicePool.Text = string.Empty;
                tipTooltip.SetToolTip(lblSpellSource, null);
                tipTooltip.SetToolTip(lblSpellDV, null);
            }
            _blnSkipRefresh = false;
        }

        private void treFoci_AfterCheck(object sender, TreeViewEventArgs e)
        {
            if (!e.Node.Checked)
            {
                Focus objFocus = CharacterObject.Foci.FirstOrDefault(x => x.GearId == e.Node.Tag.ToString());

                // Mark the Gear as not Bonded and remove any Improvements.
                Gear objGear = objFocus != null ? CharacterObject.Gear.DeepFindById(objFocus.GearId) : null;

                if (objGear != null)
                {
                    objGear.Bonded = false;
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId);
                    CharacterObject.Foci.Remove(objFocus);
                }
                else
                {
                    // This is a Stacked Focus.
                    StackedFocus objStack = CharacterObject.StackedFoci.FirstOrDefault(x => x.InternalId == e.Node.Tag.ToString());

                    if (objStack != null)
                    {
                        objStack.Bonded = false;
                        foreach (Gear objFocusGear in objStack.Gear)
                        {
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.StackedFocus, objStack.InternalId);
                        }
                    }
                }
            }

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void treFoci_BeforeCheck(object sender, TreeViewCancelEventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // If the item is being unchecked, confirm that the user wants to un-bind the Focus.
            if (e.Node.Checked)
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_UnbindFocus", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_UnbindFocus", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    e.Cancel = true;
                return;
            }

            // Locate the Focus that is being touched.
            Gear objSelectedFocus = CharacterObject.Gear.DeepFindById(e.Node.Tag.ToString());

            // Set the Focus count to 1 and get its current Rating (Force). This number isn't used in the following loops because it isn't yet checked or unchecked.
            int intFociCount = 1;
            int intFociTotal = 0;

            if (objSelectedFocus != null)
                intFociTotal = objSelectedFocus.Rating;
            else
            {
                // This is a Stacked Focus.
                StackedFocus objStack = new StackedFocus(CharacterObject);
                foreach (StackedFocus objCharacterFocus in CharacterObject.StackedFoci)
                {
                    if (e.Node.Tag.ToString() == objCharacterFocus.InternalId)
                    {
                        objStack = objCharacterFocus;
                        break;
                    }
                }
                intFociTotal = objStack.TotalForce;
            }

            // Run through the list of items. Count the number of Foci the character would have bonded including this one, plus the total Force of all checked Foci.
            foreach (TreeNode objNode in treFoci.Nodes)
            {
                if (objNode.Checked)
                {
                    intFociCount++;
                    foreach (Gear objCharacterFocus in CharacterObject.Gear)
                    {
                        if (objNode.Tag.ToString() == objCharacterFocus.InternalId)
                        {
                            intFociTotal += objCharacterFocus.Rating;
                            break;
                        }
                    }

                    foreach (StackedFocus objStack in CharacterObject.StackedFoci)
                    {
                        if (objNode.Tag.ToString() == objStack.InternalId)
                        {
                            intFociTotal += objStack.TotalForce;
                            break;
                        }
                    }
                }
            }

            if (!CharacterObject.IgnoreRules)
            {
                if (intFociTotal > CharacterObject.MAG.TotalValue * 5 ||
                    (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept && intFociTotal > CharacterObject.MAGAdept.TotalValue * 5))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_FocusMaximumForce", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_FocusMaximum", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    e.Cancel = true;
                    return;
                }

                if (intFociCount > CharacterObject.MAG.TotalValue ||
                    (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept && intFociCount > CharacterObject.MAGAdept.TotalValue))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_FocusMaximumNumber", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_FocusMaximum", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    e.Cancel = true;
                    return;
                }
            }

            // If we've made it this far, everything is okay, so create a Karma Expense for the newly-bound Focus.

            if (objSelectedFocus != null)
            {
                bool blnOldEquipped = objSelectedFocus.Equipped;
                Focus objFocus = new Focus(CharacterObject)
                {
                    Name = objSelectedFocus.Name,
                    DisplayName = objSelectedFocus.DisplayNameShort(GlobalOptions.Language),
                    Rating = objSelectedFocus.Rating,
                    GearId = e.Node.Tag.ToString()
                };
                if (objSelectedFocus.Bonus != null || (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null))
                {
                    if (!string.IsNullOrEmpty(objSelectedFocus.Extra))
                        ImprovementManager.ForcedValue = objSelectedFocus.Extra;
                    if (objSelectedFocus.Bonus != null)
                    {
                        if (!ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objSelectedFocus.InternalId, objSelectedFocus.Bonus, false, objSelectedFocus.Rating, objSelectedFocus.DisplayNameShort(GlobalOptions.Language)))
                        {
                            // Clear created improvements
                            objSelectedFocus.ChangeEquippedStatus(false);
                            if (blnOldEquipped)
                                objSelectedFocus.ChangeEquippedStatus(true);
                            e.Cancel = true;
                            return;
                        }
                        objSelectedFocus.Extra = ImprovementManager.SelectedValue;
                    }
                    if (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null)
                    {
                        if (!ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objSelectedFocus.InternalId, objSelectedFocus.WirelessBonus, false, objSelectedFocus.Rating, objSelectedFocus.DisplayNameShort(GlobalOptions.Language)))
                        {
                            // Clear created improvements
                            objSelectedFocus.ChangeEquippedStatus(false);
                            if (blnOldEquipped)
                                objSelectedFocus.ChangeEquippedStatus(true);
                            e.Cancel = true;
                            return;
                        }
                    }
                }

                // Determine how much Karma the Focus will cost to bind.
                string strFocusName = objSelectedFocus.Name;
                string strFocusExtra = objSelectedFocus.Extra;
                int intPosition = strFocusName.IndexOf('(');
                if (intPosition > -1)
                    strFocusName = strFocusName.Substring(0, intPosition - 1);
                intPosition = strFocusName.IndexOf(',');
                if (intPosition > -1)
                    strFocusName = strFocusName.Substring(0, intPosition);
                int intKarmaMultiplier = 1;
                int intExtraKarmaCost = 0;
                switch (strFocusName)
                {
                    case "Qi Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaQiFocus;
                        break;
                    case "Sustaining Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaSustainingFocus;
                        break;
                    case "Counterspelling Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaCounterspellingFocus;
                        break;
                    case "Banishing Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaBanishingFocus;
                        break;
                    case "Binding Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaBindingFocus;
                        break;
                    case "Weapon Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaWeaponFocus;
                        break;
                    case "Spellcasting Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaSpellcastingFocus;
                        break;
                    case "Ritual Spellcasting Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaRitualSpellcastingFocus;
                        break;
                    case "Spell Shaping Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaSpellShapingFocus;
                        break;
                    case "Summoning Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaSummoningFocus;
                        break;
                    case "Alchemical Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaAlchemicalFocus;
                        break;
                    case "Centering Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaCenteringFocus;
                        break;
                    case "Masking Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaMaskingFocus;
                        break;
                    case "Disenchanting Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaDisenchantingFocus;
                        break;
                    case "Power Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaPowerFocus;
                        break;
                    case "Flexible Signature Focus":
                        intKarmaMultiplier = CharacterObjectOptions.KarmaFlexibleSignatureFocus;
                        break;
                }
                foreach (Improvement objLoopImprovement in CharacterObject.Improvements.Where(x => x.ImprovedName == strFocusName && (string.IsNullOrEmpty(x.Target) || strFocusExtra.Contains(x.Target)) && x.Enabled))
                {
                    if (objLoopImprovement.ImproveType == Improvement.ImprovementType.FocusBindingKarmaCost)
                        intExtraKarmaCost += objLoopImprovement.Value;
                    else if (objLoopImprovement.ImproveType == Improvement.ImprovementType.FocusBindingKarmaMultiplier)
                        intKarmaMultiplier += objLoopImprovement.Value;
                }
                int intKarmaExpense = objSelectedFocus.Rating * intKarmaMultiplier + intExtraKarmaCost;
                if (intKarmaExpense > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Clear created improvements
                    objSelectedFocus.ChangeEquippedStatus(false);
                    if (blnOldEquipped)
                        objSelectedFocus.ChangeEquippedStatus(true);
                    e.Cancel = true;
                    return;
                }

                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseFocus", GlobalOptions.Language).Replace("{0}", intKarmaExpense.ToString()).Replace("{1}", objSelectedFocus.DisplayNameShort(GlobalOptions.Language))))
                {
                    // Clear created improvements
                    objSelectedFocus.ChangeEquippedStatus(false);
                    if (blnOldEquipped)
                        objSelectedFocus.ChangeEquippedStatus(true);
                    e.Cancel = true;
                    return;
                }

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaExpense * -1, LanguageManager.GetString("String_ExpenseBound", GlobalOptions.Language) + " " + objSelectedFocus.DisplayNameShort(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaExpense;

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.BindFocus, objSelectedFocus.InternalId);
                objExpense.Undo = objUndo;

                CharacterObject.Foci.Add(objFocus);
                objSelectedFocus.Bonded = true;
                if (!blnOldEquipped)
                {
                    objSelectedFocus.ChangeEquippedStatus(false);
                }
                CharacterObject.PopulateFocusList(treFoci);
            }
            else
            {
                // The Focus was not found in Gear, so this is a Stacked Focus.
                StackedFocus objStack = CharacterObject.StackedFoci.FirstOrDefault(x => x.InternalId == e.Node.Tag.ToString());
                if (objStack == null)
                {
                    e.Cancel = true;
                    return;
                }

                Gear objStackGear = CharacterObject.Gear.DeepFindById(objStack.GearId);
                if (objStackGear == null)
                {
                    e.Cancel = true;
                    return;
                }
                bool blnOldEquipped = objStackGear.Equipped;
                foreach (Gear objGear in objStack.Gear)
                {
                    if (objGear.Bonus != null || (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null))
                    {
                        if (!string.IsNullOrEmpty(objGear.Extra))
                            ImprovementManager.ForcedValue = objGear.Extra;
                        if (objGear.Bonus != null)
                        {
                            if (!ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.StackedFocus, objStack.InternalId, objGear.Bonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language)))
                            {
                                // Clear created improvements
                                objSelectedFocus.ChangeEquippedStatus(false);
                                if (blnOldEquipped)
                                    objSelectedFocus.ChangeEquippedStatus(true);
                                e.Cancel = true;
                                return;
                            }
                            objGear.Extra = ImprovementManager.SelectedValue;
                        }
                        if (objSelectedFocus.WirelessOn && objSelectedFocus.WirelessBonus != null)
                        {
                            if (!ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.StackedFocus, objStack.InternalId, objGear.WirelessBonus, false, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language)))
                            {
                                // Clear created improvements
                                objSelectedFocus.ChangeEquippedStatus(false);
                                if (blnOldEquipped)
                                    objSelectedFocus.ChangeEquippedStatus(true);
                                e.Cancel = true;
                                return;
                            }
                        }
                    }
                }

                int intKarmaExpense = objStack.BindingCost;
                if (intKarmaExpense > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Clear created improvements
                    objStackGear.ChangeEquippedStatus(false);
                    if (blnOldEquipped)
                        objStackGear.ChangeEquippedStatus(true);
                    e.Cancel = true;
                    return;
                }

                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseFocus", GlobalOptions.Language).Replace("{0}", intKarmaExpense.ToString()).Replace("{1}", LanguageManager.GetString("String_StackedFocus", GlobalOptions.Language) + " " + objStack.Name(GlobalOptions.Language))))
                {
                    // Clear created improvements
                    objStackGear.ChangeEquippedStatus(false);
                    if (blnOldEquipped)
                        objStackGear.ChangeEquippedStatus(true);
                    e.Cancel = true;
                    return;
                }

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaExpense * -1, LanguageManager.GetString("String_ExpenseBound", GlobalOptions.Language) + " " + LanguageManager.GetString("String_StackedFocus", GlobalOptions.Language) + " " + objStack.Name(GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaExpense;

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.BindFocus, objStack.InternalId);
                objExpense.Undo = objUndo;

                objStack.Bonded = true;
            }

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void cmdImproveInitiation_Click(object sender, EventArgs e)
        {
            if (CharacterObject.MAGEnabled)
            {
                // Make sure that the Initiate Grade is not attempting to go above the character's MAG CharacterAttribute.
                if (CharacterObject.InitiateGrade + 1 > CharacterObject.MAG.TotalValue ||
                    (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept && CharacterObject.InitiateGrade + 1 > CharacterObject.MAGAdept.TotalValue))
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotIncreaseInitiateGrade", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotIncreaseInitiateGrade", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the character has enough Karma.
                decimal decMultiplier = 1.0m;

                int intKarmaExpense = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.InitiateGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                if (intKarmaExpense > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpense", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_InitiateGrade", GlobalOptions.Language)).Replace("{1}", (CharacterObject.InitiateGrade + 1).ToString()).Replace("{2}", intKarmaExpense.ToString())))
                    return;

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaExpense * -1, LanguageManager.GetString("String_ExpenseInitiateGrade", GlobalOptions.Language) + " " + CharacterObject.InitiateGrade.ToString() + " -> " + (CharacterObject.InitiateGrade + 1).ToString(), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaExpense;

                // Create the Initiate Grade object.
                InitiationGrade objGrade = new InitiationGrade(CharacterObject);
                objGrade.Create(CharacterObject.InitiateGrade + 1, CharacterObject.RESEnabled, chkInitiationGroup.Checked, chkInitiationOrdeal.Checked, chkInitiationSchooling.Checked);
                CharacterObject.InitiationGrades.Add(objGrade);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.ImproveInitiateGrade, objGrade.InternalId);
                objExpense.Undo = objUndo;

                // Set the character's Initiate Grade.
                CharacterObject.InitiateGrade += 1;

                // Remove any existing Initiation Improvements.
                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Initiation, "Initiation");

                // Create the replacement Improvement.
                ImprovementManager.CreateImprovement(CharacterObject, "MAG", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, CharacterObject.InitiateGrade);
                ImprovementManager.CreateImprovement(CharacterObject, "MAGAdept", Improvement.ImprovementSource.Initiation, "Initiation", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, CharacterObject.InitiateGrade);
                ImprovementManager.Commit(CharacterObject);

                // Update any Metamagic Improvements the character might have.
                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                {
                    if (objMetamagic.Bonus != null)
                    {
                        // If the Bonus contains "Rating", remove the existing Improvement and create new ones.
                        if (objMetamagic.Bonus.InnerXml.Contains("Rating"))
                        {
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId);
                            ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Metamagic, objMetamagic.InternalId, objMetamagic.Bonus, false, CharacterObject.InitiateGrade, objMetamagic.DisplayNameShort(GlobalOptions.Language));
                        }
                    }
                }

                int intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.InitiateGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                string strInitTip = LanguageManager.GetString("Tip_ImproveInitiateGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.InitiateGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
                tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
            }
            else if (CharacterObject.RESEnabled)
            {
                // Make sure that the Initiate Grade is not attempting to go above the character's RES CharacterAttribute.
                if (CharacterObject.SubmersionGrade + 1 > CharacterObject.RES.TotalValue)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotIncreaseSubmersionGrade", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotIncreaseSubmersionGrade", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                // Make sure the character has enough Karma.
                decimal decMultiplier = 1.0m;

                int intKarmaExpense = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.SubmersionGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                if (intKarmaExpense > CharacterObject.Karma)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpense", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_SubmersionGrade", GlobalOptions.Language)).Replace("{1}", (CharacterObject.SubmersionGrade + 1).ToString()).Replace("{2}", intKarmaExpense.ToString())))
                    return;

                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(intKarmaExpense * -1, LanguageManager.GetString("String_ExpenseSubmersionGrade", GlobalOptions.Language) + " " + CharacterObject.SubmersionGrade.ToString() + " -> " + (CharacterObject.SubmersionGrade + 1).ToString(), ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Karma -= intKarmaExpense;

                // Create the Initiate Grade object.
                InitiationGrade objGrade = new InitiationGrade(CharacterObject);
                objGrade.Create(CharacterObject.SubmersionGrade + 1, CharacterObject.RESEnabled, chkInitiationGroup.Checked, chkInitiationOrdeal.Checked, chkInitiationSchooling.Checked);
                CharacterObject.InitiationGrades.Add(objGrade);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.ImproveInitiateGrade, objGrade.InternalId);
                objExpense.Undo = objUndo;

                // Set the character's Submersion Grade.
                CharacterObject.SubmersionGrade += 1;

                // Remove any existing Initiation Improvements.
                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Submersion, "Submersion");

                // Create the replacement Improvement.
                ImprovementManager.CreateImprovement(CharacterObject, "RES", Improvement.ImprovementSource.Submersion, "Submersion", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, CharacterObject.SubmersionGrade);
                ImprovementManager.Commit(CharacterObject);

                // Update any Echo Improvements the character might have.
                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                {
                    if (objMetamagic.Bonus != null)
                    {
                        // If the Bonus contains "Rating", remove the existing Improvement and create new ones.
                        if (objMetamagic.Bonus.InnerXml.Contains("Rating"))
                        {
                            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Echo, objMetamagic.InternalId);
                            ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Echo, objMetamagic.InternalId, objMetamagic.Bonus, false, CharacterObject.SubmersionGrade, objMetamagic.DisplayNameShort(GlobalOptions.Language));
                        }
                    }
                }

                int intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.SubmersionGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                string strInitTip = LanguageManager.GetString("Tip_ImproveSubmersionGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.SubmersionGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
                tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
            }

            UpdateInitiationGradeTree();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cboTradition_SelectedIndexChanged(object sender, EventArgs e)
        {
            //TODO: Why can't IsInitialised be used here? Throws an error when trying to use chummer.helpers.
            
            if (_blnLoading || string.IsNullOrEmpty(cboTradition.SelectedValue?.ToString()))
                return;

            XmlDocument objXmlDocument = XmlManager.Load("traditions.xml");
            XmlNode objXmlTradition = objXmlDocument.SelectSingleNode("/chummer/traditions/tradition[name = \"" + cboTradition.SelectedValue + "\"]");

            if (objXmlTradition == null)
            {
                CharacterObject.MagicTradition = cboTradition.SelectedValue.ToString();
                CharacterObject.TraditionDrain = string.Empty;
                cboDrain.Visible = false;
                lblTraditionName.Visible = false;
                txtTraditionName.Visible = false;
                lblSpiritCombat.Visible = false;
                lblSpiritDetection.Visible = false;
                lblSpiritHealth.Visible = false;
                lblSpiritIllusion.Visible = false;
                lblSpiritManipulation.Visible = false;
                lblTraditionSource.Visible = false;
                lblTraditionSourceLabel.Visible = false;
                cboSpiritCombat.Visible = false;
                cboSpiritDetection.Visible = false;
                cboSpiritHealth.Visible = false;
                cboSpiritIllusion.Visible = false;
                cboSpiritManipulation.Visible = false;
            }
            else if (objXmlTradition["name"].InnerText == "Custom")
            {
                cboDrain.Visible = true;
                lblTraditionName.Visible = true;
                txtTraditionName.Visible = true;
                lblSpiritCombat.Visible = true;
                lblSpiritDetection.Visible = true;
                lblSpiritHealth.Visible = true;
                lblSpiritIllusion.Visible = true;
                lblSpiritManipulation.Visible = true;
                lblTraditionSource.Visible = false;
                lblTraditionSourceLabel.Visible = false;
                cboSpiritCombat.Visible = true;
                cboSpiritDetection.Visible = true;
                cboSpiritHealth.Visible = true;
                cboSpiritIllusion.Visible = true;
                cboSpiritManipulation.Visible = true;

                if (string.IsNullOrEmpty(txtTraditionName.Text))
                    CharacterObject.MagicTradition = cboTradition.SelectedValue.ToString();
                else
                    CharacterObject.MagicTradition = txtTraditionName.Text;
            }
            else
            {
                cboDrain.Visible = false;
                lblTraditionName.Visible = false;
                txtTraditionName.Visible = false;
                lblSpiritCombat.Visible = false;
                lblSpiritDetection.Visible = false;
                lblSpiritHealth.Visible = false;
                lblSpiritIllusion.Visible = false;
                lblSpiritManipulation.Visible = false;
                lblTraditionSource.Visible = true;
                lblTraditionSourceLabel.Visible = true;
                cboSpiritCombat.Visible = false;
                cboSpiritDetection.Visible = false;
                cboSpiritHealth.Visible = false;
                cboSpiritIllusion.Visible = false;
                cboSpiritManipulation.Visible = false;

                lblTraditionSource.Text = objXmlTradition["source"].InnerText + " " + objXmlTradition["page"].InnerText;
                CharacterObject.MagicTradition = cboTradition.SelectedValue.ToString();
                CharacterObject.TraditionDrain = objXmlTradition["drain"].InnerText;
                foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                    objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());
            }

            CalculateTraditionDrain(CharacterObject.TraditionDrain, Improvement.ImprovementType.DrainResistance, lblDrainAttributes, lblDrainAttributesValue, tipTooltip);

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
#endregion

#region Additional Sprites and Complex Forms Tab Control Events
        private void treComplexForms_AfterSelect(object sender, TreeViewEventArgs e)
        {
            RefreshSelectedComplexForm();
        }

        private void cboStream_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnLoading || string.IsNullOrEmpty(cboStream.SelectedValue.ToString()))
                return;

            XmlDocument objXmlDocument = XmlManager.Load("streams.xml");

            XmlNode objXmlTradition = objXmlDocument.SelectSingleNode("/chummer/traditions/tradition[name = \"" + cboStream.SelectedValue + "\"]");
            string strDrain = objXmlTradition["drain"].InnerText;
            foreach (string strAttribute in AttributeSection.AttributeStrings)
            {
                CharacterAttrib objAttrib = CharacterObject.GetAttribute(strAttribute);
                if (strDrain.Contains(objAttrib.DisplayAbbrev))
                    strDrain = strDrain.Replace(objAttrib.DisplayAbbrev, objAttrib.DisplayAbbrev + " (" + objAttrib.TotalValue.ToString() + ")");
            }
            lblFadingAttributes.Text = strDrain;
            CharacterObject.TechnomancerStream = cboStream.SelectedValue.ToString();

            foreach (SpiritControl objSpriteControl in panSprites.Controls)
                objSpriteControl.RebuildSpiritList(cboStream.SelectedValue.ToString());

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void treComplexForms_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteComplexForm_Click(sender, e);
            }
        }
#endregion

#region Additional Initiation Tab Control Events
        private void chkInitiationGroup_CheckedChanged(object sender, EventArgs e)
        {
            UpdateInitiationCost();
        }

        private void chkInitiationOrdeal_CheckedChanged(object sender, EventArgs e)
        {
            UpdateInitiationCost();
        }

        private void chkInitiationSchooling_CheckedChanged(object sender, EventArgs e)
        {
            UpdateInitiationCost();
        }

        private void treMetamagic_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // Locate the selected Metamagic.
            Metamagic objMetamagic = CharacterObject.Metamagics.FindById(treMetamagic.SelectedNode.Tag.ToString());

            if (objMetamagic != null)
            {
                string strBook = CommonFunctions.LanguageBookShort(objMetamagic.Source, GlobalOptions.Language);
                string strPage = objMetamagic.Page(GlobalOptions.Language);
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, CommonFunctions.BookFromCode(objMetamagic.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                return;
            }

            // Locate the selected Art.
            Art objArt = CharacterObject.Arts.FindById(treMetamagic.SelectedNode.Tag.ToString());

            if (objArt != null)
            {
                string strBook = CommonFunctions.LanguageBookShort(objArt.Source, GlobalOptions.Language);
                string strPage = objArt.Page(GlobalOptions.Language);
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, CommonFunctions.BookFromCode(objArt.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                return;
            }

            // Locate the selected Spell.
            Spell objSpell = CharacterObject.Spells.FindById(treMetamagic.SelectedNode.Tag.ToString());

            if (objSpell != null)
            {
                string strBook = CommonFunctions.LanguageBookShort(objSpell.Source, GlobalOptions.Language);
                string strPage = objSpell.DisplayPage(GlobalOptions.Language);
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, CommonFunctions.BookFromCode(objSpell.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                return;
            }

            // Locate the selected Enhancement.
            Enhancement objEnhancement = CommonFunctions.FindEnhancement(treMetamagic.SelectedNode.Tag.ToString(), CharacterObject);

            if (objEnhancement != null)
            {
                string strBook = CommonFunctions.LanguageBookShort(objEnhancement.Source, GlobalOptions.Language);
                string strPage = objEnhancement.Page(GlobalOptions.Language);
                lblMetamagicSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblMetamagicSource, CommonFunctions.BookFromCode(objEnhancement.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                return;
            }

            lblMetamagicSource.Text = string.Empty;
            tipTooltip.SetToolTip(lblMetamagicSource, string.Empty);
        }

        private void chkJoinGroup_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || _blnLoading)
                return;

            // Joining a Network does not cost Karma for Technomancers, so this only applies to Magicians/Adepts.
            if (CharacterObject.MAGEnabled)
            {
                if (chkJoinGroup.Checked)
                {
                    int intKarmaExpense = CharacterObjectOptions.KarmaJoinGroup;

                    if (intKarmaExpense > CharacterObject.Karma)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        _blnSkipRefresh = true;
                        chkJoinGroup.Checked = false;
                        _blnSkipRefresh = false;
                        return;
                    }

                    string strMessage = string.Empty;
                    string strExpense = string.Empty;
                    if (CharacterObject.MAGEnabled)
                    {
                        strMessage = LanguageManager.GetString("Message_ConfirmKarmaExpenseJoinGroup", GlobalOptions.Language);
                        strExpense = LanguageManager.GetString("String_ExpenseJoinGroup", GlobalOptions.Language);
                    }
                    else
                    {
                        strMessage = LanguageManager.GetString("Message_ConfirmKarmaExpenseJoinNetwork", GlobalOptions.Language);
                        strExpense = LanguageManager.GetString("String_ExpenseJoinNetwork", GlobalOptions.Language);
                    }

                    if (!CharacterObject.ConfirmKarmaExpense(strMessage.Replace("{0}", intKarmaExpense.ToString())))
                    {
                        _blnSkipRefresh = true;
                        chkJoinGroup.Checked = false;
                        _blnSkipRefresh = false;
                        return;
                    }

                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(intKarmaExpense * -1, strExpense, ExpenseType.Karma, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Karma -= intKarmaExpense;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateKarma(KarmaExpenseType.JoinGroup, string.Empty);
                    objExpense.Undo = objUndo;
                }
                else
                {
                    int intKarmaExpense = CharacterObjectOptions.KarmaLeaveGroup;

                    if (intKarmaExpense > CharacterObject.Karma)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        _blnSkipRefresh = true;
                        chkJoinGroup.Checked = true;
                        _blnSkipRefresh = false;
                        return;
                    }

                    string strMessage = string.Empty;
                    string strExpense = string.Empty;
                    if (CharacterObject.MAGEnabled)
                    {
                        strMessage = LanguageManager.GetString("Message_ConfirmKarmaExpenseLeaveGroup", GlobalOptions.Language);
                        strExpense = LanguageManager.GetString("String_ExpenseLeaveGroup", GlobalOptions.Language);
                    }
                    else
                    {
                        strMessage = LanguageManager.GetString("Message_ConfirmKarmaExpenseLeaveNetwork", GlobalOptions.Language);
                        strExpense = LanguageManager.GetString("String_ExpenseLeaveNetwork", GlobalOptions.Language);
                    }

                    if (!CharacterObject.ConfirmKarmaExpense(strMessage.Replace("{0}", intKarmaExpense.ToString())))
                    {
                        _blnSkipRefresh = true;
                        chkJoinGroup.Checked = true;
                        _blnSkipRefresh = false;
                        return;
                    }

                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(intKarmaExpense * -1, strExpense, ExpenseType.Karma, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Karma -= intKarmaExpense;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateKarma(KarmaExpenseType.LeaveGroup, string.Empty);
                    objExpense.Undo = objUndo;
                }
            }
            CharacterObject.GroupMember = chkJoinGroup.Checked;
            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void txtGroupName_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.GroupName = txtGroupName.Text;
            IsDirty = true;
        }

        private void txtNotes_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == Keys.A)
            {
                e.SuppressKeyPress = true;
                if (sender != null)
                    ((TextBox)sender).SelectAll();
            }
        }

        private void txtGroupNotes_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.GroupNotes = txtGroupNotes.Text;
            IsDirty = true;
        }
#endregion

#region Additional Critter Powers Tab Control Events
        private void treCritterPowers_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // Look for the selected Critter Power.
            lblCritterPowerName.Text = string.Empty;
            lblCritterPowerCategory.Text = string.Empty;
            lblCritterPowerType.Text = string.Empty;
            lblCritterPowerAction.Text = string.Empty;
            lblCritterPowerRange.Text = string.Empty;
            lblCritterPowerDuration.Text = string.Empty;
            lblCritterPowerSource.Text = string.Empty;
            tipTooltip.SetToolTip(lblCritterPowerSource, null);
            lblCritterPowerPointCost.Visible = false;
            lblCritterPowerPointCostLabel.Visible = false;
            if (treCritterPowers.SelectedNode != null)
            {
                if (treCritterPowers.SelectedNode.Level > 0)
                {
                    CritterPower objPower = CharacterObject.CritterPowers.FindById(treCritterPowers.SelectedNode.Tag.ToString());

                    if (objPower != null)
                    {
                    lblCritterPowerName.Text = objPower.DisplayName(GlobalOptions.Language);
                    lblCritterPowerCategory.Text = objPower.DisplayCategory(GlobalOptions.Language);
                    lblCritterPowerType.Text = objPower.DisplayType(GlobalOptions.Language);
                    lblCritterPowerAction.Text = objPower.DisplayAction(GlobalOptions.Language);
                    lblCritterPowerRange.Text = objPower.DisplayRange(GlobalOptions.Language);
                    lblCritterPowerDuration.Text = objPower.DisplayDuration(GlobalOptions.Language);
                    chkCritterPowerCount.Checked = objPower.CountTowardsLimit;
                    string strBook = CommonFunctions.LanguageBookShort(objPower.Source, GlobalOptions.Language);
                    string strPage = objPower.Page(GlobalOptions.Language);
                    lblCritterPowerSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblCritterPowerSource, CommonFunctions.LanguageBookLong(objPower.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                    if (objPower.PowerPoints > 0)
                    {
                            lblCritterPowerPointCost.Text = objPower.PowerPoints.ToString(GlobalOptions.CultureInfo);
                        lblCritterPowerPointCost.Visible = true;
                        lblCritterPowerPointCostLabel.Visible = true;
                    }
                }
            }
            }
        }

        private void chkCritterPowerCount_CheckedChanged(object sender, EventArgs e)
        {
            if (treCritterPowers.SelectedNode == null || treCritterPowers.SelectedNode.Level == 0)
            {
                return;
            }

            // Locate the selected Critter Power.
            CritterPower objPower = CharacterObject.CritterPowers.FindById(treCritterPowers.SelectedNode.Tag.ToString());

            objPower.CountTowardsLimit = chkCritterPowerCount.Checked;

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
#endregion

#region Additional Karma and Nuyen Tab Control Events
        private void lstKarma_DoubleClick(object sender, EventArgs e)
        {
            ListViewItem objItem;
            if (lstKarma.SelectedItems != null && lstKarma.SelectedItems.Count > 0)
            {
                objItem = lstKarma.SelectedItems[0];
            }
            else
            {
                return;
            }

            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);

            // Find the selected Karma Expense.
            foreach (ExpenseLogEntry objCharacterEntry in CharacterObject.ExpenseEntries)
            {
                if (objCharacterEntry.InternalId == objItem.SubItems[3].Text)
                {
                    objEntry = objCharacterEntry;
                    break;
                }
            }

            // If this is a manual entry, let the player modify the amount.
            int intOldAmount = decimal.ToInt32(objEntry.Amount);
            bool blnAllowEdit = false;
            if (objEntry.Undo != null)
            {
                if (objEntry.Undo.KarmaType == KarmaExpenseType.ManualAdd || objEntry.Undo.KarmaType == KarmaExpenseType.ManualSubtract)
                    blnAllowEdit = true;
            }

            frmExpense frmEditExpense = new frmExpense
            {
                Reason = objEntry.Reason,
                Amount = objEntry.Amount,
                Refund = objEntry.Refund,
                SelectedDate = objEntry.Date
            };
            frmEditExpense.LockFields(blnAllowEdit);

            frmEditExpense.ShowDialog(this);

            if (frmEditExpense.DialogResult == DialogResult.Cancel)
                return;

            // If this is a manual entry, update the character's Karma total.
            int intNewAmount = decimal.ToInt32(frmEditExpense.Amount);
            if (blnAllowEdit && intOldAmount != intNewAmount)
            {
                objEntry.Amount = intNewAmount;
                CharacterObject.Karma += (intNewAmount - intOldAmount);
            }

            // Rename the Expense.
            objEntry.Reason = frmEditExpense.Reason;
            objEntry.Date = frmEditExpense.SelectedDate;

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void lstNuyen_DoubleClick(object sender, EventArgs e)
        {
            ListViewItem objItem;
            if (lstNuyen.SelectedItems != null && lstNuyen.SelectedItems.Count > 0)
            {
                objItem = lstNuyen.SelectedItems[0];
            }
            else
            {
                return;
            }

            ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);

            // Find the selected Nuyen Expense.
            foreach (ExpenseLogEntry objCharacterEntry in CharacterObject.ExpenseEntries)
            {
                if (objCharacterEntry.InternalId == objItem.SubItems[3].Text)
                {
                    objEntry = objCharacterEntry;
                    break;
                }
            }

            // If this is a manual entry, let the player modify the amount.
            decimal decOldAmount = objEntry.Amount;
            bool blnAllowEdit = false;
            if (objEntry.Undo != null)
            {
                if (objEntry.Undo.NuyenType == NuyenExpenseType.ManualAdd || objEntry.Undo.NuyenType == NuyenExpenseType.ManualSubtract)
                    blnAllowEdit = true;
            }

            frmExpense frmEditExpense = new frmExpense
            {
                Mode = ExpenseType.Nuyen,
                Reason = objEntry.Reason,
                Amount = objEntry.Amount,
                Refund = objEntry.Refund,
                SelectedDate = objEntry.Date
            };
            frmEditExpense.LockFields(blnAllowEdit);

            frmEditExpense.ShowDialog(this);

            if (frmEditExpense.DialogResult == DialogResult.Cancel)
                return;

            // If this is a manual entry, update the character's Karma total.
            decimal decNewAmount = frmEditExpense.Amount;
            if (blnAllowEdit && decOldAmount != decNewAmount)
            {
                objEntry.Amount = decNewAmount;
                CharacterObject.Nuyen += (decNewAmount - decOldAmount);
            }

            // Rename the Expense.
            objEntry.Reason = frmEditExpense.Reason;
            objEntry.Date = frmEditExpense.SelectedDate;

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void lstKarma_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            if (e.Column == _lvwKarmaColumnSorter.SortColumn)
            {
                if (_lvwKarmaColumnSorter.Order == SortOrder.Ascending)
                    _lvwKarmaColumnSorter.Order = SortOrder.Descending;
                else
                    _lvwKarmaColumnSorter.Order = SortOrder.Ascending;
            }
            else
            {
                _lvwKarmaColumnSorter.SortColumn = e.Column;
                _lvwKarmaColumnSorter.Order = SortOrder.Ascending;
            }
            lstKarma.Sort();
        }

        private void lstNuyen_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            if (e.Column == _lvwNuyenColumnSorter.SortColumn)
            {
                if (_lvwNuyenColumnSorter.Order == SortOrder.Ascending)
                    _lvwNuyenColumnSorter.Order = SortOrder.Descending;
                else
                    _lvwNuyenColumnSorter.Order = SortOrder.Ascending;
            }
            else
            {
                _lvwNuyenColumnSorter.SortColumn = e.Column;
                _lvwNuyenColumnSorter.Order = SortOrder.Ascending;
            }
            lstNuyen.Sort();
        }
#endregion

#region Additional Calendar Tab Control Events
        private void lstCalendar_DoubleClick(object sender, EventArgs e)
        {
            cmdEditWeek_Click(sender, e);
        }
        #endregion
        #region Additional Relationships Tab Control Events

        private void tsAddFromFile_Click(object sender, EventArgs e)
        {
            // Displays an OpenFileDialog so the user can select the XML to read.  
            OpenFileDialog openFileDialog1 = new OpenFileDialog
            {
                Filter = "XML Files|*.xml"
            };

            // Show the Dialog.  
            // If the user cancels out, return early.
            if (openFileDialog1.ShowDialog() == DialogResult.Cancel)
                return;
            XmlDocument doc = new XmlDocument();
            doc.Load(openFileDialog1.FileName);
            XmlNodeList contactXmlList = doc.SelectNodes("/chummer/contacts/contact");
            // Couldn't find any valid contacts, so return early. 
            if (contactXmlList == null) return;
            foreach (XmlNode n in contactXmlList)
            {
                Contact c = new Contact(CharacterObject);
                c.Load(n);
                if (c.EntityType == ContactType.Contact)
                {
                    ContactControl cc = new ContactControl(c);
                    // Attach an EventHandler for the ConnectionRatingChanged, LoyaltyRatingChanged, DeleteContact, FileNameChanged Events and OtherCostChanged
                    cc.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
                    cc.DeleteContact += DeleteContact;
                    cc.MouseDown += panContactControl_MouseDown;

                    panContacts.Controls.Add(cc);
                }
                if (c.EntityType == ContactType.Enemy)
                {
                    ContactControl cc = new ContactControl(c);
                    // Attach an EventHandler for the ConnectioNRatingChanged, LoyaltyRatingChanged, DeleteContact, and FileNameChanged Events.
                    cc.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
                    cc.DeleteContact += DeleteEnemy;
                    panEnemies.Controls.Add(cc);
                }
                if (c.EntityType == ContactType.Pet)
                {
                    PetControl cc = new PetControl(c);
                    // Attach an EventHandler for the DeleteContact and FileNameChanged Events.
                    cc.DeleteContact += DeletePet;
                    cc.ContactDetailChanged += MakeDirtyWithCharacterUpdate;

                    panPets.Controls.Add(cc);
                }
            }
        }

        #endregion

        #region Additional Improvements Tab Control Events
        private void treImprovements_AfterSelect(object sender, TreeViewEventArgs e)
        {
            lblImprovementType.Text = string.Empty;
            lblImprovementValue.Text = string.Empty;

            if (treImprovements.SelectedNode.Level == 0)
            {
                cmdImprovementsEnableAll.Visible = true;
                cmdImprovementsDisableAll.Visible = true;
            }
            else
            {
                cmdImprovementsEnableAll.Visible = false;
                cmdImprovementsDisableAll.Visible = false;
            }

            _blnSkipRefresh = true;
            if (treImprovements.SelectedNode != null)
            {
                if (treImprovements.SelectedNode.Level == 0)
                {
                    lblImprovementType.Text = string.Empty;
                    lblImprovementValue.Text = string.Empty;
                    chkImprovementActive.Checked = false;
                }
                else
                {
                    Improvement objImprovement = null;
                    foreach (Improvement objCharacterImprovement in CharacterObject.Improvements)
                    {
                        if (objCharacterImprovement.SourceName == treImprovements.SelectedNode.Tag.ToString())
                        {
                            objImprovement = objCharacterImprovement;
                            break;
                        }
                    }

                    // Get the human-readable name of the Improvement from the Improvements file.
                    XmlDocument objXmlDocument = XmlManager.Load("improvements.xml");

                    XmlNode objNode = objXmlDocument.SelectSingleNode("/chummer/improvements/improvement[id = \"" + objImprovement.CustomId + "\"]");
                    if (objNode != null && objNode["name"] != null)
                    {
                        lblImprovementType.Text = objNode["translate"]?.InnerText ?? objNode["name"]?.InnerText;
                    }
                    

                    // Build a string that contains the value(s) of the Improvement.
                    string strValue = string.Empty;
                    if (objImprovement.Value != 0)
                        strValue += LanguageManager.GetString("Label_CreateImprovementValue", GlobalOptions.Language) + " " + objImprovement.Value.ToString() + ", ";
                    if (objImprovement.Minimum != 0)
                        strValue += LanguageManager.GetString("Label_CreateImprovementMinimum", GlobalOptions.Language) + " " + objImprovement.Minimum.ToString() + ", ";
                    if (objImprovement.Maximum != 0)
                        strValue += LanguageManager.GetString("Label_CreateImprovementMaximum", GlobalOptions.Language) + " " + objImprovement.Maximum.ToString() + ", ";
                    if (objImprovement.Augmented != 0)
                        strValue += LanguageManager.GetString("Label_CreateImprovementAugmented", GlobalOptions.Language) + " " + objImprovement.Augmented.ToString() + ", ";

                    // Remove the trailing comma.
                    if (!string.IsNullOrEmpty(strValue))
                        strValue = strValue.Substring(0, strValue.Length - 2);

                    lblImprovementValue.Text = strValue;
                    chkImprovementActive.Checked = objImprovement.Enabled;
                }
            }
            _blnSkipRefresh = false;
        }

        private void treImprovements_DoubleClick(object sender, EventArgs e)
        {
            if (treImprovements.SelectedNode != null)
            {
                if (treImprovements.SelectedNode.Level > 0)
                {
                    Improvement objImprovement = null;
                    foreach (Improvement objCharacterImprovement in CharacterObject.Improvements)
                    {
                        if (objCharacterImprovement.SourceName == treImprovements.SelectedNode.Tag.ToString())
                        {
                            objImprovement = objCharacterImprovement;
                            break;
                        }
                    }

                    // Edit the selected Improvement.
                    frmCreateImprovement frmPickImprovement = new frmCreateImprovement(CharacterObject)
                    {
                        EditImprovementObject = objImprovement
                    };
                    frmPickImprovement.ShowDialog(this);

                    if (frmPickImprovement.DialogResult != DialogResult.Cancel)
                    {
                        IsCharacterUpdateRequested = true;

                        IsDirty = true;
                    }
                }
            }
        }

        private void chkImprovementActive_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            if (treImprovements.SelectedNode != null)
            {
                if (treImprovements.SelectedNode.Level > 0)
                {
                    Improvement objImprovement = null;
                    foreach (Improvement objCharacterImprovement in CharacterObject.Improvements)
                    {
                        if (objCharacterImprovement.SourceName == treImprovements.SelectedNode.Tag.ToString())
                        {
                            objImprovement = objCharacterImprovement;
                            break;
                        }
                    }

                    if (objImprovement != null)
                    {
                        objImprovement.Enabled = chkImprovementActive.Checked;
                        CharacterObject.ImprovementHook(new List<Improvement>() { objImprovement });

                        IsDirty = true;
                        IsCharacterUpdateRequested = true;
                    }
                }
            }
        }

        private void treImprovements_ItemDrag(object sender, ItemDragEventArgs e)
        {
                // Do not allow the root element to be moved.
            if (treImprovements.SelectedNode == null || treImprovements.SelectedNode.Tag.ToString() == "Node_SelectedImprovements")
                    return;
            _intDragLevel = treImprovements.SelectedNode.Level;
            DoDragDrop(e.Item, DragDropEffects.Move);
        }

        private void treImprovements_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Move;
        }

        private void treImprovements_DragDrop(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode nodDestination = ((TreeView)sender).GetNodeAt(pt);

            int intNewIndex = 0;
            if (nodDestination != null)
            {
                intNewIndex = nodDestination.Index;
            }
            else if (treImprovements.Nodes.Count > 0)
            {
                intNewIndex = treImprovements.Nodes[treImprovements.Nodes.Count - 1].Nodes.Count;
                nodDestination = treImprovements.Nodes[treImprovements.Nodes.Count - 1];
            }

            if (treImprovements.SelectedNode.Level == 1)
                CommonFunctions.MoveImprovementNode(CharacterObject, intNewIndex, nodDestination, treImprovements);
            else
                CommonFunctions.MoveImprovementRoot(CharacterObject, intNewIndex, nodDestination, treImprovements);

            // Clear the background color for all Nodes.
            treImprovements.ClearNodeBackground(null);

            IsDirty = true;
        }

        private void treImprovements_DragOver(object sender, DragEventArgs e)
        {
            Point pt = ((TreeView)sender).PointToClient(new Point(e.X, e.Y));
            TreeNode objNode = ((TreeView)sender).GetNodeAt(pt);

            if (objNode == null)
                return;

            // Highlight the Node that we're currently dragging over, provided it is of the same level or higher.
            if (objNode.Level <= _intDragLevel)
                objNode.BackColor = SystemColors.ControlDark;

            // Clear the background colour for all other Nodes.
            treImprovements.ClearNodeBackground(objNode);
        }

        private void cmdAddImprovementGroup_Click(object sender, EventArgs e)
        {
            // Add a new location to the Improvements Tree.
            frmSelectText frmPickText = new frmSelectText
            {
                Description = LanguageManager.GetString("String_AddLocation", GlobalOptions.Language)
            };
            frmPickText.ShowDialog(this);

            if (frmPickText.DialogResult == DialogResult.Cancel || string.IsNullOrEmpty(frmPickText.SelectedValue))
                return;

            string strLocation = frmPickText.SelectedValue;
            CharacterObject.ImprovementGroups.Add(strLocation);

            TreeNode objLocation = new TreeNode
            {
                Tag = strLocation,
                Text = strLocation,
                ContextMenuStrip = cmsImprovementLocation
            };
            treImprovements.Nodes.Add(objLocation);

            IsDirty = true;
        }
#endregion

#region Character Info Tab Event
        private void txtSex_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Sex = txtSex.Text;
            IsDirty = true;
        }

        private void txtAge_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Age = txtAge.Text;
            IsDirty = true;
        }

        private void txtEyes_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Eyes = txtEyes.Text;
            IsDirty = true;
        }

        private void txtHair_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Hair = txtHair.Text;
            IsDirty = true;
        }

        private void txtHeight_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Height = txtHeight.Text;
            IsDirty = true;
        }

        private void txtWeight_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Weight = txtWeight.Text;
            IsDirty = true;
        }

        private void txtSkin_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Skin = txtSkin.Text;
            IsDirty = true;
        }

        private void txtDescription_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Description = txtDescription.Text;
            IsDirty = true;
        }

        private void txtBackground_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Background = txtBackground.Text;
            IsDirty = true;
        }

        private void txtConcept_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Concept = txtConcept.Text;
            IsDirty = true;
        }

        private void txtNotes_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Notes = txtNotes.Text;
            IsDirty = true;
        }

        private void txtPlayerName_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.PlayerName = txtPlayerName.Text;
            IsDirty = true;
        }

        private void txtAlias_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Alias = txtAlias.Text;
            IsDirty = true;
        }

        private void nudStreetCred_ValueChanged(object sender, EventArgs e)
        {
            CharacterObject.StreetCred = decimal.ToInt32(nudStreetCred.Value);
            IsDirty = true;
            UpdateReputation();
        }

        private void nudNotoriety_ValueChanged(object sender, EventArgs e)
        {
            CharacterObject.Notoriety = decimal.ToInt32(nudNotoriety.Value);
            IsDirty = true;
            UpdateReputation();
        }

        private void nudPublicAware_ValueChanged(object sender, EventArgs e)
        {
            CharacterObject.PublicAwareness = decimal.ToInt32(nudPublicAware.Value);
            IsDirty = true;
            UpdateReputation();
        }
#endregion

#region Notes Tab Events
        private void txtGameNotes_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.GameNotes = txtGameNotes.Text;
            IsDirty = true;
        }
#endregion

#region Tree KeyDown Events
        private void treQualities_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteQuality_Click(sender, e);
            }
        }

        private void treSpells_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteSpell_Click(sender, e);
            }
        }

        private void treCyberware_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteCyberware_Click(sender, e);
            }
        }

        private void treLifestyles_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteLifestyle_Click(sender, e);
            }
        }

        private void treArmor_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteArmor_Click(sender, e);
            }
        }

        private void treWeapons_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteWeapon_Click(sender, e);
            }
        }

        private void treGear_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteGear_Click(sender, e);
            }
        }

        private void treVehicles_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteVehicle_Click(sender, e);
            }
        }

        private void treMartialArts_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteMartialArt_Click(sender, e);
            }
        }

        private void treCritterPowers_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteCritterPower_Click(sender, e);
            }
        }

        private void treMetamagic_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteMetamagic_Click(sender, e);
            }
        }

        private void treImprovements_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteImprovement_Click(sender, e);
            }
        }
#endregion

#region Splitter Resize Events
        

        private void splitKarmaNuyen_Panel1_Resize(object sender, EventArgs e)
        {
            lstKarma.Width = splitKarmaNuyen.Panel1.Width;
            chtKarma.Width = splitKarmaNuyen.Panel1.Width;
            chtKarma.Height = 210;
            chtKarma.Top = splitKarmaNuyen.Panel1.Height - 6 - chtKarma.Height;
            lstKarma.Height = chtKarma.Top - 6 - lstKarma.Top;
            if (lstKarma.Columns.Count > 2)
            {
                if (lstKarma.Width > 409)
                {
                    lstKarma.Columns[2].Width = lstKarma.Width - 220;
                }
            }
            }

        private void splitKarmaNuyen_Panel2_Resize(object sender, EventArgs e)
        {
            lstNuyen.Width = splitKarmaNuyen.Panel2.Width;
            chtNuyen.Width = splitKarmaNuyen.Panel2.Width;
            chtNuyen.Height = 210;
            chtNuyen.Top = splitKarmaNuyen.Panel2.Height - 6 - chtNuyen.Height;
            lstNuyen.Height = chtNuyen.Top - 6 - lstNuyen.Top;
            if (lstNuyen.Columns.Count > 2)
            {
                if (lstNuyen.Width > 409)
                {
                    lstNuyen.Columns[2].Width = lstNuyen.Width - 220;
                }
            }
            }
#endregion

#region Other Control Events
        private void txtCharacterName_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.Name = txtCharacterName.Text;
            IsDirty = true;
        }

        private void cmdEdgeSpent_Click(object sender, EventArgs e)
        {
            int intEdgeUsed = 0;
            foreach (Improvement objImprovement in CharacterObject.Improvements)
            {
                if (objImprovement.ImproveType == Improvement.ImprovementType.Attribute && objImprovement.ImprovedName == "EDG" && objImprovement.ImproveSource == Improvement.ImprovementSource.EdgeUse && objImprovement.Enabled)
                    intEdgeUsed += objImprovement.Augmented * objImprovement.Rating;
            }

            if (intEdgeUsed - 1 < CharacterObject.EDG.Value * -1)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotSpendEdge", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotSpendEdge", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.EdgeUse, "edgeuse");
            intEdgeUsed -= 1;

            ImprovementManager.CreateImprovement(CharacterObject, "EDG", Improvement.ImprovementSource.EdgeUse, "edgeuse", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intEdgeUsed);
            ImprovementManager.Commit(CharacterObject);
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void cmdEdgeGained_Click(object sender, EventArgs e)
        {
            int intEdgeUsed = 0;
            foreach (Improvement objImprovement in CharacterObject.Improvements)
            {
                if (objImprovement.ImproveType == Improvement.ImprovementType.Attribute && objImprovement.ImprovedName == "EDG" && objImprovement.ImproveSource == Improvement.ImprovementSource.EdgeUse && objImprovement.Enabled)
                    intEdgeUsed += objImprovement.Augmented * objImprovement.Rating;
            }

            if (intEdgeUsed + 1 > 0)
            {
                MessageBox.Show(LanguageManager.GetString("Message_CannotRegainEdge", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotRegainEdge", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.EdgeUse, "edgeuse");
            intEdgeUsed += 1;

            if (intEdgeUsed < 0)
            {
                ImprovementManager.CreateImprovement(CharacterObject, "EDG", Improvement.ImprovementSource.EdgeUse, "edgeuse", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intEdgeUsed);
                ImprovementManager.Commit(CharacterObject);
            }
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tabCharacterTabs_SelectedIndexChanged(object sender, EventArgs e)
        {
            RefreshPasteStatus();
        }

        private void tabStreetGearTabs_SelectedIndexChanged(object sender, EventArgs e)
        {
            RefreshPasteStatus();
        }
#endregion

#region Clear Tab Contents
        /// <summary>
        /// Clear the contents of the Spells and Spirits Tab.
        /// </summary>
        private void ClearSpellTab()
        {
            CharacterObject.ClearSpellTab(treSpells);

            // Remove the Spirits.
            panSpirits.Controls.Clear();

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        /// <summary>
        /// Clear the contents of the Sprites and Complex Forms Tab.
        /// </summary>
        private void ClearTechnomancerTab()
        {
            CharacterObject.ClearTechnomancerTab(treComplexForms);

            // Remove the Sprites.
            panSprites.Controls.Clear();

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        /// <summary>
        /// Clear the contents of the Advanced Programs Tab.
        /// </summary>
        private void ClearAdvancedProgramsTab()
        {
            CharacterObject.ClearAdvancedProgramsTab(treAIPrograms);

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        /// <summary>
        /// Clear the contents of the Cyberware Tab.
        /// </summary>
        private void ClearCyberwareTab()
        {
            CharacterObject.ClearCyberwareTab(treCyberware, treWeapons, treVehicles);

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        /// <summary>
        /// Clear the conents of the Critter Powers Tab.
        /// </summary>
        private void ClearCritterTab()
        {
            CharacterObject.ClearCritterTab(treCritterPowers);

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }

        /// <summary>
        /// Clear the content of the Initiation Tab.
        /// </summary>
        private void ClearInitiationTab()
        {
            CharacterObject.ClearInitiations();

            IsDirty = true;
            IsCharacterUpdateRequested = true;
        }
#endregion

#region Condition Monitors
        private void chkPhysicalCM_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox box = (CheckBox)sender;
            bool stun = false;
            ProcessConditionMonitor(Convert.ToInt32(box.Tag), panPhysicalCM, CharacterObject.PhysicalCM, CharacterObject.PhysicalCMFilled, stun, out int penalty);
        }

        private void chkStunCM_CheckedChanged(object sender, EventArgs e)
        {
            CheckBox box = (CheckBox) sender;
            bool stun = true;
            ProcessConditionMonitor(Convert.ToInt32(box.Tag),panStunCM,CharacterObject.StunCM,CharacterObject.StunCMFilled, stun, out int penalty);
        }

        /// <summary>
        /// Manages the rendering of condition monitor checkboxes and associated improvements. 
        /// TODO: This method is disgusting and I hate it. Refactor into something better when we move to WPF.
        /// </summary>
        /// <param name="boxTag">Value of the largest entry that we're activating.</param>
        /// <param name="panel">Container panel for the condition monitor checkboxes.</param>
        /// <param name="conditionMax">Highest value of the condition monitor type.</param>
        /// <param name="conditionValueIn">Current value of the condition monitor type.</param>
        /// <param name="stun">Whether or not we're working on the Stun or Physical track. Stun track == true</param>
        /// <param name="penalty">Returns the total penalty for the condition monitor type. Expected values are 0 or a negative number.</param>
        private void ProcessConditionMonitor(int boxTag, Panel panel, int conditionMax, int conditionValueIn, bool stun, out int penalty, bool current = false)
        {
            penalty = 0;
            if (_blnSkipRefresh)
                return;

            int intCMOverflow = CharacterObject.CMOverflow;
            int intCMThreshold = CharacterObject.CMThreshold;
            int intFillCount = 0;

            // If this is being checked, make sure everything before it is checked off.
            _blnSkipRefresh = true;

            int intCurrentBoxTag = 0;
            foreach (CheckBox cmBox in panel.Controls.OfType<CheckBox>())
            {
                intCurrentBoxTag = Convert.ToInt32(cmBox.Tag.ToString());
                if (intCurrentBoxTag < boxTag)
                {
                    cmBox.Checked = true;
                }
                else if (intCurrentBoxTag > boxTag)
                {
                    cmBox.Checked = false;
                }
                else if (current && intCurrentBoxTag == boxTag)
                {
                    cmBox.Checked = true;
                }
                if (intCurrentBoxTag <= conditionMax)
                {
                    cmBox.Visible = true;
                    int intCMThresholdOffset = ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CMThresholdOffset);
                    if (intCurrentBoxTag > intCMThresholdOffset && (intCurrentBoxTag - intCMThresholdOffset) % intCMThreshold == 0)
                    {
                        int intModifiers = (intCurrentBoxTag - intCMThresholdOffset) / -intCMThreshold;
                        cmBox.Text = intModifiers.ToString();
                        if (intCurrentBoxTag == boxTag)
                        {
                            penalty = intModifiers;
                        }
                    }
                    else
                        cmBox.Text = string.Empty;
                }
                else if (!stun && intCurrentBoxTag <= conditionMax + intCMOverflow)
                {
                    cmBox.Visible = true;
                    cmBox.BackColor = SystemColors.ControlDark;
                    if (intCurrentBoxTag == conditionMax + intCMOverflow)
                        cmBox.Text = "D";
                    else
                        cmBox.Text = string.Empty;
                }
                else
                {
                    cmBox.Visible = false;
                    cmBox.Text = string.Empty;
                }
                if (cmBox.Checked)
                    intFillCount += 1;
            }
            if (stun)
            {
                CharacterObject.StunCMFilled = intFillCount;
            }
            else
            {
                CharacterObject.PhysicalCMFilled = intFillCount;
            }
            _blnSkipRefresh = false;

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void chkCyberwareCM_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh || treCyberware.SelectedNode == null)
                return;

            // Locate the selected Cyberware.
            TreeNode objCyberwareNode = treCyberware.SelectedNode;
            while (objCyberwareNode.Level > 1)
                objCyberwareNode = objCyberwareNode.Parent;

            Cyberware objCyberware = CharacterObject.Cyberware.DeepFindById(objCyberwareNode.Tag.ToString());

            int intFillCount = 0;
            CheckBox objCheck = (CheckBox)sender;
            {
                _blnSkipRefresh = true;
                bool blnChecked = objCheck.Checked;
                int intBoxCheckTag = Convert.ToInt32(objCheck.Tag.ToString());
                foreach (CheckBox objCyberwareCM in tabCyberwareMatrixCM.Controls.OfType<CheckBox>())
                {
                    int intLoopTag = Convert.ToInt32(objCyberwareCM.Tag.ToString());
                    // If this is being checked, make sure everything before it is checked off, and if unchecked, everything after it is checked off.
                    if ((intLoopTag < intBoxCheckTag) == blnChecked && intLoopTag != intBoxCheckTag)
                        objCyberwareCM.Checked = blnChecked;

                    if (objCyberwareCM.Checked)
                        intFillCount += 1;
                }
                _blnSkipRefresh = false;

                objCyberware.MatrixCMFilled = intFillCount;

                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void chkGearCM_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Locate the selected Gear.
            TreeNode objGearNode = treGear.SelectedNode;
            while (objGearNode.Level > 1)
                objGearNode = objGearNode.Parent;

            Gear objGear = null;
            foreach (Gear objCharacterGear in CharacterObject.Gear)
            {
                if (objCharacterGear.InternalId == objGearNode.Tag.ToString())
                {
                    objGear = objCharacterGear;
                    break;
                }
            }

            int intFillCount = 0;
            CheckBox objCheck = (CheckBox)sender;
            {
                _blnSkipRefresh = true;
                bool blnChecked = objCheck.Checked;
                int intBoxCheckTag = Convert.ToInt32(objCheck.Tag.ToString());
                foreach (CheckBox objGearCM in tabMatrixCM.Controls.OfType<CheckBox>())
                {
                    int intLoopTag = Convert.ToInt32(objGearCM.Tag.ToString());
                    // If this is being checked, make sure everything before it is checked off, and if unchecked, everything after it is checked off.
                    if ((intLoopTag < intBoxCheckTag) == blnChecked && intLoopTag != intBoxCheckTag)
                        objGearCM.Checked = blnChecked;

                    if (objGearCM.Checked)
                        intFillCount += 1;
                }
                _blnSkipRefresh = false;
                objGear.MatrixCMFilled = intFillCount;

                IsCharacterUpdateRequested = true;

                IsDirty = true;
            }
        }

        private void chkVehicleCM_CheckedChanged(object sender, EventArgs e)
        {
            if (_blnSkipRefresh)
                return;

            // Locate the selected Vehicle.
            TreeNode objVehicleNode = treVehicles.SelectedNode;
            while (objVehicleNode.Level > 1)
                objVehicleNode = objVehicleNode.Parent;

            Vehicle objVehicle = null;
            foreach (Vehicle objCharacterVehicle in CharacterObject.Vehicles)
            {
                if (objCharacterVehicle.InternalId == objVehicleNode.Tag.ToString())
                {
                    objVehicle = objCharacterVehicle;
                    break;
                }
            }

            int intFillCount = 0;
            CheckBox objCheck = (CheckBox)sender;
            bool blnChecked = objCheck.Checked;
            int intBoxCheckTag = Convert.ToInt32(objCheck.Tag.ToString());
            if (panVehicleCM.SelectedIndex == 0)
            {
                _blnSkipRefresh = true;
                foreach (CheckBox objVehicleCM in tabVehiclePhysicalCM.Controls.OfType<CheckBox>())
                {
                    int intLoopTag = Convert.ToInt32(objVehicleCM.Tag.ToString());
                    // If this is being checked, make sure everything before it is checked off, and if unchecked, everything after it is checked off.
                    if ((intLoopTag < intBoxCheckTag) == blnChecked && intLoopTag != intBoxCheckTag)
                        objVehicleCM.Checked = blnChecked;

                    if (objVehicleCM.Checked)
                        intFillCount += 1;
                }
                _blnSkipRefresh = false;

                objVehicle.PhysicalCMFilled = intFillCount;
            }
            else 
            {
                _blnSkipRefresh = true;
                foreach (CheckBox objVehicleCM in tabVehicleMatrixCM.Controls.OfType<CheckBox>())
                {
                    int intLoopTag = Convert.ToInt32(objVehicleCM.Tag.ToString());
                    // If this is being checked, make sure everything before it is checked off, and if unchecked, everything after it is checked off.
                    if ((intLoopTag < intBoxCheckTag) == blnChecked && intLoopTag != intBoxCheckTag)
                        objVehicleCM.Checked = blnChecked;

                    if (objVehicleCM.Checked)
                        intFillCount += 1;
                }
                _blnSkipRefresh = false;

                objVehicle.MatrixCMFilled = intFillCount;
            }
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
#endregion

#region Custom Methods
        public void RefreshContacts()
        {
            HashSet<Contact> existing = new HashSet<Contact>();
            for (int i = panContacts.Controls.Count - 1; i >= 0; i--)
            {
                if (panContacts.Controls[i] is ContactControl contactControl)
                {
                    Contact objLoopContact = contactControl.ContactObject;
                    if (CharacterObject.Contacts.Contains(objLoopContact))
                    {
                        objLoopContact.RefreshForControl(); //Force refresh
                        existing.Add(objLoopContact);
                    }
                    else
                    {
                        DeleteContact(contactControl, true);
                    }
                }
            }

            foreach (Contact contact in CharacterObject.Contacts.Where(x => x.EntityType == ContactType.Contact && !existing.Contains(x)))
            {
                ContactControl ctrl = new ContactControl(contact);

                ctrl.ContactDetailChanged += MakeDirtyWithCharacterUpdate;
                ctrl.DeleteContact += DeleteContact;

                panContacts.Controls.Add(ctrl);
            }
        }

        private void LiveUpdateFromCharacterFile(object sender = null, EventArgs e = null)
        {
            if (IsDirty || _blnLoading || _blnSkipUpdate || IsCharacterUpdateRequested)
                return;

            string strCharacterFile = CharacterObject.FileName;
            if (string.IsNullOrEmpty(strCharacterFile) || !File.Exists(strCharacterFile))
                return;

            if (File.GetLastWriteTimeUtc(strCharacterFile) <= CharacterObject.FileLastWriteTime)
                return;

            _blnSkipUpdate = true;

            // Character is not dirty and their savefile was updated outside of Chummer5 while it is open, so reload them
            Cursor = Cursors.WaitCursor;

            CharacterObject.Load();

            // Update character information fields.
            XmlDocument objMetatypeDoc = XmlManager.Load("metatypes.xml");
            XmlNode objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + CharacterObject.Metatype + "\"]");
            if (objMetatypeNode == null)
            {
                objMetatypeDoc = XmlManager.Load("critters.xml");
                objMetatypeNode = objMetatypeDoc.SelectSingleNode("/chummer/metatypes/metatype[name = \"" + CharacterObject.Metatype + "\"]");
            }

            string strMetatype = objMetatypeNode["translate"]?.InnerText ?? CharacterObject.Metatype;
            string strBook = CommonFunctions.LanguageBookShort(objMetatypeNode["source"].InnerText, GlobalOptions.Language);
            string strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;

            if (!string.IsNullOrEmpty(CharacterObject.Metavariant))
            {
                objMetatypeNode = objMetatypeNode.SelectSingleNode("metavariants/metavariant[name = \"" + CharacterObject.Metavariant + "\"]");

                strMetatype += objMetatypeNode["translate"] != null
                    ? " (" + objMetatypeNode["translate"].InnerText + ")"
                    : " (" + CharacterObject.Metavariant + ")";

                strBook = CommonFunctions.LanguageBookShort(objMetatypeNode["source"].InnerText, GlobalOptions.Language);
                strPage = objMetatypeNode["altpage"]?.InnerText ?? objMetatypeNode["page"].InnerText;
            }
            lblMetatype.Text = strMetatype;
            lblMetatypeSource.Text = strBook + " " + strPage;
            txtCharacterName.Text = CharacterObject.Name;
            txtSex.Text = CharacterObject.Sex;
            txtAge.Text = CharacterObject.Age;
            txtEyes.Text = CharacterObject.Eyes;
            txtHeight.Text = CharacterObject.Height;
            txtWeight.Text = CharacterObject.Weight;
            txtSkin.Text = CharacterObject.Skin;
            txtHair.Text = CharacterObject.Hair;
            txtDescription.Text = CharacterObject.Description;
            txtBackground.Text = CharacterObject.Background;
            txtConcept.Text = CharacterObject.Concept;
            txtNotes.Text = CharacterObject.Notes;
            txtAlias.Text = CharacterObject.Alias;
            txtPlayerName.Text = CharacterObject.PlayerName;

            // Update various lists
            RefreshQualities(treQualities, cmsQuality, true);
            treQualities.SortCustom();
            nudQualityLevel_UpdateValue(null);
            UpdateMentorSpirits();
            RefreshMartialArts();
            RefreshAIPrograms();
            RefreshLimitModifiers();
            RefreshSpells(treSpells, cmsSpell, CharacterObject);
            PopulateGearList();
            RefreshContacts();
            PopulateCyberware();
            PopulateCalendar();
            PopulateExpenseList();

            // Populate Armor.
            for (int i = treArmor.Nodes.Count - 1; i >= 0; --i)
            {
                if (i != 0)
                    treArmor.Nodes[i].Remove();
                else
                    treArmor.Nodes[i].Nodes.Clear();
            }
            // Start by populating Locations.
            foreach (string strLocation in CharacterObject.ArmorLocations)
            {
                TreeNode objLocation = new TreeNode
                {
                    Tag = strLocation,
                    Text = strLocation,
                    ContextMenuStrip = cmsArmorLocation
                };
                treArmor.Nodes.Add(objLocation);
            }
            foreach (Armor objArmor in CharacterObject.Armor)
            {
                CommonFunctions.CreateArmorTreeNode(objArmor, treArmor, cmsArmor, cmsArmorMod, cmsArmorGear);
            }
            
            // Populate Weapons.
            for (int i = treWeapons.Nodes.Count - 1; i >= 0; --i)
            {
                if (i != 0)
                    treWeapons.Nodes[i].Remove();
                else
                    treWeapons.Nodes[i].Nodes.Clear();
            }
            // Start by populating Locations.
            foreach (string strLocation in CharacterObject.WeaponLocations)
            {
                TreeNode objLocation = new TreeNode
                {
                    Tag = strLocation,
                    Text = strLocation,
                    ContextMenuStrip = cmsWeaponLocation
                };
                treWeapons.Nodes.Add(objLocation);
            }
            foreach (Weapon objWeapon in CharacterObject.Weapons)
            {
                TreeNode objLocationNode = treWeapons.Nodes[0];
                if (!string.IsNullOrEmpty(objWeapon.Location))
                {
                    objLocationNode = treWeapons.Nodes.Cast<TreeNode>().FirstOrDefault(x => x.Text == objWeapon.Location) ?? treWeapons.Nodes[0];
                }
                CommonFunctions.CreateWeaponTreeNode(objWeapon, objLocationNode, cmsWeapon, cmsWeaponAccessory, cmsWeaponAccessoryGear);
            }

            // Populate Foci.
            CharacterObject.PopulateFocusList(treFoci);

            // Populate Vehicles.
            for (int i = treVehicles.Nodes.Count - 1; i >= 0; --i)
            {
                if (i != 0)
                    treVehicles.Nodes[i].Remove();
                else
                    treVehicles.Nodes[i].Nodes.Clear();
            }
            foreach (Vehicle objVehicle in CharacterObject.Vehicles)
            {
                CommonFunctions.CreateVehicleTreeNode(objVehicle, treVehicles, cmsVehicle, cmsVehicleLocation, cmsVehicleWeapon, cmsVehicleWeaponAccessory, cmsVehicleWeaponAccessoryGear, cmsVehicleGear, cmsWeaponMount);
            }

            // Selections will be cleared when the lists are rebuilt, but I put these here as a way to also clear out the displayed info on selected items
            if (treCyberware.SelectedNode != null)
                RefreshSelectedCyberware();
            if (treArmor.SelectedNode != null)
                RefreshSelectedArmor();
            if (treGear.SelectedNode != null)
                RefreshSelectedGear();
            if (treLifestyles.SelectedNode != null)
                RefreshSelectedLifestyle();
            if (treVehicles.SelectedNode != null)
                RefreshSelectedVehicle();
            if (treWeapons.SelectedNode != null)
                RefreshSelectedWeapon();

            IsCharacterUpdateRequested = true;
            _blnSkipUpdate = false;
            // Immediately call character update because we know it's necessary
            UpdateCharacterInfo();

            IsDirty = false;

            Cursor = Cursors.Default;

            if (CharacterObject.InternalIdsNeedingReapplyImprovements.Count > 0)
            {
                if (MessageBox.Show(LanguageManager.GetString("Message_ImprovementLoadError", GlobalOptions.Language),
                    LanguageManager.GetString("MessageTitle_ImprovementLoadError", GlobalOptions.Language), MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                {
                    DoReapplyImprovements(CharacterObject.InternalIdsNeedingReapplyImprovements);
                    CharacterObject.InternalIdsNeedingReapplyImprovements.Clear();
                }
            }
        }

        /// <summary>
        /// Update the Character information.
        /// </summary>
        private void UpdateCharacterInfo(object sender = null, EventArgs e = null)
        {
            if (_blnLoading || _blnSkipUpdate || !IsCharacterUpdateRequested)
                return;
            
            _blnSkipUpdate = true;
            string strTip = string.Empty;

            if (!CharacterObject.RefreshRedliner())
                RefreshSelectedCyberware();

            int intESSDecimals = CharacterObject.Options.EssenceDecimals;
            StringBuilder objESSFormat = new StringBuilder("#,0");
            if (intESSDecimals > 0)
            {
                objESSFormat.Append('.');
                for (int i = 0; i < intESSDecimals; ++i)
                    objESSFormat.Append('0');
            }
            string strESSFormat = objESSFormat.ToString();

            decimal decESS = CharacterObject.Essence;
            decimal decRoundedESS = decimal.Round(decESS, intESSDecimals, MidpointRounding.AwayFromZero);
            if (!CharacterObject.Options.DontRoundEssenceInternally)
                decESS = decRoundedESS;
            lblESSMax.Text = decRoundedESS.ToString(strESSFormat, GlobalOptions.CultureInfo);
            tssEssence.Text = lblESSMax.Text;

            lblCyberwareESS.Text = decimal.Round(CharacterObject.CyberwareEssence, intESSDecimals, MidpointRounding.AwayFromZero).ToString(strESSFormat, GlobalOptions.CultureInfo);
            lblBiowareESS.Text = decimal.Round(CharacterObject.BiowareEssence, intESSDecimals, MidpointRounding.AwayFromZero).ToString(strESSFormat, GlobalOptions.CultureInfo);
            lblEssenceHoleESS.Text = decimal.Round(CharacterObject.EssenceHole, intESSDecimals, MidpointRounding.AwayFromZero).ToString(strESSFormat, GlobalOptions.CultureInfo);

            // Reduce a character's MAG and RES from Essence Loss.
            int intMetatypeMaximumESS = CharacterObject.ESS.MetatypeMaximum;
            int intReduction = intMetatypeMaximumESS - decimal.ToInt32(decimal.Floor(decESS));
            decimal decESSMag = CharacterObject.Essence + CharacterObject.EssencePenalty - CharacterObject.EssencePenaltyMAG;
            if (!CharacterObject.Options.DontRoundEssenceInternally)
                decESSMag = decimal.Round(decESSMag, intESSDecimals, MidpointRounding.AwayFromZero);
            int intMagReduction = intMetatypeMaximumESS - decimal.ToInt32(decimal.Floor(decESSMag));

            // Remove any Improvements from MAG and RES from Essence Loss.
            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.EssenceLoss, "Essence Loss");

            // Create the Essence Loss Improvements.
            if (intReduction > 0)
            {
                if (CharacterObject.Options.SpecialKarmaCostBasedOnShownValue)
                {
                    ImprovementManager.CreateImprovement(CharacterObject, "RES", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intReduction * -1);
                    ImprovementManager.CreateImprovement(CharacterObject, "DEP", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intReduction * -1);
                }
                else
                {
                    ImprovementManager.CreateImprovement(CharacterObject, "RES", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intReduction * -1);
                    ImprovementManager.CreateImprovement(CharacterObject, "DEP", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intReduction * -1);
                }
            }
            if (intMagReduction > 0)
            {
                if (CharacterObject.Options.SpecialKarmaCostBasedOnShownValue)
                {
                    ImprovementManager.CreateImprovement(CharacterObject, "MAG", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intMagReduction * -1);
                    ImprovementManager.CreateImprovement(CharacterObject, "MAGAdept", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, 0, intMagReduction * -1);
                }
                else
                {
                    ImprovementManager.CreateImprovement(CharacterObject, "MAG", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intMagReduction * -1);
                    ImprovementManager.CreateImprovement(CharacterObject, "MAGAdept", Improvement.ImprovementSource.EssenceLoss, "Essence Loss", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intMagReduction * -1);
                }
            }

            // If the CharacterAttribute reaches 0, the character has burned out.
            if (CharacterObject.MAGEnabled)
            {
                if (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept)
                {
                    if ((!CharacterObject.Options.SpecialKarmaCostBasedOnShownValue && CharacterObject.MAG.TotalMaximum < 1) ||
                    (CharacterObject.Options.SpecialKarmaCostBasedOnShownValue && intMagReduction >= CharacterObject.MAG.TotalMaximum))
                    {
                        CharacterObject.MAG.Base = CharacterObject.MAGAdept.Base;
                        CharacterObject.MAG.Karma = CharacterObject.MAGAdept.Karma;
                        CharacterObject.MAG.MetatypeMinimum = CharacterObject.MAGAdept.MetatypeMinimum;
                        CharacterObject.MAG.MetatypeMaximum = CharacterObject.MAGAdept.MetatypeMaximum;
                        CharacterObject.MAG.MetatypeAugmentedMaximum = CharacterObject.MAGAdept.MetatypeAugmentedMaximum;
                        CharacterObject.MAGAdept.Base = 0;
                        CharacterObject.MAGAdept.Karma = 0;
                        CharacterObject.MAGAdept.MetatypeMinimum = 0;
                        CharacterObject.MAGAdept.MetatypeMaximum = 0;
                        CharacterObject.MAGAdept.MetatypeAugmentedMaximum = 0;

                        CharacterObject.MagicianEnabled = false;
                    }
                    if ((!CharacterObject.Options.SpecialKarmaCostBasedOnShownValue && CharacterObject.MAGAdept.TotalMaximum < 1) ||
                    (CharacterObject.Options.SpecialKarmaCostBasedOnShownValue && intMagReduction >= CharacterObject.MAGAdept.TotalMaximum))
                    {
                        CharacterObject.MAGAdept.Base = 0;
                        CharacterObject.MAGAdept.Karma = 0;
                        CharacterObject.MAGAdept.MetatypeMinimum = 0;
                        CharacterObject.MAGAdept.MetatypeMaximum = 0;
                        CharacterObject.MAGAdept.MetatypeAugmentedMaximum = 0;

                        CharacterObject.AdeptEnabled = false;
                    }
                    if (!CharacterObject.MagicianEnabled && !CharacterObject.AdeptEnabled)
                        CharacterObject.MAGEnabled = false;
                }
                else if ((!CharacterObject.Options.SpecialKarmaCostBasedOnShownValue && CharacterObject.MAG.TotalMaximum < 1) ||
                    (CharacterObject.Options.SpecialKarmaCostBasedOnShownValue && intMagReduction >= CharacterObject.MAG.TotalMaximum))
                {
                    CharacterObject.MAG.Base = 0;
                    CharacterObject.MAG.Karma = 0;
                    CharacterObject.MAG.MetatypeMinimum = 0;
                    CharacterObject.MAG.MetatypeMaximum = 0;
                    CharacterObject.MAG.MetatypeAugmentedMaximum = 0;

                    CharacterObject.MagicianEnabled = false;
                    CharacterObject.AdeptEnabled = false;
                    CharacterObject.MAGEnabled = false;
                }
            }
            if (CharacterObject.RES.TotalMaximum < 1 && CharacterObject.RESEnabled && (!CharacterObject.Options.SpecialKarmaCostBasedOnShownValue || intReduction >= CharacterObject.RES.TotalMaximum))
            {
                CharacterObject.RES.Base = 0;
                CharacterObject.RES.Karma = 0;
                CharacterObject.RES.MetatypeMinimum = 0;
                CharacterObject.RES.MetatypeMinimum = 0;
                CharacterObject.RES.MetatypeAugmentedMaximum = 0;

                if (CharacterObject.RESEnabled)
                {
                    // Move all RES-linked Active Skills to Knowledge Skills.
                    //List<Skill> lstNewSkills = new List<Skill>();
                    //foreach (Skill objSkill in _objCharacter.Skills)
                    //{
                    //    if (objSkill.Attribute == "RES" && objSkill.Rating > 0)
                    //    {
                    //        int i = panKnowledgeSkills.Controls.Count;
                    //        Skill objKnowledge = new Skill(_objCharacter);

                    //        SkillControl objSkillControl = new SkillControl();
                    //        objKnowledge.Name = objSkill.Name;
                    //        objSkillControl.SkillObject = objKnowledge;

                    //        // Attach an EventHandler for the RatingChanged and SpecializationChanged Events.
                    //        objSkillControl.RatingChanged += objKnowledgeSkill_RatingChanged;
                    //        objSkillControl.SpecializationChanged += objSkill_SpecializationChanged;
                    //        objSkillControl.DeleteSkill += objKnowledgeSkill_DeleteSkill;
                    //        objSkillControl.SkillKarmaClicked += objKnowledgeSkill_KarmaClicked;
                    //        objSkillControl.DiceRollerClicked += objSkill_DiceRollerClicked;

                    //        objSkillControl.KnowledgeSkill = true;
                    //        objSkillControl.AllowDelete = true;
                    //        if (objSkill.Rating > 13)
                    //            objSkillControl.SkillRatingMaximum = objSkill.Rating;
                    //        else
                    //            objSkillControl.SkillRatingMaximum = 12;
                    //        objSkillControl.SkillRating = objSkill.Rating;
                    //        objSkillControl.SkillCategory = "Professional";
                    //        // Set the SkillControl's Location since scrolling the Panel causes it to actually change the child Controls' Locations.
                    //        objSkillControl.Location = new Point(0, objSkillControl.Height * i + panKnowledgeSkills.AutoScrollPosition.Y);
                    //        panKnowledgeSkills.Controls.Add(objSkillControl);

                    //        lstNewSkills.Add(objKnowledge);
                    //    }
                    //}
                    //foreach (Skill objSkill in lstNewSkills)
                    //    _objCharacter.Skills.Add(objSkill);
                }

                CharacterObject.RESEnabled = false;
                CharacterObject.TechnomancerEnabled = false;
            }

            // If the character is an A.I., set the Edge MetatypeMaximum to their Rating.
            if (CharacterObject.DEPEnabled)
                CharacterObject.EDG.MetatypeMaximum = CharacterObject.DEP.Value;

            // If the character is Cyberzombie, adjust their Attributes based on their Essence.
            if (CharacterObject.MetatypeCategory == "Cyberzombie")
            {
                int intESSModifier = CharacterObject.EssencePenalty - decimal.ToInt32(CharacterObject.EssenceMaximum);
                ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes");
                ImprovementManager.CreateImprovement(CharacterObject, "BOD", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(CharacterObject, "AGI", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(CharacterObject, "REA", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(CharacterObject, "STR", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(CharacterObject, "CHA", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(CharacterObject, "INT", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(CharacterObject, "LOG", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
                ImprovementManager.CreateImprovement(CharacterObject, "WIL", Improvement.ImprovementSource.Cyberzombie, "Cyberzombie Attributes", Improvement.ImprovementType.Attribute, string.Empty, 0, 1, 0, intESSModifier);
            }

            if (CharacterObject.AdeptEnabled)
            {
                tabPowerUc.MissingDatabindingsWorkaround();
            }

            Dictionary<string, int> dicAttributeValues = new Dictionary<string, int>(AttributeSection.AttributeStrings.Count);
            foreach (string strAttribute in AttributeSection.AttributeStrings)
            {
                dicAttributeValues.Add(strAttribute, CharacterObject.GetAttribute(strAttribute).Value);
            }
            Dictionary<string, int> dicAttributeTotalValues = new Dictionary<string, int>(AttributeSection.AttributeStrings.Count);
            foreach (string strAttribute in AttributeSection.AttributeStrings)
            {
                dicAttributeTotalValues.Add(strAttribute, CharacterObject.GetAttribute(strAttribute).TotalValue);
            }

            if (CharacterObject.MysticAdeptPowerPoints > dicAttributeTotalValues["MAG"])
                CharacterObject.MysticAdeptPowerPoints = dicAttributeTotalValues["MAG"];

            // Condition Monitor.
            UpdateConditionMonitor(lblCMPhysical, lblCMStun, tipTooltip);
            int intCMPhysical = CharacterObject.PhysicalCM;
            int intCMStun = CharacterObject.StunCM;
            int intCMOverflow = CharacterObject.CMOverflow;
            int intCMThreshold = CharacterObject.CMThreshold;
            int intPhysicalCMPenalty = 0;
            int intStunCMPenalty = 0;
            int intCMPenalty = 0;

            // Hide any unused Physical CM boxes.
            foreach (CheckBox objPhysicalCM in panPhysicalCM.Controls.OfType<CheckBox>())
            {
                int intBoxTag = Convert.ToInt32(objPhysicalCM.Tag.ToString());
                if (intBoxTag <= intCMPhysical + intCMOverflow)
                {
                    if (intBoxTag <= CharacterObject.PhysicalCMFilled)
                        objPhysicalCM.Checked = true;

                    objPhysicalCM.Visible = true;
                        
                    if (intBoxTag <= intCMPhysical)
                    {
                        // If this is within the Physical CM limits, act normally.
                        objPhysicalCM.BackColor = SystemColors.Control;
                        objPhysicalCM.UseVisualStyleBackColor = true;
                        if ((intBoxTag - ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CMThresholdOffset)) % intCMThreshold == 0 && intBoxTag > ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CMThresholdOffset))
                        {
                            int intModifiers = ((intBoxTag - ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CMThresholdOffset)) / intCMThreshold) * -1;
                            objPhysicalCM.Text = intModifiers.ToString();
                            if (objPhysicalCM.Checked)
                            {
                                if (intModifiers < intPhysicalCMPenalty)
                                    intPhysicalCMPenalty = intModifiers;
                            }
                        }
                        else
                            objPhysicalCM.Text = string.Empty;
                    }
                    else if (intBoxTag > intCMPhysical)
                    {
                        objPhysicalCM.BackColor = SystemColors.ControlDark;
                        if (intBoxTag == intCMPhysical + intCMOverflow)
                            objPhysicalCM.Text = "D";
                        else
                            objPhysicalCM.Text = string.Empty;
                    }
                }
                else
                {
                    objPhysicalCM.Visible = false;
                    objPhysicalCM.Text = string.Empty;
                }
            }

            // Hide any unused Stun CM boxes.
            foreach (CheckBox objStunCM in panStunCM.Controls.OfType<CheckBox>())
            {
                int intBoxTag = Convert.ToInt32(objStunCM.Tag.ToString());
                if (intBoxTag <= intCMStun)
                {
                    if (intBoxTag <= CharacterObject.StunCMFilled)
                        objStunCM.Checked = true;

                    objStunCM.Visible = true;
                    if ((intBoxTag - ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CMThresholdOffset)) % intCMThreshold == 0 && intBoxTag > ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CMThresholdOffset))
                    {
                        int intModifiers = ((intBoxTag - ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CMThresholdOffset)) / intCMThreshold) * -1;
                        objStunCM.Text = intModifiers.ToString();
                        if (objStunCM.Checked)
                        {
                            if (intModifiers < intStunCMPenalty)
                                intStunCMPenalty = intModifiers;
                        }
                    }
                    else
                        objStunCM.Text = string.Empty;
                }
                else
                {
                    objStunCM.Visible = false;
                    objStunCM.Text = string.Empty;
                }
            }

            // Reduce the CM Penalties to 0 if the character has Improvements to ignore them.
            if (CharacterObject.Improvements.Any(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.IgnoreCMPenaltyStun && objImprovement.Enabled))
                intStunCMPenalty = 0;
            if (CharacterObject.Improvements.Any(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.IgnoreCMPenaltyPhysical && objImprovement.Enabled))
                intPhysicalCMPenalty = 0;

            intCMPenalty = intPhysicalCMPenalty + intStunCMPenalty;
            lblCMPenalty.Text = intCMPenalty.ToString();

            // Discard any old Condition Monitor penalties.
            ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.ConditionMonitor, string.Empty);

            // Create the new Condition Monitor penalties.
            if (intCMPenalty < 0)
                ImprovementManager.CreateImprovement(CharacterObject, string.Empty, Improvement.ImprovementSource.ConditionMonitor, string.Empty,
                    Improvement.ImprovementType.ConditionMonitor, string.Empty, intCMPenalty);

            UpdateArmorRating(lblArmor, tipTooltip, lblCMArmor);

            //Update the Spell Defence tab.
            UpdateSpellDefence(dicAttributeTotalValues);

            // Update the CharacterAttribute information.

                /*// Character Attribute: BOD
                UpdateCharacterAttribute(_objCharacter.BOD, lblBODMetatype, lblBODAug, tipTooltip);

                // Character Attribute: AGI
                UpdateCharacterAttribute(_objCharacter.AGI,lblAGIMetatype,lblAGIAug,tipTooltip);

                // Character Attribute: REA
                UpdateCharacterAttribute(_objCharacter.REA, lblREAMetatype, lblREAAug, tipTooltip);

                // Character Attribute: STR
                UpdateCharacterAttribute(_objCharacter.STR, lblSTRMetatype, lblSTRAug, tipTooltip);

                // Character Attribute: CHA
                UpdateCharacterAttribute(_objCharacter.CHA, lblCHAMetatype, lblCHAAug, tipTooltip);

                // Character Attribute: INT
                UpdateCharacterAttribute(_objCharacter.INT, lblINTMetatype, lblINTAug, tipTooltip);

                // Character Attribute: AGI
                UpdateCharacterAttribute(_objCharacter.AGI, lblAGIMetatype, lblAGIAug, tipTooltip);

                // Character Attribute: LOG
                UpdateCharacterAttribute(_objCharacter.LOG, lblLOGMetatype, lblLOGAug, tipTooltip);

                // Character Attribute: WIL
                UpdateCharacterAttribute(_objCharacter.WIL, lblWILMetatype, lblWILAug, tipTooltip);

                // Character Attribute: EDG
                UpdateCharacterAttribute(_objCharacter.EDG, lblEDGMetatype, lblEDGAug, tipTooltip);

                // Character Attribute: MAG
                UpdateCharacterAttribute(_objCharacter.MAG, lblMAGMetatype, lblMAGAug, tipTooltip);

                // Character Attribute: RES
                UpdateCharacterAttribute(_objCharacter.RES, lblRESMetatype, lblRESAug, tipTooltip);

                // Character Attribute: DEP
                UpdateCharacterAttribute(_objCharacter.DEP, lblDEPMetatype, lblDEPAug, tipTooltip);*/

            // Update the MAG pseudo-Attributes if applicable.
            int intCharacterMAG = dicAttributeValues["MAG"];
            if (CharacterObject.AdeptEnabled && CharacterObject.MagicianEnabled)
            {
                lblMysticAdeptMAGAdept.Text = CharacterObject.MysticAdeptPowerPoints.ToString();
            }

            // Update the maximum Force for all Spirits.
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
            {
                objSpiritControl.RebuildSpiritList(objSpiritControl.SpiritObject.EntityType == SpiritType.Spirit ? CharacterObject.MagicTradition : CharacterObject.TechnomancerStream);
            }

            if (CharacterObject.AdeptEnabled)
            {
                tabPowerUc.MissingDatabindingsWorkaround();
            }

            // Update the Drain CharacterAttribute Value.
            if (CharacterObject.MAGEnabled && !string.IsNullOrEmpty(lblDrainAttributes.Text))
            {
                CalculateTraditionDrain(CharacterObject.TraditionDrain, Improvement.ImprovementType.DrainResistance, lblDrainAttributes, lblDrainAttributesValue, tipTooltip);
            }

            // Update the Fading CharacterAttribute Value.
            if (CharacterObject.RESEnabled && !string.IsNullOrEmpty(lblFadingAttributes.Text))
            {
                CalculateTraditionDrain(CharacterObject.TechnomancerFading, Improvement.ImprovementType.FadingResistance, lblFadingAttributes, lblFadingAttributesValue, tipTooltip);
            }

            // Skill Limits
            RefreshLimits(lblPhysical, lblMental, lblSocial, lblAstral, tipTooltip);

            int intINTAttributeModifiers = CharacterObject.INT.AttributeModifiers;
            int intREAAttributeModifiers = CharacterObject.REA.AttributeModifiers;

            // Initiative.
            lblINI.Text = CharacterObject.Initiative;
            string strInitText = LanguageManager.GetString("String_Initiative", GlobalOptions.Language);
            string strMatrixInitText = LanguageManager.GetString("String_MatrixInitiativeLong", GlobalOptions.Language);
            string strModifiers = LanguageManager.GetString("Tip_Modifiers", GlobalOptions.Language);
            string strInit =
                $"{CharacterObject.REA.DisplayAbbrev} ({dicAttributeValues["REA"]}) + {CharacterObject.INT.DisplayAbbrev} ({dicAttributeValues["INT"]})";
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.Initiative) > 0 ||
                intINTAttributeModifiers > 0 || intREAAttributeModifiers > 0)
                strInit += " + " + strModifiers + " (" +
                           (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.Initiative) +
                            intINTAttributeModifiers + intREAAttributeModifiers).ToString() + ")";
            tipTooltip.SetToolTip(lblINI,
                strInitText.Replace("{0}", strInit).Replace("{1}", CharacterObject.InitiativeDice.ToString()));

            // Astral Initiative.
            lblAstralINI.Visible = CharacterObject.MAGEnabled;
            if (CharacterObject.MAGEnabled)
            {
                lblAstralINI.Text = CharacterObject.AstralInitiative;
                strInit = $"{CharacterObject.INT.DisplayAbbrev} ({dicAttributeValues["INT"]}) x 2";
                if (intINTAttributeModifiers > 0)
                    strInit += $"{strModifiers} ({intINTAttributeModifiers})";
                tipTooltip.SetToolTip(lblAstralINI,
                    strInitText.Replace("{0}", strInit).Replace("{1}", CharacterObject.AstralInitiativeDice.ToString()));
            }

            // Matrix Initiative (AR).
            lblMatrixINI.Text = CharacterObject.MatrixInitiative;
            strInit =
                $"{CharacterObject.REA.DisplayAbbrev} ({dicAttributeValues["REA"]}) + {CharacterObject.INT.DisplayAbbrev} ({dicAttributeValues["INT"]})";
            if (intINTAttributeModifiers > 0 || intREAAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intREAAttributeModifiers + intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblMatrixINI,
                strInitText.Replace("{0}", strInit).Replace("{1}", CharacterObject.InitiativeDice.ToString()));

            // Matrix Initiative (Cold).
            lblMatrixINICold.Text = CharacterObject.MatrixInitiativeCold;
            strInit = strMatrixInitText.Replace("{0}", dicAttributeValues["INT"].ToString())
                .Replace("{1}", CharacterObject.MatrixInitiativeColdDice.ToString());
            if (intINTAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblMatrixINICold, strInit);

            // Matrix Initiative (Hot).
            lblMatrixINIHot.Text = CharacterObject.MatrixInitiativeHot;
            strInit = strMatrixInitText.Replace("{0}", dicAttributeValues["INT"].ToString())
                .Replace("{1}", CharacterObject.MatrixInitiativeHotDice.ToString());
            if (intINTAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblMatrixINIHot, strInit);

            // Rigger Initiative.
            lblRiggingINI.Text = CharacterObject.Initiative;
            strInit =
                $"{CharacterObject.REA.DisplayAbbrev} ({dicAttributeValues["REA"]}) + {CharacterObject.INT.DisplayAbbrev} ({dicAttributeValues["INT"]})";
            if (intINTAttributeModifiers > 0 || intREAAttributeModifiers > 0)
                strInit += $"{strModifiers} ({intREAAttributeModifiers + intINTAttributeModifiers})";
            tipTooltip.SetToolTip(lblRiggingINI,
                strInitText.Replace("{0}", strInit).Replace("{1}", CharacterObject.InitiativeDice.ToString()));

            if ((CharacterObject.Metatype == "Free Spirit" && !CharacterObject.IsCritter) ||
                CharacterObject.MetatypeCategory.EndsWith("Spirits"))
            {
                lblCritterPowerPointsLabel.Visible = true;
                lblCritterPowerPoints.Visible = true;
                lblCritterPowerPoints.Text = CharacterObject.CalculateFreeSpiritPowerPoints();
            }
            else if (CharacterObject.IsFreeSprite)
            {
                lblCritterPowerPointsLabel.Visible = true;
                lblCritterPowerPoints.Visible = true;
                lblCritterPowerPoints.Text = CharacterObject.CalculateFreeSpritePowerPoints();
            }

            // Update the Nuyen and Karma for the character.
            tssNuyen.Text = CharacterObject.Nuyen.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
            lblRemainingNuyen.Text = CharacterObject.Nuyen.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

            PopulateExpenseList();

            // Movement.
            lblMovement.Text = CharacterObject.GetMovement(GlobalOptions.CultureInfo, GlobalOptions.Language);
            //strTip = _objCharacter.CalculatedMovementSpeed;
            //tipTooltip.SetToolTip(lblMovement, strTip);
            lblSwim.Text = CharacterObject.GetSwim(GlobalOptions.CultureInfo, GlobalOptions.Language);
            lblFly.Text = CharacterObject.GetFly(GlobalOptions.CultureInfo, GlobalOptions.Language);

            // Special CharacterAttribute-Only Test.
            lblComposure.Text = CharacterObject.Composure.ToString();
            strTip =
                $"{CharacterObject.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) + {CharacterObject.CHA.DisplayAbbrev} ({dicAttributeTotalValues["CHA"]})";
            tipTooltip.SetToolTip(lblComposure, strTip);
            lblJudgeIntentions.Text = CharacterObject.JudgeIntentions.ToString();
            strTip =
                $"{CharacterObject.INT.DisplayAbbrev} ({dicAttributeTotalValues["INT"]}) + {CharacterObject.CHA.DisplayAbbrev} ({dicAttributeTotalValues["CHA"]})";
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.JudgeIntentions) != 0)
                strTip += " + " + LanguageManager.GetString("Tip_Modifiers", GlobalOptions.Language) + " (" +
                          ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.JudgeIntentions).ToString() + ")";
            tipTooltip.SetToolTip(lblJudgeIntentions, strTip);
            lblLiftCarry.Text = CharacterObject.LiftAndCarry.ToString();
            strTip =
                $"{CharacterObject.STR.DisplayAbbrev} ({dicAttributeTotalValues["STR"]}) + {CharacterObject.BOD.DisplayAbbrev} ({dicAttributeTotalValues["BOD"]})";
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.LiftAndCarry) != 0)
                strTip += " + " + LanguageManager.GetString("Tip_Modifiers", GlobalOptions.Language) + " (" +
                          ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.LiftAndCarry).ToString() + ")";
            strTip += "\n" +
                      LanguageManager.GetString("Tip_LiftAndCarry", GlobalOptions.Language)
                          .Replace("{0}", (dicAttributeTotalValues["STR"] * 15).ToString())
                          .Replace("{1}", (dicAttributeTotalValues["STR"] * 10).ToString());
            tipTooltip.SetToolTip(lblLiftCarry, strTip);
            lblMemory.Text = CharacterObject.Memory.ToString();
            strTip =
                $"{CharacterObject.WIL.DisplayAbbrev} ({dicAttributeTotalValues["WIL"]}) + {CharacterObject.LOG.DisplayAbbrev} ({dicAttributeTotalValues["LOG"]})";
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.Memory) != 0)
                strTip += " + " + LanguageManager.GetString("Tip_Modifiers", GlobalOptions.Language) + " (" +
                          ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.Memory).ToString() + ")";
            tipTooltip.SetToolTip(lblMemory, strTip);

            // Career Karma.
            lblCareerKarma.Text = CharacterObject.CareerKarma.ToString();

            // Career Nuyen.
            lblCareerNuyen.Text = CharacterObject.CareerNuyen.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

            // Update Damage Resistance Pool.
            lblCMDamageResistancePool.Text =
            (dicAttributeTotalValues["BOD"] + ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DamageResistance) +
             CharacterObject.TotalArmorRating).ToString();
            strTip = $"{CharacterObject.BOD.DisplayAbbrev} + {LanguageManager.GetString("Tip_Armor", GlobalOptions.Language)}";
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DamageResistance) != 0)
                strTip += " + " + LanguageManager.GetString("Tip_Modifiers", GlobalOptions.Language) + " (" +
                          ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.DamageResistance).ToString() + ")";
            tipTooltip.SetToolTip(lblCMDamageResistancePool, strTip);

            // Update EDG Remaining Info on the Condition Monitor tab.
            string strEDG = dicAttributeTotalValues["EDG"].ToString() + " " + LanguageManager.GetString("String_Of", GlobalOptions.Language) +
                            " " + dicAttributeValues["EDG"].ToString() + " " +
                            LanguageManager.GetString("String_Remaining", GlobalOptions.Language);
            lblEDGInfo.Text = strEDG;

            ImprovementManager.Commit(CharacterObject);

            // If the Viewer window is open for this character, call its RefreshView method which updates it asynchronously
            if (CharacterObject.PrintWindow != null)
                CharacterObject.PrintWindow.RefreshCharacters();
            if (Program.MainForm.PrintMultipleCharactersForm?.CharacterList?.Contains(CharacterObject) == true)
                Program.MainForm.PrintMultipleCharactersForm.PrintViewForm?.RefreshCharacters();

            cmdQuickenSpell.Visible = CharacterObject.Improvements.Any(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.QuickeningMetamagic && objImprovement.Enabled);
            cmdAddBioware.Enabled = !CharacterObject.Improvements.Any(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.DisableBioware && objImprovement.Enabled);
            cmdAddCyberware.Enabled = !CharacterObject.Improvements.Any(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.DisableCyberware && objImprovement.Enabled);
            RefreshLimitModifiers();
            RefreshImprovements();
            UpdateReputation();

            txtCharacterName.Text = CharacterObject.Name;
            txtSex.Text = CharacterObject.Sex;
            txtAge.Text = CharacterObject.Age;
            txtEyes.Text = CharacterObject.Eyes;
            txtHeight.Text = CharacterObject.Height;
            txtWeight.Text = CharacterObject.Weight;
            txtSkin.Text = CharacterObject.Skin;
            txtHair.Text = CharacterObject.Hair;
            txtDescription.Text = CharacterObject.Description;
            txtBackground.Text = CharacterObject.Background;
            txtConcept.Text = CharacterObject.Concept;
            txtNotes.Text = CharacterObject.Notes;
            txtAlias.Text = CharacterObject.Alias;
            txtPlayerName.Text = CharacterObject.PlayerName;

            if (Autosave_StopWatch.Elapsed.Minutes >= 5 && IsDirty)
            {
                AutoSaveCharacter();
            }
            _blnSkipUpdate = false;
            IsCharacterUpdateRequested = false;
        }

        /// <summary>
        /// Refresh the information for the currently displayed piece of Cyberware.
        /// </summary>
        public void RefreshSelectedCyberware()
        {
            _blnSkipRefresh = true;
            cboCyberwareGearAttack.Visible = false;
            cboCyberwareGearSleaze.Visible = false;
            cboCyberwareGearDataProcessing.Visible = false;
            cboCyberwareGearFirewall.Visible = false;
            cboCyberwareGearOverclocker.Visible = false;
            lblCyberDeviceRating.Visible = false;
            lblCyberDeviceRatingLabel.Visible = false;
            lblCyberAttackLabel.Visible = false;
            lblCyberSleazeLabel.Visible = false;
            lblCyberDataProcessingLabel.Visible = false;
            lblCyberFirewallLabel.Visible = false;
            cmdDeleteCyberware.Enabled = treCyberware.SelectedNode != null;
            cmdCyberwareChangeMount.Visible = false;

            chkCyberwareActiveCommlink.Visible = false;
            chkCyberwareHomeNode.Visible = false;

            if (treCyberware.SelectedNode == null || treCyberware.SelectedNode.Level == 0)
            {
                lblCyberwareName.Text = string.Empty;
                lblCyberwareCategory.Text = string.Empty;
                lblCyberwareRating.Text = string.Empty;
                lblCyberwareAvail.Text = string.Empty;
                lblCyberwareCost.Text = string.Empty;
                lblCyberwareCapacity.Text = string.Empty;
                lblCyberwareEssence.Text = string.Empty;
                lblCyberwareSource.Text = string.Empty;
                tipTooltip.SetToolTip(lblCyberwareSource, null);
                lblCyberlimbAGI.Visible = false;
                lblCyberlimbAGILabel.Visible = false;
                lblCyberlimbSTR.Visible = false;
                lblCyberlimbSTRLabel.Visible = false;
                _blnSkipRefresh = false;
                return;
            }
            Cyberware objCyberware = CharacterObject.Cyberware.DeepFindById(treCyberware.SelectedNode.Tag.ToString());
            // Locate the selected piece of Cyberware.
            if (objCyberware != null)
            {
                if (!string.IsNullOrEmpty(objCyberware.ParentID))
                    cmdDeleteCyberware.Enabled = false;
                cmdCyberwareChangeMount.Visible = !string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount);
                lblCyberwareName.Text = objCyberware.DisplayNameShort(GlobalOptions.Language);
                lblCyberwareCategory.Text = objCyberware.DisplayCategory(GlobalOptions.Language);
                string strBook = CommonFunctions.LanguageBookShort(objCyberware.Source, GlobalOptions.Language);
                string strPage = objCyberware.Page(GlobalOptions.Language);
                lblCyberwareSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblCyberwareSource, CommonFunctions.LanguageBookLong(objCyberware.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                lblCyberwareRating.Text = objCyberware.Rating.ToString();

                lblCyberwareGrade.Text = objCyberware.Grade.DisplayName(GlobalOptions.Language);

                if (objCyberware.Category.Equals("Cyberlimb"))
                {
                    lblCyberlimbAGI.Visible = true;
                    lblCyberlimbAGILabel.Visible = true;
                    lblCyberlimbSTR.Visible = true;
                    lblCyberlimbSTRLabel.Visible = true;

                    lblCyberlimbAGI.Text = objCyberware.TotalAgility.ToString();
                    lblCyberlimbSTR.Text = objCyberware.TotalStrength.ToString();
                }
                else
                {
                    lblCyberlimbAGI.Visible = false;
                    lblCyberlimbAGILabel.Visible = false;
                    lblCyberlimbSTR.Visible = false;
                    lblCyberlimbSTRLabel.Visible = false;
                }

                if (objCyberware.SourceType == Improvement.ImprovementSource.Cyberware)
                {
                    // Locate the selected Cyberware.
                    TreeNode objCyberwareNode = treCyberware.SelectedNode;
                    tabCyberwareCM.Visible = true;
                    if (treCyberware.SelectedNode.Level > 1)
                    {
                        while (objCyberwareNode.Level > 1)
                        {
                            objCyberwareNode = objCyberwareNode.Parent;
                            tabCyberwareCM.Visible = false;
                        }
                    }
                    else
                    {
                        tabCyberwareCM.Visible = true;
                    }

                    // Hide any unused CM boxes.
                    foreach (CheckBox objMatrixCM in tabCyberwareMatrixCM.Controls.OfType<CheckBox>())
                    {
                        if (Convert.ToInt32(objMatrixCM.Tag.ToString()) <= objCyberware.MatrixCM)
                        {
                            if (Convert.ToInt32(objMatrixCM.Tag.ToString()) <= objCyberware.MatrixCMFilled)
                                objMatrixCM.Checked = true;
                            else
                                objMatrixCM.Checked = false;

                            objMatrixCM.Visible = true;
                        }
                        else
                        {
                            objMatrixCM.Checked = false;
                            objMatrixCM.Visible = false;
                            objMatrixCM.Text = string.Empty;
                        }
                    }

                    lblCyberDeviceRating.Text = objCyberware.GetTotalMatrixAttribute("Device Rating").ToString();
                    lblCyberDeviceRating.Visible = true;
                    lblCyberDeviceRatingLabel.Visible = true;
                    lblCyberAttackLabel.Visible = true;
                    lblCyberSleazeLabel.Visible = true;
                    lblCyberDataProcessingLabel.Visible = true;
                    lblCyberFirewallLabel.Visible = true;
                    objCyberware.RefreshMatrixAttributeCBOs(cboCyberwareGearAttack, cboCyberwareGearSleaze, cboCyberwareGearDataProcessing, cboCyberwareGearFirewall);

                    chkCyberwareActiveCommlink.Visible = objCyberware.IsCommlink;
                    chkCyberwareActiveCommlink.Checked = objCyberware.IsActiveCommlink(CharacterObject);
                    if (CharacterObject.Metatype == "A.I.")
                    {
                        chkCyberwareHomeNode.Visible = true;
                        chkCyberwareHomeNode.Checked = objCyberware.IsHomeNode(CharacterObject);
                        chkCyberwareHomeNode.Enabled = chkCyberwareActiveCommlink.Visible && objCyberware.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objCyberware.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                    }
                }
                else
                {
                    tabCyberwareCM.Visible = false;
                }

                lblCyberwareAvail.Text = objCyberware.TotalAvail(GlobalOptions.Language);
                lblCyberwareCost.Text = objCyberware.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblCyberwareCapacity.Text = objCyberware.CalculatedCapacity + " (" +
                                            objCyberware.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " +
                                            LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                lblCyberwareEssence.Text = objCyberware.CalculatedESS().ToString(GlobalOptions.CultureInfo);
                if (objCyberware.AddToParentESS)
                    lblCyberwareEssence.Text = "+" + lblCyberwareEssence.Text;
            }
            else
            {
                // Locate the selected piece of Gear.
                Gear objGear = CommonFunctions.FindCyberwareGear(treCyberware.SelectedNode.Tag.ToString(),
                    CharacterObject.Cyberware.GetAllDescendants(x => x.Children));

                if (objGear != null)
                {
                    if (objGear.IncludedInParent)
                        cmdDeleteCyberware.Enabled = false;

                    if (CharacterObject.Overclocker && objGear.Category == "Cyberdecks")
                    {
                        cboCyberwareGearOverclocker.Visible = true;
                        lblCyberwareGearOverclocker.Visible = true;
                        List<ListItem> lstOverclocker = new List<ListItem>
                        {
                            new ListItem("None", LanguageManager.GetString("String_None", GlobalOptions.Language)),
                            new ListItem("Attack", LanguageManager.GetString("String_Attack", GlobalOptions.Language)),
                            new ListItem("Sleaze", LanguageManager.GetString("String_Sleaze", GlobalOptions.Language)),
                            new ListItem("Data Processing", LanguageManager.GetString("String_DataProcessing", GlobalOptions.Language)),
                            new ListItem("Firewall", LanguageManager.GetString("String_Firewall", GlobalOptions.Language))
                        };

                        cboCyberwareGearOverclocker.BindingContext = new BindingContext();
                        cboCyberwareGearOverclocker.DisplayMember = "Name";
                        cboCyberwareGearOverclocker.ValueMember = "Value";
                        cboCyberwareGearOverclocker.DataSource = lstOverclocker;
                        cboCyberwareGearOverclocker.SelectedValue = objGear.Overclocked;
                        if (cboCyberwareGearOverclocker.SelectedIndex == -1)
                            cboCyberwareGearOverclocker.SelectedIndex = 0;
                        cboCyberwareGearOverclocker.EndUpdate();
                    }
                    else
                    {
                        cboCyberwareGearOverclocker.Visible = false;
                        lblCyberwareGearOverclocker.Visible = false;
                    }

                    objGear.RefreshMatrixAttributeCBOs(cboCyberwareGearAttack, cboCyberwareGearSleaze, cboCyberwareGearDataProcessing, cboCyberwareGearFirewall);

                    chkCyberwareActiveCommlink.Visible = objGear.IsCommlink;
                    chkCyberwareActiveCommlink.Checked = objGear.IsActiveCommlink(CharacterObject);
                    if (CharacterObject.Metatype == "A.I.")
                    {
                        chkCyberwareHomeNode.Visible = true;
                        chkCyberwareHomeNode.Checked = objGear.IsHomeNode(CharacterObject);
                        chkCyberwareHomeNode.Enabled = chkCyberwareActiveCommlink.Visible && objCyberware.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objGear.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                    }

                    lblCyberDeviceRating.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    lblCyberDeviceRating.Visible = true;
                    lblCyberDeviceRatingLabel.Visible = true;
                    lblCyberAttackLabel.Visible = true;
                    lblCyberSleazeLabel.Visible = true;
                    lblCyberDataProcessingLabel.Visible = true;
                    lblCyberFirewallLabel.Visible = true;

                    lblCyberwareName.Text = objGear.DisplayNameShort(GlobalOptions.Language);
                    lblCyberwareCategory.Text = objGear.DisplayCategory(GlobalOptions.Language);
                    lblCyberwareAvail.Text = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                    lblCyberwareCost.Text = objGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblCyberwareCapacity.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) +
                                                " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                    lblCyberwareEssence.Text = "0";
                    lblCyberwareGrade.Text = string.Empty;
                    lblCyberwareRating.Text = objGear.Rating.ToString();
                    string strBook = CommonFunctions.LanguageBookShort(objGear.Source, GlobalOptions.Language);
                    string strPage = objGear.DisplayPage(GlobalOptions.Language);
                    lblCyberwareSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblCyberwareSource, CommonFunctions.LanguageBookLong(objGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                }
            }
            _blnSkipRefresh = false;
        }

        public void RefreshAIPrograms()
        {
            treAIPrograms.Nodes[0].Nodes.Clear();

            // Populate AI Programs.
            foreach (AIProgram objAIProgram in CharacterObject.AIPrograms)
            {
                TreeNode objNode = new TreeNode
                {
                    Text = objAIProgram.DisplayName,
                    Tag = objAIProgram.InternalId,
                    ToolTipText = objAIProgram.Notes.WordWrap(100),
                    ContextMenuStrip = cmsAdvancedProgram
                };
                if (!string.IsNullOrEmpty(objAIProgram.Notes))
                    objNode.ForeColor = Color.SaddleBrown;
                else if (!objAIProgram.CanDelete)
                    objNode.ForeColor = SystemColors.GrayText;
                else
                    objNode.ForeColor = SystemColors.WindowText;
                treAIPrograms.Nodes[0].Nodes.Add(objNode);
            }
            treAIPrograms.Nodes[0].Expand();
        }

        public void RefreshMartialArts()
        {
            treMartialArts.Nodes[0].Nodes.Clear();
            treMartialArts.Nodes[1].Nodes.Clear();

            // Populate Martial Arts.
            foreach (MartialArt objMartialArt in CharacterObject.MartialArts)
            {
                treMartialArts.Add(objMartialArt, cmsMartialArts);
            }
        }

        public void RefreshLimitModifiers()
        {
            treLimit.Nodes[0].Nodes.Clear();
            treLimit.Nodes[1].Nodes.Clear();
            treLimit.Nodes[2].Nodes.Clear();

            // Populate Limit Modifiers.
            foreach (LimitModifier objLimitModifier in CharacterObject.LimitModifiers)
            {
                treLimit.Add(objLimitModifier, cmsLimitModifier);
            }

            // Populate Limit Modifiers from Improvements
            foreach (Improvement objImprovement in CharacterObject.Improvements)
            {
                if (objImprovement.ImproveType == Improvement.ImprovementType.LimitModifier)
                {
                    treLimit.Add(objImprovement, cmsLimitModifier);
                }
            }
        }

        /// <summary>
        /// Refresh the information for the currently displayed Weapon.
        /// </summary>
        public void RefreshSelectedWeapon()
        {
            _blnSkipRefresh = true;
            lblWeaponDeviceRating.Text = string.Empty;
            lblWeaponFirewallLabel.Visible = false;
            lblWeaponDataProcessingLabel.Visible = false;
            lblWeaponSleazeLabel.Visible = false;
            lblWeaponAttackLabel.Visible = false;
            cboCyberwareGearAttack.Visible = false;
            cboCyberwareGearDataProcessing.Visible = false;
            cboCyberwareGearFirewall.Visible = false;
            cboCyberwareGearSleaze.Visible = false;
            cmdDeleteWeapon.Enabled = treWeapons.SelectedNode != null;
            // Hide Weapon Ranges.
            lblWeaponRangeMain.Text = string.Empty;
            lblWeaponRangeAlternate.Text = string.Empty;
            lblWeaponRangeShort.Text = string.Empty;
            lblWeaponRangeMedium.Text = string.Empty;
            lblWeaponRangeLong.Text = string.Empty;
            lblWeaponRangeExtreme.Text = string.Empty;
            lblWeaponAlternateRangeShort.Text = string.Empty;
            lblWeaponAlternateRangeMedium.Text = string.Empty;
            lblWeaponAlternateRangeLong.Text = string.Empty;
            lblWeaponAlternateRangeExtreme.Text = string.Empty;

            if (treWeapons.SelectedNode == null || treWeapons.SelectedNode.Level == 0)
            {
                lblWeaponName.Text = string.Empty;
                lblWeaponCategory.Text = string.Empty;
                lblWeaponAvail.Text = string.Empty;
                lblWeaponCost.Text = string.Empty;
                lblWeaponConceal.Text = string.Empty;
                lblWeaponAccuracy.Text = string.Empty;
                lblWeaponDamage.Text = string.Empty;
                lblWeaponRC.Text = string.Empty;
                lblWeaponAP.Text = string.Empty;
                lblWeaponReach.Text = string.Empty;
                lblWeaponMode.Text = string.Empty;
                lblWeaponAmmo.Text = string.Empty;
                lblWeaponRating.Text = string.Empty;
                lblWeaponSource.Text = string.Empty;
                cboWeaponAmmo.Enabled = false;
                tipTooltip.SetToolTip(lblWeaponSource, null);
                chkWeaponAccessoryInstalled.Enabled = false;
                chkIncludedInWeapon.Enabled = false;
                chkIncludedInWeapon.Checked = false;

                // Disable the fire button.
                cmdFireWeapon.Enabled = false;
                cmdReloadWeapon.Enabled = false;
                cmdWeaponBuyAmmo.Enabled = false;
                cboWeaponAmmo.Enabled = false;
                _blnSkipRefresh = false;
                return;
            }

            lblWeaponDicePool.Text = string.Empty;
            tipTooltip.SetToolTip(lblWeaponDicePool, string.Empty);
            cmdWeaponMoveToVehicle.Enabled = false;

            // Locate the selected Weapon.
            if (treWeapons.SelectedNode.Level == 1)
            {
                Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());
                if (objWeapon == null)
                    return;

                if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                    cmdDeleteWeapon.Enabled = false;
                lblWeaponName.Text = objWeapon.DisplayNameShort(GlobalOptions.Language);
                lblWeaponCategory.Text = objWeapon.DisplayCategory(GlobalOptions.Language);
                string strBook = CommonFunctions.LanguageBookShort(objWeapon.Source, GlobalOptions.Language);
                string strPage = objWeapon.DisplayPage(GlobalOptions.Language);
                lblWeaponSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblWeaponSource, CommonFunctions.LanguageBookLong(objWeapon.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                chkWeaponAccessoryInstalled.Enabled = false;
                chkIncludedInWeapon.Enabled = false;
                chkIncludedInWeapon.Checked = false;

                // Do not allow Cyberware of Gear Weapons to be moved.
                if (!objWeapon.Cyberware && objWeapon.Category != "Gear")
                {
                    if (CharacterObject.Vehicles.Count > 0)
                        cmdWeaponMoveToVehicle.Enabled = true;
                    else
                        cmdWeaponMoveToVehicle.Enabled = false;
                }

                // Enable the fire button if the Weapon is Ranged.
                if (objWeapon.WeaponType == "Ranged" || (objWeapon.WeaponType == "Melee" && objWeapon.Ammo != "0"))
                {
                    cmdFireWeapon.Enabled = true;
                    cmdReloadWeapon.Enabled = true;
                    cmdWeaponBuyAmmo.Enabled = true;
                    lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
                    //lblWeaponAmmoType.Text = "External Source";

                    cmsAmmoSingleShot.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeSingleShot", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeSemiAutomatic", GlobalOptions.Language));
                    cmsAmmoShortBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeBurstFire", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                    cmsAmmoLongBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                    cmsAmmoFullBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                    cmsAmmoSuppressiveFire.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));

                    // Melee Weapons with Ammo are considered to be Single Shot.
                    if (objWeapon.WeaponType == "Melee" && objWeapon.Ammo != "0")
                        cmsAmmoSingleShot.Enabled = true;

                    if (cmsAmmoFullBurst.Enabled)
                        cmsAmmoFullBurst.Text = LanguageManager.GetString("String_FullBurst", GlobalOptions.Language).Replace("{0}", objWeapon.FullBurst.ToString());
                    if (cmsAmmoSuppressiveFire.Enabled)
                        cmsAmmoSuppressiveFire.Text = LanguageManager.GetString("String_SuppressiveFire", GlobalOptions.Language).Replace("{0}", objWeapon.Suppressive.ToString());

                    List<ListItem> lstAmmo = new List<ListItem>();
                    int intCurrentSlot = objWeapon.ActiveAmmoSlot;
                    for (int i = 1; i <= objWeapon.AmmoSlots; i++)
                    {
                        objWeapon.ActiveAmmoSlot = i;
                        Gear objGear = CharacterObject.Gear.DeepFindById(objWeapon.AmmoLoaded);

                        string strPlugins = string.Empty;
                        if (objGear != null)
                        {
                            foreach (Gear objChild in objGear.Children)
                            {
                                strPlugins += objChild.DisplayNameShort(GlobalOptions.Language) + ", ";
                            }
                        }
                        // Remove the trailing comma.
                        if (!string.IsNullOrEmpty(strPlugins))
                            strPlugins = strPlugins.Substring(0, strPlugins.Length - 2);
                        
                        string strAmmoName = string.Empty;
                        if (objGear == null)
                        {
                            if (objWeapon.AmmoRemaining == 0)
                                strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_Empty", GlobalOptions.Language);
                            else
                                strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_ExternalSource", GlobalOptions.Language);
                        }
                        else
                            strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + objGear.DisplayNameShort(GlobalOptions.Language);
                        if (!string.IsNullOrEmpty(strPlugins))
                            strAmmoName += " [" + strPlugins + "]";
                        lstAmmo.Add(new ListItem(i.ToString(), strAmmoName));
                    }
                    objWeapon.ActiveAmmoSlot = intCurrentSlot;
                    cboWeaponAmmo.BeginUpdate();
                    cboWeaponAmmo.Enabled = true;
                    cboWeaponAmmo.ValueMember = "Value";
                    cboWeaponAmmo.DisplayMember = "Name";
                    cboWeaponAmmo.DataSource = lstAmmo;
                    cboWeaponAmmo.SelectedValue = objWeapon.ActiveAmmoSlot.ToString();
                    if (cboWeaponAmmo.SelectedIndex == -1)
                        cboWeaponAmmo.SelectedIndex = 0;
                    cboWeaponAmmo.EndUpdate();
                }
                else
                {
                    cmdFireWeapon.Enabled = false;
                    cmdReloadWeapon.Enabled = false;
                    cmdWeaponBuyAmmo.Enabled = false;
                    lblWeaponAmmoRemaining.Text = string.Empty;
                    cboWeaponAmmo.Enabled = false;
                }

                // Show the Weapon Ranges.
                lblWeaponRangeMain.Text = objWeapon.DisplayRange(GlobalOptions.Language);
                lblWeaponRangeAlternate.Text = objWeapon.DisplayAlternateRange(GlobalOptions.Language);
                IDictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                lblWeaponRangeShort.Text = dictionaryRanges["short"];
                lblWeaponRangeMedium.Text = dictionaryRanges["medium"];
                lblWeaponRangeLong.Text = dictionaryRanges["long"];
                lblWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                lblWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                lblWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                lblWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                lblWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                lblWeaponAvail.Text = objWeapon.TotalAvail(GlobalOptions.Language);
                lblWeaponCost.Text = objWeapon.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblWeaponConceal.Text = objWeapon.CalculatedConcealability(GlobalOptions.CultureInfo);
                lblWeaponDamage.Text = objWeapon.CalculatedDamage(GlobalOptions.CultureInfo, GlobalOptions.Language);
                lblWeaponAccuracy.Text = objWeapon.TotalAccuracy.ToString();
                lblWeaponRC.Text = objWeapon.TotalRC;
                lblWeaponAP.Text = objWeapon.TotalAP(GlobalOptions.Language);
                lblWeaponReach.Text = objWeapon.TotalReach.ToString();
                lblWeaponMode.Text = objWeapon.CalculatedMode(GlobalOptions.Language);
                lblWeaponAmmo.Text = objWeapon.CalculatedAmmo(GlobalOptions.CultureInfo, GlobalOptions.Language);
                lblWeaponRating.Text = string.Empty;
                if (GlobalOptions.Language != GlobalOptions.DefaultLanguage && !string.IsNullOrWhiteSpace(objWeapon.AccessoryMounts))
                {
                    string strSlotsText = string.Empty;
                    foreach (string strMount in objWeapon.AccessoryMounts.Split('/'))
                    {
                        strSlotsText += LanguageManager.GetString("String_Mount" + strMount, GlobalOptions.Language) + '/';
                    }
                    lblWeaponSlots.Text = strSlotsText.TrimEnd('/');
                }
                else
                    lblWeaponSlots.Text = objWeapon.AccessoryMounts;
                lblWeaponDicePool.Text = objWeapon.GetDicePool(GlobalOptions.CultureInfo);
                tipTooltip.SetToolTip(lblWeaponDicePool, objWeapon.DicePoolTooltip);
                tipTooltip.SetToolTip(lblWeaponRC, objWeapon.RCToolTip);
            }
            else
            {
                // See if this is an Underbarrel Weapon.
                Weapon objWeapon = CharacterObject.Weapons.DeepFindById(treWeapons.SelectedNode.Tag.ToString());

                if (objWeapon != null)
                {
                    if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                        cmdDeleteWeapon.Enabled = false;
                    cmdFireWeapon.Enabled = true;
                    cmdReloadWeapon.Enabled = true;
                    cmdWeaponBuyAmmo.Enabled = true;

                    if (!string.IsNullOrEmpty(objWeapon.ParentID))
                    {
                        cmdDeleteWeapon.Enabled = false;
                        if (string.IsNullOrEmpty(objWeapon.Notes))
                            treWeapons.SelectedNode.ForeColor = SystemColors.GrayText;
                    }

                    lblWeaponAvail.Text = objWeapon.TotalAvail(GlobalOptions.Language);
                    lblWeaponCost.Text = objWeapon.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblWeaponConceal.Text = objWeapon.CalculatedConcealability(GlobalOptions.CultureInfo);
                    lblWeaponDamage.Text = objWeapon.CalculatedDamage(GlobalOptions.CultureInfo, GlobalOptions.Language);
                    lblWeaponRC.Text = objWeapon.TotalRC;
                    lblWeaponAccuracy.Text = objWeapon.TotalAccuracy.ToString();
                    lblWeaponAP.Text = objWeapon.TotalAP(GlobalOptions.Language);
                    lblWeaponReach.Text = objWeapon.TotalReach.ToString();
                    lblWeaponMode.Text = objWeapon.CalculatedMode(GlobalOptions.Language);
                    lblWeaponAmmo.Text = objWeapon.CalculatedAmmo(GlobalOptions.CultureInfo, GlobalOptions.Language);
                    lblWeaponRating.Text = string.Empty;
                    if (GlobalOptions.Language != GlobalOptions.DefaultLanguage && !string.IsNullOrWhiteSpace(objWeapon.AccessoryMounts))
                    {
                        string strSlotsText = string.Empty;
                        foreach (string strMount in objWeapon.AccessoryMounts.Split('/'))
                        {
                            strSlotsText += LanguageManager.GetString("String_Mount" + strMount, GlobalOptions.Language) + '/';
                        }
                        lblWeaponSlots.Text = strSlotsText.TrimEnd('/');
                    }
                    else
                        lblWeaponSlots.Text = objWeapon.AccessoryMounts;
                    lblWeaponDicePool.Text = objWeapon.GetDicePool(GlobalOptions.CultureInfo);
                    tipTooltip.SetToolTip(lblWeaponDicePool, objWeapon.DicePoolTooltip);

                    cmsAmmoSingleShot.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeSingleShot", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeSemiAutomatic", GlobalOptions.Language));
                    cmsAmmoShortBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeBurstFire", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                    cmsAmmoLongBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                    cmsAmmoFullBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                    cmsAmmoSuppressiveFire.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));

                    // Melee Weapons with Ammo are considered to be Single Shot.
                    if (objWeapon.WeaponType == "Melee" && objWeapon.Ammo != "0")
                        cmsAmmoSingleShot.Enabled = true;

                    if (cmsAmmoFullBurst.Enabled)
                        cmsAmmoFullBurst.Text = LanguageManager.GetString("String_FullBurst", GlobalOptions.Language).Replace("{0}", objWeapon.FullBurst.ToString());
                    if (cmsAmmoSuppressiveFire.Enabled)
                        cmsAmmoSuppressiveFire.Text = LanguageManager.GetString("String_SuppressiveFire", GlobalOptions.Language).Replace("{0}", objWeapon.Suppressive.ToString());

                    List<ListItem> lstAmmo = new List<ListItem>();
                    int intCurrentSlot = objWeapon.ActiveAmmoSlot;
                    for (int i = 1; i <= objWeapon.AmmoSlots; i++)
                    {
                        objWeapon.ActiveAmmoSlot = i;
                        Gear objGear = CharacterObject.Gear.DeepFindById(objWeapon.AmmoLoaded);

                        string strPlugins = string.Empty;
                        if (objGear != null)
                        {
                            foreach (Gear objChild in objGear.Children)
                            {
                                strPlugins += objChild.DisplayNameShort(GlobalOptions.Language) + ", ";
                            }
                        }
                        // Remove the trailing comma.
                        if (!string.IsNullOrEmpty(strPlugins))
                            strPlugins = strPlugins.Substring(0, strPlugins.Length - 2);
                        
                        string strAmmoName = string.Empty;
                        if (objGear == null)
                            strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_Empty", GlobalOptions.Language);
                        else
                            strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + objGear.DisplayNameShort(GlobalOptions.Language);
                        if (!string.IsNullOrEmpty(strPlugins))
                            strAmmoName += " [" + strPlugins + "]";
                        lstAmmo.Add(new ListItem(i.ToString(), strAmmoName));
                    }
                    chkWeaponAccessoryInstalled.Enabled = true;
                    chkWeaponAccessoryInstalled.Checked = objWeapon.Installed;
                    chkIncludedInWeapon.Enabled = false;
                    chkIncludedInWeapon.Checked = objWeapon.IncludedInWeapon;
                    objWeapon.ActiveAmmoSlot = intCurrentSlot;
                    cboWeaponAmmo.BeginUpdate();
                    cboWeaponAmmo.Enabled = true;
                    cboWeaponAmmo.ValueMember = "Value";
                    cboWeaponAmmo.DisplayMember = "Name";
                    cboWeaponAmmo.DataSource = lstAmmo;
                    cboWeaponAmmo.SelectedValue = objWeapon.ActiveAmmoSlot.ToString();
                    if (cboWeaponAmmo.SelectedIndex == -1)
                        cboWeaponAmmo.SelectedIndex = 0;
                    cboWeaponAmmo.EndUpdate();

                    // Show the Weapon Ranges.
                    lblWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();
                    lblWeaponRangeMain.Text = objWeapon.DisplayRange(GlobalOptions.Language);
                    lblWeaponRangeAlternate.Text = objWeapon.DisplayAlternateRange(GlobalOptions.Language);
                    IDictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                    lblWeaponRangeShort.Text = dictionaryRanges["short"];
                    lblWeaponRangeMedium.Text = dictionaryRanges["medium"];
                    lblWeaponRangeLong.Text = dictionaryRanges["long"];
                    lblWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                    lblWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                    lblWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                    lblWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                    lblWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];
                }
                else
                {
                    cmdFireWeapon.Enabled = false;
                    cmdReloadWeapon.Enabled = false;
                    cmdWeaponBuyAmmo.Enabled = false;
                    cboWeaponAmmo.Enabled = false;

                    Weapon objSelectedWeapon = null;
                    WeaponAccessory objSelectedAccessory = CommonFunctions.FindWeaponAccessory(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons);
                    if (objSelectedAccessory != null)
                    {
                        if (objSelectedAccessory.IncludedInWeapon)
                            cmdDeleteWeapon.Enabled = false;
                        objSelectedWeapon = objSelectedAccessory.Parent;
                        lblWeaponName.Text = objSelectedAccessory.DisplayNameShort(GlobalOptions.Language);
                        lblWeaponCategory.Text = LanguageManager.GetString("String_WeaponAccessory", GlobalOptions.Language);
                        lblWeaponAvail.Text = objSelectedAccessory.TotalAvail(GlobalOptions.Language);
                        lblWeaponAccuracy.Text = objSelectedWeapon.TotalAccuracy.ToString();
                        lblWeaponCost.Text = objSelectedAccessory.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblWeaponConceal.Text = objSelectedAccessory.Concealability.ToString();
                        lblWeaponDamage.Text = string.Empty;
                        lblWeaponRC.Text = objSelectedAccessory.RC;
                        lblWeaponAP.Text = string.Empty;
                        lblWeaponReach.Text = string.Empty;
                        lblWeaponMode.Text = string.Empty;
                        lblWeaponAmmo.Text = string.Empty;
                        lblWeaponRating.Text = objSelectedAccessory.Rating.ToString();

                        string[] strMounts = objSelectedAccessory.Mount.Split('/');
                        string strMount = string.Empty;
                        foreach (string strCurrentMount in strMounts)
                        {
                            if (!string.IsNullOrEmpty(strCurrentMount))
                                strMount += LanguageManager.GetString("String_Mount" + strCurrentMount, GlobalOptions.Language) + "/";
                        }
                        // Remove the trailing /
                        if (!string.IsNullOrEmpty(strMount) && strMount.Contains('/'))
                            strMount = strMount.Substring(0, strMount.Length - 1);
                        if (!string.IsNullOrEmpty(objSelectedAccessory.ExtraMount) && (objSelectedAccessory.ExtraMount != "None"))
                        {
                            bool boolHaveAddedItem = false;
                            string[] strExtraMounts = objSelectedAccessory.ExtraMount.Split('/');
                            foreach (string strCurrentExtraMount in strExtraMounts)
                            {
                                if (!string.IsNullOrEmpty(strCurrentExtraMount))
                                {
                                    if (!boolHaveAddedItem)
                                    {
                                        strMount += " + ";
                                        boolHaveAddedItem = true;
                                    }
                                    strMount += LanguageManager.GetString("String_Mount" + strCurrentExtraMount, GlobalOptions.Language) + "/";
                                }
                            }
                            // Remove the trailing /
                            if (boolHaveAddedItem)
                                strMount = strMount.Substring(0, strMount.Length - 1);
                        }

                        lblWeaponSlots.Text = strMount;
                        string strBook = CommonFunctions.LanguageBookShort(objSelectedAccessory.Source, GlobalOptions.Language);
                        string strPage = objSelectedAccessory.Page(GlobalOptions.Language);
                        lblWeaponSource.Text = strBook + " " + CommonFunctions.LanguageBookLong(objSelectedAccessory.Source, GlobalOptions.Language);
                        tipTooltip.SetToolTip(lblWeaponSource, strBook + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                        chkWeaponAccessoryInstalled.Enabled = true;
                        chkWeaponAccessoryInstalled.Checked = objSelectedAccessory.Installed;
                        chkIncludedInWeapon.Enabled = CharacterObjectOptions.AllowEditPartOfBaseWeapon;
                        chkIncludedInWeapon.Checked = objSelectedAccessory.IncludedInWeapon;
                    }
                    else
                    {
                        // Find the selected Gear.
                        Gear objGear = CommonFunctions.FindWeaponGear(treWeapons.SelectedNode.Tag.ToString(), CharacterObject.Weapons, out objSelectedAccessory);
                        if (objGear != null)
                        {
                            objSelectedWeapon = objSelectedAccessory.Parent;
                            if (objGear.IncludedInParent)
                                cmdDeleteWeapon.Enabled = false;
                            lblWeaponName.Text = objGear.DisplayNameShort(GlobalOptions.Language);
                            lblWeaponCategory.Text = objGear.DisplayCategory(GlobalOptions.Language);
                            lblWeaponAvail.Text = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                            lblWeaponCost.Text = objGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                            lblWeaponAccuracy.Text = objSelectedWeapon.TotalAccuracy.ToString();
                            lblWeaponConceal.Text = string.Empty;
                            lblWeaponDamage.Text = string.Empty;
                            lblWeaponRC.Text = string.Empty;
                            lblWeaponAP.Text = string.Empty;
                            lblWeaponReach.Text = string.Empty;
                            lblWeaponMode.Text = string.Empty;
                            lblWeaponAmmo.Text = string.Empty;
                            lblWeaponRating.Text = string.Empty;
                            lblWeaponSlots.Text = string.Empty;
                            string strBook = CommonFunctions.LanguageBookShort(objGear.Source, GlobalOptions.Language);
                            string strPage = objGear.DisplayPage(GlobalOptions.Language);
                            lblWeaponSource.Text = strBook + " " + strPage;
                            tipTooltip.SetToolTip(lblWeaponSource, CommonFunctions.BookFromCode(objGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                            chkWeaponAccessoryInstalled.Enabled = true;
                            chkWeaponAccessoryInstalled.Checked = objGear.Equipped;
                            chkIncludedInWeapon.Enabled = false;
                            chkIncludedInWeapon.Checked = false;

                            objGear.RefreshMatrixAttributeCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);
                            lblWeaponDeviceRating.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                            lblWeaponAttackLabel.Visible = true;
                            lblWeaponSleazeLabel.Visible = true;
                            lblWeaponDataProcessingLabel.Visible = true;
                            lblWeaponFirewallLabel.Visible = true;
                        }
                    }

                    // Show the Weapon Ranges.
                    if (objSelectedWeapon != null)
                    {
                        lblWeaponRangeMain.Text = objSelectedWeapon.DisplayRange(GlobalOptions.Language);
                        lblWeaponRangeAlternate.Text = objSelectedWeapon.DisplayAlternateRange(GlobalOptions.Language);
                        IDictionary<string, string> dictionaryRanges = objSelectedWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];
                    }
                }
            }
            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Refresh the information for the currently displayed Armor.
        /// </summary>
        public void RefreshSelectedArmor()
        {
            _blnSkipRefresh = true;
            lblArmorDeviceRating.Text = string.Empty;
            lblArmorAttack.Text = string.Empty;
            lblArmorSleaze.Text = string.Empty;
            lblArmorDataProcessing.Text = string.Empty;
            lblArmorFirewall.Text = string.Empty;
            cmdDeleteArmor.Enabled = treArmor.SelectedNode != null;
            chkArmorEquipped.Enabled = false;

            if (treArmor.SelectedNode.Level == 0)
            {
                lblArmorEquipped.Text = string.Empty;
                foreach (Armor objArmor in CharacterObject.Armor)
                {
                    if (objArmor.Equipped && (objArmor.Location == treArmor.SelectedNode.Text || string.IsNullOrEmpty(objArmor.Location) && treArmor.SelectedNode == treArmor.Nodes[0]))
                        lblArmorEquipped.Text += objArmor.DisplayName(GlobalOptions.Language) + " (" + objArmor.DisplayArmorValue +  ")\n";
                }
                if (string.IsNullOrEmpty(lblArmorEquipped.Text))
                    lblArmorEquipped.Text = LanguageManager.GetString("String_None", GlobalOptions.Language);
                
                lblArmorEquipped.Visible = true;

                chkIncludedInArmor.Enabled = false;
                chkIncludedInArmor.Checked = false;
            }
            else
                lblArmorEquipped.Visible = false;

            if (treArmor.SelectedNode.Level == 1)
            {
                // Loclate the selected Armor
                Armor objArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());
                if (objArmor == null)
                    return;

                lblArmorValue.Text = objArmor.DisplayArmorValue;
                lblArmorAvail.Text = objArmor.TotalAvail(GlobalOptions.Language);
                lblArmorCapacity.Text = objArmor.CalculatedCapacity + " (" + objArmor.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                lblArmorRating.Text = string.Empty;
                lblArmorCost.Text = objArmor.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                string strBook = CommonFunctions.LanguageBookShort(objArmor.Source, GlobalOptions.Language);
                string strPage = objArmor.Page(GlobalOptions.Language);
                lblArmorSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblArmorSource, CommonFunctions.LanguageBookLong(objArmor.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                chkArmorEquipped.Checked = objArmor.Equipped;
                chkArmorEquipped.Enabled = true;
                chkIncludedInArmor.Enabled = false;
                chkIncludedInArmor.Checked = false;
            }
            else if (treArmor.SelectedNode.Level == 2)
            {
                Armor objSelectedArmor = null;
                ArmorMod objSelectedMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);
                if (objSelectedMod != null)
                {
                    objSelectedArmor = objSelectedMod.Parent;
                    if (objSelectedMod.IncludedInArmor)
                        cmdDeleteArmor.Enabled = false;
                    lblArmorValue.Text = objSelectedMod.Armor.ToString("+0;-0;0");
                    lblArmorAvail.Text = objSelectedMod.TotalAvail(GlobalOptions.Language);
                    if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Standard)
                        lblArmorCapacity.Text = objSelectedMod.CalculatedCapacity;
                    else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Zero)
                        lblArmorCapacity.Text = "[0]";
                    else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.PerRating)
                    {
                        if (objSelectedMod.Rating > 0)
                            lblArmorCapacity.Text = "[" + objSelectedMod.Rating.ToString() + "]";
                        else
                            lblArmorCapacity.Text = "[1]";
                    }
                    if (!string.IsNullOrEmpty(objSelectedMod.GearCapacity))
                        lblArmorCapacity.Text = objSelectedMod.GearCapacity + "/" + lblArmorCapacity.Text + " (" + objSelectedMod.GearCapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                    lblArmorCost.Text = objSelectedMod.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

                    string strBook = CommonFunctions.LanguageBookShort(objSelectedMod.Source, GlobalOptions.Language);
                    string strPage = objSelectedMod.DisplayPage(GlobalOptions.Language);
                    lblArmorSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblArmorSource, CommonFunctions.LanguageBookLong(objSelectedMod.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                    chkArmorEquipped.Checked = objSelectedMod.Equipped;
                    chkArmorEquipped.Enabled = true;
                    lblArmorRating.Text = objSelectedMod.Rating.ToString();
                    chkIncludedInArmor.Enabled = true;
                    chkIncludedInArmor.Checked = objSelectedMod.IncludedInArmor;
                }
                else
                {
                    Gear objSelectedGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor, out objSelectedArmor, out objSelectedMod);

                    if (objSelectedGear.IncludedInParent)
                        cmdDeleteArmor.Enabled = false;
                    lblArmorValue.Text = string.Empty;
                    lblArmorAvail.Text = objSelectedGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                    if (objSelectedMod != null)
                    {
                        lblArmorCapacity.Text = objSelectedGear.CalculatedCapacity;
                    }
                    else
                    {
                        if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Standard)
                            lblArmorCapacity.Text = objSelectedGear.CalculatedArmorCapacity;
                        else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.Zero)
                            lblArmorCapacity.Text = "[0]";
                        else if (objSelectedArmor.CapacityDisplayStyle == CapacityStyle.PerRating)
                        {
                            if (objSelectedGear.Rating > 0)
                                lblArmorCapacity.Text = "[" + objSelectedGear.Rating.ToString() + "]";
                            else
                                lblArmorCapacity.Text = "[1]";
                        }
                    }
                    lblArmorCost.Text = objSelectedGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    string strBook = CommonFunctions.LanguageBookShort(objSelectedGear.Source, GlobalOptions.Language);
                    string strPage = objSelectedGear.DisplayPage(GlobalOptions.Language);
                    lblArmorSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblArmorSource, CommonFunctions.LanguageBookLong(objSelectedGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                    chkArmorEquipped.Checked = objSelectedGear.Equipped;
                    chkArmorEquipped.Enabled = true;
                    lblArmorRating.Text = objSelectedGear.Rating.ToString();

                    lblArmorDeviceRating.Text = objSelectedGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    lblArmorAttack.Text = objSelectedGear.GetTotalMatrixAttribute("Attack").ToString();
                    lblArmorSleaze.Text = objSelectedGear.GetTotalMatrixAttribute("Sleaze").ToString();
                    lblArmorDataProcessing.Text = objSelectedGear.GetTotalMatrixAttribute("Data Processing").ToString();
                    lblArmorFirewall.Text = objSelectedGear.GetTotalMatrixAttribute("Firewall").ToString();
                }
            }
            else if (treArmor.SelectedNode.Level > 2)
            {
                Gear objSelectedGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);

                if (objSelectedGear.IncludedInParent)
                    cmdDeleteArmor.Enabled = false;
                lblArmorValue.Text = string.Empty;
                lblArmorAvail.Text = objSelectedGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                lblArmorCapacity.Text = objSelectedGear.CalculatedArmorCapacity;
                lblArmorCost.Text = objSelectedGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                string strBook = CommonFunctions.LanguageBookShort(objSelectedGear.Source, GlobalOptions.Language);
                string strPage = objSelectedGear.DisplayPage(GlobalOptions.Language);
                lblArmorSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblArmorSource, CommonFunctions.LanguageBookLong(objSelectedGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                chkArmorEquipped.Checked = objSelectedGear.Equipped;
                chkArmorEquipped.Enabled = true;
                lblArmorRating.Text = objSelectedGear.Rating.ToString();

                lblArmorDeviceRating.Text = objSelectedGear.GetTotalMatrixAttribute("Device Rating").ToString();
                lblArmorAttack.Text = objSelectedGear.GetTotalMatrixAttribute("Attack").ToString();
                lblArmorSleaze.Text = objSelectedGear.GetTotalMatrixAttribute("Sleaze").ToString();
                lblArmorDataProcessing.Text = objSelectedGear.GetTotalMatrixAttribute("Data Processing").ToString();
                lblArmorFirewall.Text = objSelectedGear.GetTotalMatrixAttribute("Firewall").ToString();
            }
            else
            {
                lblArmorValue.Text = string.Empty;
                lblArmorAvail.Text = string.Empty;
                lblArmorCost.Text = string.Empty;
                lblArmorSource.Text = string.Empty;
                tipTooltip.SetToolTip(lblArmorSource, null);
                lblArmorRating.Text = string.Empty;
                chkArmorEquipped.Enabled = false;
            }
            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Refresh the information for the currently displayed Gear.
        /// </summary>
        public void RefreshSelectedGear()
        {
            _blnSkipRefresh = true;
            cmdDeleteGear.Enabled = treGear.SelectedNode != null;
            if (treGear.SelectedNode == null || treGear.SelectedNode.Level == 0)
            {
                lblGearRating.Text = string.Empty;
                lblGearQty.Text = string.Empty;
                cmdGearIncreaseQty.Enabled = false;
                cmdGearReduceQty.Enabled = false;
                chkGearEquipped.Text = LanguageManager.GetString("Checkbox_Equipped", GlobalOptions.Language);
                chkGearEquipped.Visible = false;
                chkGearActiveCommlink.Enabled = false;
                chkGearActiveCommlink.Checked = false;
                cmdGearSplitQty.Enabled = false;
                cmdGearMergeQty.Enabled = false;
                cmdGearMoveToVehicle.Enabled = false;
                tabGearMatrixCM.Visible = false;
                return;
            }
            chkGearHomeNode.Visible = false;

            if (treGear.SelectedNode.Level > 0)
            {
                Gear objGear = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());

                if (objGear != null)
                {
                    if (objGear.IncludedInParent)
                        cmdDeleteGear.Enabled = false;
                    lblGearName.Text = objGear.DisplayNameShort(GlobalOptions.Language);
                    lblGearCategory.Text = objGear.DisplayCategory(GlobalOptions.Language);
                    lblGearAvail.Text = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                    try
                    {
                        lblGearCost.Text = objGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    }
                    catch (FormatException)
                    {
                        lblGearCost.Text = objGear.Cost + "¥";
                    }
                    lblGearCapacity.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                    string strBook = CommonFunctions.LanguageBookShort(objGear.Source, GlobalOptions.Language);
                    string strPage = objGear.DisplayPage(GlobalOptions.Language);
                    lblGearSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblGearSource, CommonFunctions.LanguageBookLong(objGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                    
                    if (objGear.GetTotalMatrixAttribute("Device Rating") > 0)
                    {
                        tabGearMatrixCM.Visible = true;
                        foreach (CheckBox objMatrixCM in tabMatrixCM.Controls.OfType<CheckBox>())
                        {
                            if (Convert.ToInt32(objMatrixCM.Tag.ToString()) <= objGear.MatrixCM)
                            {
                                if (Convert.ToInt32(objMatrixCM.Tag.ToString()) <= objGear.MatrixCMFilled)
                                    objMatrixCM.Checked = true;
                                else
                                    objMatrixCM.Checked = false;

                                objMatrixCM.Visible = true;
                            }
                            else
                            {
                                objMatrixCM.Checked = false;
                                objMatrixCM.Visible = false;
                                objMatrixCM.Text = string.Empty;
                            }
                        }
                    }
                    else
                    {
                        tabGearMatrixCM.Visible = false;
                    }

                    cboGearOverclocker.BeginUpdate();

                    lblGearDeviceRating.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    chkGearActiveCommlink.Checked = objGear.IsActiveCommlink(CharacterObject);
                    chkGearActiveCommlink.Enabled = objGear.IsCommlink;

                    if (CharacterObject.Overclocker && objGear.Category == "Cyberdecks")
                    {
                        cboGearOverclocker.Visible = true;
                        lblGearOverclocker.Visible = true;
                        List<ListItem> lstOverclocker = new List<ListItem>
                        {
                            new ListItem("None", LanguageManager.GetString("String_None", GlobalOptions.Language)),
                            new ListItem("Attack", LanguageManager.GetString("String_Attack", GlobalOptions.Language)),
                            new ListItem("Sleaze", LanguageManager.GetString("String_Sleaze", GlobalOptions.Language)),
                            new ListItem("Data Processing", LanguageManager.GetString("String_DataProcessing", GlobalOptions.Language)),
                            new ListItem("Firewall", LanguageManager.GetString("String_Firewall", GlobalOptions.Language))
                        };

                        cboGearOverclocker.BindingContext = new BindingContext();
                        cboGearOverclocker.DisplayMember = "Name";
                        cboGearOverclocker.ValueMember = "Value";
                        cboGearOverclocker.DataSource = lstOverclocker;
                        cboGearOverclocker.SelectedValue = objGear.Overclocked;
                        if (cboGearOverclocker.SelectedIndex == -1)
                            cboGearOverclocker.SelectedIndex = 0;
                        cboGearOverclocker.EndUpdate();
                    }
                    else
                    {
                        cboGearOverclocker.Visible = false;
                        lblGearOverclocker.Visible = false;
                    }

                    objGear.RefreshMatrixAttributeCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);

                    lblGearDeviceRating.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    
                    lblGearDeviceRating.Visible = true;
                    lblGearDeviceRatingLabel.Visible = true;
                    lblGearAttackLabel.Visible = true;
                    lblGearSleazeLabel.Visible = true;
                    lblGearDataProcessingLabel.Visible = true;
                    lblGearFirewallLabel.Visible = true;

                    if (CharacterObject.Metatype == "A.I.")
                    {
                        chkGearHomeNode.Visible = true;
                        chkGearHomeNode.Checked = objGear.IsHomeNode(CharacterObject);
                        chkGearHomeNode.Enabled = chkGearActiveCommlink.Enabled && objGear.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objGear.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                    }

                    if (objGear.MaxRating > 0)
                    {
                        lblGearRating.Text = objGear.Rating.ToString();
                    }
                    else
                    {
                        lblGearRating.Text = string.Empty;
                    }

                    lblGearQty.Text = objGear.Quantity.ToString(GlobalOptions.CultureInfo);

                    if (treGear.SelectedNode.Level == 1)
                    {
                        lblGearQty.Text = objGear.Quantity.ToString(GlobalOptions.CultureInfo);
                        chkGearEquipped.Visible = true;
                        chkGearEquipped.Checked = objGear.Equipped;
                    }
                    else
                    {
                        lblGearQty.Text = "1";
                        chkGearEquipped.Visible = true;
                        chkGearEquipped.Checked = objGear.Equipped;

                        // If this is a Program, determine if its parent Gear (if any) is a Commlink. If so, show the Equipped checkbox.
                        if (objGear.IsProgram && CharacterObjectOptions.CalculateCommlinkResponse)
                        {
                            Gear objParent = objGear?.Parent;
                            if (!string.IsNullOrEmpty(objParent.Category))
                            {
                                if (objParent.Category == "Commlink" || objParent.Category == "Nexus")
                                    chkGearEquipped.Text = LanguageManager.GetString("Checkbox_SoftwareRunning", GlobalOptions.Language);
                            }
                        }
                    }

                    // Show the Weapon Bonus information if it's available.
                    if (objGear.WeaponBonus != null)
                    {
                        lblGearDamageLabel.Visible = true;
                        lblGearDamage.Visible = true;
                        lblGearAPLabel.Visible = true;
                        lblGearAP.Visible = true;
                        lblGearDamage.Text = objGear.WeaponBonusDamage(GlobalOptions.Language);
                        lblGearAP.Text = objGear.WeaponBonusAP;
                    }
                    else
                    {
                        lblGearDamageLabel.Visible = false;
                        lblGearDamage.Visible = false;
                        lblGearAPLabel.Visible = false;
                        lblGearAP.Visible = false;
                    }

                    cmdGearIncreaseQty.Enabled = !objGear.DisableQuantity;
                    cmdGearReduceQty.Enabled = !objGear.DisableQuantity;

                    treGear.SelectedNode.Text = objGear.DisplayName(GlobalOptions.Language);
                }

                // Enable or disable the Split/Merge buttons as needed.
                if (treGear.SelectedNode.Level == 1)
                {
                    cmdGearSplitQty.Enabled = !objGear.DisableQuantity;
                    cmdGearMergeQty.Enabled = !objGear.DisableQuantity;
                    if (CharacterObject.Vehicles.Count > 0)
                        cmdGearMoveToVehicle.Enabled = !objGear.DisableQuantity;
                    else
                        cmdGearMoveToVehicle.Enabled = false;
                }
                else
                {
                    cmdGearSplitQty.Enabled = false;
                    cmdGearMergeQty.Enabled = false;
                    cmdGearMoveToVehicle.Enabled = false;
                }
            }
            _blnSkipRefresh = false;
        }

        public override string FormMode
        {
            get
            {
                return LanguageManager.GetString("Title_CareerMode", GlobalOptions.Language);
            }
        }

        /// <summary>
        /// Open the Select Cyberware window and handle adding to the Tree and Character.
        /// </summary>
        private bool PickCyberware(Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Cyberware)
        {
            // Determine the lowest whole number for the character's current Essence.
            decimal decStartingESS = decimal.Floor(CharacterObject.Essence);

            Cyberware objSelectedCyberware = null;
            int intNode = 0;
            if (objSource == Improvement.ImprovementSource.Bioware)
                intNode = 1;

            // Attempt to locate the selected piece of Cyberware.
            if (treCyberware.SelectedNode != null && treCyberware.SelectedNode.Level > 0)
                objSelectedCyberware = CharacterObject.Cyberware.DeepFindById(treCyberware.SelectedNode.Tag.ToString());

            frmSelectCyberware frmPickCyberware = new frmSelectCyberware(CharacterObject, objSource, objSelectedCyberware?.GetNode());
            decimal decMultiplier = 1.0m;
            // Apply the character's Cyberware Essence cost multiplier if applicable.
            if (objSource == Improvement.ImprovementSource.Cyberware)
            {
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CyberwareEssCost) != 0)
                {
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareEssCost && objImprovement.Enabled)
                            decMultiplier -= (1 - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                    }
                    frmPickCyberware.CharacterESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CyberwareTotalEssMultiplier) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareTotalEssMultiplier && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CyberwareEssCostNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareEssCostNonRetroactive && objImprovement.Enabled)
                            decMultiplier -= (1 - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                    }
                    frmPickCyberware.CharacterESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.CyberwareTotalEssMultiplierNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.CyberwareTotalEssMultiplierNonRetroactive && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
            }
            // Apply the character's Bioware Essence cost multiplier if applicable.
            else if (objSource == Improvement.ImprovementSource.Bioware)
            {
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.BiowareEssCost) != 0)
                {
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareEssCost && objImprovement.Enabled)
                            decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                    }
                    frmPickCyberware.CharacterESSMultiplier = decMultiplier;
                }
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.BiowareTotalEssMultiplier) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareTotalEssMultiplier && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.BiowareEssCostNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareEssCostNonRetroactive && objImprovement.Enabled)
                            decMultiplier -= (1 - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100));
                    }
                    frmPickCyberware.CharacterESSMultiplier = decMultiplier;
                }
                if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.BiowareTotalEssMultiplierNonRetroactive) != 0)
                {
                    decMultiplier = 1.0m;
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.BiowareTotalEssMultiplierNonRetroactive && objImprovement.Enabled)
                            decMultiplier *= (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m);
                    }
                    frmPickCyberware.CharacterTotalESSMultiplier *= decMultiplier;
                }
            }

            // Apply the character's Basic Bioware Essence cost multiplier if applicable.
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.BasicBiowareEssCost) != 0 && objSource == Improvement.ImprovementSource.Bioware)
            {
                decMultiplier = 1.0m;
                foreach (Improvement objImprovement in CharacterObject.Improvements)
                {
                    if (objImprovement.ImproveType == Improvement.ImprovementType.BasicBiowareEssCost && objImprovement.Enabled)
                        decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                }
                frmPickCyberware.BasicBiowareESSMultiplier = decMultiplier;
            }

            // Genetech Cost multiplier.
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.GenetechCostMultiplier) != 0 && objSource == Improvement.ImprovementSource.Bioware)
            {
                decMultiplier = 1.0m;
                foreach (Improvement objImprovement in CharacterObject.Improvements)
                {
                    if (objImprovement.ImproveType == Improvement.ImprovementType.GenetechCostMultiplier && objImprovement.Enabled)
                        decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                }
                frmPickCyberware.GenetechCostMultiplier = decMultiplier;
            }

            // Transgenics Cost multiplier.
            if (ImprovementManager.ValueOf(CharacterObject, Improvement.ImprovementType.TransgenicsBiowareCost) != 0 && objSource == Improvement.ImprovementSource.Bioware)
            {
                decMultiplier = 1.0m;
                foreach (Improvement objImprovement in CharacterObject.Improvements)
                {
                    if (objImprovement.ImproveType == Improvement.ImprovementType.TransgenicsBiowareCost && objImprovement.Enabled)
                        decMultiplier -= (1.0m - (Convert.ToDecimal(objImprovement.Value, GlobalOptions.InvariantCultureInfo) / 100.0m));
                }
                frmPickCyberware.TransgenicsBiowareCostMultiplier = decMultiplier;
            }

            if (objSelectedCyberware != null)
            {
                if (treCyberware.SelectedNode.Level > 0)
                {
                    frmPickCyberware.SetGrade = objSelectedCyberware.Grade;
                    frmPickCyberware.LockGrade();
                    // If the Cyberware has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                    if (!objSelectedCyberware.Capacity.Contains('['))
                    {
                        frmPickCyberware.Subsystems = objSelectedCyberware.AllowedSubsystems;
                        frmPickCyberware.MaximumCapacity = objSelectedCyberware.CapacityRemaining;

                        // Do not allow the user to add a new piece of Cyberware if its Capacity has been reached.
                        if (CharacterObjectOptions.EnforceCapacity && objSelectedCyberware.CapacityRemaining < 0)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                    }
                }

                frmPickCyberware.CyberwareParent = objSelectedCyberware;
                frmPickCyberware.Subsystems = objSelectedCyberware.AllowedSubsystems;

                HashSet<string> setDisallowedMounts = new HashSet<string>();
                HashSet<string> setHasMounts = new HashSet<string>();
                string[] strLoopDisallowedMounts = objSelectedCyberware.BlocksMounts.Split(',');
                foreach (string strLoop in strLoopDisallowedMounts)
                    setDisallowedMounts.Add(strLoop + objSelectedCyberware.Location);
                string strLoopHasModularMount = objSelectedCyberware.HasModularMount;
                if (!string.IsNullOrEmpty(strLoopHasModularMount))
                    setHasMounts.Add(strLoopHasModularMount);
                foreach (Cyberware objLoopCyberware in objSelectedCyberware.Children.DeepWhere(x => x.Children, x => string.IsNullOrEmpty(x.PlugsIntoModularMount)))
                {
                    strLoopDisallowedMounts = objLoopCyberware.BlocksMounts.Split(',');
                    foreach (string strLoop in strLoopDisallowedMounts)
                        if (!setDisallowedMounts.Contains(strLoop + objLoopCyberware.Location))
                            setDisallowedMounts.Add(strLoop + objLoopCyberware.Location);
                    strLoopHasModularMount = objLoopCyberware.HasModularMount;
                    if (!string.IsNullOrEmpty(strLoopHasModularMount))
                        if (!setHasMounts.Contains(strLoopHasModularMount))
                            setHasMounts.Add(strLoopHasModularMount);
                }
                string strDisallowedMounts = string.Empty;
                foreach (string strLoop in setDisallowedMounts)
                    if (!strLoop.EndsWith("Right") && (!strLoop.EndsWith("Left") || setDisallowedMounts.Contains(strLoop.Substring(0, strLoop.Length - 4) + "Right")))
                        strDisallowedMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strDisallowedMounts))
                    strDisallowedMounts = strDisallowedMounts.Substring(0, strDisallowedMounts.Length - 1);
                frmPickCyberware.DisallowedMounts = strDisallowedMounts;
                string strHasMounts = string.Empty;
                foreach (string strLoop in setHasMounts)
                    strHasMounts += strLoop + ",";
                // Remove trailing ","
                if (!string.IsNullOrEmpty(strHasMounts))
                    strHasMounts = strHasMounts.Substring(0, strHasMounts.Length - 1);
                frmPickCyberware.HasModularMounts = strHasMounts;
            }

            frmPickCyberware.ShowDialog(this);

            // Make sure the dialogue window was not canceled.
            if (frmPickCyberware.DialogResult == DialogResult.Cancel)
                return false;

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = null;
            if (objSource == Improvement.ImprovementSource.Bioware)
                objXmlDocument = XmlManager.Load("bioware.xml");
            else
                objXmlDocument = XmlManager.Load("cyberware.xml");

            XmlNode objXmlCyberware = null;
            if (objSource == Improvement.ImprovementSource.Bioware)
                objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/biowares/bioware[name = \"" + frmPickCyberware.SelectedCyberware + "\"]");
            else
                objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/cyberwares/cyberware[name = \"" + frmPickCyberware.SelectedCyberware + "\"]");

            // Create the Cyberware object.
            Cyberware objCyberware = new Cyberware(CharacterObject);
            List<Weapon> objWeapons = new List<Weapon>();
            TreeNode objNode = new TreeNode
            {
                ContextMenuStrip = cmsCyberware
            };
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            List<Vehicle> objVehicles = new List<Vehicle>();
            List<TreeNode> objVehicleNodes = new List<TreeNode>();
            objCyberware.Create(objXmlCyberware, CharacterObject, frmPickCyberware.SelectedGrade, objSource, frmPickCyberware.SelectedRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, true, true, string.Empty, objSelectedCyberware);
            if (objCyberware.InternalId == Guid.Empty.ToString())
                return false;


            // Adjust for Black Market Pipeline Discount
            objCyberware.DiscountCost = frmPickCyberware.BlackMarketDiscount;

            // Force the item to be Transgenic if selected.
            if (frmPickCyberware.ForceTransgenic)
                objCyberware.Category = "Genetech: Transgenics";

            // Apply the ESS discount if applicable.
            if (CharacterObjectOptions.AllowCyberwareESSDiscounts)
                objCyberware.ESSDiscount = frmPickCyberware.SelectedESSDiscount;

            decimal decCost = objCyberware.TotalCost;

            // Multiply the cost if applicable.
            string strAvail = objCyberware.TotalAvail(GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickCyberware.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Remove any Improvements created by the Cyberware.
                    ImprovementManager.RemoveImprovements(CharacterObject, objCyberware.SourceType, objCyberware.InternalId);
                    return frmPickCyberware.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    string strEntry = string.Empty;
                    if (objCyberware.SourceType == Improvement.ImprovementSource.Cyberware)
                        strEntry = LanguageManager.GetString("String_ExpensePurchaseCyberware", GlobalOptions.Language);
                    else
                        strEntry = LanguageManager.GetString("String_ExpensePurchaseBioware", GlobalOptions.Language);
                    objExpense.Create(decCost * -1, strEntry + " " + objCyberware.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    ExpenseUndo objUndo = new ExpenseUndo();
                    objUndo.CreateNuyen(NuyenExpenseType.AddCyberware, objCyberware.InternalId);
                    objExpense.Undo = objUndo;
                }
            }

            DecreaseEssenceHole((int)(objCyberware.CalculatedESS() * 100));

            if (treCyberware.SelectedNode != null && treCyberware.SelectedNode.Level > 0)
            {
                treCyberware.SelectedNode.Nodes.Add(objNode);
                treCyberware.SelectedNode.Expand();
                objSelectedCyberware.Children.Add(objCyberware);
            }
            else
            {
                if (!string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount))
                    intNode = 2;
                treCyberware.Nodes[intNode].Nodes.Add(objNode);
                treCyberware.Nodes[intNode].Expand();
                CharacterObject.Cyberware.Add(objCyberware);
            }

            foreach (Weapon objWeapon in objWeapons)
                CharacterObject.Weapons.Add(objWeapon);

            // Create the Weapon Node if one exists.
            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            foreach (Vehicle objVehicle in objVehicles)
                CharacterObject.Vehicles.Add(objVehicle);

            // Create the Vehicle Node if one exists.
            foreach (TreeNode objVehicleNode in objVehicleNodes)
            {
                objVehicleNode.ContextMenuStrip = cmsVehicle;
                treVehicles.Nodes[0].Nodes.Add(objVehicleNode);
                treVehicles.Nodes[0].Expand();
            }
            if (frmPickCyberware.DialogResult != DialogResult.Cancel)
            {
                treCyberware.SortCustom();
                treCyberware.SelectedNode = objNode;
                IsCharacterUpdateRequested = true;
                RefreshSelectedCyberware();
                PopulateGearList();

                IsDirty = true;
            }

            return frmPickCyberware.AddAgain;
        }

        /// <summary>
        /// Select a piece of Gear to be added to the character.
        /// </summary>
        /// <param name="blnAmmoOnly">Whether or not only Ammunition should be shown in the window.</param>
        /// <param name="objStackGear">Whether or not the selected item should stack with a matching item on the character.</param>
        /// <param name="strForceItemValue">Force the user to select an item with the passed name..</param>
        private bool PickGear(TreeNode n, bool blnAmmoOnly = false, Gear objStackGear = null, string strForceItemValue = "")
        {
            bool blnNullParent = false;
            Gear objSelectedGear = null;
            if (n != null)
                objSelectedGear = CharacterObject.Gear.DeepFindById(n.Tag.ToString());
            if (objSelectedGear == null)
            {
                objSelectedGear = new Gear(CharacterObject);
                blnNullParent = true;
            }

            ExpenseUndo objUndo = new ExpenseUndo();

            // Open the Gear XML file and locate the selected Gear.
            XmlNode objXmlGear = blnNullParent ? null : objSelectedGear.GetNode();

            Cursor = Cursors.WaitCursor;
            frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, objSelectedGear.ChildAvailModifier, objSelectedGear.ChildCostMultiplier, objXmlGear);
            if (n != null)
            {
                if (n.Level > 0)
                {
                    if (objXmlGear?.InnerXml.Contains("<addoncategory>") == true)
                    {
                        string strCategories = string.Empty;
                        foreach (XmlNode objXmlCategory in objXmlGear.SelectNodes("addoncategory"))
                            strCategories += objXmlCategory.InnerText + ",";
                        // Remove the trailing comma.
                        strCategories = strCategories.Substring(0, strCategories.Length - 1);
                        frmPickGear.AllowedCategories = strCategories;
                    }

                    // If the Gear has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                    if (!objSelectedGear.Capacity.Contains('[') || objSelectedGear.Capacity.Contains("/["))
                    {
                        frmPickGear.MaximumCapacity = objSelectedGear.CapacityRemaining;

                        // Do not allow the user to add a new piece of Gear if its Capacity has been reached.
                        if (CharacterObjectOptions.EnforceCapacity && objSelectedGear.CapacityRemaining < 0)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                    }

                    // If a Commlink has just been added, see if the character already has one. If not, make it the active Commlink.
                    if (CharacterObject.ActiveCommlink == null && objSelectedGear.IsCommlink)
                    {
                        objSelectedGear.SetActiveCommlink(CharacterObject, true);
                    }
                }
            }
            
            frmPickGear.DefaultSearchText = strForceItemValue;

            if (blnAmmoOnly)
            {
                frmPickGear.AllowedCategories = "Ammunition";
                frmPickGear.SelectedGear = objSelectedGear.Name;
            }

            frmPickGear.ShowDialog(this);
            Cursor = Cursors.Default;

            // Make sure the dialogue window was not canceled.
            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return false;

            TreeNode objNode = new TreeNode();

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();

            string strForceValue = string.Empty;
            if (blnAmmoOnly)
            {
                strForceValue = objSelectedGear.Extra;
                if (treGear.SelectedNode != null)
                {
                    treGear.SelectedNode = treGear.SelectedNode.Parent;
                }
            }
            if (!string.IsNullOrEmpty(strForceItemValue))
                strForceValue = strForceItemValue;
            Gear objNewGear = new Gear(CharacterObject);
            objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, strForceValue, true, true, frmPickGear.Aerodynamic);

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return false;

            objNewGear.Quantity = frmPickGear.SelectedQty;
            objNode.Text = objNewGear.DisplayName(GlobalOptions.Language);

            objNewGear.Parent = objSelectedGear;
            if (blnNullParent)
                objNewGear.Parent = null;

            //Reduce the Cost for Black Market Pipelin
            objNewGear.DiscountCost = frmPickGear.BlackMarketDiscount;
            
            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.5";

            decimal decCost = 0;
            if (objNewGear.Cost.Contains("Gear Cost"))
            {
                string strCost = objNewGear.Cost.Replace("Gear Cost", objSelectedGear.CalculatedCost.ToString(GlobalOptions.InvariantCultureInfo));
                decCost = Convert.ToDecimal(CommonFunctions.EvaluateInvariantXPath(strCost).ToString(), GlobalOptions.InvariantCultureInfo);
            }
            else
            {
                decCost = objNewGear.TotalCost;
            }

            Gear objStackWith = null;
            // See if the character already has the item on them if they chose to stack.
            if (frmPickGear.Stack)
            {
                if (objStackGear != null)
                {
                    objStackWith = objStackGear;
                }
                else
                {
                    objStackWith = CharacterObject.Gear.FirstOrDefault(x => objNewGear.IsIdenticalToOtherGear(x));
                }
            }
            
            if (objStackWith != null)
            {
                // If a match was found, we need to use the cost of a single item in the stack which can include plugins.
                foreach (Gear objPlugin in objStackWith.Children)
                    decCost += (objPlugin.TotalCost * frmPickGear.SelectedQty);
            }
            if (!blnNullParent && !blnAmmoOnly)
                decCost *= objSelectedGear.Quantity;

            // Apply a markup if applicable.
            if (frmPickGear.Markup != 0)
            {
                decCost *= 1 + (frmPickGear.Markup / 100.0m);
            }

            // Multiply the cost if applicable.
            string strAvail = objNewGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Do not allow the user to add a new piece of Cyberware if its Capacity has been reached.
            // This is wrapped in a try statement since the character may not have a piece of Gear selected and has clicked the Buy Additional Ammo button for a Weapon.
            if (n != null)
            {
                if (treGear.SelectedNode != null)
                {
                    if (objStackWith == null && treGear.SelectedNode.Level > 0)
                    {
                        if (CharacterObjectOptions.EnforceCapacity &&
                            objSelectedGear.CapacityRemaining - objNewGear.PluginCapacity < 0)
                        {
                            MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language),
                                LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK,
                                MessageBoxIcon.Information);
                            return false;
                        }
                    }
                }
            }

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickGear.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Remove any Improvements created by the Gear.
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objNewGear.InternalId);
                    return frmPickGear.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseGear", GlobalOptions.Language) + " " + objNewGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    objUndo.CreateNuyen(NuyenExpenseType.AddGear, objNewGear.InternalId, objNewGear.Quantity);
                    objExpense.Undo = objUndo;
                }
            }

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return false;

            if (objStackWith != null)
            {
                // A match was found, so increase the quantity instead.
                objStackWith.Quantity += objNewGear.Quantity;

                if (!string.IsNullOrEmpty(objUndo.ObjectId))
                    objUndo.ObjectId = objStackWith.InternalId;

                TreeNode objGearNode = treGear.FindNode(objStackWith.InternalId);
                if (objGearNode != null)
                {
                    objGearNode.Text = objStackWith.DisplayName(GlobalOptions.Language);
                    treGear.SelectedNode = objGearNode;
                }
            }
            // Add the Gear.
            else
            {
                // Create any Weapons that came with this Gear.
                foreach (Weapon objWeapon in objWeapons)
                    CharacterObject.Weapons.Add(objWeapon);

                foreach (TreeNode objWeaponNode in objWeaponNodes)
                {
                    objWeaponNode.ContextMenuStrip = cmsWeapon;
                    treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                    treWeapons.Nodes[0].Expand();
                }

                if (treGear.SelectedNode != null && treGear.SelectedNode.Level > 0 && !blnNullParent)
                {
                    objNode.ContextMenuStrip = cmsGear;
                    n.Nodes.Add(objNode);
                    n.Expand();
                    objSelectedGear.Children.Add(objNewGear);
                    objSelectedGear.RefreshMatrixAttributeArray();
                }
                else
                {
                    objNode.ContextMenuStrip = cmsGear;
                    n.Nodes.Add(objNode);
                    n.Expand();
                    CharacterObject.Gear.Add(objNewGear);
                }

                // Select the node that was just added.
                lblGearQty.Text = objNewGear.Quantity.ToString(GlobalOptions.CultureInfo);
                if (objNode.Level < 2)
                    treGear.SelectedNode = objNode;
            }
            if (frmPickGear.DialogResult != DialogResult.Cancel)
            {
                IsCharacterUpdateRequested = true;
                RefreshSelectedGear();
                IsDirty = true;
            }

            return frmPickGear.AddAgain;
        }

        /// <summary>
        /// Select a piece of Gear and add it to a piece of Armor.
        /// </summary>
        /// <param name="blnShowArmorCapacityOnly">Whether or not only items that consume capacity should be shown.</param>
        private bool PickArmorGear(bool blnShowArmorCapacityOnly = false)
        {
            Gear objSelectedGear = null;
            Armor objSelectedArmor = CharacterObject.Armor.FindById(treArmor.SelectedNode.Tag.ToString());
            ArmorMod objSelectedMod = null;
            ExpenseUndo objUndo = new ExpenseUndo();

            if (treArmor.SelectedNode.Level > 1)
            {
                objSelectedGear = CommonFunctions.FindArmorGear(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor, out objSelectedArmor, out objSelectedMod);
                if (objSelectedGear == null)
                    objSelectedMod = CommonFunctions.FindArmorMod(treArmor.SelectedNode.Tag.ToString(), CharacterObject.Armor);
            }

            // Open the Gear XML file and locate the selected Gear.
            XmlNode objXmlGear = objSelectedGear?.GetNode();
            XmlNode objXmlParent = objXmlGear;
            if (objXmlParent == null)
            {
                if (objSelectedMod != null)
                    objXmlParent = objSelectedMod.GetNode();
                else
                    objXmlParent = objSelectedArmor.GetNode();
            }

            Cursor = Cursors.WaitCursor;
            frmSelectGear frmPickGear = new frmSelectGear(CharacterObject, 0, 1, objXmlParent)
            {
                EnableStack = false,
                ShowArmorCapacityOnly = blnShowArmorCapacityOnly,
                CapacityDisplayStyle = objSelectedMod != null ? CapacityStyle.Standard : objSelectedArmor.CapacityDisplayStyle
            };
            if (treArmor.SelectedNode != null)
            {
                if (objXmlParent?.InnerXml.Contains("<addoncategory>") == true)
                {
                    string strCategories = string.Empty;
                    foreach (XmlNode objXmlCategory in objXmlParent.SelectNodes("addoncategory"))
                        strCategories += objXmlCategory.InnerText + ",";
                    // Remove the trailing comma.
                    if (strCategories.Length > 0)
                        strCategories = strCategories.Substring(0, strCategories.Length - 1);
                    frmPickGear.AllowedCategories = strCategories;
                }

                // If the Gear has a Capacity with no brackets (meaning it grants Capacity), show only Subsystems (those that conume Capacity).
                if (objSelectedGear != null && (!objSelectedGear.Capacity.Contains('[') || objSelectedGear.Capacity.Contains("/[")))
                {
                    frmPickGear.MaximumCapacity = objSelectedGear.CapacityRemaining;

                    // Do not allow the user to add a new piece of Gear if its Capacity has been reached.
                    if (CharacterObjectOptions.EnforceCapacity && objSelectedGear.CapacityRemaining < 0)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                }
                else if (objSelectedMod != null)
                {
                    frmPickGear.MaximumCapacity = objSelectedMod.GearCapacityRemaining;

                    // Do not allow the user to add a new piece of Gear if its Capacity has been reached.
                    if (CharacterObjectOptions.EnforceCapacity && objSelectedMod.GearCapacityRemaining < 0)
                    {
                        MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                }
            }

            frmPickGear.ShowDialog(this);
            Cursor = Cursors.Default;

            // Make sure the dialogue window was not canceled.
            if (frmPickGear.DialogResult == DialogResult.Cancel)
                return false;

            TreeNode objNode = new TreeNode();

            // Open the Cyberware XML file and locate the selected piece.
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            objXmlGear = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"" + frmPickGear.SelectedGear + "\" and category = \"" + frmPickGear.SelectedCategory + "\"]");

            // Create the new piece of Gear.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();

            Gear objNewGear = new Gear(CharacterObject);
            objNewGear.Create(objXmlGear, objNode, frmPickGear.SelectedRating, objWeapons, objWeaponNodes, string.Empty, true, true, frmPickGear.Aerodynamic);

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return false;

            objNewGear.Quantity = frmPickGear.SelectedQty;
            objNode.Text = objNewGear.DisplayName(GlobalOptions.Language);

            if (objSelectedGear != null)
                objNewGear.Parent = objSelectedGear;

            // Reduce the cost for Do It Yourself components.
            if (frmPickGear.DoItYourself)
                objNewGear.Cost = "(" + objNewGear.Cost + ") * 0.5";

            // Apply a markup if applicable.
            decimal decCost = objNewGear.TotalCost;
            if (frmPickGear.Markup != 0)
            {
                decCost *= 1 + (frmPickGear.Markup / 100.0m);
            }

            // Multiply the cost if applicable.
            string strAvail = objNewGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.DefaultLanguage);
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailRestricted", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyRestrictedCost)
                decCost *= CharacterObjectOptions.RestrictedCostMultiplier;
            if (strAvail.EndsWith(LanguageManager.GetString("String_AvailForbidden", GlobalOptions.DefaultLanguage)) && CharacterObjectOptions.MultiplyForbiddenCost)
                decCost *= CharacterObjectOptions.ForbiddenCostMultiplier;

            // Do not allow the user to add new Gear if the Armor's Capacity has been reached.
            if (CharacterObjectOptions.EnforceCapacity && objSelectedGear != null)
            {
                objSelectedArmor.Gear.Add(objSelectedGear);
                if (treArmor.SelectedNode.Level > 1)
                {
                    if (objSelectedGear.CapacityRemaining < 0)
                    {
                        objSelectedArmor.Gear.Remove(objSelectedGear);
                        MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return frmPickGear.AddAgain;
                    }
                    else
                        objSelectedArmor.Gear.Remove(objSelectedGear);
                }
                else
                {
                    if (objSelectedArmor.CapacityRemaining < 0)
                    {
                        objSelectedArmor.Gear.Remove(objSelectedGear);
                        MessageBox.Show(LanguageManager.GetString("Message_CapacityReached", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CapacityReached", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return frmPickGear.AddAgain;
                    }
                    else
                        objSelectedArmor.Gear.Remove(objSelectedGear);
                }
            }

            // Check the item's Cost and make sure the character can afford it.
            if (!frmPickGear.FreeCost)
            {
                if (decCost > CharacterObject.Nuyen)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Remove any Improvements created by the Gear.
                    ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objNewGear.InternalId);
                    return frmPickGear.AddAgain;
                }
                else
                {
                    // Create the Expense Log Entry.
                    ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                    objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseArmorGear", GlobalOptions.Language) + " " + objNewGear.DisplayNameShort(GlobalOptions.Language), ExpenseType.Nuyen, DateTime.Now);
                    CharacterObject.ExpenseEntries.Add(objExpense);
                    CharacterObject.Nuyen -= decCost;

                    objUndo.CreateNuyen(NuyenExpenseType.AddArmorGear, objNewGear.InternalId, objNewGear.Quantity);
                    objExpense.Undo = objUndo;
                }
            }

            if (objNewGear.InternalId == Guid.Empty.ToString())
                return false;

            // Create any Weapons that came with this Gear.
            foreach (Weapon objWeapon in objWeapons)
                CharacterObject.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                objWeaponNode.ContextMenuStrip = cmsWeapon;
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            Gear objMatchingGear = null;
            // If this is Ammunition, see if the character already has it on them.
            if (objNewGear.Category == "Ammunition")
            {
                IList<Gear> lstToSearch = string.IsNullOrEmpty(objSelectedGear?.Name) ? objSelectedArmor.Gear : objSelectedGear.Children;
                objMatchingGear = lstToSearch.FirstOrDefault(x => objNewGear.IsIdenticalToOtherGear(x));
            }

            if (objMatchingGear != null)
            {
                // A match was found, so increase the quantity instead.
                objMatchingGear.Quantity += objNewGear.Quantity;

                if (!string.IsNullOrEmpty(objUndo.ObjectId))
                    objUndo.ObjectId = objMatchingGear.InternalId;

                TreeNode objGearNode = treArmor.FindNode(objMatchingGear.InternalId);
                if (objGearNode != null)
                {
                    objGearNode.Text = objMatchingGear.DisplayName(GlobalOptions.Language);
                    treArmor.SelectedNode = objGearNode;
                }
            }
            // Add the Gear.
            else
            {
                objNode.ContextMenuStrip = cmsArmorGear;
                treArmor.SelectedNode.Nodes.Add(objNode);
                treArmor.SelectedNode.Expand();
                if (!string.IsNullOrEmpty(objSelectedGear?.Name))
                {
                    objSelectedGear.Children.Add(objNewGear);
                    objSelectedGear.RefreshMatrixAttributeArray();
                }
                else if (!string.IsNullOrEmpty(objSelectedMod?.Name))
                {
                    objSelectedMod.Gear.Add(objNewGear);
                }
                else
                {
                    objSelectedArmor.Gear.Add(objNewGear);
                }

                // Select the node that was just added.
                treArmor.SelectedNode = objNode;
            }

            IsCharacterUpdateRequested = true;
            RefreshSelectedArmor();

            IsDirty = true;

            return frmPickGear.AddAgain;
        }

        /// <summary>
        /// Refresh the currently-selected Lifestyle.
        /// </summary>
        private void RefreshSelectedLifestyle()
        {
            _blnSkipRefresh = true;
            if (treLifestyles.SelectedNode == null || treLifestyles.SelectedNode.Level == 0)
            {
                lblLifestyleCost.Text = string.Empty;
                lblLifestyleMonths.Text = string.Empty;
                lblLifestyleSource.Text = string.Empty;
                tipTooltip.SetToolTip(lblLifestyleSource, null);
                lblBaseLifestyle.Text = string.Empty;
                lblLifestyleQualities.Text = string.Empty;
                cmdIncreaseLifestyleMonths.Enabled = false;
                cmdDecreaseLifestyleMonths.Enabled = false;
            }

            if (treLifestyles.SelectedNode.Level > 0)
            {
                // Locate the selected Lifestyle.
                Lifestyle objLifestyle = CharacterObject.Lifestyles.FindById(treLifestyles.SelectedNode.Tag.ToString());
                if (objLifestyle == null)
                    return;

                lblLifestyleCost.Text = objLifestyle.TotalMonthlyCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblLifestyleMonths.Text = Convert.ToDecimal(objLifestyle.Months, GlobalOptions.InvariantCultureInfo).ToString(GlobalOptions.CultureInfo);
                string strBook = CommonFunctions.LanguageBookShort(objLifestyle.Source, GlobalOptions.Language);
                string strPage = objLifestyle.DisplayPage(GlobalOptions.Language);
                lblLifestyleSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblLifestyleSource, CommonFunctions.LanguageBookLong(objLifestyle.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                //lblLifestyleTotalCost.Text = "= " + objLifestyle.TotalCost.ToString(_objCharacter.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';

                // Change the Cost/Month label.
                if (objLifestyle.StyleType == LifestyleType.Safehouse)
                    lblLifestyleCostLabel.Text = LanguageManager.GetString("Label_SelectLifestyle_CostPerWeek", GlobalOptions.Language);
                else
                    lblLifestyleCostLabel.Text = LanguageManager.GetString("Label_SelectLifestyle_CostPerMonth", GlobalOptions.Language);

                if (!string.IsNullOrEmpty(objLifestyle.BaseLifestyle))
                {
                    string strQualities = string.Join(", ", objLifestyle.LifestyleQualities.Select(r => r.FormattedDisplayName(GlobalOptions.CultureInfo, GlobalOptions.Language)));

                    lblLifestyleQualities.Text = string.Empty;

                    foreach (Improvement objImprovement in CharacterObject.Improvements.Where(objImprovement => objImprovement.ImproveType == Improvement.ImprovementType.LifestyleCost))
                    {
                        if (strQualities.Length > 0)
                            strQualities += ", ";

                        strQualities += objImprovement.Value > 0
                            ? objImprovement.ImproveSource + " [+" + objImprovement.Value.ToString() + "%]"
                            : objImprovement.ImproveSource + " [" + objImprovement.Value.ToString() + "%]";
                    }

                    if (strQualities.Length > 0)
                        strQualities += ", ";

                    strQualities += string.Join(", ", objLifestyle.FreeGrids.Select(r => r.DisplayName(GlobalOptions.Language)));

                    lblBaseLifestyle.Text = objLifestyle.DisplayNameShort(GlobalOptions.Language);
                    lblLifestyleQualities.Text += strQualities;

                    cmdIncreaseLifestyleMonths.Enabled = true;
                    cmdDecreaseLifestyleMonths.Enabled = true;
                }
                else
                {
                    lblBaseLifestyle.Text = "Error in lifestyle;\nplease edit to fix.";
                    lblLifestyleQualities.Text = string.Empty;
                }
            }
            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Switches the visibility of Weapon attributes on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleWeaponStats(bool blnDisplay)
        {
            lblVehicleWeaponName.Visible = blnDisplay;
            lblVehicleWeaponCategory.Visible = blnDisplay;
            lblVehicleWeaponAP.Visible = blnDisplay;
            lblVehicleWeaponDamage.Visible = blnDisplay;
            lblVehicleWeaponAccuracy.Visible = blnDisplay;
            lblVehicleWeaponMode.Visible = blnDisplay;
            lblVehicleWeaponAmmo.Visible = blnDisplay;

            lblVehicleWeaponRangeShort.Visible = blnDisplay;
            lblVehicleWeaponRangeMedium.Visible = blnDisplay;
            lblVehicleWeaponRangeLong.Visible = blnDisplay;
            lblVehicleWeaponRangeExtreme.Visible = blnDisplay;

            lblVehicleWeaponNameLabel.Visible = blnDisplay;
            lblVehicleWeaponCategoryLabel.Visible = blnDisplay;
            lblVehicleWeaponAPLabel.Visible = blnDisplay;
            lblVehicleWeaponDamageLabel.Visible = blnDisplay;
            lblVehicleWeaponAccuracyLabel.Visible = blnDisplay;
            lblVehicleWeaponModeLabel.Visible = blnDisplay;
            lblVehicleWeaponAmmoLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeLabel.Visible = blnDisplay;

            lblVehicleWeaponRangeMain.Visible = blnDisplay;
            lblVehicleWeaponRangeAlternate.Visible = blnDisplay;
            lblVehicleWeaponRangeShortLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeMediumLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeLongLabel.Visible = blnDisplay;
            lblVehicleWeaponRangeExtremeLabel.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeShort.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeMedium.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeLong.Visible = blnDisplay;
            lblVehicleWeaponAlternateRangeExtreme.Visible = blnDisplay;

            lblFiringModeLabel.Visible = blnDisplay;
            cboVehicleWeaponFiringMode.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Commlink attributes on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleCommlinkStats(bool blnDisplay)
        {
            cboVehicleGearAttack.Visible = blnDisplay;
            cboVehicleGearSleaze.Visible = blnDisplay;
            cboVehicleGearDataProcessing.Visible = blnDisplay;
            cboVehicleGearFirewall.Visible = blnDisplay;
            lblVehicleAttackLabel.Visible = blnDisplay;
            lblVehicleSleazeLabel.Visible = blnDisplay;
            lblVehicleDataProcessingLabel.Visible = blnDisplay;
            lblVehicleFirewallLabel.Visible = blnDisplay;
            lblVehicleDevice.Visible = blnDisplay;
            lblVehicleDeviceLabel.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Commlink attributes on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleStats(bool blnDisplay)
        {
            lblVehicleHandling.Visible = blnDisplay;
            lblVehicleAccel.Visible = blnDisplay;
            lblVehicleSpeed.Visible = blnDisplay;
            lblVehicleDevice.Visible = blnDisplay;
            lblVehiclePilot.Visible = blnDisplay;
            lblVehicleBody.Visible = blnDisplay;
            lblVehicleArmor.Visible = blnDisplay;
            lblVehicleSensor.Visible = blnDisplay;
            lblVehicleHandlingLabel.Visible = blnDisplay;
            lblVehicleAccelLabel.Visible = blnDisplay;
            lblVehicleSpeedLabel.Visible = blnDisplay;
            lblVehicleDeviceLabel.Visible = blnDisplay;
            lblVehiclePilotLabel.Visible = blnDisplay;
            lblVehicleBodyLabel.Visible = blnDisplay;
            lblVehicleArmorLabel.Visible = blnDisplay;
            lblVehicleSensorLabel.Visible = blnDisplay;
            lblVehiclePowertrainLabel.Visible = blnDisplay;
            lblVehiclePowertrain.Visible = blnDisplay;
            lblVehicleCosmeticLabel.Visible = blnDisplay;
            lblVehicleCosmetic.Visible = blnDisplay;
            lblVehicleElectromagneticLabel.Visible = blnDisplay;
            lblVehicleElectromagnetic.Visible = blnDisplay;
            lblVehicleBodymodLabel.Visible = blnDisplay;
            lblVehicleBodymod.Visible = blnDisplay;
            lblVehicleWeaponsmodLabel.Visible = blnDisplay;
            lblVehicleWeaponsmod.Visible = blnDisplay;
            lblVehicleProtectionLabel.Visible = blnDisplay;
            lblVehicleProtection.Visible = blnDisplay;
            lblVehicleDroneModSlotsLabel.Visible = blnDisplay;
            lblVehicleDroneModSlots.Visible = blnDisplay;
            lblVehicleSeatsLabel.Visible = blnDisplay;
            lblVehicleSeats.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Vehicle (non-drone) Mods on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleMods(bool blnDisplay)
        {
            lblVehiclePowertrainLabel.Visible = blnDisplay;
            lblVehiclePowertrain.Visible = blnDisplay;
            lblVehicleCosmeticLabel.Visible = blnDisplay;
            lblVehicleCosmetic.Visible = blnDisplay;
            lblVehicleElectromagneticLabel.Visible = blnDisplay;
            lblVehicleElectromagnetic.Visible = blnDisplay;
            lblVehicleBodymodLabel.Visible = blnDisplay;
            lblVehicleBodymod.Visible = blnDisplay;
            lblVehicleWeaponsmodLabel.Visible = blnDisplay;
            lblVehicleWeaponsmod.Visible = blnDisplay;
            lblVehicleProtectionLabel.Visible = blnDisplay;
            lblVehicleProtection.Visible = blnDisplay;
        }

        /// <summary>
        /// Switches the visibility of Drone Mods on the Vehicles and Drones form.
        /// </summary>
        /// <param name="blnDisplay">Whether to hide or show the objects.</param>
        private void DisplayVehicleDroneMods(bool blnDisplay)
        {
            lblVehicleDroneModSlotsLabel.Visible = blnDisplay;
            lblVehicleDroneModSlots.Visible = blnDisplay;
        }

        /// <summary>
        /// Refresh the currently-selected Vehicle.
        /// </summary>
        private void RefreshSelectedVehicle()
        {
            _blnSkipRefresh = true;
            cboVehicleGearAttack.Visible = false;
            cboVehicleGearDataProcessing.Visible = false;

            lblVehicleGearQty.Text = string.Empty;
            cmdVehicleGearReduceQty.Enabled = false;
            cboVehicleWeaponAmmo.Enabled = false;
            cboVehicleWeaponFiringMode.Enabled = false;

            lblVehicleSeatsLabel.Visible = false;
            lblVehicleSeats.Visible = false;
            cmdDeleteVehicle.Enabled = treVehicles.SelectedNode != null;
            cmdVehicleCyberwareChangeMount.Visible = false;

            chkVehicleHomeNode.Visible = false;
            cmdVehicleMoveToInventory.Enabled = false;
            chkVehicleActiveCommlink.Visible = false;

            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level <= 0 || treVehicles.SelectedNode.Tag.ToString() == "String_WeaponMounts")
            {
                DisplayVehicleWeaponStats(false);
                DisplayVehicleCommlinkStats(false);
                DisplayVehicleStats(false);
                lblVehicleCategory.Text = string.Empty;
                lblVehicleName.Text = string.Empty;
                lblVehicleAvail.Text = string.Empty;
                lblVehicleCost.Text = string.Empty;
                lblVehicleSource.Text = string.Empty;

                chkVehicleWeaponAccessoryInstalled.Enabled = false;
                _blnSkipRefresh = false;
                return;
            }

            if (treVehicles.SelectedNode.Level != 0)
            {
                // Locate the selected Vehicle.
                TreeNode objVehicleNode = treVehicles.SelectedNode;
                while (objVehicleNode.Level > 1)
                    objVehicleNode = objVehicleNode.Parent;

                Vehicle objVehicle = CharacterObject.Vehicles.FindById(objVehicleNode.Tag.ToString());
                if (objVehicle == null)
                {
                    _blnSkipRefresh = false;
                    return;
                }

                // Hide any unused Physical CM boxes.
                panVehicleCM.Visible = true;
                if (!string.IsNullOrEmpty(objVehicle.ParentID))
                    cmdDeleteVehicle.Enabled = false;
                foreach (CheckBox objPhysicalCM in tabVehiclePhysicalCM.Controls.OfType<CheckBox>())
                {
                    if (Convert.ToInt32(objPhysicalCM.Tag.ToString()) <= objVehicle.PhysicalCM)
                    {
                        if (Convert.ToInt32(objPhysicalCM.Tag.ToString()) <= objVehicle.PhysicalCMFilled)
                            objPhysicalCM.Checked = true;
                        else
                            objPhysicalCM.Checked = false;

                        objPhysicalCM.Visible = true;
                    }
                    else
                    {
                        objPhysicalCM.Checked = false;
                        objPhysicalCM.Visible = false;
                        objPhysicalCM.Text = string.Empty;
                    }
                }
                foreach (CheckBox objMatrixCM in tabVehicleMatrixCM.Controls.OfType<CheckBox>())
                {
                    if (Convert.ToInt32(objMatrixCM.Tag.ToString()) <= objVehicle.MatrixCM)
                    {
                        if (Convert.ToInt32(objMatrixCM.Tag.ToString()) <= objVehicle.MatrixCMFilled)
                            objMatrixCM.Checked = true;
                        else
                            objMatrixCM.Checked = false;

                        objMatrixCM.Visible = true;
                    }
                    else
                    {
                        objMatrixCM.Checked = false;
                        objMatrixCM.Visible = false;
                        objMatrixCM.Text = string.Empty;
                    }
                }
            }

            // Locate the selected Vehicle.
            if (treVehicles.SelectedNode.Level == 1)
            {
                Vehicle objVehicle = CharacterObject.Vehicles.FindById(treVehicles.SelectedNode.Tag.ToString());
                if (objVehicle == null)
                {
                    _blnSkipRefresh = false;
                    return;
                }

                if (!string.IsNullOrEmpty(objVehicle.ParentID))
                    cmdDeleteVehicle.Enabled = false;
                lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating", GlobalOptions.Language);
                lblVehicleRating.Text = string.Empty;

                lblVehicleName.Text = objVehicle.DisplayNameShort(GlobalOptions.Language);
                lblVehicleCategory.Text = objVehicle.DisplayCategory(GlobalOptions.Language);
                lblVehicleAvail.Text = objVehicle.CalculatedAvail(GlobalOptions.Language);
                lblVehicleCost.Text = objVehicle.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                lblVehicleHandling.Text = objVehicle.TotalHandling;
                lblVehicleAccel.Text = objVehicle.TotalAccel;
                lblVehicleSpeed.Text = objVehicle.TotalSpeed;
                lblVehicleDevice.Text = objVehicle.GetTotalMatrixAttribute("Device Rating").ToString();
                lblVehiclePilot.Text = objVehicle.Pilot.ToString();
                lblVehicleBody.Text = objVehicle.TotalBody.ToString();
                lblVehicleArmor.Text = objVehicle.TotalArmor.ToString();
                lblVehicleSeats.Text = objVehicle.TotalSeats.ToString();

                lblVehicleSeatsLabel.Visible = true;
                lblVehicleSeats.Visible = true;

                // Update the vehicle mod slots
                if (CharacterObjectOptions.BookEnabled("R5"))
                {
                    lblVehicleSlots.Text = string.Empty;
                    lblVehicleSlotsLabel.Visible = false;

                    if (objVehicle.IsDrone && GlobalOptions.Dronemods)
                    {
                        lblVehicleDroneModSlots.Text = objVehicle.DroneModSlotsUsed + "/" + objVehicle.DroneModSlots;
                        lblVehicleDroneModSlots.Visible = true;
                        lblVehicleDroneModSlotsLabel.Visible = true;
                        lblVehiclePowertrain.Visible = false;
                        lblVehicleCosmetic.Visible = false;
                        lblVehicleElectromagnetic.Visible = false;
                        lblVehicleBodymod.Visible = false;
                        lblVehicleWeaponsmod.Visible = false;
                        lblVehicleProtection.Visible = false;
                        lblVehiclePowertrainLabel.Visible = false;
                        lblVehicleCosmeticLabel.Visible = false;
                        lblVehicleElectromagneticLabel.Visible = false;
                        lblVehicleBodymodLabel.Visible = false;
                        lblVehicleWeaponsmodLabel.Visible = false;
                        lblVehicleProtectionLabel.Visible = false;
                    }
                    else
                    {
                        lblVehiclePowertrain.Text = objVehicle.PowertrainModSlotsUsed();
                        lblVehicleCosmetic.Text = objVehicle.CosmeticModSlotsUsed();
                        lblVehicleElectromagnetic.Text = objVehicle.ElectromagneticModSlotsUsed();
                        lblVehicleBodymod.Text = objVehicle.BodyModSlotsUsed();
                        lblVehicleWeaponsmod.Text = objVehicle.WeaponModSlotsUsed();
                        lblVehicleProtection.Text = objVehicle.ProtectionModSlotsUsed();

                        tipTooltip.SetToolTip(lblVehiclePowertrainLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity", GlobalOptions.Language));
                        tipTooltip.SetToolTip(lblVehicleCosmeticLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity", GlobalOptions.Language));
                        tipTooltip.SetToolTip(lblVehicleElectromagneticLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity", GlobalOptions.Language));
                        tipTooltip.SetToolTip(lblVehicleBodymodLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity", GlobalOptions.Language));
                        tipTooltip.SetToolTip(lblVehicleWeaponsmodLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity", GlobalOptions.Language));
                        tipTooltip.SetToolTip(lblVehicleProtectionLabel, LanguageManager.GetString("Tip_TotalVehicleModCapacity", GlobalOptions.Language));

                        lblVehicleDroneModSlots.Visible = false;
                        lblVehicleDroneModSlotsLabel.Visible = false;
                        lblVehiclePowertrain.Visible = true;
                        lblVehicleCosmetic.Visible = true;
                        lblVehicleElectromagnetic.Visible = true;
                        lblVehicleBodymod.Visible = true;
                        lblVehicleWeaponsmod.Visible = true;
                        lblVehicleProtection.Visible = true;
                        lblVehiclePowertrainLabel.Visible = true;
                        lblVehicleCosmeticLabel.Visible = true;
                        lblVehicleElectromagneticLabel.Visible = true;
                        lblVehicleBodymodLabel.Visible = true;
                        lblVehicleWeaponsmodLabel.Visible = true;
                        lblVehicleProtectionLabel.Visible = true;
                    }
                }
                else
                {
                    lblVehicleDroneModSlots.Text = string.Empty;
                    lblVehicleDroneModSlots.Visible = false;
                    lblVehicleDroneModSlotsLabel.Visible = false;
                    lblVehiclePowertrain.Visible = false;
                    lblVehicleCosmetic.Visible = false;
                    lblVehicleElectromagnetic.Visible = false;
                    lblVehicleBodymod.Visible = false;
                    lblVehicleWeaponsmod.Visible = false;
                    lblVehicleProtection.Visible = false;
                    lblVehiclePowertrainLabel.Visible = false;
                    lblVehicleCosmeticLabel.Visible = false;
                    lblVehicleElectromagneticLabel.Visible = false;
                    lblVehicleBodymodLabel.Visible = false;
                    lblVehicleWeaponsmodLabel.Visible = false;
                    lblVehicleProtectionLabel.Visible = false;
                    lblVehicleSlotsLabel.Visible = true;
                    lblVehicleSlots.Text = objVehicle.Slots.ToString() + " (" + (objVehicle.Slots - objVehicle.SlotsUsed).ToString() + " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                }

                lblVehicleSensor.Text = objVehicle.CalculatedSensor.ToString();
                UpdateSensor(objVehicle);
                string strBook = CommonFunctions.LanguageBookShort(objVehicle.Source, GlobalOptions.Language);
                string strPage = objVehicle.Page(GlobalOptions.Language);
                lblVehicleSource.Text = strBook + " " + strPage;
                tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objVehicle.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                chkVehicleWeaponAccessoryInstalled.Enabled = false;
                chkVehicleIncludedInWeapon.Checked = false;
                
                objVehicle.RefreshMatrixAttributeCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                chkVehicleActiveCommlink.Visible = objVehicle.IsCommlink;
                chkVehicleActiveCommlink.Checked = objVehicle.IsActiveCommlink(CharacterObject);
                if (CharacterObject.Metatype.Contains("A.I.") || CharacterObject.MetatypeCategory == "Protosapients")
                {
                    chkVehicleHomeNode.Visible = true;
                    chkVehicleHomeNode.Checked = objVehicle.IsHomeNode(CharacterObject);
                    chkVehicleHomeNode.Enabled = objVehicle.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objVehicle.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                }
            }
            else if (treVehicles.SelectedNode.Level == 2)
            {
                panVehicleCM.Visible = true;
                bool blnVehicleMod = false;

                // If this is a Vehicle Location, don't do anything.
                foreach (Vehicle objVehicle in CharacterObject.Vehicles)
                {
                    if (objVehicle.InternalId == treVehicles.SelectedNode.Parent.Tag.ToString())
                    {
                        foreach (string strLocation in objVehicle.Locations)
                        {
                            if (strLocation == treVehicles.SelectedNode.Tag.ToString())
                            {
                                lblVehicleName.Text = string.Empty;
                                lblVehicleCategory.Text = string.Empty;
                                lblVehicleSource.Text = string.Empty;
                                lblVehicleHandling.Text = string.Empty;
                                lblVehicleAccel.Text = string.Empty;
                                lblVehicleSpeed.Text = string.Empty;
                                lblVehicleDevice.Text = string.Empty;
                                lblVehiclePilot.Text = string.Empty;
                                lblVehicleBody.Text = string.Empty;
                                lblVehicleArmor.Text = string.Empty;
                                lblVehicleSensor.Text = string.Empty;
                                lblVehicleAvail.Text = string.Empty;
                                lblVehicleCost.Text = string.Empty;
                                lblVehicleSlots.Text = string.Empty;
                                _blnSkipRefresh = false;
                                return;
                            }
                        }
                    }
                }

                // Locate the selected VehicleMod.
                VehicleMod objMod = CommonFunctions.FindVehicleMod(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out Vehicle objSelectedVehicle, out WeaponMount objWeaponMount);
                if (objMod != null)
                {
                    blnVehicleMod = true;
                    if (objMod.IncludedInVehicle)
                        cmdDeleteVehicle.Enabled = false;
                    if (objMod.MaxRating != "qty")
                    {
                        if (objMod.MaxRating == "Seats")
                        {
                            objMod.MaxRating = objSelectedVehicle.Seats.ToString();
                        }
                        if (objMod.MaxRating == "body")
                        {
                            objMod.MaxRating = objSelectedVehicle.Body.ToString();
                        }
                        if (Convert.ToInt32(objMod.MaxRating) > 0)
                        {
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating", GlobalOptions.Language);
                            lblVehicleRating.Text = objMod.Rating.ToString();
                        }
                        else
                        {
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating", GlobalOptions.Language);
                            lblVehicleRating.Text = string.Empty;
                        }
                    }
                    else
                    {
                        lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Qty", GlobalOptions.Language);
                        lblVehicleRating.Text = objMod.Rating.ToString();
                    }

                    lblVehicleName.Text = objMod.DisplayNameShort(GlobalOptions.Language);
                    lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleModification", GlobalOptions.Language);
                    lblVehicleAvail.Text = objMod.TotalAvail(GlobalOptions.Language);
                    lblVehicleCost.Text = objMod.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblVehicleHandling.Text = string.Empty;
                    lblVehicleAccel.Text = string.Empty;
                    lblVehicleSpeed.Text = string.Empty;
                    lblVehicleDevice.Text = string.Empty;
                    lblVehiclePilot.Text = string.Empty;
                    lblVehicleBody.Text = string.Empty;
                    lblVehicleArmor.Text = string.Empty;
                    lblVehicleSensor.Text = string.Empty;
                    lblVehicleSlots.Text = objMod.CalculatedSlots.ToString();
                    string strBook = CommonFunctions.LanguageBookShort(objMod.Source, GlobalOptions.Language);
                    string strPage = objMod.Page(GlobalOptions.Language);
                    lblVehicleSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objMod.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                }
                else
                {
                    // If it's not a Vehicle Mod then it must be a Sensor.
                    Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                    if (objGear != null)
                    {
                        if (objGear.IncludedInParent)
                            cmdDeleteVehicle.Enabled = false;
                        lblVehicleRating.Text = string.Empty;
                        if (objGear.InternalId == treVehicles.SelectedNode.Tag.ToString())
                        {
                            lblVehicleGearQty.Text = objGear.Quantity.ToString(GlobalOptions.CultureInfo);
                            cmdVehicleGearReduceQty.Enabled = !objGear.DisableQuantity;

                            if (objGear.Rating > 0)
                                lblVehicleRating.Text = objGear.Rating.ToString();
                        }

                        lblVehicleName.Text = objGear.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleCategory.Text = objGear.DisplayCategory(GlobalOptions.Language);
                        lblVehicleAvail.Text = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                        lblVehicleCost.Text = objGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehicleSlots.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                        string strBook = CommonFunctions.LanguageBookShort(objGear.Source, GlobalOptions.Language);
                        string strPage = objGear.DisplayPage(GlobalOptions.Language);
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);

                        cmdVehicleMoveToInventory.Enabled = true;

                        lblVehicleDevice.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                        objGear.RefreshMatrixAttributeCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                        chkVehicleActiveCommlink.Visible = objGear.IsCommlink;
                        chkVehicleActiveCommlink.Checked = objGear.IsActiveCommlink(CharacterObject);

                        if (CharacterObject.Metatype == "A.I.")
                        {
                            chkVehicleHomeNode.Visible = true;
                            chkVehicleHomeNode.Checked = objGear.IsHomeNode(CharacterObject);
                            chkVehicleHomeNode.Enabled = chkVehicleActiveCommlink.Visible && objGear.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objGear.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                        }
                    }
                    else
                    {
                        // Look for the selected Vehicle Weapon.
                        Weapon objWeapon = null;
                        Vehicle objCurrentVehicle = null;

                        foreach (Vehicle objVehicle in CharacterObject.Vehicles)
                        {
                            objWeapon = objVehicle.Weapons.DeepFindById(treVehicles.SelectedNode.Tag.ToString());
                            if (objWeapon != null)
                            {
                                objCurrentVehicle = objVehicle;
                                break;
                            }
                        }

                        if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                            cmdDeleteVehicle.Enabled = false;
                        cboVehicleWeaponFiringMode.SelectedValue = objWeapon.FireMode;
                        lblVehicleWeaponName.Text = objWeapon.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleWeaponCategory.Text = objWeapon.DisplayCategory(GlobalOptions.Language);
                        lblVehicleWeaponDamage.Text = objWeapon.CalculatedDamage(GlobalOptions.CultureInfo, GlobalOptions.Language);
                        lblVehicleWeaponAccuracy.Text = objWeapon.TotalAccuracy.ToString();
                        lblVehicleWeaponAP.Text = objWeapon.TotalAP(GlobalOptions.Language);
                        lblVehicleWeaponAmmo.Text = objWeapon.CalculatedAmmo(GlobalOptions.CultureInfo, GlobalOptions.Language);
                        lblVehicleWeaponMode.Text = objWeapon.CalculatedMode(GlobalOptions.Language);
                        if (objWeapon.WeaponType == "Ranged" || (objWeapon.WeaponType == "Melee" && objWeapon.Ammo != "0"))
                        {
                            cmdFireVehicleWeapon.Enabled = true;
                            cmdReloadVehicleWeapon.Enabled = true;
                            lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();

                            cmsVehicleAmmoSingleShot.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeSingleShot", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeSemiAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoShortBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeBurstFire", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoLongBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoFullBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoSuppressiveFire.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));

                            // Melee Weapons with Ammo are considered to be Single Shot.
                            if (objWeapon.WeaponType == "Melee" && objWeapon.Ammo != "0")
                                cmsVehicleAmmoSingleShot.Enabled = true;

                            if (cmsVehicleAmmoFullBurst.Enabled)
                                cmsVehicleAmmoFullBurst.Text = LanguageManager.GetString("String_FullBurst", GlobalOptions.Language).Replace("{0}", objWeapon.FullBurst.ToString());
                            if (cmsVehicleAmmoSuppressiveFire.Enabled)
                                cmsVehicleAmmoSuppressiveFire.Text = LanguageManager.GetString("String_SuppressiveFire", GlobalOptions.Language).Replace("{0}", objWeapon.Suppressive.ToString());

                            List<ListItem> lstAmmo = new List<ListItem>();
                            int intCurrentSlot = objWeapon.ActiveAmmoSlot;
                            for (int i = 1; i <= objWeapon.AmmoSlots; i++)
                            {
                                objWeapon.ActiveAmmoSlot = i;
                                Gear objVehicleGear = objCurrentVehicle.Gear.DeepFindById(objWeapon.AmmoLoaded);

                                string strPlugins = string.Empty;
                                foreach (Vehicle objVehicle in CharacterObject.Vehicles)
                                {
                                    foreach (Gear objCurrentAmmo in objVehicle.Gear)
                                    {
                                        if (objCurrentAmmo.InternalId == objWeapon.AmmoLoaded)
                                        {
                                            foreach (Gear objChild in objCurrentAmmo.Children)
                                            {
                                                strPlugins += objChild.DisplayNameShort(GlobalOptions.Language) + ", ";
                                            }
                                        }
                                    }
                                }
                                // Remove the trailing comma.
                                if (!string.IsNullOrEmpty(strPlugins))
                                    strPlugins = strPlugins.Substring(0, strPlugins.Length - 2);
                                
                                string strAmmoName = string.Empty;
                                if (objVehicleGear == null)
                                {
                                    if (objWeapon.AmmoRemaining == 0)
                                        strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_Empty", GlobalOptions.Language);
                                    else
                                        strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_ExternalSource", GlobalOptions.Language);
                                }
                                else
                                    strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + objVehicleGear.DisplayNameShort(GlobalOptions.Language);

                                if (!string.IsNullOrEmpty(strPlugins))
                                    strAmmoName += " [" + strPlugins + "]";
                                lstAmmo.Add(new ListItem(i.ToString(), strAmmoName));
                            }
                            objWeapon.ActiveAmmoSlot = intCurrentSlot;
                            cboVehicleWeaponAmmo.BeginUpdate();
                            cboVehicleWeaponAmmo.Enabled = true;
                            cboVehicleWeaponAmmo.ValueMember = "Value";
                            cboVehicleWeaponAmmo.DisplayMember = "Name";
                            cboVehicleWeaponAmmo.DataSource = lstAmmo;
                            cboVehicleWeaponAmmo.SelectedValue = objWeapon.ActiveAmmoSlot.ToString();
                            if (cboVehicleWeaponAmmo.SelectedIndex == -1)
                                cboVehicleWeaponAmmo.SelectedIndex = 0;
                            cboVehicleWeaponAmmo.EndUpdate();
                        }
                        lblVehicleWeaponRangeMain.Text = objWeapon.DisplayRange(GlobalOptions.Language);
                        lblVehicleWeaponRangeAlternate.Text = objWeapon.DisplayAlternateRange(GlobalOptions.Language);
                        IDictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblVehicleWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblVehicleWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblVehicleWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblVehicleWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblVehicleWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblVehicleWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblVehicleWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblVehicleWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                        lblVehicleName.Text = objWeapon.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeapon", GlobalOptions.Language);
                        lblVehicleAvail.Text = objWeapon.TotalAvail(GlobalOptions.Language);
                        lblVehicleCost.Text = objWeapon.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehicleSlots.Text = string.Empty;
                        string strBook = CommonFunctions.LanguageBookShort(objWeapon.Source, GlobalOptions.Language);
                        string strPage = objWeapon.DisplayPage(GlobalOptions.Language);
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objWeapon.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);

                        cmdVehicleMoveToInventory.Enabled = true;

                        // Determine the Dice Pool size.
                        int intPilot = objCurrentVehicle.Pilot;
                        int intAutosoft = 0;
                        foreach (Gear objAutosoft in objCurrentVehicle.Gear)
                        {
                            if (objAutosoft.Extra == objWeapon.DisplayCategory(GlobalOptions.DefaultLanguage) && (objAutosoft.Name == "[Weapon] Targeting Autosoft" || objAutosoft.Name == "[Weapon] Melee Autosoft"))
                            {
                                if (objAutosoft.Rating > intAutosoft)
                                {
                                    intAutosoft = objAutosoft.Rating;
                                }
                            }
                        }
                        if (intAutosoft == 0)
                            intPilot -= 1;
                        lblVehicleWeaponDicePool.Text = (intPilot + intAutosoft).ToString();
                    }
                }
                if (blnVehicleMod)
                {
                    chkVehicleWeaponAccessoryInstalled.Enabled = true;
                    chkVehicleWeaponAccessoryInstalled.Checked = objMod.Installed;
                }
                else
                    chkVehicleWeaponAccessoryInstalled.Enabled = false;
                chkVehicleIncludedInWeapon.Checked = false;
            }
            else if (treVehicles.SelectedNode.Level == 3)
            {
                panVehicleCM.Visible = true;
                Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                if (objGear != null)
                {
                    if (objGear.IncludedInParent)
                        cmdDeleteVehicle.Enabled = false;
                    lblVehicleRating.Text = string.Empty;
                    if (objGear.InternalId == treVehicles.SelectedNode.Tag.ToString())
                    {
                        lblVehicleGearQty.Text = objGear.Quantity.ToString(GlobalOptions.CultureInfo);
                        cmdVehicleGearReduceQty.Enabled = !objGear.DisableQuantity;

                        if (objGear.Rating > 0)
                            lblVehicleRating.Text = objGear.Rating.ToString();
                    }

                    lblVehicleName.Text = objGear.DisplayNameShort(GlobalOptions.Language);
                    lblVehicleCategory.Text = objGear.DisplayCategory(GlobalOptions.Language);
                    lblVehicleAvail.Text = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                    lblVehicleCost.Text = objGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblVehicleHandling.Text = string.Empty;
                    lblVehicleAccel.Text = string.Empty;
                    lblVehicleSpeed.Text = string.Empty;
                    lblVehiclePilot.Text = string.Empty;
                    lblVehicleBody.Text = string.Empty;
                    lblVehicleArmor.Text = string.Empty;
                    lblVehicleSensor.Text = string.Empty;
                    lblVehicleSlots.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                    string strBook = CommonFunctions.LanguageBookShort(objGear.Source, GlobalOptions.Language);
                    string strPage = objGear.DisplayPage(GlobalOptions.Language);
                    lblVehicleSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + objGear.DisplayPage(strPage));

                    lblVehicleDevice.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    objGear.RefreshMatrixAttributeCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                    chkVehicleActiveCommlink.Visible = objGear.IsCommlink;
                    chkVehicleActiveCommlink.Checked = objGear.IsActiveCommlink(CharacterObject);

                    if (CharacterObject.Metatype == "A.I.")
                    {
                        chkVehicleHomeNode.Visible = true;
                        chkVehicleHomeNode.Checked = objGear.IsHomeNode(CharacterObject);
                        chkVehicleHomeNode.Enabled = chkVehicleActiveCommlink.Visible && objGear.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objGear.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                    }
                }
                else
                {
                    // Look for the selected Vehicle Weapon.
                    Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out Vehicle objCurrentVehicle);
                    if (objWeapon != null)
                    {
                        if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                            cmdDeleteVehicle.Enabled = false;
                        lblVehicleWeaponName.Text = objWeapon.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleWeaponCategory.Text = objWeapon.DisplayCategory(GlobalOptions.Language);
                        lblVehicleWeaponDamage.Text = objWeapon.CalculatedDamage(GlobalOptions.CultureInfo, GlobalOptions.Language);
                        lblVehicleWeaponAccuracy.Text = objWeapon.TotalAccuracy.ToString();
                        lblVehicleWeaponAP.Text = objWeapon.TotalAP(GlobalOptions.Language);
                        lblVehicleWeaponAmmo.Text = objWeapon.CalculatedAmmo(GlobalOptions.CultureInfo, GlobalOptions.Language);
                        lblVehicleWeaponMode.Text = objWeapon.CalculatedMode(GlobalOptions.Language);
                        if (objWeapon.WeaponType == "Ranged")
                        {
                            cmdFireVehicleWeapon.Enabled = true;
                            cmdReloadVehicleWeapon.Enabled = true;
                            lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();

                            cmsVehicleAmmoSingleShot.Enabled = objWeapon.AllowMode("SS") || objWeapon.AllowMode("SA");
                            cmsVehicleAmmoShortBurst.Enabled = objWeapon.AllowMode("BF");
                            cmsVehicleAmmoLongBurst.Enabled = objWeapon.AllowMode("FA");
                            cmsVehicleAmmoFullBurst.Enabled = objWeapon.AllowMode("FA");
                            cmsVehicleAmmoSuppressiveFire.Enabled = objWeapon.AllowMode("FA");
                            if (cmsVehicleAmmoFullBurst.Enabled)
                                cmsVehicleAmmoFullBurst.Text = LanguageManager.GetString("String_FullBurst", GlobalOptions.Language).Replace("{0}", objWeapon.FullBurst.ToString());
                            if (cmsVehicleAmmoSuppressiveFire.Enabled)
                                cmsVehicleAmmoSuppressiveFire.Text = LanguageManager.GetString("String_SuppressiveFire", GlobalOptions.Language).Replace("{0}", objWeapon.Suppressive.ToString());

                            List<ListItem> lstAmmo = new List<ListItem>();
                            int intCurrentSlot = objWeapon.ActiveAmmoSlot;
                            for (int i = 1; i <= objWeapon.AmmoSlots; i++)
                            {
                                objWeapon.ActiveAmmoSlot = i;
                                Gear objVehicleGear = objCurrentVehicle.Gear.DeepFindById(objWeapon.AmmoLoaded);

                                string strPlugins = string.Empty;
                                foreach (Vehicle objVehicle in CharacterObject.Vehicles)
                                {
                                    foreach (Gear objCurrentAmmo in objVehicle.Gear)
                                    {
                                        if (objCurrentAmmo.InternalId == objWeapon.AmmoLoaded)
                                        {
                                            foreach (Gear objChild in objCurrentAmmo.Children)
                                            {
                                                strPlugins += objChild.DisplayNameShort(GlobalOptions.Language) + ", ";
                                            }
                                        }
                                    }
                                }
                                // Remove the trailing comma.
                                if (!string.IsNullOrEmpty(strPlugins))
                                    strPlugins = strPlugins.Substring(0, strPlugins.Length - 2);
                                
                                string strAmmoName = string.Empty;
                                if (objVehicleGear == null)
                                {
                                    if (objWeapon.AmmoRemaining == 0)
                                        strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_Empty", GlobalOptions.Language);
                                    else
                                        strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_ExternalSource", GlobalOptions.Language);
                                }
                                else
                                    strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + objVehicleGear.DisplayNameShort(GlobalOptions.Language);
                                if (!string.IsNullOrEmpty(strPlugins))
                                    strAmmoName += " [" + strPlugins + "]";
                                lstAmmo.Add(new ListItem(i.ToString(), strAmmoName));
                            }
                            objWeapon.ActiveAmmoSlot = intCurrentSlot;
                            cboVehicleWeaponAmmo.BeginUpdate();
                            cboVehicleWeaponAmmo.Enabled = true;
                            cboVehicleWeaponAmmo.ValueMember = "Value";
                            cboVehicleWeaponAmmo.DisplayMember = "Name";
                            cboVehicleWeaponAmmo.DataSource = lstAmmo;
                            cboVehicleWeaponAmmo.SelectedValue = objWeapon.ActiveAmmoSlot.ToString();
                            if (cboVehicleWeaponAmmo.SelectedIndex == -1)
                                cboVehicleWeaponAmmo.SelectedIndex = 0;
                            cboVehicleWeaponAmmo.EndUpdate();
                        }
                        lblVehicleWeaponRangeMain.Text = objWeapon.DisplayRange(GlobalOptions.Language);
                        lblVehicleWeaponRangeAlternate.Text = objWeapon.DisplayAlternateRange(GlobalOptions.Language);
                        IDictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblVehicleWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblVehicleWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblVehicleWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblVehicleWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblVehicleWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblVehicleWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblVehicleWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblVehicleWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                        lblVehicleName.Text = objWeapon.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeapon", GlobalOptions.Language);
                        lblVehicleAvail.Text = objWeapon.TotalAvail(GlobalOptions.Language);
                        lblVehicleCost.Text = objWeapon.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehicleSlots.Text = string.Empty;
                        string strBook = CommonFunctions.LanguageBookShort(objWeapon.Source, GlobalOptions.Language);
                        string strPage = objWeapon.DisplayPage(GlobalOptions.Language);
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objWeapon.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);

                        cmdVehicleMoveToInventory.Enabled = true;

                        // Determine the Dice Pool size.
                        int intPilot = objCurrentVehicle.Pilot;
                        int intAutosoft = 0;
                        foreach (Gear objAutosoft in objCurrentVehicle.Gear)
                        {
                            if (objAutosoft.Extra == objWeapon.DisplayCategory(GlobalOptions.DefaultLanguage) && (objAutosoft.Name == "[Weapon] Targeting Autosoft" || objAutosoft.Name == "[Weapon] Melee Autosoft"))
                            {
                                if (objAutosoft.Rating > intAutosoft)
                                {
                                    intAutosoft = objAutosoft.Rating;
                                }
                            }
                        }
                        if (intAutosoft == 0)
                            intPilot -= 1;
                        lblVehicleWeaponDicePool.Text = (intPilot + intAutosoft).ToString();
                    }
                    else
                    {
                        // See if this is a piece of Cyberware.
                        Cyberware objCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                        if (objCyberware != null)
                        {
                            if (!string.IsNullOrEmpty(objCyberware.ParentID))
                                cmdDeleteCyberware.Enabled = false;
                            lblVehicleName.Text = objCyberware.DisplayNameShort(GlobalOptions.Language);
                            lblVehicleRatingLabel.Text = LanguageManager.GetString("Label_Rating", GlobalOptions.Language);
                            lblVehicleRating.Text = objCyberware.Rating.ToString();

                            cmdVehicleCyberwareChangeMount.Visible = !string.IsNullOrEmpty(objCyberware.PlugsIntoModularMount);
                            lblVehicleName.Text = objCyberware.DisplayNameShort(GlobalOptions.Language);
                            lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleModification", GlobalOptions.Language);
                            lblVehicleAvail.Text = objCyberware.TotalAvail(GlobalOptions.Language);
                            lblVehicleCost.Text = objCyberware.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                            lblVehicleHandling.Text = string.Empty;
                            lblVehicleAccel.Text = string.Empty;
                            lblVehicleSpeed.Text = string.Empty;
                            lblVehicleDevice.Text = string.Empty;
                            lblVehiclePilot.Text = string.Empty;
                            lblVehicleBody.Text = string.Empty;
                            lblVehicleArmor.Text = string.Empty;
                            lblVehicleSensor.Text = string.Empty;
                            lblVehicleSlots.Text = string.Empty;

                            lblVehicleDevice.Text = objCyberware.GetTotalMatrixAttribute("Device Rating").ToString();
                            objCyberware.RefreshMatrixAttributeCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                            chkVehicleActiveCommlink.Visible = objCyberware.IsCommlink;
                            chkVehicleActiveCommlink.Checked = objCyberware.IsActiveCommlink(CharacterObject);

                            if (CharacterObject.Metatype == "A.I.")
                            {
                                chkVehicleHomeNode.Visible = true;
                                chkVehicleHomeNode.Checked = objCyberware.IsHomeNode(CharacterObject);
                                chkVehicleHomeNode.Enabled = chkVehicleActiveCommlink.Visible && objCyberware.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objCyberware.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                            }

                            string strBook = CommonFunctions.LanguageBookShort(objCyberware.Source, GlobalOptions.Language);
                            string strPage = objCyberware.Page(GlobalOptions.Language);
                            lblVehicleSource.Text = strBook + " " + strPage;
                            tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objCyberware.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                        }
                    }
                }
                chkVehicleWeaponAccessoryInstalled.Enabled = false;
                chkVehicleIncludedInWeapon.Checked = false;
            }
            else if (treVehicles.SelectedNode.Level >= 4)
            {
                panVehicleCM.Visible = true;
                Gear objGear = CommonFunctions.FindVehicleGear(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                if (objGear != null)
                {
                    if (objGear.IncludedInParent)
                        cmdDeleteVehicle.Enabled = false;
                    lblVehicleRating.Text = string.Empty;
                    if (objGear.InternalId == treVehicles.SelectedNode.Tag.ToString())
                    {
                        lblVehicleGearQty.Text = objGear.Quantity.ToString(GlobalOptions.CultureInfo);
                        cmdVehicleGearReduceQty.Enabled = !objGear.DisableQuantity;

                        if (objGear.Rating > 0)
                            lblVehicleRating.Text = objGear.Rating.ToString();
                    }

                    lblVehicleName.Text = objGear.DisplayNameShort(GlobalOptions.Language);
                    lblVehicleCategory.Text = objGear.DisplayCategory(GlobalOptions.Language);
                    lblVehicleAvail.Text = objGear.TotalAvail(GlobalOptions.CultureInfo, GlobalOptions.Language, true);
                    lblVehicleCost.Text = objGear.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                    lblVehicleHandling.Text = string.Empty;
                    lblVehicleAccel.Text = string.Empty;
                    lblVehicleSpeed.Text = string.Empty;
                    lblVehicleDevice.Text = string.Empty;
                    lblVehiclePilot.Text = string.Empty;
                    lblVehicleBody.Text = string.Empty;
                    lblVehicleArmor.Text = string.Empty;
                    lblVehicleSensor.Text = string.Empty;
                    lblVehicleSlots.Text = objGear.CalculatedCapacity + " (" + objGear.CapacityRemaining.ToString("#,0.##", GlobalOptions.CultureInfo) + " " + LanguageManager.GetString("String_Remaining", GlobalOptions.Language) + ")";
                    string strBook = CommonFunctions.LanguageBookShort(objGear.Source, GlobalOptions.Language);
                    string strPage = objGear.DisplayPage(GlobalOptions.Language);
                    lblVehicleSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objGear.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);

                    lblVehicleDevice.Text = objGear.GetTotalMatrixAttribute("Device Rating").ToString();
                    objGear.RefreshMatrixAttributeCBOs(cboVehicleGearAttack, cboVehicleGearSleaze, cboVehicleGearDataProcessing, cboVehicleGearFirewall);

                    chkVehicleActiveCommlink.Visible = objGear.IsCommlink;
                    chkVehicleActiveCommlink.Checked = objGear.IsActiveCommlink(CharacterObject);

                    if (CharacterObject.Metatype == "A.I.")
                    {
                        chkVehicleHomeNode.Visible = true;
                        chkVehicleHomeNode.Checked = objGear.IsHomeNode(CharacterObject);
                        chkVehicleHomeNode.Enabled = chkVehicleActiveCommlink.Visible && objGear.GetTotalMatrixAttribute("Program Limit") >= (CharacterObject.DEP.TotalValue > objGear.GetTotalMatrixAttribute("Device Rating") ? 2 : 1);
                    }
                }
                else
                {
                    // Locate the the Selected Vehicle Weapon Accessory of Modification.
                    Weapon objWeapon = null;
                    WeaponAccessory objAccessory = CommonFunctions.FindVehicleWeaponAccessory(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
                    if (objAccessory != null)
                    {
                        objWeapon = objAccessory.Parent;
                        if (objAccessory.IncludedInWeapon)
                            cmdDeleteVehicle.Enabled = false;
                        lblVehicleName.Text = objAccessory.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeaponAccessory", GlobalOptions.Language);
                        lblVehicleAvail.Text = objAccessory.TotalAvail(GlobalOptions.Language);
                        lblVehicleCost.Text = objAccessory.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;

                        string[] strMounts = objAccessory.Mount.Split('/');
                        string strMount = string.Empty;
                        foreach (string strCurrentMount in strMounts)
                        {
                            if (!string.IsNullOrEmpty(strCurrentMount))
                                strMount += LanguageManager.GetString("String_Mount" + strCurrentMount, GlobalOptions.Language) + "/";
                        }
                        // Remove the trailing /
                        if (!string.IsNullOrEmpty(strMount) && strMount.Contains('/'))
                            strMount = strMount.Substring(0, strMount.Length - 1);
                        if (!string.IsNullOrEmpty(objAccessory.ExtraMount) && (objAccessory.ExtraMount != "None"))
                        {
                            bool boolHaveAddedItem = false;
                            string[] strExtraMounts = objAccessory.ExtraMount.Split('/');
                            foreach (string strCurrentExtraMount in strExtraMounts)
                            {
                                if (!string.IsNullOrEmpty(strCurrentExtraMount))
                                {
                                    if (!boolHaveAddedItem)
                                    {
                                        strMount += " + ";
                                        boolHaveAddedItem = true;
                                    }
                                    strMount += LanguageManager.GetString("String_Mount" + strCurrentExtraMount, GlobalOptions.Language) + "/";
                                }
                            }
                            // Remove the trailing /
                            if (boolHaveAddedItem)
                            strMount = strMount.Substring(0, strMount.Length - 1);
                        }

                        lblVehicleSlots.Text = strMount;
                        string strBook = CommonFunctions.LanguageBookShort(objAccessory.Source, GlobalOptions.Language);
                        string strPage = objAccessory.Page(GlobalOptions.Language);
                        lblVehicleSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objAccessory.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                        chkVehicleWeaponAccessoryInstalled.Enabled = true;
                        chkVehicleWeaponAccessoryInstalled.Checked = objAccessory.Installed;
                        chkVehicleIncludedInWeapon.Checked = objAccessory.IncludedInWeapon;
                        lblVehicleWeaponRangeMain.Text = objWeapon.DisplayRange(GlobalOptions.Language);
                        lblVehicleWeaponRangeAlternate.Text = objWeapon.DisplayAlternateRange(GlobalOptions.Language);
                        IDictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblVehicleWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblVehicleWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblVehicleWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblVehicleWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblVehicleWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblVehicleWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblVehicleWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblVehicleWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                        cmdFireVehicleWeapon.Enabled = false;
                        cmdReloadVehicleWeapon.Enabled = false;
                        cboVehicleWeaponAmmo.Enabled = false;
                    }
                    else
                    {
                        // If it's none of these, it must be an Underbarrel Weapon.
                        objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles, out Vehicle objCurrentVehicle);

                        if (objWeapon.Cyberware || objWeapon.Category == "Gear" || objWeapon.Category.StartsWith("Quality") || objWeapon.IncludedInWeapon || !string.IsNullOrEmpty(objWeapon.ParentID))
                            cmdDeleteVehicle.Enabled = false;
                        cboVehicleWeaponFiringMode.Enabled = true;
                        lblVehicleWeaponName.Text = objWeapon.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleWeaponCategory.Text = objWeapon.DisplayCategory(GlobalOptions.Language);
                        lblVehicleWeaponDamage.Text = objWeapon.CalculatedDamage(GlobalOptions.CultureInfo, GlobalOptions.Language);
                        lblVehicleWeaponAccuracy.Text = objWeapon.TotalAccuracy.ToString();
                        lblVehicleWeaponAP.Text = objWeapon.TotalAP(GlobalOptions.Language);
                        lblVehicleWeaponAmmo.Text = objWeapon.CalculatedAmmo(GlobalOptions.CultureInfo, GlobalOptions.Language);
                        lblVehicleWeaponMode.Text = objWeapon.CalculatedMode(GlobalOptions.Language);
                        if (objWeapon.WeaponType == "Ranged")
                        {
                            cmdFireVehicleWeapon.Enabled = true;
                            cmdReloadVehicleWeapon.Enabled = true;
                            lblVehicleWeaponAmmoRemaining.Text = objWeapon.AmmoRemaining.ToString();

                            cmsVehicleAmmoSingleShot.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeSingleShot", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeSemiAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoShortBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeBurstFire", GlobalOptions.Language)) || objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoLongBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoFullBurst.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));
                            cmsVehicleAmmoSuppressiveFire.Enabled = objWeapon.AllowMode(LanguageManager.GetString("String_ModeFullAutomatic", GlobalOptions.Language));

                            if (cmsVehicleAmmoFullBurst.Enabled)
                                cmsVehicleAmmoFullBurst.Text = LanguageManager.GetString("String_FullBurst", GlobalOptions.Language).Replace("{0}", objWeapon.FullBurst.ToString());
                            if (cmsVehicleAmmoSuppressiveFire.Enabled)
                                cmsVehicleAmmoSuppressiveFire.Text = LanguageManager.GetString("String_SuppressiveFire", GlobalOptions.Language).Replace("{0}", objWeapon.Suppressive.ToString());
                        }

                        List<ListItem> lstAmmo = new List<ListItem>();
                        int intCurrentSlot = objWeapon.ActiveAmmoSlot;
                        for (int i = 1; i <= objWeapon.AmmoSlots; i++)
                        {
                            objWeapon.ActiveAmmoSlot = i;
                            Gear objVehicleGear = objCurrentVehicle.Gear.DeepFindById(objWeapon.AmmoLoaded);

                            string strPlugins = string.Empty;
                            foreach (Vehicle objVehicle in CharacterObject.Vehicles)
                            {
                                foreach (Gear objCurrentAmmo in objVehicle.Gear)
                                {
                                    if (objCurrentAmmo.InternalId == objWeapon.AmmoLoaded)
                                    {
                                        foreach (Gear objChild in objCurrentAmmo.Children)
                                        {
                                            strPlugins += objChild.DisplayNameShort(GlobalOptions.Language) + ", ";
                                        }
                                    }
                                }
                            }
                            // Remove the trailing comma.
                            if (!string.IsNullOrEmpty(strPlugins))
                                    strPlugins = strPlugins.Substring(0, strPlugins.Length - 2);

                            string strAmmoName = string.Empty;
                            if (objVehicleGear == null)
                            {
                                if (objWeapon.AmmoRemaining == 0)
                                    strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_Empty", GlobalOptions.Language);
                                else
                                    strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + LanguageManager.GetString("String_ExternalSource", GlobalOptions.Language);
                            }
                            else
                                strAmmoName = LanguageManager.GetString("String_SlotNumber", GlobalOptions.Language).Replace("{0}", i.ToString()) + " " + objVehicleGear.DisplayNameShort(GlobalOptions.Language);

                            if (!string.IsNullOrEmpty(strPlugins))
                                strAmmoName += " [" + strPlugins + "]";
                            lstAmmo.Add(new ListItem(i.ToString(), strAmmoName));
                        }
                        objWeapon.ActiveAmmoSlot = intCurrentSlot;
                        cboVehicleWeaponAmmo.BeginUpdate();
                        cboVehicleWeaponAmmo.Enabled = true;
                        cboVehicleWeaponAmmo.ValueMember = "Value";
                        cboVehicleWeaponAmmo.DisplayMember = "Name";
                        cboVehicleWeaponAmmo.DataSource = lstAmmo;
                        cboVehicleWeaponAmmo.SelectedValue = objWeapon.ActiveAmmoSlot.ToString();
                        if (cboVehicleWeaponAmmo.SelectedIndex == -1)
                            cboVehicleWeaponAmmo.SelectedIndex = 0;
                        cboVehicleWeaponAmmo.EndUpdate();

                        lblVehicleWeaponRangeMain.Text = objWeapon.DisplayRange(GlobalOptions.Language);
                        lblVehicleWeaponRangeAlternate.Text = objWeapon.DisplayAlternateRange(GlobalOptions.Language);
                        IDictionary<string, string> dictionaryRanges = objWeapon.GetRangeStrings(GlobalOptions.CultureInfo);
                        lblVehicleWeaponRangeShort.Text = dictionaryRanges["short"];
                        lblVehicleWeaponRangeMedium.Text = dictionaryRanges["medium"];
                        lblVehicleWeaponRangeLong.Text = dictionaryRanges["long"];
                        lblVehicleWeaponRangeExtreme.Text = dictionaryRanges["extreme"];
                        lblVehicleWeaponAlternateRangeShort.Text = dictionaryRanges["alternateshort"];
                        lblVehicleWeaponAlternateRangeMedium.Text = dictionaryRanges["alternatemedium"];
                        lblVehicleWeaponAlternateRangeLong.Text = dictionaryRanges["alternatelong"];
                        lblVehicleWeaponAlternateRangeExtreme.Text = dictionaryRanges["alternateextreme"];

                        lblVehicleName.Text = objWeapon.DisplayNameShort(GlobalOptions.Language);
                        lblVehicleCategory.Text = LanguageManager.GetString("String_VehicleWeapon", GlobalOptions.Language);
                        lblVehicleAvail.Text = objWeapon.TotalAvail(GlobalOptions.Language);
                        lblVehicleCost.Text = objWeapon.TotalCost.ToString(CharacterObject.Options.NuyenFormat, GlobalOptions.CultureInfo) + '¥';
                        lblVehicleHandling.Text = string.Empty;
                        lblVehicleAccel.Text = string.Empty;
                        lblVehicleSpeed.Text = string.Empty;
                        lblVehicleDevice.Text = string.Empty;
                        lblVehiclePilot.Text = string.Empty;
                        lblVehicleBody.Text = string.Empty;
                        lblVehicleArmor.Text = string.Empty;
                        lblVehicleSensor.Text = string.Empty;
                        lblVehicleSlots.Text = string.Empty;
                        string strBook = CommonFunctions.LanguageBookShort(objWeapon.Source, GlobalOptions.Language);
                        string strPage = objWeapon.DisplayPage(GlobalOptions.Language);
                        lblVehicleSource.Text = strBook + " " + strPage;
                        chkVehicleWeaponAccessoryInstalled.Enabled = true;
                        chkVehicleWeaponAccessoryInstalled.Checked = objWeapon.Installed;
                        tipTooltip.SetToolTip(lblVehicleSource, CommonFunctions.LanguageBookLong(objWeapon.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                        lblVehicleWeaponDicePool.Text = objWeapon.GetDicePool(GlobalOptions.CultureInfo);
                    }
                }
            }
            else
                panVehicleCM.Visible = false;
            _blnSkipRefresh = false;
        }

        /// <summary>
        /// Populate the Expense Log Lists.
        /// </summary>
        public void PopulateExpenseList()
        {
            lstKarma.Items.Clear();
            lstNuyen.Items.Clear();
            lstKarma.ContextMenuStrip = null;
            lstNuyen.ContextMenuStrip = null;
            foreach (ExpenseLogEntry objExpense in CharacterObject.ExpenseEntries)
            {
                bool blnAdd = true;
                if (objExpense.Amount == 0)
                {
                    if (objExpense.Type == ExpenseType.Nuyen)
                    {
                        blnAdd = chkShowFreeNuyen.Checked;
                    }
                    else if (objExpense.Type == ExpenseType.Karma)
                    {
                        blnAdd = chkShowFreeKarma.Checked;
                    }
                }
                if (blnAdd)
                {
                    ListViewItem.ListViewSubItem objAmountItem = new ListViewItem.ListViewSubItem
                    {
                        Text = objExpense.Amount.ToString(objExpense.Type == ExpenseType.Nuyen ? CharacterObject.Options.NuyenFormat + '¥' : "#,0.##", GlobalOptions.CultureInfo)
                    };
                    ListViewItem.ListViewSubItem objReasonItem = new ListViewItem.ListViewSubItem
                    {
                        Text = objExpense.DisplayReason(GlobalOptions.Language)
                    };
                    ListViewItem.ListViewSubItem objInternalIdItem = new ListViewItem.ListViewSubItem
                    {
                        Text = objExpense.InternalId
                    };

                    ListViewItem objItem = new ListViewItem
                    {
                        Text = objExpense.Date.ToShortDateString() + " " + objExpense.Date.ToShortTimeString()
                    };
                    objItem.SubItems.Add(objAmountItem);
                    objItem.SubItems.Add(objReasonItem);
                    objItem.SubItems.Add(objInternalIdItem);

                    if (objExpense.Type == ExpenseType.Nuyen)
                    {
                        lstNuyen.Items.Add(objItem);
                        if (objExpense.Undo != null)
                            lstNuyen.ContextMenuStrip = cmsUndoNuyenExpense;
                    }
                    else
                    {
                        lstKarma.Items.Add(objItem);
                        if (objExpense.Undo != null)
                            lstKarma.ContextMenuStrip = cmsUndoKarmaExpense;
                    }
                }
            }
            lstKarma.Sort();
            lstNuyen.Sort();

            // Charting test for Expenses.
            chtKarma.Series.Clear();
            chtNuyen.Series.Clear();

            // Setup the series used for charts.
            Series objKarmaSeries = new Series
            {
                Name = "Series1",
                Color = Color.Blue,
                IsVisibleInLegend = false,
                IsXValueIndexed = false,
                ChartType = SeriesChartType.Area
            };
            Series objNuyenSeries = new Series
            {
                Name = "Series1",
                Color = Color.Green,
                IsVisibleInLegend = false,
                IsXValueIndexed = false,
                ChartType = SeriesChartType.Area
            };

            // Configure the Karma chart.
            chtKarma.Series.Add(objKarmaSeries);
            chtKarma.ChartAreas[0].AxisX.LabelStyle.Enabled = false;
            chtKarma.ChartAreas[0].AxisY.Title = "Karma Remaining";
            chtKarma.ChartAreas[0].AxisX.Minimum = 0;

            // Configure the Nuyen chart.
            chtNuyen.Series.Add(objNuyenSeries);
            chtNuyen.ChartAreas[0].AxisX.LabelStyle.Enabled = false;
            chtNuyen.ChartAreas[0].AxisY.Title = "Nuyen Remaining";
            chtNuyen.ChartAreas[0].AxisX.Minimum = 0;


            //Find the first karma/nuyen entry
            DateTime KarmaFirst = DateTime.MaxValue;
            DateTime NuyenFirst = DateTime.MaxValue;
            foreach (ExpenseLogEntry objExpense in CharacterObject.ExpenseEntries)
            {
                if (objExpense.Type == ExpenseType.Karma)
                {
                    if (objExpense.Date.CompareTo(KarmaFirst) < 0)
                    {
                        KarmaFirst = objExpense.Date;
                    }
                }
                else
                {
                    if (objExpense.Date.CompareTo(NuyenFirst) < 0)
                    {
                        NuyenFirst = objExpense.Date;
                    }
                }
            }

            //Problem data isen't ordered so we have to sort it anyway
            ((List<ExpenseLogEntry>)CharacterObject.ExpenseEntries).Sort(delegate(ExpenseLogEntry e1, ExpenseLogEntry e2)
            {
                if (e1 == null && e2 == null) return 0;
                if (e1 == null) return -1;
                if (e2 == null) return 1;

                if (e1.Date == null && e2.Date == null) return 0;
                if (e1.Date == null) return -1;
                if (e2.Date == null) return 1;

                return e1.Date.CompareTo(e2.Date);
            });

            double doubleKarmaX = 0;
            double doubleNuyenX = 0;
            double dblKarmaValue = 0;
            double dblNuyenValue = 0;
            foreach (ExpenseLogEntry objExpense in CharacterObject.ExpenseEntries)
            {
                if (objExpense.Type == ExpenseType.Karma)
                {
                    double seconds = (objExpense.Date - KarmaFirst).TotalDays;
                    if (seconds > doubleKarmaX) doubleKarmaX = seconds;
                    dblKarmaValue += decimal.ToDouble(objExpense.Amount);
                    objKarmaSeries.Points.AddXY(seconds, dblKarmaValue);
                }
                else
                {
                    double seconds = (objExpense.Date - NuyenFirst).TotalDays;
                    if (seconds > doubleNuyenX) doubleNuyenX = seconds;
                    dblNuyenValue += decimal.ToDouble(objExpense.Amount);
                    objNuyenSeries.Points.AddXY(seconds, dblNuyenValue);
                }
            }
            

            chtKarma.ChartAreas[0].AxisX.Maximum = doubleKarmaX;
            chtNuyen.ChartAreas[0].AxisX.Maximum = doubleNuyenX;
            //chtKarma.ChartAreas[0].AxisX.MaximumAutoSize = 100;
            chtKarma.Invalidate();
            chtNuyen.Invalidate();
        }

        /// <summary>
        /// Populate the Calendar List.
        /// </summary>
        public void PopulateCalendar()
        {
            lstCalendar.Items.Clear();
            for (int i = CharacterObject.Calendar.Count - 1; i >= 0; i--)
            {
                CalendarWeek objWeek = CharacterObject.Calendar[i];

                ListViewItem.ListViewSubItem objNoteItem = new ListViewItem.ListViewSubItem
                {
                    Text = objWeek.Notes
                };
                ListViewItem.ListViewSubItem objInternalIdItem = new ListViewItem.ListViewSubItem
                {
                    Text = objWeek.InternalId
                };

                ListViewItem objItem = new ListViewItem
                {
                    Text = objWeek.DisplayName(GlobalOptions.Language)
                };
                objItem.SubItems.Add(objNoteItem);
                objItem.SubItems.Add(objInternalIdItem);

                lstCalendar.Items.Add(objItem);
            }
        }

        /// <summary>
        /// Dummy method to trap the Options MRUChanged Event.
        /// </summary>
        public static void DoNothing()
        {
        }

        /// <summary>
        /// Update the contents of the Initiation Grade list.
        /// </summary>
        public void UpdateInitiationGradeTree()
        {
            treMetamagic.Nodes.Clear();
            foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
            {
                TreeNode nodGrade = treMetamagic.Nodes.Add(objGrade.Grade.ToString(), objGrade.Text(GlobalOptions.Language));
                nodGrade.Tag = objGrade.InternalId;
                nodGrade.ContextMenuStrip = cmsMetamagic;
                if (!string.IsNullOrEmpty(objGrade.Notes))
                    nodGrade.ForeColor = Color.SaddleBrown;
                nodGrade.ToolTipText = objGrade.Notes.WordWrap(100);

                foreach (Art objArt in CharacterObject.Arts)
                {
                    if (objArt.Grade == objGrade.Grade)
                    {
                        TreeNode nodArt = nodGrade.Nodes.Add(objArt.InternalId, LanguageManager.GetString("Label_Art", GlobalOptions.Language) + " " + objArt.DisplayName(GlobalOptions.Language));
                        nodArt.Tag = objArt.InternalId;
                        nodArt.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objArt.Notes))
                            nodArt.ForeColor = Color.SaddleBrown;
                        nodArt.ToolTipText = objArt.Notes.WordWrap(100);
                    }
                }
                foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
                {
                    if (objMetamagic.Grade == objGrade.Grade)
                    {
                        string strName = string.Empty;
                        if (CharacterObject.MAGEnabled)
                            strName = LanguageManager.GetString("Label_Metamagic", GlobalOptions.Language) + " " + objMetamagic.DisplayName(GlobalOptions.Language);
                        else
                            strName = LanguageManager.GetString("Label_Echo", GlobalOptions.Language) + " " + objMetamagic.DisplayName(GlobalOptions.Language);
                        TreeNode nodMetamagic = nodGrade.Nodes.Add(objMetamagic.InternalId, strName);
                        nodMetamagic.Tag = objMetamagic.InternalId;
                        nodMetamagic.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objMetamagic.Notes))
                            nodMetamagic.ForeColor = Color.SaddleBrown;
                        nodMetamagic.ToolTipText = objMetamagic.Notes.WordWrap(100);
                    }
                }
                foreach (Spell objSpell in CharacterObject.Spells)
                {
                    if (objSpell.Grade == objGrade.Grade)
                    {
                        string strCategory = string.Empty;
                        if (objSpell.Category == "Rituals")
                            strCategory = LanguageManager.GetString("Label_Ritual", GlobalOptions.Language) + " ";
                        if (objSpell.Category == "Enchantments")
                            strCategory = LanguageManager.GetString("Label_Enchantment", GlobalOptions.Language) + " ";
                        TreeNode nodSpell = nodGrade.Nodes.Add(objSpell.InternalId, strCategory + " " + objSpell.DisplayName(GlobalOptions.Language));
                        nodSpell.Tag = objSpell.InternalId;
                        nodSpell.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objSpell.Notes))
                            nodSpell.ForeColor = Color.SaddleBrown;
                        nodSpell.ToolTipText = objSpell.Notes.WordWrap(100);
                    }
                }
                foreach (Enhancement objEnhancement in CharacterObject.Enhancements)
                {
                    if (objEnhancement.Grade == objGrade.Grade)
                    {
                        TreeNode nodEnhancement = nodGrade.Nodes.Add(objEnhancement.InternalId, LanguageManager.GetString("Label_Enhancement", GlobalOptions.Language) + " " + objEnhancement.DisplayName(GlobalOptions.Language));
                        nodEnhancement.Tag = objEnhancement.InternalId;
                        nodEnhancement.ContextMenuStrip = cmsInitiationNotes;
                        if (!string.IsNullOrEmpty(objEnhancement.Notes))
                            nodEnhancement.ForeColor = Color.SaddleBrown;
                        nodEnhancement.ToolTipText = objEnhancement.Notes.WordWrap(100);
                    }
                }
                foreach (Power objPower in CharacterObject.Powers)
                {
                    foreach (Enhancement objEnhancement in objPower.Enhancements)
                    {
                        if (objEnhancement.Grade == objGrade.Grade)
                        {
                            TreeNode nodEnhancement = nodGrade.Nodes.Add(objEnhancement.InternalId, LanguageManager.GetString("Label_Enhancement", GlobalOptions.Language) + " " + objEnhancement.DisplayName(GlobalOptions.Language));
                            nodEnhancement.Tag = objEnhancement.InternalId;
                            nodEnhancement.ContextMenuStrip = cmsInitiationNotes;
                            if (!string.IsNullOrEmpty(objEnhancement.Notes))
                                nodEnhancement.ForeColor = Color.SaddleBrown;
                            nodEnhancement.ToolTipText = objEnhancement.Notes.WordWrap(100);
                        }
                    }
                }
            }
            foreach (Metamagic objMetamagic in CharacterObject.Metamagics.Where(x => x.Grade < 0))
            {
                string strName = string.Empty;
                if (CharacterObject.MAGEnabled)
                    strName = LanguageManager.GetString("Label_Metamagic", GlobalOptions.Language) + " " + objMetamagic.DisplayName(GlobalOptions.Language);
                else
                    strName = LanguageManager.GetString("Label_Echo", GlobalOptions.Language) + " " + objMetamagic.DisplayName(GlobalOptions.Language);
                TreeNode nodMetamagic = treMetamagic.Nodes.Add(objMetamagic.InternalId, strName);
                nodMetamagic.Tag = objMetamagic.InternalId;
                nodMetamagic.ContextMenuStrip = cmsInitiationNotes;
                if (!string.IsNullOrEmpty(objMetamagic.Notes))
                    nodMetamagic.ForeColor = Color.SaddleBrown;
                else
                    nodMetamagic.ForeColor = SystemColors.GrayText;
                nodMetamagic.ToolTipText = objMetamagic.Notes.WordWrap(100);
            }
            treMetamagic.ExpandAll();
            UpdateInitiationCost();
        }

        /// <summary>
        /// Update the karma cost tooltip for Initiation/Submersion.
        /// </summary>
        private void UpdateInitiationCost()
        {
            decimal decMultiplier = 1.0m;
            int intAmount = 0;
            string strInitTip = string.Empty;

            if (CharacterObject.MAGEnabled)
            {
                if (chkInitiationGroup.Checked)
                    decMultiplier -= 0.1m;
                if (chkInitiationOrdeal.Checked)
                    decMultiplier -= 0.1m;
                if (chkInitiationSchooling.Checked)
                    decMultiplier -= 0.1m;
                intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.InitiateGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                strInitTip = LanguageManager.GetString("Tip_ImproveInitiateGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.InitiateGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
            }
            else
            {
                if (chkInitiationGroup.Checked)
                    decMultiplier -= 0.2m;
                if (chkInitiationOrdeal.Checked)
                    decMultiplier -= 0.2m;
                if (chkInitiationSchooling.Checked)
                    decMultiplier -= 0.1m;
                intAmount = decimal.ToInt32(decimal.Ceiling(Convert.ToDecimal(CharacterObjectOptions.KarmaInititationFlat + (CharacterObject.SubmersionGrade + 1) * CharacterObjectOptions.KarmaInitiation, GlobalOptions.InvariantCultureInfo) * decMultiplier));

                strInitTip = LanguageManager.GetString("Tip_ImproveSubmersionGrade", GlobalOptions.Language).Replace("{0}", (CharacterObject.SubmersionGrade + 1).ToString()).Replace("{1}", intAmount.ToString());
            }

            tipTooltip.SetToolTip(cmdAddMetamagic, strInitTip);
        }

        /// <summary>
        /// Update the character's Mentor Spirit/Paragon information.
        /// </summary>
        private void UpdateMentorSpirits()
        {
            MentorSpirit objMentor = CharacterObject.MentorSpirits.FirstOrDefault();

            if (objMentor == null)
            {
                lblMentorSpiritLabel.Visible = false;
                lblMentorSpirit.Visible = false;
                lblMentorSpiritInformation.Visible = false;
            }
            else
            {
                lblMentorSpiritLabel.Visible = true;
                lblMentorSpirit.Visible = true;
                lblMentorSpiritInformation.Visible = true;
                lblMentorSpirit.Text = objMentor.DisplayNameShort(GlobalOptions.Language);
                lblMentorSpiritInformation.Text = LanguageManager.GetString("Label_SelectMentorSpirit_Advantage", GlobalOptions.Language) + " " +
                                   objMentor.DisplayAdvantage(GlobalOptions.Language) + "\n\n" +
                                   LanguageManager.GetString("Label_SelectMetamagic_Disadvantage", GlobalOptions.Language) + " " +
                                   objMentor.Disadvantage;
            }
        }

        /// <summary>
        /// Set the ToolTips from the Language file.
        /// </summary>
        private void SetTooltips()
        {
            // Spells Tab.
            tipTooltip.SetToolTip(cmdRollSpell, LanguageManager.GetString("Tip_DiceRoller", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdRollDrain, LanguageManager.GetString("Tip_DiceRoller", GlobalOptions.Language));
            // Complex Forms Tab.
            tipTooltip.SetToolTip(cmdRollFading, LanguageManager.GetString("Tip_DiceRoller", GlobalOptions.Language));
            // Lifestyle Tab.
            tipTooltip.SetToolTip(cmdIncreaseLifestyleMonths, LanguageManager.GetString("Tab_IncreaseLifestyleMonths", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdDecreaseLifestyleMonths, LanguageManager.GetString("Tab_DecreaseLifestyleMonths", GlobalOptions.Language));
            // Armor Tab.
            tipTooltip.SetToolTip(chkArmorEquipped, LanguageManager.GetString("Tip_ArmorEquipped", GlobalOptions.Language));
            // tipTooltip.SetToolTip(cmdArmorIncrease, LanguageManager.GetString("Tip_ArmorDegradationAPlus"));
            // tipTooltip.SetToolTip(cmdArmorDecrease, LanguageManager.GetString("Tip_ArmorDegradationAMinus"));
            // Weapon Tab.
            tipTooltip.SetToolTip(chkWeaponAccessoryInstalled, LanguageManager.GetString("Tip_WeaponInstalled", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdWeaponBuyAmmo, LanguageManager.GetString("Tip_BuyAmmo", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdWeaponMoveToVehicle, LanguageManager.GetString("Tip_TransferToVehicle", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdRollWeapon, LanguageManager.GetString("Tip_DiceRoller", GlobalOptions.Language));
            // Gear Tab.
            tipTooltip.SetToolTip(cmdGearIncreaseQty, LanguageManager.GetString("Tip_IncreaseGearQty", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdGearReduceQty, LanguageManager.GetString("Tip_DecreaseGearQty", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdGearSplitQty, LanguageManager.GetString("Tip_SplitGearQty", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdGearMergeQty, LanguageManager.GetString("Tip_MergeGearQty", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdGearMoveToVehicle, LanguageManager.GetString("Tip_TransferToVehicle", GlobalOptions.Language));
            tipTooltip.SetToolTip(chkGearActiveCommlink, LanguageManager.GetString("Tip_ActiveCommlink", GlobalOptions.Language));
            tipTooltip.SetToolTip(chkCyberwareActiveCommlink, LanguageManager.GetString("Tip_ActiveCommlink", GlobalOptions.Language));
            // Vehicles Tab.
            tipTooltip.SetToolTip(chkVehicleWeaponAccessoryInstalled, LanguageManager.GetString("Tip_WeaponInstalled", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdVehicleGearReduceQty, LanguageManager.GetString("Tip_DecreaseGearQty", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdVehicleMoveToInventory, LanguageManager.GetString("Tip_TransferToInventory", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdRollVehicleWeapon, LanguageManager.GetString("Tip_DiceRoller", GlobalOptions.Language));
            tipTooltip.SetToolTip(chkVehicleActiveCommlink, LanguageManager.GetString("Tip_ActiveCommlink", GlobalOptions.Language));
            // Other Info Tab.
            tipTooltip.SetToolTip(lblCMPhysicalLabel, LanguageManager.GetString("Tip_OtherCMPhysical", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblCMStunLabel, LanguageManager.GetString("Tip_OtherCMStun", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblINILabel, LanguageManager.GetString("Tip_OtherInitiative", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblMatrixINILabel, LanguageManager.GetString("Tip_OtherMatrixInitiative", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblAstralINILabel, LanguageManager.GetString("Tip_OtherAstralInitiative", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblArmorLabel, LanguageManager.GetString("Tip_OtherArmor", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblESS, LanguageManager.GetString("Tip_OtherEssence", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblRemainingNuyenLabel, LanguageManager.GetString("Tip_OtherNuyen", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblCareerKarmaLabel, LanguageManager.GetString("Tip_OtherCareerKarma", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblMovementLabel, LanguageManager.GetString("Tip_OtherMovement", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblSwimLabel, LanguageManager.GetString("Tip_OtherSwim", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblFlyLabel, LanguageManager.GetString("Tip_OtherFly", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblComposureLabel, LanguageManager.GetString("Tip_OtherComposure", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblJudgeIntentionsLabel, LanguageManager.GetString("Tip_OtherJudgeIntentions", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblLiftCarryLabel, LanguageManager.GetString("Tip_OtherLiftAndCarry", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblMemoryLabel, LanguageManager.GetString("Tip_OtherMemory", GlobalOptions.Language));
            // Condition Monitor Tab.
            tipTooltip.SetToolTip(lblCMPenaltyLabel, LanguageManager.GetString("Tip_CMCMPenalty", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblCMArmorLabel, LanguageManager.GetString("Tip_OtherArmor", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblCMDamageResistancePoolLabel, LanguageManager.GetString("Tip_CMDamageResistance", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdEdgeGained, LanguageManager.GetString("Tip_CMRegainEdge", GlobalOptions.Language));
            tipTooltip.SetToolTip(cmdEdgeSpent, LanguageManager.GetString("Tip_CMSpendEdge", GlobalOptions.Language));
            // Common Info Tab.
            tipTooltip.SetToolTip(lblStreetCred, LanguageManager.GetString("Tip_StreetCred", GlobalOptions.Language));
            tipTooltip.SetToolTip(lblNotoriety, LanguageManager.GetString("Tip_Notoriety", GlobalOptions.Language));
            if (CharacterObjectOptions.UseCalculatedPublicAwareness)
            {
                tipTooltip.SetToolTip(lblPublicAware, LanguageManager.GetString("Tip_PublicAwareness", GlobalOptions.Language));
            }
            tipTooltip.SetToolTip(cmdBurnStreetCred, LanguageManager.GetString("Tip_BurnStreetCred", GlobalOptions.Language));

            // Reposition controls based on their new sizes.
            // Common Tab.
            txtAlias.Left = lblAlias.Left + lblAlias.Width + 6;
            txtAlias.Width = lblMetatypeLabel.Left - 6 - txtAlias.Left;
            cmdSwapQuality.Left = cmdAddQuality.Left + cmdAddQuality.Width + 6;
            cmdDeleteQuality.Left = cmdSwapQuality.Left + cmdSwapQuality.Width + 6;
            // Martial Arts Tab.
            cmdDeleteMartialArt.Left = cmdAddMartialArt.Left + cmdAddMartialArt.Width + 6;
            // Magician Tab.
            cmdDeleteSpell.Left = cmdAddSpell.Left + cmdAddSpell.Width + 6;
            // Technomancer Tab.
            cmdDeleteComplexForm.Left = cmdAddComplexForm.Left + cmdAddComplexForm.Width + 6;
            // Critter Powers Tab.
            cmdDeleteCritterPower.Left = cmdAddCritterPower.Left + cmdAddCritterPower.Width + 6;
            // Initiation Tab.
            // Cyberware Tab.
            cmdAddBioware.Left = cmdAddCyberware.Left + cmdAddCyberware.Width + 6;
            cmdDeleteCyberware.Left = cmdAddBioware.Left + cmdAddBioware.Width + 6;
            // Lifestyle Tab.
            cmdDeleteLifestyle.Left = cmdAddLifestyle.Left + cmdAddLifestyle.Width + 6;
            // Armor Tab.
            cmdDeleteArmor.Left = cmdAddArmor.Left + cmdAddArmor.Width + 6;
            cmdAddArmorBundle.Left = cmdDeleteArmor.Left + cmdDeleteArmor.Width + 6;
            cmdArmorEquipAll.Left = chkArmorEquipped.Left + chkArmorEquipped.Width + 6;
            cmdArmorUnEquipAll.Left = cmdArmorEquipAll.Left + cmdArmorEquipAll.Width + 6;
            // Weapons Tab.
            cmdDeleteWeapon.Left = cmdAddWeapon.Left + cmdAddWeapon.Width + 6;
            cmdAddWeaponLocation.Left = cmdDeleteWeapon.Left + cmdDeleteWeapon.Width + 6;
            // Gear Tab.
            cmdDeleteGear.Left = cmdAddGear.Left + cmdAddGear.Width + 6;
            cmdAddLocation.Left = cmdDeleteGear.Left + cmdDeleteGear.Width + 6;
            // Vehicle Tab.
            cmdDeleteVehicle.Left = cmdAddVehicle.Left + cmdAddVehicle.Width + 6;
            cmdAddVehicleLocation.Left = cmdDeleteVehicle.Left + cmdDeleteVehicle.Width + 6;
            // Expense Tab.
            cmdKarmaSpent.Left = cmdKarmaGained.Left + cmdKarmaGained.Width + 6;
            cmdNuyenSpent.Left = cmdNuyenGained.Left + cmdNuyenGained.Width + 6;
            // Improvements Tab.
            cmdImprovementsEnableAll.Left = chkImprovementActive.Left + chkImprovementActive.Width + 6;
            cmdImprovementsDisableAll.Left = cmdImprovementsEnableAll.Left + cmdImprovementsEnableAll.Width + 6;
        }

        /// <summary>
        /// Refresh the list of Improvements.
        /// </summary>
        private void RefreshImprovements()
        {
            treImprovements.Nodes.Clear();

            TreeNode objRoot = new TreeNode
            {
                Tag = null,
                Text = LanguageManager.GetString("Node_SelectedImprovements", GlobalOptions.Language)
            };
            treImprovements.Nodes.Add(objRoot);

            // Populate the Locations.
            foreach (string strGroup in CharacterObject.ImprovementGroups)
            {
                TreeNode objGroup = new TreeNode
                {
                    Tag = strGroup,
                    Text = strGroup,
                    ContextMenuStrip = cmsImprovementLocation
                };
                treImprovements.Nodes.Add(objGroup);
            }

            List<ListItem> lstImprovements = new List<ListItem>();
            foreach (Improvement objImprovement in CharacterObject.Improvements)
            {
                if (objImprovement.ImproveSource == Improvement.ImprovementSource.Custom)
                {
                    string strName = "000000";
                    strName = strName.Substring(0, 6 - objImprovement.SortOrder.ToString().Length) + objImprovement.SortOrder.ToString();
                    lstImprovements.Add(new ListItem(objImprovement.SourceName, strName));
                }
            }

            // Populate the Improvements TreeView.
            int i = -1;
            foreach (ListItem objItem in lstImprovements)
            {
                i++;
                Improvement objImprovement = null;
                foreach (Improvement objCharacterImprovement in CharacterObject.Improvements)
                {
                    if (objCharacterImprovement.SourceName == objItem.Value)
                    {
                        objImprovement = objCharacterImprovement;
                        break;
                    }
                }

                TreeNode nodImprovement = new TreeNode
                {
                    Tag = objImprovement.SourceName,
                    Text = objImprovement.CustomName,
                    ToolTipText = objImprovement.Notes.WordWrap(100),
                    ContextMenuStrip = cmsImprovement
                };
                if (!string.IsNullOrEmpty(objImprovement.Notes))
                {
                    if (objImprovement.Enabled)
                        nodImprovement.ForeColor = Color.SaddleBrown;
                    else
                        nodImprovement.ForeColor = Color.SandyBrown;
                }
                else if (objImprovement.Enabled)
                    nodImprovement.ForeColor = SystemColors.WindowText;
                else
                    nodImprovement.ForeColor = SystemColors.GrayText;

                TreeNode objParent = treImprovements.Nodes[0];
                if (!string.IsNullOrEmpty(objImprovement.CustomGroup))
                {
                    foreach (TreeNode objFind in treImprovements.Nodes)
                    {
                        if (objFind.Text == objImprovement.CustomGroup)
                        {
                            objParent = objFind;
                            break;
                        }
                    }
                }

                objParent.Nodes.Add(nodImprovement);
                objParent.Expand();
            }

            // Sort the list of Custom Improvements in alphabetical order based on their Custom Name within each Group.
            treImprovements.SortCustom();
        }

        private void MoveControls()
        {
            int intWidth = 0;

            // Common tab.
            lblAlias.Left = Math.Max(288, cmdDeleteQuality.Left + cmdDeleteQuality.Width + 6);
            txtAlias.Left = lblAlias.Left + lblAlias.Width + 6;
            txtAlias.Width = lblMetatypeLabel.Left - txtAlias.Left - 6;

            // Skills tab.

            // Martial Arts tab.
            lblMartialArtSource.Left = lblMartialArtSourceLabel.Left + lblMartialArtSourceLabel.Width + 6;

            // Spells and Spirits tab.
            intWidth = Math.Max(lblSpellDescriptorsLabel.Width, lblSpellCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellRangeLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellDurationLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellSourceLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellDicePoolLabel.Width);

            lblSpellDescriptors.Left = lblSpellDescriptorsLabel.Left + intWidth + 6;
            lblSpellCategory.Left = lblSpellCategoryLabel.Left + intWidth + 6;
            lblSpellRange.Left = lblSpellRangeLabel.Left + intWidth + 6;
            lblSpellDuration.Left = lblSpellDurationLabel.Left + intWidth + 6;
            lblSpellSource.Left = lblSpellSourceLabel.Left + intWidth + 6;
            lblSpellDicePool.Left = lblSpellDicePoolLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblSpellTypeLabel.Width, lblSpellDamageLabel.Width);
            intWidth = Math.Max(intWidth, lblSpellDVLabel.Width);
            lblSpellTypeLabel.Left = lblSpellCategoryLabel.Left + 179;
            lblSpellType.Left = lblSpellTypeLabel.Left + intWidth + 6;
            lblSpellDamageLabel.Left = lblSpellRangeLabel.Left + 179;
            lblSpellDamage.Left = lblSpellDamageLabel.Left + intWidth + 6;
            lblSpellDVLabel.Left = lblSpellDurationLabel.Left + 179;
            lblSpellDV.Left = lblSpellDVLabel.Left + intWidth + 6;
            cmdQuickenSpell.Left = lblSpellDVLabel.Left;

            intWidth = Math.Max(lblTraditionLabel.Width, lblDrainAttributesLabel.Width);
            intWidth = Math.Max(intWidth, lblMentorSpiritLabel.Width);
            cboTradition.Left = lblTraditionLabel.Left + intWidth + 6;
            lblDrainAttributes.Left = lblDrainAttributesLabel.Left + intWidth + 6;
            lblTraditionSource.Left = lblTraditionSourceLabel.Left + intWidth + 6;
            lblDrainAttributesValue.Left = lblDrainAttributes.Left + 91;
            lblMentorSpirit.Left = lblMentorSpiritLabel.Left + intWidth + 6;

            cmdRollSpell.Left = lblSpellDicePool.Left + lblSpellDicePool.Width + 6;
            cmdRollDrain.Left = lblDrainAttributesValue.Left + lblDrainAttributesValue.Width + 6;
            cmdRollSpell.Visible = CharacterObjectOptions.AllowSkillDiceRolling;
            cmdRollDrain.Visible = CharacterObjectOptions.AllowSkillDiceRolling;

            // Sprites and Complex Forms tab.
            int intLeft = lblDurationLabel.Width;
            intLeft = Math.Max(intLeft, lblTargetLabel.Width);
            intLeft = Math.Max(intLeft, lblFV.Width);
            intLeft = Math.Max(intLeft, lblComplexFormSource.Width);

            lblTarget.Left = lblTargetLabel.Left + intLeft + 6;
            lblDuration.Left = lblDurationLabel.Left + intLeft + 6;
            lblFV.Left = lblFVLabel.Left + intLeft + 6;
            lblComplexFormSource.Left = lblComplexFormSourceLabel.Left + intLeft + 6;

            intWidth = lblFadingAttributesLabel.Width;
            lblFadingAttributes.Left = lblFadingAttributesLabel.Left + intWidth + 6;
            lblFadingAttributesValue.Left = lblFadingAttributes.Left + 91;

            cmdRollFading.Left = lblFadingAttributesValue.Left + lblFadingAttributesValue.Width + 6;
            cmdRollFading.Visible = CharacterObjectOptions.AllowSkillDiceRolling;

            // Critter Powers tab.
            lblCritterPowerPointsLabel.Left = cmdDeleteCritterPower.Left + cmdDeleteCritterPower.Width + 16;
            lblCritterPowerPoints.Left = lblCritterPowerPointsLabel.Left + lblCritterPowerPointsLabel.Width + 6;

            intWidth = Math.Max(lblCritterPowerNameLabel.Width, lblCritterPowerCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerTypeLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerActionLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerRangeLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerDurationLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerSourceLabel.Width);
            intWidth = Math.Max(intWidth, lblCritterPowerPointCostLabel.Width);

            lblCritterPowerName.Left = lblCritterPowerNameLabel.Left + intWidth + 6;
            lblCritterPowerCategory.Left = lblCritterPowerCategoryLabel.Left + intWidth + 6;
            lblCritterPowerType.Left = lblCritterPowerTypeLabel.Left + intWidth + 6;
            lblCritterPowerAction.Left = lblCritterPowerActionLabel.Left + intWidth + 6;
            lblCritterPowerRange.Left = lblCritterPowerRangeLabel.Left + intWidth + 6;
            lblCritterPowerDuration.Left = lblCritterPowerDurationLabel.Left + intWidth + 6;
            lblCritterPowerSource.Left = lblCritterPowerSourceLabel.Left + intWidth + 6;
            lblCritterPowerPointCost.Left = lblCritterPowerPointCostLabel.Left + intWidth + 6;

            // Initiation and Submersion tab.

            // Cyberware and Bioware tab.
            intWidth = Math.Max(lblCyberwareNameLabel.Width, lblCyberwareCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareGradeLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareEssenceLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareAvailLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareSourceLabel.Width);

            lblCyberwareName.Left = lblCyberwareNameLabel.Left + intWidth + 6;
            lblCyberwareCategory.Left = lblCyberwareCategoryLabel.Left + intWidth + 6;
            lblCyberwareGrade.Left = lblCyberwareGradeLabel.Left + intWidth + 6;
            lblCyberwareEssence.Left = lblCyberwareEssenceLabel.Left + intWidth + 6;
            lblCyberwareAvail.Left = lblCyberwareAvailLabel.Left + intWidth + 6;
            lblCyberwareSource.Left = lblCyberwareSourceLabel.Left + intWidth + 6;

            intWidth = lblEssenceHoleESSLabel.Width;
            lblCyberwareESS.Left = lblEssenceHoleESSLabel.Left + intWidth + 6;
            lblBiowareESS.Left = lblEssenceHoleESSLabel.Left + intWidth + 6;
            lblEssenceHoleESS.Left = lblEssenceHoleESSLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblCyberwareRatingLabel.Width, lblCyberwareCapacityLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberwareCostLabel.Width);
            intWidth = Math.Max(intWidth, lblCyberlimbSTRLabel.Width);

            lblCyberAttackLabel.Left = lblCyberDeviceRating.Left + lblCyberDeviceRating.Width + 20;
            cboCyberwareGearAttack.Left = lblCyberAttackLabel.Left + lblCyberAttackLabel.Width + 6;
            lblCyberSleazeLabel.Left = cboCyberwareGearAttack.Left + cboCyberwareGearAttack.Width + 20;
            cboCyberwareGearSleaze.Left = lblCyberSleazeLabel.Left + lblCyberSleazeLabel.Width + 6;
            lblCyberDataProcessingLabel.Left = cboCyberwareGearSleaze.Left + cboCyberwareGearSleaze.Width + 20;
            cboCyberwareGearDataProcessing.Left = lblCyberDataProcessingLabel.Left + lblCyberDataProcessingLabel.Width + 6;
            lblCyberFirewallLabel.Left = cboCyberwareGearDataProcessing.Left + cboCyberwareGearDataProcessing.Width + 20;
            cboCyberwareGearFirewall.Left = lblCyberFirewallLabel.Left + lblCyberFirewallLabel.Width + 6;

            lblCyberwareRatingLabel.Left = lblCyberwareName.Left + 208;
            lblCyberwareRating.Left = lblCyberwareRatingLabel.Left + intWidth + 6;
            lblCyberwareCapacityLabel.Left = lblCyberwareName.Left + 208;
            lblCyberwareCapacity.Left = lblCyberwareCapacityLabel.Left + intWidth + 6;
            lblCyberwareCostLabel.Left = lblCyberwareName.Left + 208;
            lblCyberwareCost.Left = lblCyberwareCostLabel.Left + intWidth + 6;
            lblCyberlimbAGILabel.Left = lblCyberwareName.Left + 208;
            lblCyberlimbAGI.Left = lblCyberlimbAGILabel.Left + intWidth + 6;
            lblCyberlimbSTRLabel.Left = lblCyberwareName.Left + 208;
            lblCyberlimbSTR.Left = lblCyberlimbSTRLabel.Left + intWidth + 6;

            // Street Gear tab.
            // Lifestyles tab.
            lblLifestyleCost.Left = lblLifestyleCostLabel.Left + lblLifestyleCostLabel.Width + 6;
            lblLifestyleSource.Left = lblLifestyleSourceLabel.Left + lblLifestyleSourceLabel.Width + 6;

            intWidth = lblLifestyleComfortsLabel.Width;

            lblBaseLifestyle.Left = lblLifestyleComfortsLabel.Left + intWidth + 6;

            lblLifestyleQualitiesLabel.Left = lblBaseLifestyle.Left + 132;
            lblLifestyleQualities.Left = lblLifestyleQualitiesLabel.Left + 14;
            lblLifestyleQualities.Width = tabLifestyle.Width - lblLifestyleQualities.Left - 10;

            // Armor tab.
            intWidth = lblArmorValueLabel.Width;
            intWidth = Math.Max(intWidth, lblArmorRatingLabel.Width);
            intWidth = Math.Max(intWidth, lblArmorCapacityLabel.Width);
            intWidth = Math.Max(intWidth, lblArmorSourceLabel.Width);

            lblArmorValue.Left = lblArmorValueLabel.Left + intWidth + 6;
            lblArmorRating.Left = lblArmorRatingLabel.Left + intWidth + 6;
            lblArmorCapacity.Left = lblArmorCapacityLabel.Left + intWidth + 6;
            lblArmorSource.Left = lblArmorSourceLabel.Left + intWidth + 6;

            lblArmorAvailLabel.Left = lblArmorRating.Left + lblArmorRating.Width + 6;
            lblArmorAvail.Left = lblArmorAvailLabel.Left + lblArmorAvailLabel.Width + 6;

            lblArmorCostLabel.Left = lblArmorAvail.Left + lblArmorAvail.Width + 6;
            lblArmorCost.Left = lblArmorCostLabel.Left + lblArmorCostLabel.Width + 6;

            cmdArmorIncrease.Left = lblArmorValue.Left + 45;
            cmdArmorDecrease.Left = cmdArmorIncrease.Left + cmdArmorIncrease.Width + 6;

            lblArmorAttackLabel.Left = lblArmorDeviceRating.Left + lblArmorDeviceRating.Width + 20;
            lblArmorAttack.Left = lblArmorAttackLabel.Left + lblArmorAttackLabel.Width + 6;
            lblArmorSleazeLabel.Left = lblArmorAttack.Left + lblArmorAttack.Width + 20;
            lblArmorSleaze.Left = lblArmorSleazeLabel.Left + lblArmorSleazeLabel.Width + 6;
            lblArmorDataProcessingLabel.Left = lblArmorSleaze.Left + lblArmorSleaze.Width + 20;
            lblArmorDataProcessing.Left = lblArmorDataProcessingLabel.Left + lblArmorDataProcessingLabel.Width + 6;
            lblArmorFirewallLabel.Left = lblArmorDataProcessing.Left + lblArmorDataProcessing.Width + 20;
            lblArmorFirewall.Left = lblArmorFirewallLabel.Left + lblArmorFirewallLabel.Width + 6;

            // Weapons tab.
            lblWeaponName.Left = lblWeaponNameLabel.Left + lblWeaponNameLabel.Width + 6;
            lblWeaponCategory.Left = lblWeaponCategoryLabel.Left + lblWeaponCategoryLabel.Width + 6;

            intWidth = Math.Max(lblWeaponNameLabel.Width, lblWeaponCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponDamageLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponReachLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponAvailLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponSlotsLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponSourceLabel.Width);

            lblWeaponName.Left = lblWeaponNameLabel.Left + intWidth + 6;
            lblWeaponCategory.Left = lblWeaponCategoryLabel.Left + intWidth + 6;
            lblWeaponDamage.Left = lblWeaponDamageLabel.Left + intWidth + 6;
            lblWeaponReach.Left = lblWeaponReachLabel.Left + intWidth + 6;
            lblWeaponAvail.Left = lblWeaponAvailLabel.Left + intWidth + 6;
            lblWeaponSlots.Left = lblWeaponSlotsLabel.Left + intWidth + 6;
            lblWeaponSource.Left = lblWeaponSourceLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblWeaponRCLabel.Width, lblWeaponModeLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponCostLabel.Width);

            lblWeaponRCLabel.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponRC.Left = lblWeaponRCLabel.Left + intWidth + 6;
            lblWeaponModeLabel.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponMode.Left = lblWeaponModeLabel.Left + intWidth + 6;
            lblWeaponCostLabel.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponCost.Left = lblWeaponCostLabel.Left + intWidth + 6;
            chkIncludedInWeapon.Left = lblWeaponDamageLabel.Left + 176;
            cmdWeaponMoveToVehicle.Left = lblWeaponDamageLabel.Left + 176;
            lblWeaponAccuracy.Left = lblWeaponAccuracyLabel.Left + lblWeaponAccuracyLabel.Width + 6;

            intWidth = Math.Max(lblWeaponAPLabel.Width, lblWeaponAmmoLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponConcealLabel.Width);

            lblWeaponAPLabel.Left = lblWeaponRC.Left + 95;
            lblWeaponAP.Left = lblWeaponAPLabel.Left + intWidth + 6;
            lblWeaponAmmoLabel.Left = lblWeaponRC.Left + 95;
            lblWeaponAmmo.Left = lblWeaponAmmoLabel.Left + intWidth + 6;
            lblWeaponConcealLabel.Left = lblWeaponRC.Left + 95;
            lblWeaponConceal.Left = lblWeaponConcealLabel.Left + intWidth + 6;
            chkWeaponAccessoryInstalled.Left = lblWeaponRC.Left + 95;

            intWidth = Math.Max(lblWeaponAmmoRemainingLabel.Width, lblWeaponAmmoTypeLabel.Width);
            intWidth = Math.Max(intWidth, lblWeaponDicePoolLabel.Width);

            lblWeaponAmmoRemaining.Left = lblWeaponAmmoRemainingLabel.Left + intWidth + 6;
            cboWeaponAmmo.Left = lblWeaponAmmoTypeLabel.Left + intWidth + 6;
            lblWeaponDicePool.Left = lblWeaponDicePoolLabel.Left + intWidth + 6;

            cmdFireWeapon.Left = lblWeaponAmmoRemaining.Left + 123;
            cmdReloadWeapon.Left = cmdFireWeapon.Left + cmdFireWeapon.Width + 6;
            cmdWeaponBuyAmmo.Left = cmdReloadWeapon.Left + cmdReloadWeapon.Width + 6;

            cmdRollWeapon.Left = lblWeaponDicePool.Left + lblWeaponDicePool.Width + 6;
            cmdRollWeapon.Visible = CharacterObjectOptions.AllowSkillDiceRolling;

            lblWeaponAttackLabel.Left = lblWeaponDeviceRating.Left + lblWeaponDeviceRating.Width + 20;
            cboWeaponGearAttack.Left = lblWeaponAttackLabel.Left + lblWeaponAttackLabel.Width + 6;
            lblWeaponSleazeLabel.Left = cboWeaponGearAttack.Left + cboWeaponGearAttack.Width + 20;
            cboWeaponGearSleaze.Left = lblWeaponSleazeLabel.Left + lblWeaponSleazeLabel.Width + 6;
            lblWeaponDataProcessingLabel.Left = cboWeaponGearSleaze.Left + cboWeaponGearSleaze.Width + 20;
            cboWeaponGearDataProcessing.Left = lblWeaponDataProcessingLabel.Left + lblWeaponDataProcessingLabel.Width + 6;
            lblWeaponFirewallLabel.Left = cboWeaponGearDataProcessing.Left + cboWeaponGearDataProcessing.Width + 20;
            cboWeaponGearFirewall.Left = lblWeaponFirewallLabel.Left + lblWeaponFirewallLabel.Width + 6;

            // Gear tab.
            intWidth = Math.Max(lblGearNameLabel.Width, lblGearCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblGearRatingLabel.Width);
            intWidth = Math.Max(intWidth, lblGearCapacityLabel.Width);
            intWidth = Math.Max(intWidth, lblGearQtyLabel.Width);

            chkCommlinks.Left = cmdAddLocation.Left + cmdAddLocation.Width + 16;

            lblGearName.Left = lblGearNameLabel.Left + intWidth + 6;
            lblGearCategory.Left = lblGearCategoryLabel.Left + intWidth + 6;
            lblGearRating.Left = lblGearRatingLabel.Left + intWidth + 6;
            lblGearCapacity.Left = lblGearCapacityLabel.Left + intWidth + 6;
            lblGearQty.Left = lblGearQtyLabel.Left + intWidth + 6;

            cmdGearIncreaseQty.Left = lblGearQty.Left + 57;
            cmdGearReduceQty.Left = cmdGearIncreaseQty.Left + cmdGearIncreaseQty.Width + 6;
            cmdGearSplitQty.Left = cmdGearReduceQty.Left + 79;
            cmdGearMergeQty.Left = cmdGearSplitQty.Left + cmdGearSplitQty.Width + 6;
            cmdGearMoveToVehicle.Left = cmdGearMergeQty.Left + 56;

            intWidth = lblGearDamageLabel.Width;
            lblGearDamage.Left = lblGearDamageLabel.Left + intWidth + 6;

            intWidth = lblGearAPLabel.Width;
            lblGearAP.Left = lblGearAPLabel.Left + intWidth + 6;

            lblGearSource.Left = lblGearSourceLabel.Left + lblGearSourceLabel.Width + 6;
            chkGearHomeNode.Left = chkGearEquipped.Left + chkGearEquipped.Width + 16;

            // Vehicles and Drones tab.
            intWidth = Math.Max(lblVehicleNameLabel.Width, lblVehicleCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleHandlingLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleAttackLabel.Width);
            intWidth = Math.Max(intWidth, lblVehiclePilotLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleFirewallLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleAvailLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleRatingLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleGearQtyLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSourceLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleWeaponNameLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleWeaponCategoryLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleWeaponDamageLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleWeaponAccuracyLabel.Width);

            lblVehicleName.Left = lblVehicleNameLabel.Left + intWidth + 6;
            lblVehicleCategory.Left = lblVehicleCategoryLabel.Left + intWidth + 6;
            lblVehicleHandling.Left = lblVehicleHandlingLabel.Left + intWidth + 6;
            lblVehiclePilot.Left = lblVehiclePilotLabel.Left + intWidth + 6;
            cboVehicleGearAttack.Left = lblVehicleAttackLabel.Left + intWidth + 6;
            cboVehicleGearFirewall.Left = lblVehicleFirewallLabel.Left + intWidth + 6;
            lblVehicleAvail.Left = lblVehicleAvailLabel.Left + intWidth + 6;
            lblVehicleRating.Left = lblVehicleRatingLabel.Left + intWidth + 6;
            lblVehicleGearQty.Left = lblVehicleGearQtyLabel.Left + intWidth + 6;
            lblVehicleSource.Left = lblVehicleSourceLabel.Left + intWidth + 6;
            lblVehicleWeaponName.Left = lblVehicleWeaponNameLabel.Left + intWidth + 6;
            lblVehicleWeaponCategory.Left = lblVehicleWeaponCategoryLabel.Left + intWidth + 6;
            lblVehicleWeaponDamage.Left = lblVehicleWeaponDamageLabel.Left + intWidth + 6;
            lblVehicleWeaponAccuracy.Left = lblVehicleWeaponDamageLabel.Left + intWidth + 6;
            intWidth = Math.Max(lblVehicleAccelLabel.Width, lblVehicleBodyLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleCostLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleProtectionLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleElectromagneticLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSleazeLabel.Width);

            lblVehicleAccelLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleAccel.Left = lblVehicleAccelLabel.Left + intWidth + 6;
            lblVehicleBodyLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleBody.Left = lblVehicleBodyLabel.Left + intWidth + 6;
            lblVehicleCostLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleCost.Left = lblVehicleCostLabel.Left + intWidth + 6;
            lblVehicleProtectionLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleProtection.Left = lblVehicleProtectionLabel.Left + intWidth + 6;
            lblVehicleElectromagneticLabel.Left = lblVehicleHandling.Left + 60;
            lblVehicleElectromagnetic.Left = lblVehicleElectromagneticLabel.Left + intWidth + 6;
            lblVehicleSleazeLabel.Left = lblVehicleHandling.Left + 60;
            cboVehicleGearSleaze.Left = lblVehicleSleazeLabel.Left + intWidth + 6;

            cmdVehicleGearReduceQty.Left = lblVehicleGearQtyLabel.Left + 144;
            cmdVehicleMoveToInventory.Left = cmdVehicleGearReduceQty.Left + 29;
            chkVehicleIncludedInWeapon.Left = lblVehicleAccel.Left;

            intWidth = Math.Max(lblVehicleSpeedLabel.Width, lblVehicleArmorLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleDataProcessingLabel.Width);
            intWidth = Math.Max(intWidth, lblVehiclePowertrainLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleCosmeticLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleDeviceLabel.Width);

            lblVehicleSpeedLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleSpeed.Left = lblVehicleSpeedLabel.Left + intWidth + 6;
            lblVehicleArmorLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleArmor.Left = lblVehicleArmorLabel.Left + intWidth + 6;
            lblVehiclePowertrainLabel.Left = lblVehicleAccel.Left + 60;
            lblVehiclePowertrain.Left = lblVehiclePowertrainLabel.Left + intWidth + 6;
            lblVehicleCosmeticLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleCosmetic.Left = lblVehicleCosmeticLabel.Left + intWidth + 6;
            lblVehicleDataProcessingLabel.Left = lblVehicleAccel.Left + 60;
            cboVehicleGearDataProcessing.Left = lblVehicleDataProcessingLabel.Left + intWidth + 6;
            lblVehicleDeviceLabel.Left = lblVehicleAccel.Left + 60;
            lblVehicleDevice.Left = lblVehicleDeviceLabel.Left + intWidth + 6;

            intWidth = Math.Max(lblVehicleFirewallLabel.Width, lblVehicleSensorLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSeatsLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleDroneModSlotsLabel.Width);
            intWidth = Math.Max(intWidth, lblVehicleSlotsLabel.Width);

            lblVehicleSensorLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleSensor.Left = lblVehicleSensorLabel.Left + intWidth + 6;
            lblVehicleSeatsLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleSeats.Left = lblVehicleSeatsLabel.Left + intWidth + 6;
            lblVehicleFirewallLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleDroneModSlotsLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleDroneModSlots.Left = lblVehicleDroneModSlotsLabel.Left + intWidth + 6;

            cboVehicleGearFirewall.Left = lblVehicleFirewallLabel.Left + intWidth + 6;

            lblVehicleSlotsLabel.Left = lblVehicleSpeed.Left + 60;
            lblVehicleSlots.Left = lblVehicleSlotsLabel.Left + intWidth + 6;

            chkVehicleHomeNode.Left = lblVehicleSlotsLabel.Left;
            chkVehicleWeaponAccessoryInstalled.Left = lblVehicleSlotsLabel.Left;

            // Character Info.
            intWidth = Math.Max(lblSex.Width, lblHeight.Width);
            txtSex.Left = lblSex.Left + intWidth + 6;
            txtSex.Width = lblAge.Left - txtSex.Left - 16;
            txtHeight.Left = lblHeight.Left + intWidth + 6;
            txtHeight.Width = lblWeight.Left - txtHeight.Left - 16;

            intWidth = Math.Max(lblAge.Width, lblWeight.Width);
            txtAge.Left = lblAge.Left + intWidth + 6;
            txtAge.Width = lblEyes.Left - txtAge.Left - 16;
            txtWeight.Left = lblWeight.Left + intWidth + 6;
            txtWeight.Width = lblSkin.Left - txtWeight.Left - 16;

            intWidth = Math.Max(lblEyes.Width, lblSkin.Width);
            txtEyes.Left = lblEyes.Left + intWidth + 6;
            txtEyes.Width = lblHair.Left - txtEyes.Left - 16;
            txtSkin.Left = lblSkin.Left + intWidth + 6;
            txtSkin.Width = lblCharacterName.Left - txtSkin.Left - 16;

            intWidth = Math.Max(lblHair.Width, lblCharacterName.Width);
            txtHair.Left = lblHair.Left + intWidth + 6;
            txtHair.Width = lblPlayerName.Left - txtHair.Left - 16;
            txtCharacterName.Left = lblCharacterName.Left + intWidth + 6;
            txtCharacterName.Width = lblPlayerName.Left - txtCharacterName.Left - 16;

            txtPlayerName.Left = lblPlayerName.Left + lblPlayerName.Width + 6;
            txtPlayerName.Width = tabCharacterInfo.Width - txtPlayerName.Left - 16;

            intWidth = Math.Max(lblStreetCred.Width, lblNotoriety.Width);
            intWidth = Math.Max(intWidth, lblPublicAware.Width);

            nudStreetCred.Left = lblStreetCred.Left + intWidth + 6;
            nudNotoriety.Left = lblNotoriety.Left + intWidth + 6;
            nudPublicAware.Left = lblPublicAware.Left + intWidth + 6;
            lblStreetCredTotal.Left = nudStreetCred.Left + nudStreetCred.Width + 6;
            lblNotorietyTotal.Left = nudNotoriety.Left + nudNotoriety.Width + 6;
            lblPublicAwareTotal.Left = nudPublicAware.Left + nudPublicAware.Width + 6;

            // Expense Tab.
            cmdKarmaSpent.Left = cmdKarmaGained.Left + cmdKarmaGained.Width + 6;
            cmdKarmaEdit.Left = cmdKarmaSpent.Left + cmdKarmaSpent.Width + 6;
            cmdNuyenSpent.Left = cmdNuyenGained.Left + cmdNuyenGained.Width + 6;
            cmdNuyenEdit.Left = cmdNuyenSpent.Left + cmdNuyenSpent.Width + 6;

            // Calendar Tab.
            cmdEditWeek.Left = cmdAddWeek.Left + cmdAddWeek.Width + 6;

            // Improvements tab.
            cmdEditImprovement.Left = cmdAddImprovement.Left + cmdAddImprovement.Width + 6;
            cmdDeleteImprovement.Left = cmdEditImprovement.Left + cmdEditImprovement.Width + 6;
            lblImprovementType.Left = lblImprovementTypeLabel.Left + lblImprovementTypeLabel.Width + 6;

            // Other Info tab.
            intWidth = Math.Max(lblCMPhysicalLabel.Width, lblCMStunLabel.Width);
            intWidth = Math.Max(intWidth, lblINILabel.Width);
            intWidth = Math.Max(intWidth, lblMatrixINILabel.Width);
            intWidth = Math.Max(intWidth, lblAstralINILabel.Width);
            intWidth = Math.Max(intWidth, lblRiggingINILabel.Width);
            intWidth = Math.Max(intWidth, lblMatrixINIColdLabel.Width);
            intWidth = Math.Max(intWidth, lblMatrixINIHotLabel.Width);
            intWidth = Math.Max(intWidth, lblArmorLabel.Width);
            intWidth = Math.Max(intWidth, lblESS.Width);
            intWidth = Math.Max(intWidth, lblRemainingNuyenLabel.Width);
            intWidth = Math.Max(intWidth, lblCareerKarmaLabel.Width);
            intWidth = Math.Max(intWidth, lblCareerNuyenLabel.Width);
            intWidth = Math.Max(intWidth, lblComposureLabel.Width);
            intWidth = Math.Max(intWidth, lblJudgeIntentionsLabel.Width);
            intWidth = Math.Max(intWidth, lblLiftCarryLabel.Width);
            intWidth = Math.Max(intWidth, lblMemoryLabel.Width);
            intWidth = Math.Max(intWidth, lblMovementLabel.Width);
            intWidth = Math.Max(intWidth, lblSwimLabel.Width);
            intWidth = Math.Max(intWidth, lblFlyLabel.Width);

            lblCMPhysical.Left = lblPhysicalCMLabel.Left + intWidth + 6;
            lblCMStun.Left = lblCMPhysical.Left;
            lblINI.Left = lblCMPhysical.Left;
            lblMatrixINI.Left = lblCMPhysical.Left;
            lblAstralINI.Left = lblCMPhysical.Left;
            lblRiggingINI.Left = lblCMPhysical.Left;
            lblMatrixINICold.Left = lblCMPhysical.Left;
            lblMatrixINIHot.Left = lblCMPhysical.Left;
            lblArmor.Left = lblCMPhysical.Left;
            lblESSMax.Left = lblCMPhysical.Left;
            lblRemainingNuyen.Left = lblCMPhysical.Left;
            lblCareerKarma.Left = lblCMPhysical.Left;
            lblCareerNuyen.Left = lblCMPhysical.Left;
            lblComposure.Left = lblCMPhysical.Left;
            lblJudgeIntentions.Left = lblCMPhysical.Left;
            lblLiftCarry.Left = lblCMPhysical.Left;
            lblMemory.Left = lblCMPhysical.Left;
            lblMovement.Left = lblCMPhysical.Left;
            lblSwim.Left = lblCMPhysical.Left;
            lblFly.Left = lblCMPhysical.Left;

            // Condition Monitor tab.
            intWidth = Math.Max(lblCMPenaltyLabel.Width, lblCMArmorLabel.Width);
            intWidth = Math.Max(intWidth, lblCMDamageResistancePoolLabel.Width);

            lblCMPenalty.Left = lblCMPenaltyLabel.Left + intWidth + 6;
            lblCMArmor.Left = lblCMPenalty.Left;
            lblCMDamageResistancePool.Left = lblCMPenalty.Left;

            // Relationships tab
            cmdContactsExpansionToggle.Left = cmdAddContact.Right + 6;
            cmdSwapContactOrder.Left = cmdContactsExpansionToggle.Right + 6;
        }



        /// <summary>
        /// Recheck all mods to see if Sensor has changed. 
        /// </summary>
        /// <param name="objVehicle">Vehicle to modify.</param>
        private void UpdateSensor(Vehicle objVehicle)
        {
            foreach (Gear objGear in objVehicle.Gear)
            {
                if (objGear.Category == "Sensors" && objGear.Name == "Sensor Array" && objGear.IncludedInParent)
                {
                    // Update the name of the item in the TreeView.
                    TreeNode objNode = treVehicles.FindNode(objGear.InternalId);
                    objNode.Text = objGear.DisplayName(GlobalOptions.Language);
                }
            }
        }


        /// <summary>
        /// Change the size of a Vehicle's Sensor -- Obsolete code
        /// </summary>
        /// <param name="objVehicle">Vehicle to modify.</param>
        /// <param name="blnIncrease">True if the Sensor should increase in size, False if it should decrease.</param>
        private void ChangeVehicleSensor(Vehicle objVehicle, bool blnIncrease)
        {
            XmlDocument objXmlDocument = XmlManager.Load("gear.xml");
            XmlNode objNewNode;

            Gear objSensor = null;
            Gear objNewSensor = new Gear(CharacterObject);

            TreeNode objTreeNode = new TreeNode();
            List<Weapon> lstWeapons = new List<Weapon>();
            List<TreeNode> lstWeaponNodes = new List<TreeNode>();
            foreach (Gear objCurrentGear in objVehicle.Gear)
            {
                if (objCurrentGear.Name == "Microdrone Sensor")
                {
                    if (blnIncrease)
                    {
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Minidrone Sensor\" and category = \"Sensors\"]");
                        objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                        objSensor = objCurrentGear;
                    }
                    break;
                }
                else if (objCurrentGear.Name == "Minidrone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Small Drone Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Microdrone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    break;
                }
                else if (objCurrentGear.Name == "Small Drone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Medium Drone Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Minidrone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    break;
                }
                else if (objCurrentGear.Name == "Medium Drone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Large Drone Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Small Drone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    break;
                }
                else if (objCurrentGear.Name == "Large Drone Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Vehicle Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Medium Drone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    break;
                }
                else if (objCurrentGear.Name == "Vehicle Sensor")
                {
                    if (blnIncrease)
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Extra-Large Vehicle Sensor\" and category = \"Sensors\"]");
                    else
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Large Drone Sensor\" and category = \"Sensors\"]");
                    objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                    objSensor = objCurrentGear;
                    break;
                }
                else if (objCurrentGear.Name == "Extra-Large Vehicle Sensor")
                {
                    if (!blnIncrease)
                    {
                        objNewNode = objXmlDocument.SelectSingleNode("/chummer/gears/gear[name = \"Vehicle Sensor\" and category = \"Sensors\"]");
                        objNewSensor.Create(objNewNode, objTreeNode, 0, lstWeapons, lstWeaponNodes);
                        objSensor = objCurrentGear;
                    }
                    break;
                }
            }

            // If the item was found, update the Vehicle Sensor information.
            if (objSensor != null)
            {
                objSensor.Name = objNewSensor.Name;
                objSensor.Rating = objNewSensor.Rating;
                objSensor.Capacity = objNewSensor.Capacity;
                objSensor.DeviceRating = objNewSensor.DeviceRating;
                objSensor.Avail = objNewSensor.Avail;
                objSensor.Cost = objNewSensor.Cost;
                objSensor.Source = objNewSensor.Source;
                objSensor.Page = objNewSensor.Page;

                // Update the name of the item in the TreeView.
                TreeNode objNode = treVehicles.FindNode(objSensor.InternalId);
                objNode.Text = objSensor.DisplayNameShort(GlobalOptions.Language);
            }
        }

        /// <summary>
        /// Update the Reputation fields.
        /// </summary>
        private void UpdateReputation()
        {
            lblStreetCredTotal.Text = " + " + CharacterObject.CalculatedStreetCred.ToString() + " = " + CharacterObject.TotalStreetCred.ToString();
            lblNotorietyTotal.Text = " + " + CharacterObject.CalculatedNotoriety.ToString() + " = " + CharacterObject.TotalNotoriety.ToString();
            lblPublicAwareTotal.Text = " + " + CharacterObject.CalculatedPublicAwareness.ToString();
            int intTotalPublicAwareness = CharacterObject.TotalPublicAwareness + CharacterObject.CalculatedPublicAwareness;
            if (CharacterObject.Erased && intTotalPublicAwareness > 1)
            {
                string strErasedString = CharacterObject.Qualities.FirstOrDefault(x => x.Name == "Erased")?.DisplayNameShort(GlobalOptions.Language);
                if (string.IsNullOrEmpty(strErasedString))
                {
                    XmlNode xmlErasedQuality = XmlManager.Load("qualities.xml").SelectSingleNode("chummer/qualities/quality[name = \"Erased\"]");
                    if (xmlErasedQuality != null)
                    {
                        strErasedString = xmlErasedQuality["translate"]?.InnerText ?? xmlErasedQuality["name"]?.InnerText ?? string.Empty;
                    }
                }
                if (!string.IsNullOrEmpty(strErasedString))
                    strErasedString = " (" + strErasedString + ")";
                lblPublicAwareTotal.Text += " - " + (intTotalPublicAwareness - 1).ToString() + strErasedString;
                intTotalPublicAwareness = 1;
            }
            lblPublicAwareTotal.Text += " = " + intTotalPublicAwareness.ToString();
            cmdBurnStreetCred.Left = lblStreetCredTotal.Left + lblStreetCredTotal.Width + 6;
            cmdBurnStreetCred.Enabled = CharacterObject.TotalStreetCred >= 2;

            tipTooltip.SetToolTip(lblStreetCredTotal, CharacterObject.StreetCredTooltip);
            tipTooltip.SetToolTip(lblNotorietyTotal, CharacterObject.NotorietyTooltip);
            tipTooltip.SetToolTip(lblPublicAwareTotal, CharacterObject.PublicAwarenessTooltip);
        }

        /// <summary>
        /// Copy the Improvements from a piece of Armor on one character to another.
        /// </summary>
        /// <param name="objSource">Source character.</param>
        /// <param name="objDestination">Destination character.</param>
        /// <param name="objArmor">Armor to copy.</param>
        private void CopyArmorImprovements(Character objSource, Character objDestination, Armor objArmor)
        {
            foreach (Improvement objImproevment in objSource.Improvements)
            {
                if (objImproevment.SourceName == objArmor.InternalId)
                {
                    objDestination.Improvements.Add(objImproevment);
                }
            }
            // Look through any Armor Mods and add the Improvements as well.
            foreach (ArmorMod objMod in objArmor.ArmorMods)
            {
                foreach (Improvement objImproevment in objSource.Improvements)
                {
                    if (objImproevment.SourceName == objMod.InternalId)
                    {
                        objDestination.Improvements.Add(objImproevment);
                    }
                }
                // Look through any children and add their Improvements as well.
                foreach (Gear objChild in objMod.Gear)
                    CopyGearImprovements(objSource, objDestination, objChild);
            }
            // Look through any children and add their Improvements as well.
            foreach (Gear objChild in objArmor.Gear)
                CopyGearImprovements(objSource, objDestination, objChild);
        }

        /// <summary>
        /// Copy the Improvements from a piece of Gear on one character to another.
        /// </summary>
        /// <param name="objSource">Source character.</param>
        /// <param name="objDestination">Destination character.</param>
        /// <param name="objGear">Gear to copy.</param>
        private void CopyGearImprovements(Character objSource, Character objDestination, Gear objGear)
        {
            foreach (Improvement objImproevment in objSource.Improvements)
            {
                if (objImproevment.SourceName == objGear.InternalId)
                {
                    objDestination.Improvements.Add(objImproevment);
                }
            }
            // Look through any children and add their Improvements as well.
            foreach (Gear objChild in objGear.Children)
                CopyGearImprovements(objSource, objDestination, objChild);
        }

        /// <summary>
        /// Copy the Improvements from a piece of Cyberware on one character to another.
        /// </summary>
        /// <param name="objSource">Source character.</param>
        /// <param name="objDestination">Destination character.</param>
        /// <param name="objCyberware">Cyberware to copy.</param>
        private void CopyCyberwareImprovements(Character objSource, Character objDestination, Cyberware objCyberware)
        {
            foreach (Improvement objImproevment in objSource.Improvements)
            {
                if (objImproevment.SourceName == objCyberware.InternalId)
                {
                    objDestination.Improvements.Add(objImproevment);
                }
            }
            // Look through any children and add their Improvements as well.
            foreach (Cyberware objChild in objCyberware.Children)
                CopyCyberwareImprovements(objSource, objDestination, objChild);
        }

        /// <summary>
        /// Recursive method to add a Gear's Improvements to a character when moving them from a Vehicle.
        /// </summary>
        /// <param name="objGear">Gear to create Improvements for.
        /// </param>
        private void AddGearImprovements(Gear objGear)
        {
            string strForce = string.Empty;
            if (objGear.Bonus != null || (objGear.WirelessOn && objGear.WirelessBonus != null))
            {
                if (!string.IsNullOrEmpty(objGear.Extra))
                    strForce = objGear.Extra;
                ImprovementManager.ForcedValue = strForce;
                if (objGear.Bonus != null)
                    ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.Bonus, true, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
                if (objGear.WirelessOn && objGear.WirelessBonus != null)
                    ImprovementManager.CreateImprovements(CharacterObject, Improvement.ImprovementSource.Gear, objGear.InternalId, objGear.WirelessBonus, true, objGear.Rating, objGear.DisplayNameShort(GlobalOptions.Language));
            }
            foreach (Gear objChild in objGear.Children)
                AddGearImprovements(objChild);
        }

        /// <summary>
        /// Enable/Disable the Paste Menu and ToolStrip items as appropriate.
        /// </summary>
        private void RefreshPasteStatus()
        {
        }

        /// <summary>
        /// Refresh the information for the currently selected Complex Form.
        /// </summary>
        private void RefreshSelectedComplexForm()
        {
            if (_blnSkipRefresh)
                return;

            if (treComplexForms.SelectedNode != null)
            {
                if (treComplexForms.SelectedNode.Level == 1)
                {
                    // Locate the Program that is selected in the tree.
                    ComplexForm objProgram = CharacterObject.ComplexForms.FindById(treComplexForms.SelectedNode.Tag.ToString());
                    string strDuration = objProgram.Duration;
                    string strTarget = objProgram.Target;
                    string strFV = objProgram.FV;

                    lblDuration.Text = strDuration;
                    lblTarget.Text = strTarget;
                    lblFV.Text = strFV;

                    string strBook = CommonFunctions.LanguageBookShort(objProgram.Source, GlobalOptions.Language);
                    string strPage = objProgram.Page(GlobalOptions.Language);
                    lblComplexFormSource.Text = strBook + " " + strPage;
                    tipTooltip.SetToolTip(lblComplexFormSource, CommonFunctions.LanguageBookLong(objProgram.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                }
            }
        }

        /// <summary>
        /// Populate the TreeView that contains all of the character's Gear.
        /// </summary>
        private void PopulateGearList()
        {
            // Populate Gear.
            // Create the root node.
            treGear.Nodes.Clear();
            TreeNode objRoot = new TreeNode
            {
                Tag = "Node_SelectedGear",
                Text = LanguageManager.GetString("Node_SelectedGear", GlobalOptions.Language)
            };
            treGear.Nodes.Add(objRoot);

            // Start by populating Locations.
            foreach (string strLocation in CharacterObject.GearLocations)
            {
                TreeNode objLocation = new TreeNode
                {
                    Tag = strLocation,
                    Text = strLocation,
                    ContextMenuStrip = cmsGearLocation
                };
                treGear.Nodes.Add(objLocation);
            }

            // Add Locations for the character's bits that can hold Commlinks.
            /* Populate the list of Commlink Locations.
            foreach (Cyberware objCyberware in _objCharacter.Cyberware)
            {
                if (objCyberware.AllowGear != null)
                {
                    if (objCyberware.AllowGear["gearcategory"] != null)
                    {
                        if (objCyberware.AllowGear["gearcategory"].InnerText == "Commlinks" || objCyberware.AllowGear["gearcategory"].InnerText == "Cyberdecks")
                        {
                            TreeNode objNode = new TreeNode();
                            objNode.Tag = objCyberware.InternalId.ToString();
                            objNode.Text = objCyberware.DisplayCategory + ": " + objCyberware.DisplayName;
                            bool blnFound = false;
                            foreach (string objLocation in _objCharacter.Locations)
                            {
                                if (objLocation == objNode.Text)
                                {
                                    blnFound = true;
                                }
                            }
                            if (!blnFound)
                            {
                                treGear.Nodes.Add(objNode);
                                _objCharacter.Locations.Add(objNode.Text);
                            }
                        }
                    }
                }
                foreach (Cyberware objPlugin in objCyberware.Children)
                {
                    if (objPlugin.AllowGear != null)
                    {
                        if (objPlugin.AllowGear["gearcategory"] != null)
                        {
                            TreeNode objNode = new TreeNode();
                            objNode.Tag = objPlugin.InternalId.ToString();
                            objNode.Text = objPlugin.DisplayCategory + ": " + objPlugin.DisplayName;
                            bool blnFound = false;
                            foreach (string objLocation in _objCharacter.Locations)
                            {
                                if (objLocation == objNode.Text)
                                {
                                    blnFound = true;
                                }
                            }
                            if (!blnFound)
                            {
                                treGear.Nodes.Add(objNode);
                                _objCharacter.Locations.Add(objNode.Text);
                            }
                        }
                    }
                }
            }
            foreach (Weapon objWeapon in _objCharacter.Weapons)
            {
                foreach (WeaponAccessory objAccessory in objWeapon.WeaponAccessories)
                {
                    if (objAccessory.AllowGear != null)
                    {
                        if (objAccessory.AllowGear["gearcategory"] != null)
                        {
                            if (objAccessory.AllowGear["gearcategory"].InnerText == "Commlinks" || objAccessory.AllowGear["gearcategory"].InnerText == "Cyberdecks")
                            {
                                TreeNode objNode = new TreeNode();
                                objNode.Tag = objAccessory.InternalId.ToString();
                                objNode.Text = objWeapon.DisplayName + ": " + objAccessory.DisplayName;
                                bool blnFound = false;
                                foreach (string objLocation in _objCharacter.Locations)
                                {
                                    if (objLocation == objNode.Text)
                                    {
                                        blnFound = true;
                                    }
                                }
                                if (!blnFound)
                                {
                                    _objCharacter.Locations.Add(objNode.Text);
                                    treGear.Nodes.Add(objNode);
                                }
                            }
                        }
                    }
                }
                foreach (Weapon objUnderbarrel in objWeapon.Children)
                {
                    foreach (WeaponAccessory objUnderbarrelAccessory in objUnderbarrel.WeaponAccessories)
                    {
                        if (objUnderbarrelAccessory.AllowGear != null)
                        {
                            if (objUnderbarrelAccessory.AllowGear["gearcategory"] != null)
                            {
                                if (objUnderbarrelAccessory.AllowGear["gearcategory"].InnerText == "Commlinks" || objUnderbarrelAccessory.AllowGear["gearcategory"].InnerText == "Cyberdecks")
                                {
                                    TreeNode objNode = new TreeNode();
                                    objNode.Tag = objUnderbarrelAccessory.InternalId.ToString();
                                    objNode.Text = objUnderbarrel.DisplayName + ": " + objUnderbarrelAccessory.DisplayName;
                                    bool blnFound = false;
                                    foreach (string objLocation in _objCharacter.Locations)
                                    {
                                        if (objLocation == objNode.Text)
                                        {
                                            blnFound = true;
                                        }
                                    }
                                    if (!blnFound)
                                    {
                                        _objCharacter.Locations.Add(objNode.Text);
                                        treGear.Nodes.Add(objNode);
                                    }
                                }
                            }
                        }
                    }
                }
            }*/

            foreach (Gear objGear in CharacterObject.Gear)
            {
                if (!chkCommlinks.Checked || objGear.IsCommlink)
                {
                    TreeNode objNode = new TreeNode
                    {
                        Text = objGear.DisplayName(GlobalOptions.Language),
                        Tag = objGear.InternalId,
                        ToolTipText = objGear.Notes.WordWrap(100),
                        ContextMenuStrip = cmsGear
                    };
                    if (!string.IsNullOrEmpty(objGear.Notes))
                        objNode.ForeColor = Color.SaddleBrown;
                    else if (objGear.IncludedInParent)
                        objNode.ForeColor = SystemColors.GrayText;

                    objGear.BuildGearTree(objNode, cmsGear);

                    TreeNode objParent = treGear.Nodes[0];
                    if (!string.IsNullOrEmpty(objGear.Location))
                    {
                        foreach (TreeNode objFind in treGear.Nodes)
                        {
                            if (objFind.Text == objGear.Location)
                            {
                                objParent = objFind;
                                break;
                            }
                        }
                    }
                    objParent.Nodes.Add(objNode);
                    objParent.Expand();
                }
            }
        }

        /// <summary>
        /// Populate the TreeView that contains all of the character's Cyberware and Bioware.
        /// </summary>
        private void PopulateCyberware()
        {
            treCyberware.Nodes[0].Nodes.Clear();
            treCyberware.Nodes[1].Nodes.Clear();
            treCyberware.Nodes[2].Nodes.Clear();
            Guid sid = Guid.Parse("b57eadaa-7c3b-4b80-8d79-cbbd922c1196");
            foreach (Cyberware objCyberware in CharacterObject.Cyberware)
            {
                if (objCyberware.SourceID == sid && treCyberware.FindNode(objCyberware.InternalId) == null)
                {
                    TreeNode nHole = new TreeNode(objCyberware.DisplayName(GlobalOptions.Language))
                    {
                        Tag = objCyberware.InternalId
                    };
                    treCyberware.Nodes.Add(nHole);
                }
                // Populate Cyberware.
                else if (objCyberware.SourceType == Improvement.ImprovementSource.Cyberware)
                {
                    CommonFunctions.CreateCyberwareTreeNode(objCyberware, treCyberware.Nodes[objCyberware.IsModularCurrentlyEquipped ? 0 : 2], cmsCyberware, cmsCyberwareGear);
                }
                // Populate Bioware.
                else if (objCyberware.SourceType == Improvement.ImprovementSource.Bioware)
                {
                    CommonFunctions.CreateCyberwareTreeNode(objCyberware, treCyberware.Nodes[1], cmsCyberware, cmsCyberwareGear);
                }
            }
        }

        /// <summary>
        /// Create Cyberware from a Cyberware Suite.
        /// </summary>
        /// <param name="objXmlNode">XmlNode for the Cyberware to add.</param>
        /// <param name="objGrade">CyberwareGrade to add the item as.</param>
        /// <param name="intRating">Rating of the Cyberware.</param>
        /// <param name="blnAddToCharacter">Whether or not the Cyberware should be added directly to the character.</param>
        /// <param name="objParent">Parent Cyberware if the item is not being added directly to the character.</param>
        private TreeNode CreateSuiteCyberware(XmlNode objXmlItem, XmlNode objXmlNode, Grade objGrade, int intRating, bool blnAddToCharacter, Improvement.ImprovementSource objSource, string strType, Cyberware objParent = null)
        {
            // Create the Cyberware object.
            List<Weapon> objWeapons = new List<Weapon>();
            List<TreeNode> objWeaponNodes = new List<TreeNode>();
            List<Vehicle> objVehicles = new List<Vehicle>();
            List<TreeNode> objVehicleNodes = new List<TreeNode>();
            TreeNode objNode = new TreeNode();
            Cyberware objCyberware = new Cyberware(CharacterObject);
            string strForced = string.Empty;

            if (objXmlItem["name"].Attributes["select"] != null)
                strForced = objXmlItem["name"].Attributes["select"].InnerText;

            objCyberware.Create(objXmlNode, CharacterObject, objGrade, objSource, intRating, objNode, objWeapons, objWeaponNodes, objVehicles, objVehicleNodes, true, true, strForced);
            objCyberware.Suite = true;

            foreach (Weapon objWeapon in objWeapons)
                CharacterObject.Weapons.Add(objWeapon);

            foreach (TreeNode objWeaponNode in objWeaponNodes)
            {
                treWeapons.Nodes[0].Nodes.Add(objWeaponNode);
                treWeapons.Nodes[0].Expand();
            }

            foreach (Vehicle objVehicle in objVehicles)
                CharacterObject.Vehicles.Add(objVehicle);

            foreach (TreeNode objVehicleNode in objVehicleNodes)
            {
                treVehicles.Nodes[0].Nodes.Add(objVehicleNode);
                treVehicles.Nodes[0].Expand();
            }

            if (blnAddToCharacter)
                CharacterObject.Cyberware.Add(objCyberware);
            else
                objParent.Children.Add(objCyberware);

            foreach (XmlNode objXmlChild in objXmlItem.SelectNodes(strType + "s/" + strType))
            {
                XmlDocument objXmlDocument = XmlManager.Load(strType + ".xml");
                XmlNode objXmlChildCyberware = objXmlDocument.SelectSingleNode("/chummer/" + strType + "s/" + strType + "[name = \"" + objXmlChild["name"].InnerText + "\"]");
                int intChildRating = 0;

                if (objXmlChild["rating"] != null)
                    intChildRating = Convert.ToInt32(objXmlChild["rating"].InnerText);

                TreeNode objChildNode = CreateSuiteCyberware(objXmlChild, objXmlChildCyberware, objGrade, intChildRating, false, objSource, strType, objCyberware);
                objNode.Nodes.Add(objChildNode);
                objNode.Expand();
            }

            return objNode;
        }

        private void AddCyberwareSuite(Improvement.ImprovementSource objSource)
        {
            frmSelectCyberwareSuite frmPickCyberwareSuite = new frmSelectCyberwareSuite(objSource, CharacterObject);
            frmPickCyberwareSuite.ShowDialog(this);

            if (frmPickCyberwareSuite.DialogResult == DialogResult.Cancel)
                return;

            decimal decCost = frmPickCyberwareSuite.TotalCost;
            if (decCost > CharacterObject.Nuyen)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughNuyen", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughNuyen", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                // Create the Expense Log Entry.
                ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
                objExpense.Create(decCost * -1, LanguageManager.GetString("String_ExpensePurchaseCyberwareSuite", GlobalOptions.Language) + " " + frmPickCyberwareSuite.SelectedSuite, ExpenseType.Nuyen, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objExpense);
                CharacterObject.Nuyen -= decCost;
            }

            string strType = string.Empty;
            int intParentNode = 0;
            if (objSource == Improvement.ImprovementSource.Cyberware)
            {
                strType = "cyberware";
                intParentNode = 0;
            }
            else
            {
                strType = "bioware";
                intParentNode = 1;
            }
            XmlDocument objXmlDocument = XmlManager.Load(strType + ".xml");

            XmlNode objXmlSuite = objXmlDocument.SelectSingleNode("/chummer/suites/suite[name = \"" + frmPickCyberwareSuite.SelectedSuite + "\"]");
            Grade objGrade = Cyberware.ConvertToCyberwareGrade(objXmlSuite["grade"].InnerText, objSource, CharacterObject);

            // Run through each of the items in the Suite and add them to the character.
            foreach (XmlNode objXmlItem in objXmlSuite.SelectNodes(strType + "s/" + strType))
            {
                XmlNode objXmlCyberware = objXmlDocument.SelectSingleNode("/chummer/" + strType + "s/" + strType + "[name = \"" + objXmlItem["name"].InnerText + "\"]");
                int intRating = 0;

                if (objXmlItem["rating"] != null)
                    intRating = Convert.ToInt32(objXmlItem["rating"].InnerText);

                TreeNode objNode = CreateSuiteCyberware(objXmlItem, objXmlCyberware, objGrade, intRating, true, objSource, strType, null);

                objNode.Expand();
                treCyberware.Nodes[intParentNode].Nodes.Add(objNode);
                treCyberware.Nodes[intParentNode].Expand();
            }

            RefreshSelectedCyberware();
            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }
#endregion

        private void cmdAddLimitModifier_Click(object sender, EventArgs e)
        {
            if (treLimit.SelectedNode != null)
            {
                // Select the Limit node if we're currently on a child.
                if (treLimit.SelectedNode.Level > 1)
                    treLimit.SelectedNode = treLimit.SelectedNode.Parent;

                frmSelectLimitModifier frmPickLimitModifier = new frmSelectLimitModifier();
                frmPickLimitModifier.ShowDialog(this);

                if (frmPickLimitModifier.DialogResult == DialogResult.Cancel)
                    return;

                // Create the new limit modifier.
                TreeNode objNode = new TreeNode();
                LimitModifier objLimitModifier = new LimitModifier(CharacterObject);
                string strLimit = treLimit.SelectedNode.Text;
                string strCondition = frmPickLimitModifier.SelectedCondition;
                objLimitModifier.Create(frmPickLimitModifier.SelectedName, frmPickLimitModifier.SelectedBonus, strLimit, strCondition, objNode);
                if (objLimitModifier.InternalId == Guid.Empty.ToString())
                    return;

                objNode.ContextMenuStrip = cmsLimitModifier;
                CharacterObject.LimitModifiers.Add(objLimitModifier);

                treLimit.SelectedNode.Nodes.Add(objNode);
                treLimit.SelectedNode.Expand();

                IsDirty = true;
            }
            else
            {
                MessageBox.Show(LanguageManager.GetString("Message_SelectLimitModifier", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_SelectLimitModifier", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void cmdDeleteLimitModifier_Click(object sender, EventArgs e)
        {
            if (treLimit.SelectedNode != null)
            {
                if (treLimit.SelectedNode.Level == 0)
                    return;

                LimitModifier objLimit = CharacterObject.LimitModifiers.FindById(treLimit.SelectedNode.Tag.ToString());
                if (objLimit == null)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_CannotDeleteLimitModifier", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_CannotDeleteLimitModifier", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteLimitModifier", GlobalOptions.Language)))
                    return;

                string strLimit = treLimit.SelectedNode.Parent.Text;

                // Delete the selected Martial Art.
                LimitModifier objLimitModifier = CharacterObject.LimitModifiers.FindById(treLimit.SelectedNode.Tag.ToString());

                CharacterObject.LimitModifiers.Remove(objLimitModifier);
                treLimit.SelectedNode.Remove();

                IsDirty = true;
            }
        }

        private void tssLimitModifierNotes_Click(object sender, EventArgs e)
        {
            if (treLimit.SelectedNode != null)
            {
                LimitModifier obLimitModifier = CharacterObject.LimitModifiers.FindById(treLimit.SelectedNode.Tag.ToString());
                if (obLimitModifier != null)
                {
                    string strOldValue = obLimitModifier.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        obLimitModifier.Notes = frmItemNotes.Notes;
                        if (obLimitModifier.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(obLimitModifier.Notes))
                        treLimit.SelectedNode.ForeColor = Color.SaddleBrown;
                    else
                        treLimit.SelectedNode.ForeColor = SystemColors.WindowText;
                    treLimit.SelectedNode.ToolTipText = obLimitModifier.Notes.WordWrap(100);
                }
                else
                {
                    // the limit modifier has a source
                    foreach (Improvement objImprovement in CharacterObject.Improvements)
                    {
                        if (objImprovement.ImproveType == Improvement.ImprovementType.LimitModifier && objImprovement.SourceName == treLimit.SelectedNode.Tag.ToString())
                        {
                            string strOldValue = objImprovement.Notes;
                            frmNotes frmItemNotes = new frmNotes
                            {
                                Notes = strOldValue
                            };
                            frmItemNotes.ShowDialog(this);

                            if (frmItemNotes.DialogResult == DialogResult.OK)
                            {
                                objImprovement.Notes = frmItemNotes.Notes;
                                if (objImprovement.Notes != strOldValue)
                                {
                                    IsDirty = true;
                                }
                            }

                            if (!string.IsNullOrEmpty(objImprovement.Notes))
                                treLimit.SelectedNode.ForeColor = Color.SaddleBrown;
                            else
                                treLimit.SelectedNode.ForeColor = SystemColors.WindowText;
                            treLimit.SelectedNode.ToolTipText = objImprovement.Notes.WordWrap(100);
                        }
                    }
                }
            }
        }

        private void cmdIncreasePowerPoints_Click(object sender, EventArgs e)
        {
            // Make sure the character has enough Karma to improve the CharacterAttribute.
            int intKarmaCost = 5;
            if (intKarmaCost > CharacterObject.Karma)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (CharacterObject.MysticAdeptPowerPoints + 1 > CharacterObject.MAG.TotalValue)
            {
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughMagic", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughMagic", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_PowerPoint", GlobalOptions.Language)).Replace("{1}", (intKarmaCost).ToString())))
                return;

            // Create the Karma expense.
            ExpenseLogEntry objExpense = new ExpenseLogEntry(CharacterObject);
            objExpense.Create(intKarmaCost * -1, LanguageManager.GetString("String_PowerPoint", GlobalOptions.Language), ExpenseType.Karma, DateTime.Now);
            CharacterObject.ExpenseEntries.Add(objExpense);
            CharacterObject.Karma -= intKarmaCost;

            ExpenseUndo objUndo = new ExpenseUndo();
            objUndo.CreateKarma(KarmaExpenseType.AddPowerPoint, string.Empty);
            objExpense.Undo = objUndo;

            CharacterObject.MysticAdeptPowerPoints += 1;

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsMetamagicAddMetamagic_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode.Level != 0)
                return;

            // Character can only have a number of Metamagics/Echoes equal to their Initiate Grade. Additional ones cost Karma.
            bool blnPayWithKarma = false;
            string strType = string.Empty;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            // Evaluate each object 
            foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
            {
                if (objMetamagic.Grade == intGrade)
                {
                    blnPayWithKarma = true;
                    break;
                }
            }
            if (!blnPayWithKarma)
            {
                foreach (Spell objSpell in CharacterObject.Spells)
                {
                    if (objSpell.Grade == intGrade)
                    {
                        blnPayWithKarma = true;
                        break;
                    }
                }
            }

            // Additional Metamagics beyond the standard 1 per Grade cost additional Karma, so ask if the user wants to spend the additional Karma.
            if (blnPayWithKarma && CharacterObject.Karma < CharacterObjectOptions.KarmaMetamagic)
            {
                // Make sure the Karma expense would not put them over the limit.
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (CharacterObject.MAGEnabled && blnPayWithKarma)
            {
                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_Metamagic", GlobalOptions.Language)).Replace("{1}", CharacterObjectOptions.KarmaMetamagic.ToString())))
                    return;
            }
            else if (blnPayWithKarma)
            {
                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_Echo", GlobalOptions.Language)).Replace("{1}", CharacterObjectOptions.KarmaMetamagic.ToString())))
                    return;
            }

            frmSelectMetamagic frmPickMetamagic = new frmSelectMetamagic(CharacterObject, CharacterObject.RESEnabled ? frmSelectMetamagic.Mode.Echo : frmSelectMetamagic.Mode.Metamagic);
            frmPickMetamagic.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickMetamagic.DialogResult == DialogResult.Cancel)
            {
                frmPickMetamagic.Dispose();
                return;
            }

            string strMetamagic = frmPickMetamagic.SelectedMetamagic;

            XmlDocument objXmlDocument = null;
            XmlNode objXmlMetamagic;

            TreeNode objNode = new TreeNode();
            Metamagic objNewMetamagic = new Metamagic(CharacterObject);
            Improvement.ImprovementSource objSource;

            if (CharacterObject.MAGEnabled)
            {
                objXmlDocument = XmlManager.Load("metamagic.xml");
                objXmlMetamagic = objXmlDocument.SelectSingleNode("/chummer/metamagics/metamagic[name = \"" + strMetamagic + "\"]");
                objSource = Improvement.ImprovementSource.Metamagic;
            }
            else
            {
                objXmlDocument = XmlManager.Load("echoes.xml");
                objXmlMetamagic = objXmlDocument.SelectSingleNode("/chummer/echoes/echo[name = \"" + strMetamagic + "\"]");
                objSource = Improvement.ImprovementSource.Echo;
            }

            objNewMetamagic.Create(objXmlMetamagic, objNode, objSource);
            objNewMetamagic.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objNewMetamagic.InternalId == Guid.Empty.ToString())
            {
                frmPickMetamagic.Dispose();
                return;
            }

            CharacterObject.Metamagics.Add(objNewMetamagic);

            if (blnPayWithKarma)
            {
                // Create the Expense Log Entry.
                ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(CharacterObjectOptions.KarmaMetamagic * -1, strType + " " + frmPickMetamagic.SelectedMetamagic, ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objEntry);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.AddMetamagic, objNewMetamagic.InternalId);
                objEntry.Undo = objUndo;

                // Adjust the character's Karma total.
                CharacterObject.Karma -= CharacterObjectOptions.KarmaMetamagic;
            }

            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            IsCharacterUpdateRequested = true;

            IsDirty = true;

            frmPickMetamagic.Dispose();
        }

        private void tsMetamagicAddArt_Click(object sender, EventArgs e)
        {
            // Character can only have a number of Metamagics/Echoes equal to their Initiate Grade. Additional ones cost Karma.
            bool blnPayWithKarma = false;
            string strType = string.Empty;

            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            if (blnPayWithKarma && CharacterObject.Karma < CharacterObjectOptions.KarmaMetamagic)
            {
                // Make sure the Karma expense would not put them over the limit.
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            frmSelectArt frmPickArt = new frmSelectArt(CharacterObject, frmSelectArt.Mode.Art);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strArt = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("metamagic.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/arts/art[name = \"" + strArt + "\"]");

            TreeNode objNode = new TreeNode();
            Art objArt = new Art(CharacterObject);
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Metamagic;

            objArt.Create(objXmlArt, objNode, objSource);
            objArt.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objArt.InternalId == Guid.Empty.ToString())
                return;

            CharacterObject.Arts.Add(objArt);

            if (blnPayWithKarma)
            {
                // Create the Expense Log Entry.
                ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(CharacterObjectOptions.KarmaMetamagic * -1, strType + " " + frmPickArt.SelectedItem, ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objEntry);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.AddMetamagic, objArt.InternalId);
                objEntry.Undo = objUndo;

                // Adjust the character's Karma total.
                CharacterObject.Karma -= CharacterObjectOptions.KarmaMetamagic;
            }

            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsMetamagicAddEnchantment_Click(object sender, EventArgs e)
        {
            // Character can only have a number of Metamagics/Echoes equal to their Initiate Grade. Additional ones cost Karma.
            bool blnPayWithKarma = false;
            string strType = string.Empty;

            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            // Evaluate each object 
            foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
            {
                if (objMetamagic.Grade == intGrade)
                    blnPayWithKarma = true;
            }

            foreach (Spell objSpell in CharacterObject.Spells)
            {
                if (objSpell.Grade == intGrade)
                    blnPayWithKarma = true;
            }

            int intSpellKarmaCost = CharacterObject.SpellKarmaCost;
            if (blnPayWithKarma && CharacterObject.Karma < intSpellKarmaCost)
            {
                // Make sure the Karma expense would not put them over the limit.
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (blnPayWithKarma)
                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_Enchantment", GlobalOptions.Language)).Replace("{1}", intSpellKarmaCost.ToString())))
                    return;

            frmSelectArt frmPickArt = new frmSelectArt(CharacterObject, frmSelectArt.Mode.Enchantment);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strEnchantment = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("spells.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/spells/spell[name = \"" + strEnchantment + "\"]");

            TreeNode objNode = new TreeNode();
            Spell objNewSpell = new Spell(CharacterObject);
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Initiation;

            objNewSpell.Create(objXmlArt, objNode, string.Empty, false, false, false, objSource);
            objNewSpell.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objNewSpell.InternalId == Guid.Empty.ToString())
                return;

            CharacterObject.Spells.Add(objNewSpell);

            if (blnPayWithKarma)
            {
                // Create the Expense Log Entry.
                ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(-intSpellKarmaCost, strType + " " + frmPickArt.SelectedItem, ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objEntry);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.AddSpell, objNewSpell.InternalId);
                objEntry.Undo = objUndo;

                // Adjust the character's Karma total.
                CharacterObject.Karma -= intSpellKarmaCost;
            }

            TreeNode objSpellNode = new TreeNode
            {
                Text = objNode.Text,
                Tag = objNode.Tag
            };

            string strCategory = string.Empty;
            if (objNewSpell.Category == "Rituals")
                strCategory = LanguageManager.GetString("Label_Ritual", GlobalOptions.Language) + " ";
            if (objNewSpell.Category == "Enchantments")
                strCategory = LanguageManager.GetString("Label_Enchantment", GlobalOptions.Language) + " ";
            objNode.Text = strCategory + objNode.Text;
            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            treSpells.Nodes[6].Nodes.Add(objSpellNode);
            treSpells.Nodes[6].Expand();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsMetamagicAddRitual_Click(object sender, EventArgs e)
        {
            // Character can only have a number of Metamagics/Echoes equal to their Initiate Grade. Additional ones cost Karma.
            bool blnPayWithKarma = false;
            string strType = string.Empty;

            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            // Evaluate each object 
            foreach (Metamagic objMetamagic in CharacterObject.Metamagics)
            {
                if (objMetamagic.Grade == intGrade)
                    blnPayWithKarma = true;
            }

            foreach (Spell objSpell in CharacterObject.Spells)
            {
                if (objSpell.Grade == intGrade)
                    blnPayWithKarma = true;
            }

            int intSpellKarmaCost = CharacterObject.SpellKarmaCost;
            if (blnPayWithKarma && CharacterObject.Karma < intSpellKarmaCost)
            {
                // Make sure the Karma expense would not put them over the limit.
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (blnPayWithKarma)
                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_Ritual", GlobalOptions.Language)).Replace("{1}", intSpellKarmaCost.ToString())))
                    return;

            frmSelectArt frmPickArt = new frmSelectArt(CharacterObject, frmSelectArt.Mode.Ritual);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strEnchantment = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("spells.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/spells/spell[name = \"" + strEnchantment + "\"]");

            TreeNode objNode = new TreeNode();
            Spell objNewSpell = new Spell(CharacterObject);
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Initiation;

            objNewSpell.Create(objXmlArt, objNode, string.Empty, false, false, false, objSource);
            objNewSpell.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objNewSpell.InternalId == Guid.Empty.ToString())
                return;

            CharacterObject.Spells.Add(objNewSpell);

            if (blnPayWithKarma)
            {
                // Create the Expense Log Entry.
                ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(-intSpellKarmaCost, strType + " " + frmPickArt.SelectedItem, ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objEntry);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.AddSpell, objNewSpell.InternalId);
                objEntry.Undo = objUndo;

                // Adjust the character's Karma total.
                CharacterObject.Karma -= intSpellKarmaCost;
            }

            TreeNode objSpellNode = new TreeNode
            {
                Text = objNode.Text,
                Tag = objNode.Tag
            };

            string strCategory = string.Empty;
            if (objNewSpell.Category == "Rituals")
                strCategory = LanguageManager.GetString("Label_Ritual", GlobalOptions.Language);
            if (objNewSpell.Category == "Enchantments")
                strCategory = LanguageManager.GetString("Label_Enchantment", GlobalOptions.Language);
            objNode.Text = strCategory + " " + objNode.Text;
            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            int intNode = 5;
            treSpells.Nodes[intNode].Nodes.Add(objSpellNode);
            treSpells.Nodes[intNode].Expand();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void tsInitiationNotes_Click(object sender, EventArgs e)
        {
            if (treMetamagic.SelectedNode != null)
            {
                // Locate the selected Metamagic.
                Metamagic objMetamagic = CharacterObject.Metamagics.FindById(treMetamagic.SelectedNode.Tag.ToString());
                if (objMetamagic != null)
                {
                    string strOldValue = objMetamagic.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objMetamagic.Notes = frmItemNotes.Notes;
                        if (objMetamagic.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objMetamagic.Notes))
                        treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                    else if (objMetamagic.Grade < 0)
                        treMetamagic.SelectedNode.ForeColor = SystemColors.GrayText;
                    else
                        treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                    treMetamagic.SelectedNode.ToolTipText = objMetamagic.Notes.WordWrap(100);
                    return;
                }

                // Locate the selected Art.
                Art objArt = CharacterObject.Arts.FindById(treMetamagic.SelectedNode.Tag.ToString());
                if (objArt != null)
                {
                    string strOldValue = objArt.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objArt.Notes = frmItemNotes.Notes;
                        if (objArt.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objArt.Notes))
                        treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                    else
                        treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                    treMetamagic.SelectedNode.ToolTipText = objArt.Notes.WordWrap(100);
                    return;
                }

                // Locate the selected Spell.
                Spell objSpell = CharacterObject.Spells.FindById(treMetamagic.SelectedNode.Tag.ToString());
                if (objSpell != null)
                {
                    string strOldValue = objSpell.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objSpell.Notes = frmItemNotes.Notes;
                        if (objSpell.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objSpell.Notes))
                        treMetamagic.SelectedNode.ForeColor = Color.SaddleBrown;
                    else
                        treMetamagic.SelectedNode.ForeColor = SystemColors.WindowText;
                    treMetamagic.SelectedNode.ToolTipText = objSpell.Notes;

                    foreach (TreeNode nodSchool in treSpells.Nodes)
                    {
                        foreach (TreeNode nodSpell in nodSchool.Nodes)
                        {
                            if (nodSpell.Tag.ToString() == treMetamagic.SelectedNode.Tag.ToString())
                            {
                                if (!string.IsNullOrEmpty(objSpell.Notes))
                                    nodSpell.ForeColor = Color.SaddleBrown;
                                else
                                    nodSpell.ForeColor = SystemColors.WindowText;
                                nodSpell.ToolTipText = objSpell.Notes.WordWrap(100);
                            }
                        }
                }
            }
            }
        }

        private void tsMetamagicAddEnhancement_Click(object sender, EventArgs e)
        {
            bool blnPayWithKarma = false;
            string strType = string.Empty;

            if (treMetamagic.SelectedNode.Level != 0)
                return;

            int intGrade = 0;
            foreach (InitiationGrade objGrade in CharacterObject.InitiationGrades)
            {
                if (objGrade.InternalId == treMetamagic.SelectedNode.Tag.ToString())
                {
                    intGrade = objGrade.Grade;
                    break;
                }
            }

            blnPayWithKarma = true;
            if (blnPayWithKarma && CharacterObject.Karma < CharacterObjectOptions.KarmaEnhancement)
            {
                // Make sure the Karma expense would not put them over the limit.
                MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", LanguageManager.GetString("String_Enhancement", GlobalOptions.Language)).Replace("{1}", CharacterObjectOptions.KarmaEnhancement.ToString())))
                return;

            frmSelectArt frmPickArt = new frmSelectArt(CharacterObject, frmSelectArt.Mode.Enhancement);
            frmPickArt.ShowDialog(this);

            // Make sure a value was selected.
            if (frmPickArt.DialogResult == DialogResult.Cancel)
                return;

            string strEnhancement = frmPickArt.SelectedItem;

            XmlDocument objXmlDocument = XmlManager.Load("powers.xml");
            XmlNode objXmlArt = objXmlDocument.SelectSingleNode("/chummer/enhancements/enhancement[name = \"" + strEnhancement + "\"]");

            TreeNode objNode = new TreeNode();
            Enhancement objEnhancement = new Enhancement(CharacterObject);
            Improvement.ImprovementSource objSource = Improvement.ImprovementSource.Initiation;

            // Find the associated Power
            string strPower = objXmlArt["power"].InnerText;

            objEnhancement.Create(objXmlArt, objNode, objSource);
            objEnhancement.Grade = intGrade;
            objNode.ContextMenuStrip = cmsInitiationNotes;
            if (objEnhancement.InternalId == Guid.Empty.ToString())
                return;

            Power objPower = new Power(CharacterObject);
            bool blnPowerFound = false;
            foreach (Power objExistingPower in CharacterObject.Powers)
            {
                if (objExistingPower.Name == strPower)
                {
                    objPower = objExistingPower;
                    objPower.Enhancements.Add(objEnhancement);
                    blnPowerFound = true;
                    break;
                }
            }

            if (!blnPowerFound)
            {
                // Add it to the character instead
                CharacterObject.Enhancements.Add(objEnhancement);
            }

            if (blnPayWithKarma)
            {
                // Create the Expense Log Entry.
                ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create(CharacterObjectOptions.KarmaEnhancement * -1, strType + " " + frmPickArt.SelectedItem, ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objEntry);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma(KarmaExpenseType.AddSpell, objEnhancement.InternalId);
                objEntry.Undo = objUndo;

                // Adjust the character's Karma total.
                CharacterObject.Karma -= CharacterObjectOptions.KarmaEnhancement;
            }

            treMetamagic.SelectedNode.Nodes.Add(objNode);
            treMetamagic.SelectedNode.Expand();

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void panContacts_Click(object sender, EventArgs e)
        {
            panContacts.Focus();
        }

        private void panEnemies_Click(object sender, EventArgs e)
        {
            panEnemies.Focus();
        }

        private void tsAddTechniqueNotes_Click(object sender, EventArgs e)
        {
            if (treMartialArts.SelectedNode != null)
            {
                MartialArtAdvantage objTechnique = CommonFunctions.FindMartialArtAdvantage(treMartialArts.SelectedNode.Tag.ToString(), CharacterObject.MartialArts);
                if (objTechnique != null)
                {
                    string strOldValue = objTechnique.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objTechnique.Notes = frmItemNotes.Notes;
                        if (objTechnique.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objTechnique.Notes))
                        treMartialArts.SelectedNode.ForeColor = Color.SaddleBrown;
                    else
                        treMartialArts.SelectedNode.ForeColor = SystemColors.WindowText;
                    treMartialArts.SelectedNode.ToolTipText = objTechnique.Notes.WordWrap(100);
                }
            }
        }

        private void cboDrain_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnLoading || string.IsNullOrEmpty(cboDrain.SelectedValue?.ToString()))
                return;

            CharacterObject.TraditionDrain = cboDrain.SelectedValue.ToString();

            CalculateTraditionDrain(CharacterObject.TraditionDrain, Improvement.ImprovementType.DrainResistance, lblDrainAttributes, lblDrainAttributesValue, tipTooltip);

            IsCharacterUpdateRequested = true;

            IsDirty = true;
        }

        private void txtTraditionName_TextChanged(object sender, EventArgs e)
        {
            CharacterObject.TraditionName = txtTraditionName.Text;
            IsDirty = true;
        }

        private void cboSpiritCombat_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritCombat.SelectedValue == null)
                return;
            if (_blnLoading || string.IsNullOrEmpty(cboSpiritCombat.SelectedValue.ToString()))
                return;

            CharacterObject.SpiritCombat = cboSpiritCombat.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void cboSpiritDetection_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritDetection.SelectedValue == null)
                return;
            if (_blnLoading || string.IsNullOrEmpty(cboSpiritDetection.SelectedValue.ToString()))
                return;

            CharacterObject.SpiritDetection = cboSpiritDetection.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void cboSpiritHealth_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritHealth.SelectedValue == null)
                return;
            if (_blnLoading || string.IsNullOrEmpty(cboSpiritHealth.SelectedValue.ToString()))
                return;

            CharacterObject.SpiritHealth = cboSpiritHealth.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void cboSpiritIllusion_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritIllusion.SelectedValue == null)
                return;
            if (_blnLoading || string.IsNullOrEmpty(cboSpiritIllusion.SelectedValue.ToString()))
                return;

            CharacterObject.SpiritIllusion = cboSpiritIllusion.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void cboSpiritManipulation_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboSpiritManipulation.SelectedValue == null)
                return;
            if (_blnLoading || string.IsNullOrEmpty(cboSpiritManipulation.SelectedValue.ToString()))
                return;

            CharacterObject.SpiritManipulation = cboSpiritManipulation.SelectedValue.ToString();
            foreach (SpiritControl objSpiritControl in panSpirits.Controls)
                objSpiritControl.RebuildSpiritList(cboTradition.SelectedValue.ToString());

            IsCharacterUpdateRequested = true;
            IsDirty = true;
        }

        private void cboGearOverclocker_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnLoading || !CharacterObject.Overclocker)
                return;
            Gear objCommlink = CharacterObject.Gear.DeepFindById(treGear.SelectedNode.Tag.ToString());
            objCommlink.Overclocked = cboGearOverclocker.SelectedValue.ToString();
            objCommlink.RefreshMatrixAttributeCBOs(cboGearAttack, cboGearSleaze, cboGearDataProcessing, cboGearFirewall);
        }

        private void cboCyberwareGearOverclocker_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnLoading || !CharacterObject.Overclocker)
                return;
            List<Gear> lstGearToSearch = new List<Gear>(CharacterObject.Gear);
            foreach (Cyberware objCyberware in CharacterObject.Cyberware.DeepWhere(x => x.Children, x => x.Gear.Count > 0))
            {
                lstGearToSearch.AddRange(objCyberware.Gear);
            }
            Gear objCommlink = lstGearToSearch.DeepFindById(treCyberware.SelectedNode.Tag.ToString());
            objCommlink.Overclocked = cboCyberwareGearOverclocker.SelectedValue.ToString();
            objCommlink.RefreshMatrixAttributeCBOs(cboCyberwareGearAttack, cboCyberwareGearSleaze, cboCyberwareGearDataProcessing, cboCyberwareGearFirewall);
        }

        private void tssLimitModifierEdit_Click(object sender, EventArgs e)
        {
            if (treLimit.SelectedNode.Level > 0)
            {
                UpdateLimitModifier(treLimit, cmsLimitModifier);
                IsDirty = true;
            }
        }

        private void chkShowFreeKarma_CheckedChanged(object sender, EventArgs e)
        {
            PopulateExpenseList();
        }

        private void chkShowFreeNuyen_CheckedChanged(object sender, EventArgs e)
        {
            PopulateExpenseList();
        }

        private void cmdAddAIProgram_Click(object sender, EventArgs e)
        {
            int intNewAIProgramCost = CharacterObject.AIProgramKarmaCost;
            int intNewAIAdvancedProgramCost = CharacterObject.AIAdvancedProgramKarmaCost;
            XmlDocument objXmlDocument = XmlManager.Load("programs.xml");

            bool blnAddAgain = false;
            do
            {
                // Make sure the character has enough Karma before letting them select a Spell.
                if (CharacterObject.Karma < intNewAIProgramCost && CharacterObject.Karma < intNewAIAdvancedProgramCost)
                {
                    MessageBox.Show(LanguageManager.GetString("Message_NotEnoughKarma", GlobalOptions.Language), LanguageManager.GetString("MessageTitle_NotEnoughKarma", GlobalOptions.Language), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    break;
                }
                // Let the user select a Program.
                frmSelectAIProgram frmPickProgram = new frmSelectAIProgram(CharacterObject, CharacterObject.Karma >= intNewAIAdvancedProgramCost);
                frmPickProgram.ShowDialog(this);

                // Make sure the dialogue window was not canceled.
                if (frmPickProgram.DialogResult == DialogResult.Cancel)
                {
                    frmPickProgram.Dispose();
                    break;
                }
                blnAddAgain = frmPickProgram.AddAgain;

                XmlNode objXmlProgram = objXmlDocument.SelectSingleNode("/chummer/programs/program[name = \"" + frmPickProgram.SelectedProgram + "\"]");
                bool boolIsAdvancedProgram = objXmlProgram["category"].InnerText == "Advanced Programs";

                // Check for SelectText.
                string strExtra = string.Empty;
                if (objXmlProgram["bonus"]?["selecttext"] != null)
                {
                    frmSelectText frmPickText = new frmSelectText
                    {
                        Description = LanguageManager.GetString("String_Improvement_SelectText", GlobalOptions.Language).Replace("{0}", frmPickProgram.SelectedProgram)
                    };
                    frmPickText.ShowDialog(this);
                    strExtra = frmPickText.SelectedValue;
                }


                TreeNode objNode = new TreeNode();
                AIProgram objProgram = new AIProgram(CharacterObject);
                objProgram.Create(objXmlProgram, objNode, boolIsAdvancedProgram, strExtra);
                if (objProgram.InternalId == Guid.Empty.ToString())
                {
                    frmPickProgram.Dispose();
                    continue;
                }

                if (!CharacterObject.ConfirmKarmaExpense(LanguageManager.GetString("Message_ConfirmKarmaExpenseSpend", GlobalOptions.Language).Replace("{0}", objProgram.DisplayName).Replace("{1}", (boolIsAdvancedProgram ? intNewAIAdvancedProgramCost : intNewAIProgramCost).ToString())))
                {
                    frmPickProgram.Dispose();
                    continue;
                }

                CharacterObject.AIPrograms.Add(objProgram);
                objNode.Text = objProgram.DisplayName;
                objNode.Tag = objProgram.InternalId;
                if (!string.IsNullOrEmpty(objProgram.Notes))
                    objNode.ForeColor = Color.SaddleBrown;
                else if (!objProgram.CanDelete)
                    objNode.ForeColor = SystemColors.GrayText;
                else
                    objNode.ForeColor = SystemColors.WindowText;
                objNode.ToolTipText = objProgram.Notes.WordWrap(100);
                objNode.ContextMenuStrip = cmsAdvancedProgram;
                treAIPrograms.Nodes[0].Nodes.Add(objNode);
                treAIPrograms.Nodes[0].Expand();

                // Create the Expense Log Entry.
                ExpenseLogEntry objEntry = new ExpenseLogEntry(CharacterObject);
                objEntry.Create((boolIsAdvancedProgram ? intNewAIAdvancedProgramCost : intNewAIProgramCost) * -1, LanguageManager.GetString("String_ExpenseLearnProgram", GlobalOptions.Language) + " " + objProgram.Name, ExpenseType.Karma, DateTime.Now);
                CharacterObject.ExpenseEntries.Add(objEntry);
                CharacterObject.Karma -= (boolIsAdvancedProgram ? intNewAIAdvancedProgramCost : intNewAIProgramCost);

                ExpenseUndo objUndo = new ExpenseUndo();
                objUndo.CreateKarma((boolIsAdvancedProgram ? KarmaExpenseType.AddAIAdvancedProgram : KarmaExpenseType.AddAIProgram), objProgram.InternalId);
                objEntry.Undo = objUndo;

                treAIPrograms.SortCustom();
                IsCharacterUpdateRequested = true;

                IsDirty = true;

                frmPickProgram.Dispose();
            }
            while (blnAddAgain);
        }

        private void cmdDeleteAIProgram_Click(object sender, EventArgs e)
        {
            // Delete the selected AI Program.
            if (treAIPrograms.SelectedNode != null)
            {
                if (treAIPrograms.SelectedNode.Level == 1)
                {
                    // Locate the Program that is selected in the tree.
                    AIProgram objProgram = CharacterObject.AIPrograms.FindById(treAIPrograms.SelectedNode.Tag.ToString());

                    if (objProgram != null && objProgram.CanDelete)
                    {
                        if (!CharacterObject.ConfirmDelete(LanguageManager.GetString("Message_DeleteAIProgram", GlobalOptions.Language)))
                            return;

                        ImprovementManager.RemoveImprovements(CharacterObject, Improvement.ImprovementSource.AIProgram, objProgram.InternalId);

                        CharacterObject.AIPrograms.Remove(objProgram);
                        treAIPrograms.SelectedNode.Remove();
                        /*
                        int intComplexForms = 0;
                        foreach (ComplexForm tp in _objCharacter.ComplexForms)
                        {
                            intComplexForms++;
                        }
                        lblPBuildComplexForms.Text = String.Format("{0} " + LanguageManager.GetString("String_Of") + " {1}", (_objCharacter.CFPLimit - intComplexForms).ToString(), _objCharacter.CFPLimit.ToString());
                        */

                        IsCharacterUpdateRequested = true;

                        IsDirty = true;
                    }
                }
            }
        }

        private void treAIPrograms_AfterSelect(object sender, TreeViewEventArgs e)
        {
            if (treAIPrograms.SelectedNode != null)
            {
                if (treAIPrograms.SelectedNode.Level == 1)
                {
                    // Locate the Program that is selected in the tree.
                    AIProgram objProgram = CharacterObject.AIPrograms.FindById(treAIPrograms.SelectedNode.Tag.ToString());

                    if (objProgram != null)
                    {
                        lblAIProgramsRequires.Text = objProgram.DisplayRequiresProgram(GlobalOptions.Language);

                        string strBook = CommonFunctions.LanguageBookShort(objProgram.Source, GlobalOptions.Language);
                        string strPage = objProgram.Page(GlobalOptions.Language);
                        lblAIProgramsSource.Text = strBook + " " + strPage;
                        tipTooltip.SetToolTip(lblAIProgramsSource, CommonFunctions.LanguageBookLong(objProgram.Source, GlobalOptions.Language) + " " + LanguageManager.GetString("String_Page", GlobalOptions.Language) + " " + strPage);
                    }
                }
            }
        }

        private void treAIPrograms_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                cmdDeleteAIProgram_Click(sender, e);
            }
        }

        private void tsAIProgramNotes_Click(object sender, EventArgs e)
        {
            if (treAIPrograms.SelectedNode != null)
            {
                AIProgram objAIProgram = CharacterObject.AIPrograms.FindById(treAIPrograms.SelectedNode.Tag.ToString());
                if (objAIProgram != null)
                {
                    string strOldValue = objAIProgram.Notes;
                    frmNotes frmItemNotes = new frmNotes
                    {
                        Notes = strOldValue
                    };
                    frmItemNotes.ShowDialog(this);

                    if (frmItemNotes.DialogResult == DialogResult.OK)
                    {
                        objAIProgram.Notes = frmItemNotes.Notes;
                        if (objAIProgram.Notes != strOldValue)
                        {
                            IsDirty = true;
                        }
                    }

                    if (!string.IsNullOrEmpty(objAIProgram.Notes))
                        treAIPrograms.SelectedNode.ForeColor = Color.SaddleBrown;
                    else if (!objAIProgram.CanDelete)
                        treAIPrograms.SelectedNode.ForeColor = SystemColors.GrayText;
                    else
                        treAIPrograms.SelectedNode.ForeColor = SystemColors.WindowText;
                    treAIPrograms.SelectedNode.ToolTipText = objAIProgram.Notes.WordWrap(100);
                }
            }
        }

        private void cboPrimaryArm_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_blnLoading || CharacterObject.Ambidextrous)
                return;
            CharacterObject.PrimaryArm = cboPrimaryArm.SelectedValue.ToString();
        }

        private void BuildAttributePanel()
        {
			pnlAttributes.Controls.Clear();
            lstPrimaryAttributes.Clear();
            lstSpecialAttributes.Clear();
            lstPrimaryAttributes.Add(CharacterObject.BOD);
            lstPrimaryAttributes.Add(CharacterObject.AGI);
            lstPrimaryAttributes.Add(CharacterObject.REA);
            lstPrimaryAttributes.Add(CharacterObject.STR);
            lstPrimaryAttributes.Add(CharacterObject.CHA);
            lstPrimaryAttributes.Add(CharacterObject.INT);
            lstPrimaryAttributes.Add(CharacterObject.LOG);
            lstPrimaryAttributes.Add(CharacterObject.WIL);

            lstSpecialAttributes.Add(CharacterObject.EDG);
            if (CharacterObject.MAGEnabled)
            {
                lstSpecialAttributes.Add(CharacterObject.MAG);
                if (CharacterObjectOptions.MysAdeptSecondMAGAttribute && CharacterObject.IsMysticAdept)
                    lstSpecialAttributes.Add(CharacterObject.MAGAdept);
            }
            if (CharacterObject.RESEnabled)
            {
                lstSpecialAttributes.Add(CharacterObject.RES);
            }
            if (CharacterObject.Metatype == "A.I.")
            {
                lstSpecialAttributes.Add(CharacterObject.DEP);
            }
        }

        private void picMugshot_SizeChanged(object sender, EventArgs e)
        {
            if (picMugshot.Image != null && picMugshot.Height >= picMugshot.Image.Height && picMugshot.Width >= picMugshot.Image.Width)
                picMugshot.SizeMode = PictureBoxSizeMode.CenterImage;
            else
                picMugshot.SizeMode = PictureBoxSizeMode.Zoom;
        }

        private void cmdCyberwareChangeMount_Click(object sender, EventArgs e)
        {
            if (treCyberware.SelectedNode == null)
                return;
            Cyberware objModularCyberware = CharacterObject.Cyberware.DeepFindById(treCyberware.SelectedNode.Tag.ToString());
            if (objModularCyberware == null)
                return;
            frmSelectItem frmPickMount = new frmSelectItem
            {
                GeneralItems = CharacterObject.ConstructModularCyberlimbList(objModularCyberware),
                Description = LanguageManager.GetString("MessageTitle_SelectCyberware", GlobalOptions.Language)
            };
            frmPickMount.ShowDialog();

            // Make sure the dialogue window was not canceled.
            if (frmPickMount.DialogResult == DialogResult.Cancel)
            {
                return;
            }

            if (objModularCyberware.Parent != null)
                objModularCyberware.ChangeModularEquip(false);
            string strSelectedParentID = frmPickMount.SelectedItem;
            if (strSelectedParentID == "None")
            {
                CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, CharacterObject.Cyberware, treCyberware.Nodes[2], treCyberware);
                objModularCyberware.Parent = null;
            }
            else
            {
                Cyberware objNewParent = CharacterObject.Cyberware.DeepFindById(strSelectedParentID);
                TreeNode objNewNode = treCyberware.FindNode(strSelectedParentID);
                if (objNewParent != null && objNewNode != null)
                {
                    CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, objNewParent.Children, objNewNode, treCyberware);
                    objModularCyberware.Parent = objNewParent;
                    objModularCyberware.ChangeModularEquip(true);
                }
                else
                {
                    VehicleMod objNewVehicleModParent = CommonFunctions.FindVehicleMod(strSelectedParentID, CharacterObject.Vehicles);
                    if (objNewVehicleModParent == null)
                        objNewParent = CommonFunctions.FindVehicleCyberware(strSelectedParentID, CharacterObject.Vehicles, out objNewVehicleModParent);
                    else
                        objNewParent = null;
                    objNewNode = treVehicles.FindNode(strSelectedParentID);
                    if ((objNewVehicleModParent != null || objNewParent != null) && objNewNode != null)
                    {
                        CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, objNewParent == null ? objNewVehicleModParent.Cyberware : objNewParent.Children, objNewNode, treCyberware);
                        objModularCyberware.Parent = objNewParent;
                        RefreshSelectedVehicle();
                    }
                    else
                    {
                        CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, CharacterObject.Cyberware, treCyberware.Nodes[2], treCyberware);
                        objModularCyberware.Parent = null;
                    }
                }
            }

            IsCharacterUpdateRequested = true;
            RefreshSelectedCyberware();

            IsDirty = true;
        }

        private void cmdVehicleCyberwareChangeMount_Click(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null)
                return;
            Cyberware objModularCyberware = CommonFunctions.FindVehicleCyberware(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);
            if (objModularCyberware == null)
                return;
            frmSelectItem frmPickMount = new frmSelectItem
            {
                GeneralItems = CharacterObject.ConstructModularCyberlimbList(objModularCyberware),
                Description = LanguageManager.GetString("MessageTitle_SelectCyberware", GlobalOptions.Language)
            };
            frmPickMount.ShowDialog();

            // Make sure the dialogue window was not canceled.
            if (frmPickMount.DialogResult == DialogResult.Cancel)
            {
                return;
            }

            if (objModularCyberware.Parent != null)
                objModularCyberware.ChangeModularEquip(false);
            string strSelectedParentID = frmPickMount.SelectedItem;
            if (strSelectedParentID == "None")
            {
                CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, CharacterObject.Cyberware, treCyberware.Nodes[2], treVehicles);
                objModularCyberware.Parent = null;
                RefreshSelectedCyberware();
            }
            else
            {
                Cyberware objNewParent = CharacterObject.Cyberware.DeepFindById(strSelectedParentID);
                TreeNode objNewNode = treCyberware.FindNode(strSelectedParentID);
                if (objNewParent != null && objNewNode != null)
                {
                    CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, objNewParent.Children, objNewNode, treVehicles);
                    objModularCyberware.Parent = objNewParent;
                    objModularCyberware.ChangeModularEquip(true);
                    RefreshSelectedCyberware();
                }
                else
                {
                    VehicleMod objNewVehicleModParent = CommonFunctions.FindVehicleMod(strSelectedParentID, CharacterObject.Vehicles);
                    if (objNewVehicleModParent == null)
                        objNewParent = CommonFunctions.FindVehicleCyberware(strSelectedParentID, CharacterObject.Vehicles, out objNewVehicleModParent);
                    else
                        objNewParent = null;
                    objNewNode = treVehicles.FindNode(strSelectedParentID);
                    if ((objNewVehicleModParent != null || objNewParent != null) && objNewNode != null)
                    {
                        CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, objNewParent == null ? objNewVehicleModParent.Cyberware : objNewParent.Children, objNewNode, treVehicles);
                        objModularCyberware.Parent = objNewParent;
                    }
                    else
                    {
                        CommonFunctions.MoveCyberwareNode(CharacterObject, int.MaxValue, CharacterObject.Cyberware, treCyberware.Nodes[2], treVehicles);
                        objModularCyberware.Parent = null;
                        RefreshSelectedCyberware();
                    }
                }
            }

            IsCharacterUpdateRequested = true;
            RefreshSelectedVehicle();

            IsDirty = true;
        }
        private void cboAttributeCategory_SelectedIndexChanged(object sender, EventArgs e)
        {
            CharacterObject.AttributeSection.AttributeCategory = AttributeSection.ConvertAttributeCategory(cboAttributeCategory.SelectedValue.ToString());
            CharacterObject.AttributeSection.ForceAttributePropertyChangedNotificationAll(nameof(CharacterAttrib.TotalAugmentedMaximum));
            CharacterObject.AttributeSection.ResetBindings();

            MakeDirtyWithCharacterUpdate();
        }

        private void cmdContactsExpansionToggle_Click(object sender, EventArgs e)
        {
            if (panContacts.Controls.Count > 0)
            {
                bool toggle = ((ContactControl)panContacts.Controls[0]).Expanded;

                foreach (ContactControl c in panContacts.Controls)
                {
                    c.Expanded = !toggle;
                }
            }
        }

        private void cmdSwapContactOrder_Click(object sender, EventArgs e)
        {
            panContacts.FlowDirection = panContacts.FlowDirection == FlowDirection.LeftToRight
                ? FlowDirection.TopDown
                : FlowDirection.LeftToRight;
        }

        private void tsGearLocationAddGear_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treGear.SelectedNode;
            // Select the root Gear node then open the Select Gear window.
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickGear(objSelectedNode);
                if (blnAddAgain)
                    treGear.SelectedNode = objSelectedNode;
            }
            while (blnAddAgain);
            CharacterObject.PopulateFocusList(treFoci);
        }

        private void tsVehicleLocationAddVehicle_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treVehicles.SelectedNode;
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = AddVehicle(objSelectedNode);
            }
            while (blnAddAgain);
        }

        private void tsWeaponLocationAddWeapon_Click(object sender, EventArgs e)
        {
            TreeNode objSelectedNode = treWeapons.SelectedNode;
            bool blnAddAgain = false;
            do
            {
                blnAddAgain = PickWeapon(objSelectedNode);
            }
            while (blnAddAgain);
        }

        private void tsVehicleLocationAddWeapon_Click(object sender, EventArgs e)
        {
            //TODO: Where should weapons attached to locations of vehicles go?
            //PickWeapon(treVehicles.SelectedNode);
        }

        private void cboVehicleWeaponFiringMode_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (treVehicles.SelectedNode == null || treVehicles.SelectedNode.Level < 2)
            {
                return;
            }

            if (_blnSkipRefresh)
                return;

            Weapon objWeapon = CommonFunctions.FindVehicleWeapon(treVehicles.SelectedNode.Tag.ToString(), CharacterObject.Vehicles);

            objWeapon.FireMode = Weapon.ConvertToFiringMode(cboVehicleWeaponFiringMode.SelectedValue.ToString());
            IsCharacterUpdateRequested = true;
            RefreshSelectedVehicle();

            IsDirty = true;
        }
    }
}
