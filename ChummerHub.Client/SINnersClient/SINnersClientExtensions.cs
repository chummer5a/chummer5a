// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SINners
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for SINnersClient.
    /// </summary>
    public static partial class SINnersClientExtensions
    {
            /// <summary>
            /// Returns the Chummer-Save-File
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiV1ChummerHelperByIdGet(this ISINnersClient operations, Guid id)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1ChummerHelperByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the Chummer-Save-File
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1ChummerHelperByIdGetAsync(this ISINnersClient operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1ChummerHelperByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<SINner> ApiV1SINnerGet(this ISINnersClient operations)
            {
                return Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SINner>> ApiV1SINnerGetAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1SINnerGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Store the MetaData for a Chummerfile (to get a Id).
            /// This Id can be used to store the actual file with PUT afterwards.
            /// Alternativly, the DownloadUrl can be set directly from the Client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sinnerData'>
            /// </param>
            public static void ApiV1SINnerPost(this ISINnersClient operations, SINner sinnerData = default(SINner))
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerPostAsync(sinnerData), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store the MetaData for a Chummerfile (to get a Id).
            /// This Id can be used to store the actual file with PUT afterwards.
            /// Alternativly, the DownloadUrl can be set directly from the Client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sinnerData'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerPostAsync(this ISINnersClient operations, SINner sinnerData = default(SINner), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerPostWithHttpMessagesAsync(sinnerData, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiV1SINnerByIdGet(this ISINnersClient operations, Guid id)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerByIdGetAsync(this ISINnersClient operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// Upload File
            /// </param>
            public static void ApiV1SINnerByIdPut(this ISINnersClient operations, Guid id, System.IO.Stream uploadedFile)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerByIdPutAsync(id, uploadedFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// Upload File
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerByIdPutAsync(this ISINnersClient operations, Guid id, System.IO.Stream uploadedFile, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerByIdPutWithHttpMessagesAsync(id, uploadedFile, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiV1SINnerByIdDelete(this ISINnersClient operations, Guid id)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerByIdDeleteAsync(this ISINnersClient operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTag'>
            /// </param>
            public static IList<SINner> ApiV1SINSearchGet(this ISINnersClient operations, SearchTag searchTag = default(SearchTag))
            {
                return Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINSearchGetAsync(searchTag), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTag'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SINner>> ApiV1SINSearchGetAsync(this ISINnersClient operations, SearchTag searchTag = default(SearchTag), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1SINSearchGetWithHttpMessagesAsync(searchTag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
