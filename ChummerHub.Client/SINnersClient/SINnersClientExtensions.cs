// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace SINners
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for SINnersClient.
    /// </summary>
    public static partial class SINnersClientExtensions
    {
            /// <summary>
            /// Returns the Chummer-Save-File
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sinnerid'>
            /// </param>
            public static void ApiV1ChummerHelperGetBySinneridGet(this ISINnersClient operations, Guid sinnerid)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1ChummerHelperGetBySinneridGetAsync(sinnerid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the Chummer-Save-File
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sinnerid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1ChummerHelperGetBySinneridGetAsync(this ISINnersClient operations, Guid sinnerid, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1ChummerHelperGetBySinneridGetWithHttpMessagesAsync(sinnerid, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<SINner> ApiV1SINnerGetGet(this ISINnersClient operations)
            {
                return Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerGetGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SINner>> ApiV1SINnerGetGetAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1SINnerGetGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiV1SINnerGetByIdGet(this ISINnersClient operations, Guid id)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerGetByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerGetByIdGetAsync(this ISINnersClient operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerGetByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// </param>
            public static void ApiV1SINnerPutByIdPut(this ISINnersClient operations, Guid id, object uploadedFile = default(object))
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerPutByIdPutAsync(id, uploadedFile), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerPutByIdPutAsync(this ISINnersClient operations, Guid id, object uploadedFile = default(object), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerPutByIdPutWithHttpMessagesAsync(id, uploadedFile, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Store the MetaData for chummerfiles (to get a Id).
            /// This Id can be used to store the actual file with PUT afterwards.
            /// Alternativly, the DownloadUrl can be set directly from the Client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadInfo'>
            /// </param>
            public static void ApiV1SINnerPostPost(this ISINnersClient operations, UploadInfoObject uploadInfo = default(UploadInfoObject))
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerPostPostAsync(uploadInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store the MetaData for chummerfiles (to get a Id).
            /// This Id can be used to store the actual file with PUT afterwards.
            /// Alternativly, the DownloadUrl can be set directly from the Client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadInfo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerPostPostAsync(this ISINnersClient operations, UploadInfoObject uploadInfo = default(UploadInfoObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerPostPostWithHttpMessagesAsync(uploadInfo, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiV1SINnerDeleteByIdDelete(this ISINnersClient operations, Guid id)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINnerDeleteByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1SINnerDeleteByIdDeleteAsync(this ISINnersClient operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1SINnerDeleteByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTag'>
            /// </param>
            public static IList<SINner> ApiV1SINSearchSearchGet(this ISINnersClient operations, SearchTag searchTag = default(SearchTag))
            {
                return Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1SINSearchSearchGetAsync(searchTag), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTag'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SINner>> ApiV1SINSearchSearchGetAsync(this ISINnersClient operations, SearchTag searchTag = default(SearchTag), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1SINSearchSearchGetWithHttpMessagesAsync(searchTag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UploadClient> ApiV1UploadClientGetGet(this ISINnersClient operations)
            {
                return Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1UploadClientGetGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UploadClient>> ApiV1UploadClientGetGetAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1UploadClientGetGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiV1UploadClientGetByIdGet(this ISINnersClient operations, Guid id)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1UploadClientGetByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1UploadClientGetByIdGetAsync(this ISINnersClient operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1UploadClientGetByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiV1UploadClientSINnersByIdGet(this ISINnersClient operations, Guid id)
            {
                Task.Factory.StartNew(s => ((ISINnersClient)s).ApiV1UploadClientSINnersByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiV1UploadClientSINnersByIdGetAsync(this ISINnersClient operations, Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiV1UploadClientSINnersByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
